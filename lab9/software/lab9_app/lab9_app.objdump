
lab9_app.elf:     file format elf32-littlenios2
lab9_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x18000230

Program Header:
    LOAD off    0x00001000 vaddr 0x18000000 paddr 0x18000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x18000020 paddr 0x18000020 align 2**12
         filesz 0x000166c4 memsz 0x000166c4 flags r-x
    LOAD off    0x000176e4 vaddr 0x180166e4 paddr 0x180184b8 align 2**12
         filesz 0x00001dd4 memsz 0x00001dd4 flags rw-
    LOAD off    0x0001a28c vaddr 0x1801a28c paddr 0x1801a28c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  18000000  18000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  18000020  18000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015958  18000230  18000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b5c  18015b88  18015b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dd4  180166e4  180184b8  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  1801a28c  1801a28c  0001a28c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000194b8  2**0
                  CONTENTS
  7 .sdram        00000000  1801a3f0  1801a3f0  000194b8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000194b8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001010  00000000  00000000  000194e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000275de  00000000  00000000  0001a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009e5f  00000000  00000000  00041ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d443  00000000  00000000  0004b92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000264c  00000000  00000000  00058d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003bef  00000000  00000000  0005b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cae6  00000000  00000000  0005efab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007ba94  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ae0  00000000  00000000  0007bad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00080c46  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00080c49  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00080c55  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00080c56  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00080c57  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00080c5b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00080c5f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00080c63  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00080c6e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00080c79  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00080c84  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  00080c8c  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1a  00000000  00000000  00080cbf  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007aa83  00000000  00000000  00085bd9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
18000000 l    d  .entry	00000000 .entry
18000020 l    d  .exceptions	00000000 .exceptions
18000230 l    d  .text	00000000 .text
18015b88 l    d  .rodata	00000000 .rodata
180166e4 l    d  .rwdata	00000000 .rwdata
1801a28c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1801a3f0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_app_bsp//obj/HAL/src/crt0.o
18000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1801a28c l     O .bss	00000002 ctl_reg.3589
1801a28e l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 palette_test.c
18018470 l     O .rwdata	00000004 vga_ctrl
180166e4 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
18018474 l     O .rwdata	00000004 vga_ctrl
18016854 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
180163ea l     O .rodata	00000010 zeroes.4389
180163fa l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
1801640a l     O .rodata	00000010 zeroes.4404
18007458 l     F .text	000000bc __sbprintf
1801641a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
18007668 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
180091c0 l     F .text	00000008 __fp_unlock
180091d4 l     F .text	0000019c __sinit.part.1
18009370 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
180169c4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
18016e08 l     O .rwdata	00000020 lc_ctype_charset
18016de8 l     O .rwdata	00000020 lc_message_charset
18016e28 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1801644c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
18016570 l     O .rodata	00000010 zeroes.4333
18016580 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
1800ddb4 l     F .text	000000fc __sprint_r.part.0
18016590 l     O .rodata	00000010 zeroes.4349
1800f3f0 l     F .text	000000bc __sbprintf
180165a0 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
18013368 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1801347c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
180134a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1801359c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
18013684 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
18013770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1801394c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
180184a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
18013bf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
18013d2c l     F .text	00000034 alt_dev_reg
18017410 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
18014008 l     F .text	0000020c altera_avalon_jtag_uart_irq
18014214 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
18014af0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
18014f50 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
180150b0 l     F .text	0000003c alt_get_errno
180150ec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1801a2c4 g     O .bss	00000004 alt_instruction_exception_handler
1800be88 g     F .text	00000074 _mprec_log10
1800bf74 g     F .text	0000008c __any_on
1800f9a4 g     F .text	00000054 _isatty_r
18016458 g     O .rodata	00000028 __mprec_tinytens
18013888 g     F .text	0000007c alt_main
18002bf8 g     F .text	000000c0 _puts_r
1801a2f0 g     O .bss	00000100 alt_irq
1800f9f8 g     F .text	00000060 _lseek_r
180184b8 g       *ABS*	00000000 __flash_rwdata_start
18011d40 g     F .text	00000088 .hidden __eqdf2
1801a3f0 g       *ABS*	00000000 __alt_heap_start
18002bbc g     F .text	0000003c printf
1800fc10 g     F .text	0000009c _wcrtomb_r
1800c704 g     F .text	0000005c __sseek
18009520 g     F .text	00000010 __sinit
1800fab8 g     F .text	00000140 __swbuf_r
18009ff4 g     F .text	0000007c _setlocale_r
18009378 g     F .text	00000078 __sfmoreglue
18013928 g     F .text	00000024 __malloc_unlock
180015bc g     F .text	00000278 textVGAColorScreenSaver
180028b0 g     F .text	00000080 UsbGetRetryCnt
1800acc4 g     F .text	0000015c memmove
1800026c g     F .text	00000088 IO_init
18009508 g     F .text	00000018 _cleanup
1800af48 g     F .text	000000a8 _Balloc
18011dc8 g     F .text	000000dc .hidden __gtdf2
180154d8 g     F .text	00000024 altera_nios2_gen2_irq_init
18000000 g     F .entry	0000000c __reset
18000020 g       *ABS*	00000000 __flash_exceptions_start
1800f948 g     F .text	0000005c _fstat_r
1801a2a8 g     O .bss	00000004 errno
1800c680 g     F .text	00000008 __seofread
1800ca14 g     F .text	000013a0 ___svfiprintf_internal_r
1801a2b0 g     O .bss	00000004 alt_argv
18020470 g       *ABS*	00000000 _gp
18013bc0 g     F .text	00000030 usleep
180012d0 g     F .text	000000a0 textVGAColorClr
18017290 g     O .rwdata	00000180 alt_fd_list
180154fc g     F .text	00000090 alt_find_dev
1800ab7c g     F .text	00000148 memcpy
180091c8 g     F .text	0000000c _cleanup_r
18013180 g     F .text	000000dc .hidden __floatsidf
18015034 g     F .text	0000007c alt_io_redirect
18011ea4 g     F .text	000000f4 .hidden __ltdf2
18015b88 g       *ABS*	00000000 __DTOR_END__
18002cb8 g     F .text	00000014 puts
18015758 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1800c564 g     F .text	00000074 __fpclassifyd
1800bde4 g     F .text	000000a4 __ratio
1800f3d4 g     F .text	0000001c __vfiprintf_internal
1801440c g     F .text	0000021c altera_avalon_jtag_uart_read
18002b8c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
18002aa8 g     F .text	00000064 .hidden __udivsi3
180135d8 g     F .text	000000ac isatty
180164a8 g     O .rodata	000000c8 __mprec_tens
1800a070 g     F .text	0000000c __locale_charset
1801a2a4 g     O .bss	00000004 __malloc_top_pad
18001f3c g     F .text	00000268 UsbGetConfigDesc2
18018480 g     O .rwdata	00000004 __mb_cur_max
1800a0a0 g     F .text	0000000c _localeconv_r
1800b37c g     F .text	0000003c __i2b
180099a4 g     F .text	000004c8 __sfvwrite_r
1800c5d8 g     F .text	00000054 _sbrk_r
1800fa58 g     F .text	00000060 _read_r
180184a0 g     O .rwdata	00000004 alt_max_fd
1800f63c g     F .text	000000f0 _fclose_r
18009190 g     F .text	00000030 fflush
1801a2a0 g     O .bss	00000004 __malloc_max_sbrked_mem
18010ac4 g     F .text	000008ac .hidden __adddf3
1800bb8c g     F .text	0000010c __b2d
18010500 g     F .text	000005c4 .hidden __umoddi3
180137ac g     F .text	000000dc lseek
18018478 g     O .rwdata	00000004 _global_impure_ptr
1800c000 g     F .text	00000564 _realloc_r
1801a3f0 g       *ABS*	00000000 __bss_end
18014e60 g     F .text	000000f0 alt_iic_isr_register
180153d0 g     F .text	00000108 alt_tick
1800ff04 g     F .text	000005fc .hidden __udivdi3
1800f8a4 g     F .text	00000024 _fputwc_r
18016480 g     O .rodata	00000028 __mprec_bigtens
1800b160 g     F .text	00000104 __s2b
1801325c g     F .text	000000a8 .hidden __floatunsidf
1800b8cc g     F .text	00000060 __mcmp
1800198c g     F .text	00000100 UsbSetAddress
18009540 g     F .text	00000018 __fp_lock_all
18014e14 g     F .text	0000004c alt_ic_irq_enabled
18015334 g     F .text	0000009c alt_alarm_stop
1801a2b8 g     O .bss	00000004 alt_irq_active
180000fc g     F .exceptions	000000d4 alt_irq_handler
18017268 g     O .rwdata	00000028 alt_dev_null
18014ad0 g     F .text	00000020 alt_dcache_flush_all
1800b264 g     F .text	00000068 __hi0bits
18000364 g     F .text	00000068 IO_read
18013100 g     F .text	00000080 .hidden __fixdfsi
180184b8 g       *ABS*	00000000 __ram_rwdata_end
18018498 g     O .rwdata	00000008 alt_dev_list
18013c2c g     F .text	00000100 write
180166e4 g       *ABS*	00000000 __ram_rodata_end
180134e4 g     F .text	000000b8 fstat
18011ea4 g     F .text	000000f4 .hidden __ledf2
18002930 g     F .text	00000080 UsbPrintMem
1800b644 g     F .text	00000140 __pow5mult
1800dec8 g     F .text	0000150c ___vfiprintf_internal_r
1801a298 g     O .bss	00000004 __nlocale_changed
18002b0c g     F .text	00000058 .hidden __umodsi3
1801a3f0 g       *ABS*	00000000 end
18013f48 g     F .text	000000c0 altera_avalon_jtag_uart_init
180001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
18015b88 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
18013304 g     F .text	00000064 .hidden __clzsi2
18014628 g     F .text	00000224 altera_avalon_jtag_uart_write
18009530 g     F .text	00000004 __sfp_lock_acquire
1800aa98 g     F .text	000000e4 memchr
18005160 g     F .text	000022dc ___vfprintf_internal_r
18002d48 g     F .text	00000058 _sprintf_r
180022a4 g     F .text	00000100 UsbClassRequest
18009694 g     F .text	00000310 _free_r
1800a07c g     F .text	00000010 __locale_mb_cur_max
180159d4 g     F .text	00000180 __call_exitprocs
1801a294 g     O .bss	00000004 __mlocale_changed
18018484 g     O .rwdata	00000004 __malloc_sbrk_base
18000230 g     F .text	0000003c _start
1801a2bc g     O .bss	00000004 _alt_tick_rate
18002ce4 g     F .text	00000064 rand
1800b784 g     F .text	00000148 __lshift
1801a2c0 g     O .bss	00000004 _alt_nticks
18013988 g     F .text	00000104 read
18013d98 g     F .text	0000004c alt_sys_init
1800c844 g     F .text	000001d0 __ssprint_r
180158bc g     F .text	00000118 __register_exitproc
1800b3b8 g     F .text	0000028c __multiply
180142b4 g     F .text	00000068 altera_avalon_jtag_uart_close
18002b64 g     F .text	00000028 .hidden __mulsi3
180166e4 g       *ABS*	00000000 __ram_rwdata_start
18015b88 g       *ABS*	00000000 __ram_rodata_start
1801a2c8 g     O .bss	00000028 __malloc_current_mallinfo
1800bc98 g     F .text	0000014c __d2b
18001a8c g     F .text	00000148 UsbGetDeviceDesc1
18013de4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
18015694 g     F .text	000000c4 alt_get_fd
18014978 g     F .text	00000158 alt_busy_sleep
1800f50c g     F .text	00000054 _close_r
18015840 g     F .text	0000007c memcmp
18013ea4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1801a3f0 g       *ABS*	00000000 __alt_stack_base
18013ef4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
18007514 g     F .text	00000154 __swsetup_r
18011370 g     F .text	000009d0 .hidden __divdf3
180093f0 g     F .text	00000118 __sfp
1800befc g     F .text	00000078 __copybits
18016e60 g     O .rwdata	00000408 __malloc_av_
1800953c g     F .text	00000004 __sinit_lock_release
18011f98 g     F .text	0000086c .hidden __muldf3
1800c62c g     F .text	00000054 __sread
1800282c g     F .text	00000084 UsbWaitTDListDone
1801558c g     F .text	00000108 alt_find_file
18014b2c g     F .text	000000a4 alt_dev_llist_insert
18013904 g     F .text	00000024 __malloc_lock
18013b10 g     F .text	000000b0 sbrk
18002ea4 g     F .text	000022bc ___svfprintf_internal_r
18009134 g     F .text	0000005c _fflush_r
1800f560 g     F .text	000000dc _calloc_r
1801a28c g       *ABS*	00000000 __bss_start
1800ae20 g     F .text	00000128 memset
180003cc g     F .text	00000d44 main
1801a2b4 g     O .bss	00000004 alt_envp
1801a29c g     O .bss	00000004 __malloc_max_total_mem
18013e44 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
180021a4 g     F .text	00000100 UsbSetConfig
1800fbf8 g     F .text	00000018 __swbuf
18002ccc g     F .text	00000018 srand
1800c760 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
1800f72c g     F .text	00000014 fclose
18007890 g     F .text	00001688 _dtoa_r
1800a28c g     F .text	0000080c _malloc_r
1800fd6c g     F .text	00000030 __ascii_wctomb
180184a4 g     O .rwdata	00000004 alt_errno
18009e6c g     F .text	000000c4 _fwalk
180029b0 g     F .text	00000084 .hidden __divsi3
1800148c g     F .text	00000130 setColorPalette
18009570 g     F .text	00000124 _malloc_trim_r
180023a4 g     F .text	00000148 UsbGetHidDesc
18015b88 g       *ABS*	00000000 __CTOR_END__
1800c768 g     F .text	000000dc strcmp
18015b88 g       *ABS*	00000000 __flash_rodata_start
18015b88 g       *ABS*	00000000 __DTOR_LIST__
18011d40 g     F .text	00000088 .hidden __nedf2
1800188c g     F .text	0000004c UsbRead
18013d60 g     F .text	00000038 alt_irq_init
18013a8c g     F .text	00000084 alt_release_fd
18002da0 g     F .text	0000006c sprintf
180165b0 g     O .rodata	00000100 .hidden __clz_tab
1801a290 g     O .bss	00000004 _PathLocale
180157f4 g     F .text	00000014 atexit
1800f4ac g     F .text	00000060 _write_r
1800a0ac g     F .text	00000018 setlocale
1801847c g     O .rwdata	00000004 _impure_ptr
1801a2ac g     O .bss	00000004 alt_argc
18008f18 g     F .text	0000021c __sflush_r
18014c30 g     F .text	00000060 _do_dtors
1800a098 g     F .text	00000008 __locale_cjk_lang
18000020 g       .exceptions	00000000 alt_irq_entry
1800bb28 g     F .text	00000064 __ulp
18009558 g     F .text	00000018 __fp_unlock_all
18018490 g     O .rwdata	00000008 alt_fs_list
180024ec g     F .text	00000340 UsbGetReportDesc
18000020 g       *ABS*	00000000 __ram_exceptions_start
1800a0c4 g     F .text	0000000c localeconv
18014cb0 g     F .text	00000050 alt_ic_isr_register
180184b8 g       *ABS*	00000000 _edata
1801a3f0 g       *ABS*	00000000 _end
18001834 g     F .text	00000058 UsbWrite
1800f740 g     F .text	00000164 __fputwc
18000230 g       *ABS*	00000000 __ram_exceptions_end
1801431c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
18001370 g     F .text	0000011c textVGADrawColorText
18014d88 g     F .text	0000008c alt_ic_irq_disable
1800c688 g     F .text	0000007c __swrite
18018488 g     O .rwdata	00000004 __malloc_trim_threshold
1800a08c g     F .text	0000000c __locale_msgcharset
18015808 g     F .text	00000038 exit
18009f30 g     F .text	000000c4 _fwalk_reent
1800b92c g     F .text	000001fc __mdiff
18002a34 g     F .text	00000074 .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
18000020 g     F .exceptions	00000000 alt_exception
18009534 g     F .text	00000004 __sfp_lock_release
18000000 g       *ABS*	00000000 __alt_mem_sdram
180002f4 g     F .text	00000070 IO_write
18015b54 g     F .text	00000034 _exit
1801484c g     F .text	0000012c alt_alarm_start
1800fdf8 g     F .text	0000010c .hidden __muldi3
1800a0d0 g     F .text	000001bc __smakebuf_r
18002e0c g     F .text	00000098 strlen
180151d8 g     F .text	0000015c open
18011dc8 g     F .text	000000dc .hidden __gedf2
1801848c g     O .rwdata	00000004 __wctomb
1800deb0 g     F .text	00000018 __sprint_r
18014c90 g     F .text	00000020 alt_icache_flush_all
180184ac g     O .rwdata	00000004 alt_priority_mask
18014d00 g     F .text	00000088 alt_ic_irq_enable
1800743c g     F .text	0000001c __vfprintf_internal
1800fd9c g     F .text	0000005c _wctomb_r
18012804 g     F .text	000008fc .hidden __subdf3
1800b2cc g     F .text	000000b0 __lo0bits
18001dac g     F .text	00000190 UsbGetConfigDesc1
180184b0 g     O .rwdata	00000008 alt_alarm_list
18014bd0 g     F .text	00000060 _do_ctors
180018d8 g     F .text	000000b4 UsbSoftReset
1800fcac g     F .text	000000c0 wcrtomb
180133a4 g     F .text	000000d8 close
18001bd4 g     F .text	000001d8 UsbGetDeviceDesc2
18001110 g     F .text	000001c0 paletteTest
180136ec g     F .text	00000084 alt_load
1800f8c8 g     F .text	00000080 fputwc
18009538 g     F .text	00000004 __sinit_lock_acquire
1800b018 g     F .text	00000148 __multadd
1800aff0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

18000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
18000000:	00460034 	movhi	at,6144
    ori r1, r1, %lo(_start)
18000004:	08408c14 	ori	at,at,560
    jmp r1
18000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

18000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
18000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
18000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
18000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
18000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
18000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
18000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
18000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
18000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
18000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
18000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
18000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
18000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
18000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
18000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
18000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
18000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
18000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
18000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1800007c:	10000326 	beq	r2,zero,1800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
18000080:	20000226 	beq	r4,zero,1800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
18000084:	80000fc0 	call	180000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
18000088:	00000706 	br	180000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
18000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
18000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
18000098:	80001d00 	call	180001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1800009c:	1000021e 	bne	r2,zero,180000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
180000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
180000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
180000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
180000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
180000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
180000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
180000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
180000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
180000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
180000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
180000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
180000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
180000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
180000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
180000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
180000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
180000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
180000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
180000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
180000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
180000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
180000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
180000f8:	ef80083a 	eret

180000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
180000fc:	defff904 	addi	sp,sp,-28
18000100:	dfc00615 	stw	ra,24(sp)
18000104:	df000515 	stw	fp,20(sp)
18000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
18000110:	0005313a 	rdctl	r2,ipending
18000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
18000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
18000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
18000124:	00800044 	movi	r2,1
18000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1800012c:	e0fffb17 	ldw	r3,-20(fp)
18000130:	e0bffc17 	ldw	r2,-16(fp)
18000134:	1884703a 	and	r2,r3,r2
18000138:	10001426 	beq	r2,zero,1800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1800013c:	008600b4 	movhi	r2,6146
18000140:	10a8bc04 	addi	r2,r2,-23824
18000144:	e0fffd17 	ldw	r3,-12(fp)
18000148:	180690fa 	slli	r3,r3,3
1800014c:	10c5883a 	add	r2,r2,r3
18000150:	10c00017 	ldw	r3,0(r2)
18000154:	008600b4 	movhi	r2,6146
18000158:	10a8bc04 	addi	r2,r2,-23824
1800015c:	e13ffd17 	ldw	r4,-12(fp)
18000160:	200890fa 	slli	r4,r4,3
18000164:	1105883a 	add	r2,r2,r4
18000168:	10800104 	addi	r2,r2,4
1800016c:	10800017 	ldw	r2,0(r2)
18000170:	1009883a 	mov	r4,r2
18000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
18000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1800017c:	0005313a 	rdctl	r2,ipending
18000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
18000184:	e0bfff17 	ldw	r2,-4(fp)
18000188:	00000706 	br	180001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1800018c:	e0bffc17 	ldw	r2,-16(fp)
18000190:	1085883a 	add	r2,r2,r2
18000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
18000198:	e0bffd17 	ldw	r2,-12(fp)
1800019c:	10800044 	addi	r2,r2,1
180001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
180001a4:	003fe106 	br	1800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
180001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
180001ac:	e0bffb17 	ldw	r2,-20(fp)
180001b0:	103fdb1e 	bne	r2,zero,18000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
180001b4:	0001883a 	nop
}
180001b8:	0001883a 	nop
180001bc:	e037883a 	mov	sp,fp
180001c0:	dfc00117 	ldw	ra,4(sp)
180001c4:	df000017 	ldw	fp,0(sp)
180001c8:	dec00204 	addi	sp,sp,8
180001cc:	f800283a 	ret

180001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
180001d0:	defffb04 	addi	sp,sp,-20
180001d4:	dfc00415 	stw	ra,16(sp)
180001d8:	df000315 	stw	fp,12(sp)
180001dc:	df000304 	addi	fp,sp,12
180001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
180001e4:	00bfffc4 	movi	r2,-1
180001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
180001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
180001f0:	d0a79517 	ldw	r2,-25004(gp)
180001f4:	10000726 	beq	r2,zero,18000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
180001f8:	d0a79517 	ldw	r2,-25004(gp)
180001fc:	e0fffd17 	ldw	r3,-12(fp)
18000200:	e1bffe17 	ldw	r6,-8(fp)
18000204:	e17fff17 	ldw	r5,-4(fp)
18000208:	1809883a 	mov	r4,r3
1800020c:	103ee83a 	callr	r2
18000210:	00000206 	br	1800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
18000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
18000218:	0005883a 	mov	r2,zero
}
1800021c:	e037883a 	mov	sp,fp
18000220:	dfc00117 	ldw	ra,4(sp)
18000224:	df000017 	ldw	fp,0(sp)
18000228:	dec00204 	addi	sp,sp,8
1800022c:	f800283a 	ret

Disassembly of section .text:

18000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
18000230:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
18000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
18000238:	068600b4 	movhi	gp,6146
    ori gp, gp, %lo(_gp)
1800023c:	d6811c14 	ori	gp,gp,1136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
18000240:	00860074 	movhi	r2,6145
    ori r2, r2, %lo(__bss_start)
18000244:	10a8a314 	ori	r2,r2,41612

    movhi r3, %hi(__bss_end)
18000248:	00c60074 	movhi	r3,6145
    ori r3, r3, %lo(__bss_end)
1800024c:	18e8fc14 	ori	r3,r3,41968

    beq r2, r3, 1f
18000250:	10c00326 	beq	r2,r3,18000260 <_start+0x30>

0:
    stw zero, (r2)
18000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
18000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1800025c:	10fffd36 	bltu	r2,r3,18000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
18000260:	80136ec0 	call	180136ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
18000264:	80138880 	call	18013888 <alt_main>

18000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
18000268:	003fff06 	br	18000268 <__alt_data_end+0xf8000268>

1800026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1800026c:	deffff04 	addi	sp,sp,-4
18000270:	df000015 	stw	fp,0(sp)
18000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
18000278:	00900404 	movi	r2,16400
1800027c:	00c00044 	movi	r3,1
18000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
18000284:	00900804 	movi	r2,16416
18000288:	00c00044 	movi	r3,1
1800028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
18000290:	00901004 	movi	r2,16448
18000294:	00c00044 	movi	r3,1
18000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1800029c:	00900c04 	movi	r2,16432
180002a0:	00c00044 	movi	r3,1
180002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
180002a8:	00901804 	movi	r2,16480
180002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
180002b0:	00901404 	movi	r2,16464
180002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
180002b8:	00900804 	movi	r2,16416
180002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
180002c0:	00900404 	movi	r2,16400
180002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
180002c8:	00900404 	movi	r2,16400
180002cc:	00c00044 	movi	r3,1
180002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
180002d4:	00900804 	movi	r2,16416
180002d8:	00c00044 	movi	r3,1
180002dc:	10c00005 	stb	r3,0(r2)

}
180002e0:	0001883a 	nop
180002e4:	e037883a 	mov	sp,fp
180002e8:	df000017 	ldw	fp,0(sp)
180002ec:	dec00104 	addi	sp,sp,4
180002f0:	f800283a 	ret

180002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
180002f4:	defffd04 	addi	sp,sp,-12
180002f8:	df000215 	stw	fp,8(sp)
180002fc:	df000204 	addi	fp,sp,8
18000300:	2007883a 	mov	r3,r4
18000304:	2805883a 	mov	r2,r5
18000308:	e0fffe05 	stb	r3,-8(fp)
1800030c:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	*otg_hpi_address = Address;
18000310:	00901804 	movi	r2,16480
18000314:	e0fffe03 	ldbu	r3,-8(fp)
18000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1800031c:	00901404 	movi	r2,16464
18000320:	e0ffff0b 	ldhu	r3,-4(fp)
18000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
18000328:	00900804 	movi	r2,16416
1800032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
18000330:	00900c04 	movi	r2,16432
18000334:	10000005 	stb	zero,0(r2)

	// Reset
	*otg_hpi_w = 1;
18000338:	00900c04 	movi	r2,16432
1800033c:	00c00044 	movi	r3,1
18000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
18000344:	00900804 	movi	r2,16416
18000348:	00c00044 	movi	r3,1
1800034c:	10c00005 	stb	r3,0(r2)
}
18000350:	0001883a 	nop
18000354:	e037883a 	mov	sp,fp
18000358:	df000017 	ldw	fp,0(sp)
1800035c:	dec00104 	addi	sp,sp,4
18000360:	f800283a 	ret

18000364 <IO_read>:



alt_u16 IO_read(alt_u8 Address)
{
18000364:	defffd04 	addi	sp,sp,-12
18000368:	df000215 	stw	fp,8(sp)
1800036c:	df000204 	addi	fp,sp,8
18000370:	2005883a 	mov	r2,r4
18000374:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
18000378:	00901804 	movi	r2,16480
1800037c:	e0ffff03 	ldbu	r3,-4(fp)
18000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
18000384:	00900804 	movi	r2,16416
18000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1800038c:	00901004 	movi	r2,16448
18000390:	10000005 	stb	zero,0(r2)

	temp = *otg_hpi_data;
18000394:	00901404 	movi	r2,16464
18000398:	10800017 	ldw	r2,0(r2)
1800039c:	e0bffe0d 	sth	r2,-8(fp)

	// Reset
	*otg_hpi_r = 1;
180003a0:	00901004 	movi	r2,16448
180003a4:	00c00044 	movi	r3,1
180003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
180003ac:	00900804 	movi	r2,16416
180003b0:	00c00044 	movi	r3,1
180003b4:	10c00005 	stb	r3,0(r2)
	return temp;
180003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
180003bc:	e037883a 	mov	sp,fp
180003c0:	df000017 	ldw	fp,0(sp)
180003c4:	dec00104 	addi	sp,sp,4
180003c8:	f800283a 	ret

180003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
180003cc:	defff904 	addi	sp,sp,-28
180003d0:	dfc00615 	stw	ra,24(sp)
180003d4:	df000515 	stw	fp,20(sp)
180003d8:	df000504 	addi	fp,sp,20
	IO_init();
180003dc:	800026c0 	call	1800026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
180003e0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
180003e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
180003e8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
180003ec:	01060074 	movhi	r4,6145
180003f0:	2116e204 	addi	r4,r4,23432
180003f4:	8002cb80 	call	18002cb8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
180003f8:	80018d80 	call	180018d8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
180003fc:	000b883a 	mov	r5,zero
18000400:	01005104 	movi	r4,324
18000404:	80018340 	call	18001834 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
18000408:	017fffd4 	movui	r5,65535
1800040c:	01302414 	movui	r4,49296
18000410:	80018340 	call	18001834 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
18000414:	01409604 	movi	r5,600
18000418:	01006d04 	movi	r4,436
1800041c:	80018340 	call	18001834 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
18000420:	00811004 	movi	r2,1088
18000424:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
18000428:	e0bffb0b 	ldhu	r2,-20(fp)
1800042c:	100b883a 	mov	r5,r2
18000430:	01005084 	movi	r4,322
18000434:	80018340 	call	18001834 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
18000438:	00808404 	movi	r2,528
1800043c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
18000440:	e0bffe0b 	ldhu	r2,-8(fp)
18000444:	100b883a 	mov	r5,r2
18000448:	01302314 	movui	r4,49292
1800044c:	80018340 	call	18001834 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
18000450:	000b883a 	mov	r5,zero
18000454:	01007104 	movi	r4,452
18000458:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1800045c:	000b883a 	mov	r5,zero
18000460:	01007184 	movi	r4,454
18000464:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
18000468:	000b883a 	mov	r5,zero
1800046c:	01007204 	movi	r4,456
18000470:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
18000474:	000b883a 	mov	r5,zero
18000478:	01007284 	movi	r4,458
1800047c:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
18000480:	000b883a 	mov	r5,zero
18000484:	01007304 	movi	r4,460
18000488:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1800048c:	000b883a 	mov	r5,zero
18000490:	01007384 	movi	r4,462
18000494:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
18000498:	000b883a 	mov	r5,zero
1800049c:	01007404 	movi	r4,464
180004a0:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
180004a4:	000b883a 	mov	r5,zero
180004a8:	01007484 	movi	r4,466
180004ac:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
180004b0:	000b883a 	mov	r5,zero
180004b4:	01007504 	movi	r4,468
180004b8:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
180004bc:	000b883a 	mov	r5,zero
180004c0:	01007584 	movi	r4,470
180004c4:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
180004c8:	000b883a 	mov	r5,zero
180004cc:	01007604 	movi	r4,472
180004d0:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
180004d4:	000b883a 	mov	r5,zero
180004d8:	01007684 	movi	r4,474
180004dc:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
180004e0:	000b883a 	mov	r5,zero
180004e4:	01007704 	movi	r4,476
180004e8:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
180004ec:	000b883a 	mov	r5,zero
180004f0:	01007784 	movi	r4,478
180004f4:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
180004f8:	01401c84 	movi	r5,114
180004fc:	01007084 	movi	r4,450
18000500:	80018340 	call	18001834 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
18000504:	01738054 	movui	r5,52737
18000508:	01000044 	movi	r4,1
1800050c:	80002f40 	call	180002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
18000510:	0001883a 	nop
18000514:	010000c4 	movi	r4,3
18000518:	80003640 	call	18000364 <IO_read>
1800051c:	10bfffcc 	andi	r2,r2,65535
18000520:	103ffc26 	beq	r2,zero,18000514 <__alt_data_end+0xf8000514>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
18000524:	00000806 	br	18000548 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
18000528:	01000044 	movi	r4,1
1800052c:	80003640 	call	18000364 <IO_read>
18000530:	10bfffcc 	andi	r2,r2,65535
18000534:	100b883a 	mov	r5,r2
18000538:	01060074 	movhi	r4,6145
1800053c:	2116e804 	addi	r4,r4,23456
18000540:	8002bbc0 	call	18002bbc <printf>
		goto USB_HOT_PLUG;
18000544:	003fac06 	br	180003f8 <__alt_data_end+0xf80003f8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
18000548:	01000044 	movi	r4,1
1800054c:	80003640 	call	18000364 <IO_read>
18000550:	10bfffcc 	andi	r2,r2,65535
18000554:	1083fb58 	cmpnei	r2,r2,4077
18000558:	103ff31e 	bne	r2,zero,18000528 <__alt_data_end+0xf8000528>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
1800055c:	01060074 	movhi	r4,6145
18000560:	2116f104 	addi	r4,r4,23492
18000564:	8002bbc0 	call	18002bbc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
18000568:	01401d04 	movi	r5,116
1800056c:	01007084 	movi	r4,450
18000570:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
18000574:	01400f04 	movi	r5,60
18000578:	01007104 	movi	r4,452
1800057c:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
18000580:	000b883a 	mov	r5,zero
18000584:	01007184 	movi	r4,454
18000588:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1800058c:	000b883a 	mov	r5,zero
18000590:	01007204 	movi	r4,456
18000594:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
18000598:	000b883a 	mov	r5,zero
1800059c:	01007284 	movi	r4,458
180005a0:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
180005a4:	000b883a 	mov	r5,zero
180005a8:	01007304 	movi	r4,460
180005ac:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
180005b0:	000b883a 	mov	r5,zero
180005b4:	01007384 	movi	r4,462
180005b8:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
180005bc:	000b883a 	mov	r5,zero
180005c0:	01007404 	movi	r4,464
180005c4:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
180005c8:	000b883a 	mov	r5,zero
180005cc:	01007484 	movi	r4,466
180005d0:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
180005d4:	000b883a 	mov	r5,zero
180005d8:	01007504 	movi	r4,468
180005dc:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
180005e0:	000b883a 	mov	r5,zero
180005e4:	01007584 	movi	r4,470
180005e8:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
180005ec:	000b883a 	mov	r5,zero
180005f0:	01007604 	movi	r4,472
180005f4:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
180005f8:	000b883a 	mov	r5,zero
180005fc:	01007684 	movi	r4,474
18000600:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
18000604:	000b883a 	mov	r5,zero
18000608:	01007704 	movi	r4,476
1800060c:	80018340 	call	18001834 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
18000610:	000b883a 	mov	r5,zero
18000614:	01007784 	movi	r4,478
18000618:	80018340 	call	18001834 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1800061c:	01738054 	movui	r5,52737
18000620:	01000044 	movi	r4,1
18000624:	80002f40 	call	180002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
18000628:	0001883a 	nop
1800062c:	01000044 	movi	r4,1
18000630:	80003640 	call	18000364 <IO_read>
18000634:	10bfffcc 	andi	r2,r2,65535
18000638:	1083fb58 	cmpnei	r2,r2,4077
1800063c:	10000826 	beq	r2,zero,18000660 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
18000640:	01000044 	movi	r4,1
18000644:	80003640 	call	18000364 <IO_read>
18000648:	10bfffcc 	andi	r2,r2,65535
1800064c:	100b883a 	mov	r5,r2
18000650:	01060074 	movhi	r4,6145
18000654:	2116e804 	addi	r4,r4,23456
18000658:	8002bbc0 	call	18002bbc <printf>
		goto USB_HOT_PLUG;
1800065c:	003f6606 	br	180003f8 <__alt_data_end+0xf80003f8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
18000660:	00b02284 	movi	r2,-16246
18000664:	d0a7870d 	sth	r2,-25060(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
18000668:	008c0004 	movi	r2,12288
1800066c:	d0a7878d 	sth	r2,-25058(gp)
	fs_device = A_DP_STAT;
18000670:	00880004 	movi	r2,8192
18000674:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
18000678:	d0a7870b 	ldhu	r2,-25060(gp)
1800067c:	10bfffcc 	andi	r2,r2,65535
18000680:	1009883a 	mov	r4,r2
18000684:	800188c0 	call	1800188c <UsbRead>
18000688:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
1800068c:	d0a7878b 	ldhu	r2,-25058(gp)
18000690:	e0fffb0b 	ldhu	r3,-20(fp)
18000694:	1884703a 	and	r2,r3,r2
18000698:	10bfffcc 	andi	r2,r2,65535
1800069c:	1000351e 	bne	r2,zero,18000774 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
180006a0:	e03ffbc5 	stb	zero,-17(fp)
180006a4:	00000f06 	br	180006e4 <main+0x318>
		{
			usleep(5*1000);
180006a8:	0104e204 	movi	r4,5000
180006ac:	8013bc00 	call	18013bc0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
180006b0:	d0a7870b 	ldhu	r2,-25060(gp)
180006b4:	10bfffcc 	andi	r2,r2,65535
180006b8:	1009883a 	mov	r4,r2
180006bc:	800188c0 	call	1800188c <UsbRead>
180006c0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
180006c4:	d0a7878b 	ldhu	r2,-25058(gp)
180006c8:	e0fffb0b 	ldhu	r3,-20(fp)
180006cc:	1884703a 	and	r2,r3,r2
180006d0:	10bfffcc 	andi	r2,r2,65535
180006d4:	1000071e 	bne	r2,zero,180006f4 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
180006d8:	e0bffbc3 	ldbu	r2,-17(fp)
180006dc:	10800044 	addi	r2,r2,1
180006e0:	e0bffbc5 	stb	r2,-17(fp)
180006e4:	e0bffbc3 	ldbu	r2,-17(fp)
180006e8:	10800170 	cmpltui	r2,r2,5
180006ec:	103fee1e 	bne	r2,zero,180006a8 <__alt_data_end+0xf80006a8>
180006f0:	00000106 	br	180006f8 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
180006f4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
180006f8:	d0a7878b 	ldhu	r2,-25058(gp)
180006fc:	e0fffb0b 	ldhu	r3,-20(fp)
18000700:	1884703a 	and	r2,r3,r2
18000704:	10bfffcc 	andi	r2,r2,65535
18000708:	1000261e 	bne	r2,zero,180007a4 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1800070c:	01060074 	movhi	r4,6145
18000710:	2116f504 	addi	r4,r4,23508
18000714:	8002cb80 	call	18002cb8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
18000718:	01060074 	movhi	r4,6145
1800071c:	2116ff04 	addi	r4,r4,23548
18000720:	8002cb80 	call	18002cb8 <puts>
			while (!(usb_ctl_val & no_device))
18000724:	00000d06 	br	1800075c <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
18000728:	d0a7870b 	ldhu	r2,-25060(gp)
1800072c:	10bfffcc 	andi	r2,r2,65535
18000730:	1009883a 	mov	r4,r2
18000734:	800188c0 	call	1800188c <UsbRead>
18000738:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
1800073c:	d0a7878b 	ldhu	r2,-25058(gp)
18000740:	e0fffb0b 	ldhu	r3,-20(fp)
18000744:	1884703a 	and	r2,r3,r2
18000748:	10bfffcc 	andi	r2,r2,65535
1800074c:	10000126 	beq	r2,zero,18000754 <main+0x388>
					goto USB_HOT_PLUG;
18000750:	003f2906 	br	180003f8 <__alt_data_end+0xf80003f8>

				usleep(2000);
18000754:	0101f404 	movi	r4,2000
18000758:	8013bc00 	call	18013bc0 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
1800075c:	d0a7878b 	ldhu	r2,-25058(gp)
18000760:	e0fffb0b 	ldhu	r3,-20(fp)
18000764:	1884703a 	and	r2,r3,r2
18000768:	10bfffcc 	andi	r2,r2,65535
1800076c:	103fee26 	beq	r2,zero,18000728 <__alt_data_end+0xf8000728>
18000770:	00000c06 	br	180007a4 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
18000774:	e0fffb0b 	ldhu	r3,-20(fp)
18000778:	e0bffc0b 	ldhu	r2,-16(fp)
1800077c:	1884703a 	and	r2,r3,r2
18000780:	10bfffcc 	andi	r2,r2,65535
18000784:	10000426 	beq	r2,zero,18000798 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
18000788:	01060074 	movhi	r4,6145
1800078c:	21170b04 	addi	r4,r4,23596
18000790:	8002cb80 	call	18002cb8 <puts>
18000794:	00000306 	br	180007a4 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
18000798:	01060074 	movhi	r4,6145
1800079c:	21171204 	addi	r4,r4,23624
180007a0:	8002cb80 	call	18002cb8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
180007a4:	800198c0 	call	1800198c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
180007a8:	00000306 	br	180007b8 <main+0x3ec>
	{
		UsbSetAddress();
180007ac:	800198c0 	call	1800198c <UsbSetAddress>
		usleep(10*1000);
180007b0:	0109c404 	movi	r4,10000
180007b4:	8013bc00 	call	18013bc0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
180007b8:	010000c4 	movi	r4,3
180007bc:	80003640 	call	18000364 <IO_read>
180007c0:	10bfffcc 	andi	r2,r2,65535
180007c4:	1080040c 	andi	r2,r2,16
180007c8:	103ff826 	beq	r2,zero,180007ac <__alt_data_end+0xf80007ac>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
180007cc:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
180007d0:	01414184 	movi	r5,1286
180007d4:	01000084 	movi	r4,2
180007d8:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
180007dc:	0009883a 	mov	r4,zero
180007e0:	80003640 	call	18000364 <IO_read>
180007e4:	10bfffcc 	andi	r2,r2,65535
180007e8:	100b883a 	mov	r5,r2
180007ec:	01060074 	movhi	r4,6145
180007f0:	21171904 	addi	r4,r4,23652
180007f4:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508); // n
180007f8:	01414204 	movi	r5,1288
180007fc:	01000084 	movi	r4,2
18000800:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
18000804:	0009883a 	mov	r4,zero
18000808:	80003640 	call	18000364 <IO_read>
1800080c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
18000810:	e0bffb0b 	ldhu	r2,-20(fp)
18000814:	100b883a 	mov	r5,r2
18000818:	01060074 	movhi	r4,6145
1800081c:	21172404 	addi	r4,r4,23696
18000820:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
18000824:	e0bffb0b 	ldhu	r2,-20(fp)
18000828:	108000e0 	cmpeqi	r2,r2,3
1800082c:	1000031e 	bne	r2,zero,1800083c <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000830:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000834:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
18000838:	003eef06 	br	180003f8 <__alt_data_end+0xf80003f8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
1800083c:	01060074 	movhi	r4,6145
18000840:	21173004 	addi	r4,r4,23744
18000844:	8002cb80 	call	18002cb8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
18000848:	8001a8c0 	call	18001a8c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1800084c:	00000306 	br	1800085c <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
18000850:	8001a8c0 	call	18001a8c <UsbGetDeviceDesc1>
		usleep(10*1000);
18000854:	0109c404 	movi	r4,10000
18000858:	8013bc00 	call	18013bc0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1800085c:	010000c4 	movi	r4,3
18000860:	80003640 	call	18000364 <IO_read>
18000864:	10bfffcc 	andi	r2,r2,65535
18000868:	1080040c 	andi	r2,r2,16
1800086c:	103ff826 	beq	r2,zero,18000850 <__alt_data_end+0xf8000850>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000870:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000874:	01414184 	movi	r5,1286
18000878:	01000084 	movi	r4,2
1800087c:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000880:	0009883a 	mov	r4,zero
18000884:	80003640 	call	18000364 <IO_read>
18000888:	10bfffcc 	andi	r2,r2,65535
1800088c:	100b883a 	mov	r5,r2
18000890:	01060074 	movhi	r4,6145
18000894:	21173f04 	addi	r4,r4,23804
18000898:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
1800089c:	01414204 	movi	r5,1288
180008a0:	01000084 	movi	r4,2
180008a4:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
180008a8:	0009883a 	mov	r4,zero
180008ac:	80003640 	call	18000364 <IO_read>
180008b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
180008b4:	e0bffb0b 	ldhu	r2,-20(fp)
180008b8:	100b883a 	mov	r5,r2
180008bc:	01060074 	movhi	r4,6145
180008c0:	21174a04 	addi	r4,r4,23848
180008c4:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
180008c8:	00000206 	br	180008d4 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
180008cc:	80028b00 	call	180028b0 <UsbGetRetryCnt>
180008d0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
180008d4:	e0bffb0b 	ldhu	r2,-20(fp)
180008d8:	108000d8 	cmpnei	r2,r2,3
180008dc:	103ffb1e 	bne	r2,zero,180008cc <__alt_data_end+0xf80008cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
180008e0:	01060074 	movhi	r4,6145
180008e4:	21175604 	addi	r4,r4,23896
180008e8:	8002cb80 	call	18002cb8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
180008ec:	8001bd40 	call	18001bd4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
180008f0:	00000306 	br	18000900 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
180008f4:	8001bd40 	call	18001bd4 <UsbGetDeviceDesc2>
		usleep(10*1000);
180008f8:	0109c404 	movi	r4,10000
180008fc:	8013bc00 	call	18013bc0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000900:	010000c4 	movi	r4,3
18000904:	80003640 	call	18000364 <IO_read>
18000908:	10bfffcc 	andi	r2,r2,65535
1800090c:	1080040c 	andi	r2,r2,16
18000910:	103ff826 	beq	r2,zero,180008f4 <__alt_data_end+0xf80008f4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000914:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000918:	01414184 	movi	r5,1286
1800091c:	01000084 	movi	r4,2
18000920:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000924:	0009883a 	mov	r4,zero
18000928:	80003640 	call	18000364 <IO_read>
1800092c:	10bfffcc 	andi	r2,r2,65535
18000930:	100b883a 	mov	r5,r2
18000934:	01060074 	movhi	r4,6145
18000938:	21173f04 	addi	r4,r4,23804
1800093c:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
18000940:	01414204 	movi	r5,1288
18000944:	01000084 	movi	r4,2
18000948:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1800094c:	0009883a 	mov	r4,zero
18000950:	80003640 	call	18000364 <IO_read>
18000954:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
18000958:	e0bffb0b 	ldhu	r2,-20(fp)
1800095c:	100b883a 	mov	r5,r2
18000960:	01060074 	movhi	r4,6145
18000964:	21174a04 	addi	r4,r4,23848
18000968:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
1800096c:	00000206 	br	18000978 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000970:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000974:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000978:	e0bffb0b 	ldhu	r2,-20(fp)
1800097c:	108000d8 	cmpnei	r2,r2,3
18000980:	103ffb1e 	bne	r2,zero,18000970 <__alt_data_end+0xf8000970>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
18000984:	01060074 	movhi	r4,6145
18000988:	21176a04 	addi	r4,r4,23976
1800098c:	8002cb80 	call	18002cb8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
18000990:	8001dac0 	call	18001dac <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000994:	00000306 	br	180009a4 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
18000998:	8001dac0 	call	18001dac <UsbGetConfigDesc1>
		usleep(10*1000);
1800099c:	0109c404 	movi	r4,10000
180009a0:	8013bc00 	call	18013bc0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
180009a4:	010000c4 	movi	r4,3
180009a8:	80003640 	call	18000364 <IO_read>
180009ac:	10bfffcc 	andi	r2,r2,65535
180009b0:	1080040c 	andi	r2,r2,16
180009b4:	103ff826 	beq	r2,zero,18000998 <__alt_data_end+0xf8000998>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
180009b8:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
180009bc:	01414184 	movi	r5,1286
180009c0:	01000084 	movi	r4,2
180009c4:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
180009c8:	0009883a 	mov	r4,zero
180009cc:	80003640 	call	18000364 <IO_read>
180009d0:	10bfffcc 	andi	r2,r2,65535
180009d4:	100b883a 	mov	r5,r2
180009d8:	01060074 	movhi	r4,6145
180009dc:	21177c04 	addi	r4,r4,24048
180009e0:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
180009e4:	01414204 	movi	r5,1288
180009e8:	01000084 	movi	r4,2
180009ec:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
180009f0:	0009883a 	mov	r4,zero
180009f4:	80003640 	call	18000364 <IO_read>
180009f8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
180009fc:	e0bffb0b 	ldhu	r2,-20(fp)
18000a00:	100b883a 	mov	r5,r2
18000a04:	01060074 	movhi	r4,6145
18000a08:	21178704 	addi	r4,r4,24092
18000a0c:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
18000a10:	00000206 	br	18000a1c <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000a14:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000a18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000a1c:	e0bffb0b 	ldhu	r2,-20(fp)
18000a20:	108000d8 	cmpnei	r2,r2,3
18000a24:	103ffb1e 	bne	r2,zero,18000a14 <__alt_data_end+0xf8000a14>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
18000a28:	01060074 	movhi	r4,6145
18000a2c:	21179304 	addi	r4,r4,24140
18000a30:	8002cb80 	call	18002cb8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
18000a34:	8001f3c0 	call	18001f3c <UsbGetConfigDesc2>

	usleep(100*1000);
18000a38:	010000b4 	movhi	r4,2
18000a3c:	2121a804 	addi	r4,r4,-31072
18000a40:	8013bc00 	call	18013bc0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000a44:	00000306 	br	18000a54 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
18000a48:	8001f3c0 	call	18001f3c <UsbGetConfigDesc2>
		usleep(10*1000);
18000a4c:	0109c404 	movi	r4,10000
18000a50:	8013bc00 	call	18013bc0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000a54:	010000c4 	movi	r4,3
18000a58:	80003640 	call	18000364 <IO_read>
18000a5c:	10bfffcc 	andi	r2,r2,65535
18000a60:	1080040c 	andi	r2,r2,16
18000a64:	103ff826 	beq	r2,zero,18000a48 <__alt_data_end+0xf8000a48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000a68:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000a6c:	01414184 	movi	r5,1286
18000a70:	01000084 	movi	r4,2
18000a74:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000a78:	0009883a 	mov	r4,zero
18000a7c:	80003640 	call	18000364 <IO_read>
18000a80:	10bfffcc 	andi	r2,r2,65535
18000a84:	100b883a 	mov	r5,r2
18000a88:	01060074 	movhi	r4,6145
18000a8c:	2117a604 	addi	r4,r4,24216
18000a90:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
18000a94:	01414204 	movi	r5,1288
18000a98:	01000084 	movi	r4,2
18000a9c:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
18000aa0:	0009883a 	mov	r4,zero
18000aa4:	80003640 	call	18000364 <IO_read>
18000aa8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
18000aac:	e0bffb0b 	ldhu	r2,-20(fp)
18000ab0:	100b883a 	mov	r5,r2
18000ab4:	01060074 	movhi	r4,6145
18000ab8:	2117b104 	addi	r4,r4,24260
18000abc:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
18000ac0:	00000206 	br	18000acc <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000ac4:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000ac8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000acc:	e0bffb0b 	ldhu	r2,-20(fp)
18000ad0:	108000d8 	cmpnei	r2,r2,3
18000ad4:	103ffb1e 	bne	r2,zero,18000ac4 <__alt_data_end+0xf8000ac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
18000ad8:	01060074 	movhi	r4,6145
18000adc:	2117bd04 	addi	r4,r4,24308
18000ae0:	8002cb80 	call	18002cb8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
18000ae4:	01415b04 	movi	r5,1388
18000ae8:	01000084 	movi	r4,2
18000aec:	80002f40 	call	180002f4 <IO_write>
	code = IO_read(HPI_DATA);
18000af0:	0009883a 	mov	r4,zero
18000af4:	80003640 	call	18000364 <IO_read>
18000af8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
18000afc:	e0bffe8b 	ldhu	r2,-6(fp)
18000b00:	108000cc 	andi	r2,r2,3
18000b04:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
18000b08:	e0bffe8b 	ldhu	r2,-6(fp)
18000b0c:	100b883a 	mov	r5,r2
18000b10:	01060074 	movhi	r4,6145
18000b14:	2117d004 	addi	r4,r4,24384
18000b18:	8002bbc0 	call	18002bbc <printf>

	if (code == 0x01)
18000b1c:	e0bffe8b 	ldhu	r2,-6(fp)
18000b20:	10800058 	cmpnei	r2,r2,1
18000b24:	1000041e 	bne	r2,zero,18000b38 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
18000b28:	01060074 	movhi	r4,6145
18000b2c:	2117d304 	addi	r4,r4,24396
18000b30:	8002cb80 	call	18002cb8 <puts>
18000b34:	00000306 	br	18000b44 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
18000b38:	01060074 	movhi	r4,6145
18000b3c:	2117e204 	addi	r4,r4,24456
18000b40:	8002cb80 	call	18002cb8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
18000b44:	01415d84 	movi	r5,1398
18000b48:	01000084 	movi	r4,2
18000b4c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
18000b50:	0141cfc4 	movi	r5,1855
18000b54:	0009883a 	mov	r4,zero
18000b58:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
18000b5c:	01604154 	movui	r5,33029
18000b60:	0009883a 	mov	r4,zero
18000b64:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
18000b68:	014000c4 	movi	r5,3
18000b6c:	0009883a 	mov	r4,zero
18000b70:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
18000b74:	01400204 	movi	r5,8
18000b78:	0009883a 	mov	r4,zero
18000b7c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
18000b80:	016b0294 	movui	r5,44042
18000b84:	0009883a 	mov	r4,zero
18000b88:	80002f40 	call	180002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
18000b8c:	01415d84 	movi	r5,1398
18000b90:	01006c04 	movi	r4,432
18000b94:	80018340 	call	18001834 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
18000b98:	01415f04 	movi	r5,1404
18000b9c:	01000084 	movi	r4,2
18000ba0:	80002f40 	call	180002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
18000ba4:	0009883a 	mov	r4,zero
18000ba8:	80003640 	call	18000364 <IO_read>
18000bac:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
18000bb0:	e0bfff03 	ldbu	r2,-4(fp)
18000bb4:	100b883a 	mov	r5,r2
18000bb8:	01060074 	movhi	r4,6145
18000bbc:	2117eb04 	addi	r4,r4,24492
18000bc0:	8002bbc0 	call	18002bbc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
18000bc4:	80021a40 	call	180021a4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000bc8:	00000306 	br	18000bd8 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
18000bcc:	80021a40 	call	180021a4 <UsbSetConfig>
		usleep(10*1000);
18000bd0:	0109c404 	movi	r4,10000
18000bd4:	8013bc00 	call	18013bc0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000bd8:	010000c4 	movi	r4,3
18000bdc:	80003640 	call	18000364 <IO_read>
18000be0:	10bfffcc 	andi	r2,r2,65535
18000be4:	1080040c 	andi	r2,r2,16
18000be8:	103ff826 	beq	r2,zero,18000bcc <__alt_data_end+0xf8000bcc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000bec:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000bf0:	01414184 	movi	r5,1286
18000bf4:	01000084 	movi	r4,2
18000bf8:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000bfc:	0009883a 	mov	r4,zero
18000c00:	80003640 	call	18000364 <IO_read>
18000c04:	10bfffcc 	andi	r2,r2,65535
18000c08:	100b883a 	mov	r5,r2
18000c0c:	01060074 	movhi	r4,6145
18000c10:	2117f504 	addi	r4,r4,24532
18000c14:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
18000c18:	01414204 	movi	r5,1288
18000c1c:	01000084 	movi	r4,2
18000c20:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
18000c24:	0009883a 	mov	r4,zero
18000c28:	80003640 	call	18000364 <IO_read>
18000c2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
18000c30:	e0bffb0b 	ldhu	r2,-20(fp)
18000c34:	100b883a 	mov	r5,r2
18000c38:	01060074 	movhi	r4,6145
18000c3c:	21180004 	addi	r4,r4,24576
18000c40:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
18000c44:	00000206 	br	18000c50 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000c48:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000c4c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000c50:	e0bffb0b 	ldhu	r2,-20(fp)
18000c54:	108000d8 	cmpnei	r2,r2,3
18000c58:	103ffb1e 	bne	r2,zero,18000c48 <__alt_data_end+0xf8000c48>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
18000c5c:	01060074 	movhi	r4,6145
18000c60:	21180c04 	addi	r4,r4,24624
18000c64:	8002cb80 	call	18002cb8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
18000c68:	80022a40 	call	180022a4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000c6c:	00000306 	br	18000c7c <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
18000c70:	80022a40 	call	180022a4 <UsbClassRequest>
		usleep(10*1000);
18000c74:	0109c404 	movi	r4,10000
18000c78:	8013bc00 	call	18013bc0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000c7c:	010000c4 	movi	r4,3
18000c80:	80003640 	call	18000364 <IO_read>
18000c84:	10bfffcc 	andi	r2,r2,65535
18000c88:	1080040c 	andi	r2,r2,16
18000c8c:	103ff826 	beq	r2,zero,18000c70 <__alt_data_end+0xf8000c70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000c90:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000c94:	01414184 	movi	r5,1286
18000c98:	01000084 	movi	r4,2
18000c9c:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000ca0:	0009883a 	mov	r4,zero
18000ca4:	80003640 	call	18000364 <IO_read>
18000ca8:	10bfffcc 	andi	r2,r2,65535
18000cac:	100b883a 	mov	r5,r2
18000cb0:	01060074 	movhi	r4,6145
18000cb4:	21181e04 	addi	r4,r4,24696
18000cb8:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
18000cbc:	01414204 	movi	r5,1288
18000cc0:	01000084 	movi	r4,2
18000cc4:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
18000cc8:	0009883a 	mov	r4,zero
18000ccc:	80003640 	call	18000364 <IO_read>
18000cd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
18000cd4:	e0bffb0b 	ldhu	r2,-20(fp)
18000cd8:	100b883a 	mov	r5,r2
18000cdc:	01060074 	movhi	r4,6145
18000ce0:	21182904 	addi	r4,r4,24740
18000ce4:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
18000ce8:	00000206 	br	18000cf4 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000cec:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000cf0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000cf4:	e0bffb0b 	ldhu	r2,-20(fp)
18000cf8:	108000d8 	cmpnei	r2,r2,3
18000cfc:	103ffb1e 	bne	r2,zero,18000cec <__alt_data_end+0xf8000cec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
18000d00:	01060074 	movhi	r4,6145
18000d04:	21183504 	addi	r4,r4,24788
18000d08:	8002cb80 	call	18002cb8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
18000d0c:	80023a40 	call	180023a4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000d10:	00000306 	br	18000d20 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
18000d14:	80023a40 	call	180023a4 <UsbGetHidDesc>
		usleep(10*1000);
18000d18:	0109c404 	movi	r4,10000
18000d1c:	8013bc00 	call	18013bc0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000d20:	010000c4 	movi	r4,3
18000d24:	80003640 	call	18000364 <IO_read>
18000d28:	10bfffcc 	andi	r2,r2,65535
18000d2c:	1080040c 	andi	r2,r2,16
18000d30:	103ff826 	beq	r2,zero,18000d14 <__alt_data_end+0xf8000d14>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000d34:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000d38:	01414184 	movi	r5,1286
18000d3c:	01000084 	movi	r4,2
18000d40:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000d44:	0009883a 	mov	r4,zero
18000d48:	80003640 	call	18000364 <IO_read>
18000d4c:	10bfffcc 	andi	r2,r2,65535
18000d50:	100b883a 	mov	r5,r2
18000d54:	01060074 	movhi	r4,6145
18000d58:	21181e04 	addi	r4,r4,24696
18000d5c:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
18000d60:	01414204 	movi	r5,1288
18000d64:	01000084 	movi	r4,2
18000d68:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
18000d6c:	0009883a 	mov	r4,zero
18000d70:	80003640 	call	18000364 <IO_read>
18000d74:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
18000d78:	e0bffb0b 	ldhu	r2,-20(fp)
18000d7c:	100b883a 	mov	r5,r2
18000d80:	01060074 	movhi	r4,6145
18000d84:	21182904 	addi	r4,r4,24740
18000d88:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
18000d8c:	00000206 	br	18000d98 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000d90:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000d94:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000d98:	e0bffb0b 	ldhu	r2,-20(fp)
18000d9c:	108000d8 	cmpnei	r2,r2,3
18000da0:	103ffb1e 	bne	r2,zero,18000d90 <__alt_data_end+0xf8000d90>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
18000da4:	01060074 	movhi	r4,6145
18000da8:	21184704 	addi	r4,r4,24860
18000dac:	8002cb80 	call	18002cb8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
18000db0:	80024ec0 	call	180024ec <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000db4:	00000306 	br	18000dc4 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
18000db8:	80024ec0 	call	180024ec <UsbGetReportDesc>
		usleep(10*1000);
18000dbc:	0109c404 	movi	r4,10000
18000dc0:	8013bc00 	call	18013bc0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000dc4:	010000c4 	movi	r4,3
18000dc8:	80003640 	call	18000364 <IO_read>
18000dcc:	10bfffcc 	andi	r2,r2,65535
18000dd0:	1080040c 	andi	r2,r2,16
18000dd4:	103ff826 	beq	r2,zero,18000db8 <__alt_data_end+0xf8000db8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
18000dd8:	800282c0 	call	1800282c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
18000ddc:	01414184 	movi	r5,1286
18000de0:	01000084 	movi	r4,2
18000de4:	80002f40 	call	180002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
18000de8:	0009883a 	mov	r4,zero
18000dec:	80003640 	call	18000364 <IO_read>
18000df0:	10bfffcc 	andi	r2,r2,65535
18000df4:	100b883a 	mov	r5,r2
18000df8:	01060074 	movhi	r4,6145
18000dfc:	21185b04 	addi	r4,r4,24940
18000e00:	8002bbc0 	call	18002bbc <printf>

	IO_write(HPI_ADDR,0x0508);
18000e04:	01414204 	movi	r5,1288
18000e08:	01000084 	movi	r4,2
18000e0c:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
18000e10:	0009883a 	mov	r4,zero
18000e14:	80003640 	call	18000364 <IO_read>
18000e18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
18000e1c:	e0bffb0b 	ldhu	r2,-20(fp)
18000e20:	100b883a 	mov	r5,r2
18000e24:	01060074 	movhi	r4,6145
18000e28:	21186704 	addi	r4,r4,24988
18000e2c:	8002bbc0 	call	18002bbc <printf>
	while (usb_ctl_val != 0x03)
18000e30:	00000206 	br	18000e3c <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
18000e34:	80028b00 	call	180028b0 <UsbGetRetryCnt>
18000e38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
18000e3c:	e0bffb0b 	ldhu	r2,-20(fp)
18000e40:	108000d8 	cmpnei	r2,r2,3
18000e44:	103ffb1e 	bne	r2,zero,18000e34 <__alt_data_end+0xf8000e34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
18000e48:	01060074 	movhi	r4,6145
18000e4c:	21187304 	addi	r4,r4,25036
18000e50:	8002cb80 	call	18002cb8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
18000e54:	0109c404 	movi	r4,10000
18000e58:	8013bc00 	call	18013bc0 <usleep>
	while(1)
	{
		toggle++;
18000e5c:	e0bffb83 	ldbu	r2,-18(fp)
18000e60:	10800044 	addi	r2,r2,1
18000e64:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
18000e68:	01414004 	movi	r5,1280
18000e6c:	01000084 	movi	r4,2
18000e70:	80002f40 	call	180002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
18000e74:	01414704 	movi	r5,1308
18000e78:	0009883a 	mov	r4,zero
18000e7c:	80002f40 	call	180002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
18000e80:	e0bfff03 	ldbu	r2,-4(fp)
18000e84:	108003cc 	andi	r2,r2,15
18000e88:	100b883a 	mov	r5,r2
18000e8c:	0009883a 	mov	r4,zero
18000e90:	80002f40 	call	180002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
18000e94:	0140a444 	movi	r5,657
18000e98:	0009883a 	mov	r4,zero
18000e9c:	80002f40 	call	180002f4 <IO_write>
		if(toggle%2)
18000ea0:	e0bffb83 	ldbu	r2,-18(fp)
18000ea4:	1080004c 	andi	r2,r2,1
18000ea8:	10803fcc 	andi	r2,r2,255
18000eac:	10000426 	beq	r2,zero,18000ec0 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
18000eb0:	01400044 	movi	r5,1
18000eb4:	0009883a 	mov	r4,zero
18000eb8:	80002f40 	call	180002f4 <IO_write>
18000ebc:	00000306 	br	18000ecc <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
18000ec0:	01401044 	movi	r5,65
18000ec4:	0009883a 	mov	r4,zero
18000ec8:	80002f40 	call	180002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
18000ecc:	014004c4 	movi	r5,19
18000ed0:	0009883a 	mov	r4,zero
18000ed4:	80002f40 	call	180002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
18000ed8:	000b883a 	mov	r5,zero
18000edc:	0009883a 	mov	r4,zero
18000ee0:	80002f40 	call	180002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18000ee4:	01414004 	movi	r5,1280
18000ee8:	01006c04 	movi	r4,432
18000eec:	80018340 	call	18001834 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000ef0:	00002406 	br	18000f84 <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
18000ef4:	01414004 	movi	r5,1280
18000ef8:	01000084 	movi	r4,2
18000efc:	80002f40 	call	180002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
18000f00:	01414704 	movi	r5,1308
18000f04:	0009883a 	mov	r4,zero
18000f08:	80002f40 	call	180002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
18000f0c:	e0bfff03 	ldbu	r2,-4(fp)
18000f10:	108003cc 	andi	r2,r2,15
18000f14:	100b883a 	mov	r5,r2
18000f18:	0009883a 	mov	r4,zero
18000f1c:	80002f40 	call	180002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
18000f20:	0140a444 	movi	r5,657
18000f24:	0009883a 	mov	r4,zero
18000f28:	80002f40 	call	180002f4 <IO_write>
			if(toggle%2)
18000f2c:	e0bffb83 	ldbu	r2,-18(fp)
18000f30:	1080004c 	andi	r2,r2,1
18000f34:	10803fcc 	andi	r2,r2,255
18000f38:	10000426 	beq	r2,zero,18000f4c <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
18000f3c:	01400044 	movi	r5,1
18000f40:	0009883a 	mov	r4,zero
18000f44:	80002f40 	call	180002f4 <IO_write>
18000f48:	00000306 	br	18000f58 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
18000f4c:	01401044 	movi	r5,65
18000f50:	0009883a 	mov	r4,zero
18000f54:	80002f40 	call	180002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
18000f58:	014004c4 	movi	r5,19
18000f5c:	0009883a 	mov	r4,zero
18000f60:	80002f40 	call	180002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
18000f64:	000b883a 	mov	r5,zero
18000f68:	0009883a 	mov	r4,zero
18000f6c:	80002f40 	call	180002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18000f70:	01414004 	movi	r5,1280
18000f74:	01006c04 	movi	r4,432
18000f78:	80018340 	call	18001834 <UsbWrite>
			usleep(10*1000);
18000f7c:	0109c404 	movi	r4,10000
18000f80:	8013bc00 	call	18013bc0 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
18000f84:	010000c4 	movi	r4,3
18000f88:	80003640 	call	18000364 <IO_read>
18000f8c:	10bfffcc 	andi	r2,r2,65535
18000f90:	1080040c 	andi	r2,r2,16
18000f94:	103fd726 	beq	r2,zero,18000ef4 <__alt_data_end+0xf8000ef4>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
18000f98:	800282c0 	call	1800282c <UsbWaitTDListDone>
18000f9c:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
18000fa0:	01014784 	movi	r4,1310
18000fa4:	800188c0 	call	1800188c <UsbRead>
18000fa8:	10bfffcc 	andi	r2,r2,65535
18000fac:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
18000fb0:	e17ffd17 	ldw	r5,-12(fp)
18000fb4:	01060074 	movhi	r4,6145
18000fb8:	21188704 	addi	r4,r4,25116
18000fbc:	8002bbc0 	call	18002bbc <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
18000fc0:	00901c04 	movi	r2,16496
18000fc4:	e0fffd17 	ldw	r3,-12(fp)
18000fc8:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
18000fcc:	01003204 	movi	r4,200
18000fd0:	8013bc00 	call	18013bc0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
18000fd4:	d0a7870b 	ldhu	r2,-25060(gp)
18000fd8:	10bfffcc 	andi	r2,r2,65535
18000fdc:	1009883a 	mov	r4,r2
18000fe0:	800188c0 	call	1800188c <UsbRead>
18000fe4:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
18000fe8:	d0a7878b 	ldhu	r2,-25058(gp)
18000fec:	e0fffb0b 	ldhu	r3,-20(fp)
18000ff0:	1884703a 	and	r2,r3,r2
18000ff4:	10bfffcc 	andi	r2,r2,65535
18000ff8:	10003f1e 	bne	r2,zero,180010f8 <main+0xd2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
18000ffc:	e03ffbc5 	stb	zero,-17(fp)
18001000:	00000f06 	br	18001040 <main+0xc74>
			{
				usleep(5*1000);
18001004:	0104e204 	movi	r4,5000
18001008:	8013bc00 	call	18013bc0 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
1800100c:	d0a7870b 	ldhu	r2,-25060(gp)
18001010:	10bfffcc 	andi	r2,r2,65535
18001014:	1009883a 	mov	r4,r2
18001018:	800188c0 	call	1800188c <UsbRead>
1800101c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
18001020:	d0a7878b 	ldhu	r2,-25058(gp)
18001024:	e0fffb0b 	ldhu	r3,-20(fp)
18001028:	1884703a 	and	r2,r3,r2
1800102c:	10bfffcc 	andi	r2,r2,65535
18001030:	1000071e 	bne	r2,zero,18001050 <main+0xc84>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
18001034:	e0bffbc3 	ldbu	r2,-17(fp)
18001038:	10800044 	addi	r2,r2,1
1800103c:	e0bffbc5 	stb	r2,-17(fp)
18001040:	e0bffbc3 	ldbu	r2,-17(fp)
18001044:	108001f0 	cmpltui	r2,r2,7
18001048:	103fee1e 	bne	r2,zero,18001004 <__alt_data_end+0xf8001004>
1800104c:	00000106 	br	18001054 <main+0xc88>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
18001050:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
18001054:	d0a7878b 	ldhu	r2,-25058(gp)
18001058:	e0fffb0b 	ldhu	r3,-20(fp)
1800105c:	1884703a 	and	r2,r3,r2
18001060:	10bfffcc 	andi	r2,r2,65535
18001064:	1000241e 	bne	r2,zero,180010f8 <main+0xd2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
18001068:	01060074 	movhi	r4,6145
1800106c:	21189004 	addi	r4,r4,25152
18001070:	8002cb80 	call	18002cb8 <puts>
				printf("[INFO]: please insert again!!! \n");
18001074:	01060074 	movhi	r4,6145
18001078:	21189b04 	addi	r4,r4,25196
1800107c:	8002cb80 	call	18002cb8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
18001080:	00001d06 	br	180010f8 <main+0xd2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
18001084:	d0a7870b 	ldhu	r2,-25060(gp)
18001088:	10bfffcc 	andi	r2,r2,65535
1800108c:	1009883a 	mov	r4,r2
18001090:	800188c0 	call	1800188c <UsbRead>
18001094:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
18001098:	0104e204 	movi	r4,5000
1800109c:	8013bc00 	call	18013bc0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
180010a0:	d0a7870b 	ldhu	r2,-25060(gp)
180010a4:	10bfffcc 	andi	r2,r2,65535
180010a8:	1009883a 	mov	r4,r2
180010ac:	800188c0 	call	1800188c <UsbRead>
180010b0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
180010b4:	0104e204 	movi	r4,5000
180010b8:	8013bc00 	call	18013bc0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
180010bc:	d0a7870b 	ldhu	r2,-25060(gp)
180010c0:	10bfffcc 	andi	r2,r2,65535
180010c4:	1009883a 	mov	r4,r2
180010c8:	800188c0 	call	1800188c <UsbRead>
180010cc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
180010d0:	0104e204 	movi	r4,5000
180010d4:	8013bc00 	call	18013bc0 <usleep>

			if(usb_ctl_val & no_device)
180010d8:	d0a7878b 	ldhu	r2,-25058(gp)
180010dc:	e0fffb0b 	ldhu	r3,-20(fp)
180010e0:	1884703a 	and	r2,r3,r2
180010e4:	10bfffcc 	andi	r2,r2,65535
180010e8:	10000126 	beq	r2,zero,180010f0 <main+0xd24>
				goto USB_HOT_PLUG;
180010ec:	003cc206 	br	180003f8 <__alt_data_end+0xf80003f8>

			usleep(200);
180010f0:	01003204 	movi	r4,200
180010f4:	8013bc00 	call	18013bc0 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
180010f8:	d0a7878b 	ldhu	r2,-25058(gp)
180010fc:	e0fffb0b 	ldhu	r3,-20(fp)
18001100:	1884703a 	and	r2,r3,r2
18001104:	10bfffcc 	andi	r2,r2,65535
18001108:	103fde26 	beq	r2,zero,18001084 <__alt_data_end+0xf8001084>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
1800110c:	003f5306 	br	18000e5c <__alt_data_end+0xf8000e5c>

18001110 <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
18001110:	defffa04 	addi	sp,sp,-24
18001114:	dfc00515 	stw	ra,20(sp)
18001118:	df000415 	stw	fp,16(sp)
1800111c:	dc400315 	stw	r17,12(sp)
18001120:	dc000215 	stw	r16,8(sp)
18001124:	df000404 	addi	fp,sp,16
	printf("paletteTest\n");
18001128:	01060074 	movhi	r4,6145
1800112c:	2118a304 	addi	r4,r4,25228
18001130:	8002cb80 	call	18002cb8 <puts>
	textVGAColorClr();
18001134:	80012d00 	call	180012d0 <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
18001138:	00800044 	movi	r2,1
1800113c:	d8800015 	stw	r2,0(sp)
18001140:	000f883a 	mov	r7,zero
18001144:	000d883a 	mov	r6,zero
18001148:	000b883a 	mov	r5,zero
1800114c:	01060074 	movhi	r4,6145
18001150:	2118a604 	addi	r4,r4,25240
18001154:	80013700 	call	18001370 <textVGADrawColorText>
//	setColorPalette(0,0,0,15);
//	setColorPalette(1,15,0,0);
//	printf(" PALETTE 0 & 1\n");
//	printf(" %u %u\n", vga_ctrl->PALETTE[0]/2%4096, vga_ctrl->PALETTE[0]/8192);

	for (int i = 0; i < 100; i ++)
18001158:	e03ffd15 	stw	zero,-12(fp)
1800115c:	00005106 	br	180012a4 <paletteTest+0x194>
	{
		usleep (20000);
18001160:	01138804 	movi	r4,20000
18001164:	8013bc00 	call	18013bc0 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
18001168:	8002ce40 	call	18002ce4 <rand>
1800116c:	1007883a 	mov	r3,r2
18001170:	00a00034 	movhi	r2,32768
18001174:	108003c4 	addi	r2,r2,15
18001178:	1884703a 	and	r2,r3,r2
1800117c:	1000040e 	bge	r2,zero,18001190 <paletteTest+0x80>
18001180:	10bfffc4 	addi	r2,r2,-1
18001184:	00fffc04 	movi	r3,-16
18001188:	10c4b03a 	or	r2,r2,r3
1800118c:	10800044 	addi	r2,r2,1
18001190:	14003fcc 	andi	r16,r2,255
18001194:	8002ce40 	call	18002ce4 <rand>
18001198:	1007883a 	mov	r3,r2
1800119c:	00a00034 	movhi	r2,32768
180011a0:	108003c4 	addi	r2,r2,15
180011a4:	1884703a 	and	r2,r3,r2
180011a8:	1000040e 	bge	r2,zero,180011bc <paletteTest+0xac>
180011ac:	10bfffc4 	addi	r2,r2,-1
180011b0:	00fffc04 	movi	r3,-16
180011b4:	10c4b03a 	or	r2,r2,r3
180011b8:	10800044 	addi	r2,r2,1
180011bc:	14403fcc 	andi	r17,r2,255
180011c0:	8002ce40 	call	18002ce4 <rand>
180011c4:	1007883a 	mov	r3,r2
180011c8:	00a00034 	movhi	r2,32768
180011cc:	108003c4 	addi	r2,r2,15
180011d0:	1884703a 	and	r2,r3,r2
180011d4:	1000040e 	bge	r2,zero,180011e8 <paletteTest+0xd8>
180011d8:	10bfffc4 	addi	r2,r2,-1
180011dc:	00fffc04 	movi	r3,-16
180011e0:	10c4b03a 	or	r2,r2,r3
180011e4:	10800044 	addi	r2,r2,1
180011e8:	10803fcc 	andi	r2,r2,255
180011ec:	100f883a 	mov	r7,r2
180011f0:	880d883a 	mov	r6,r17
180011f4:	800b883a 	mov	r5,r16
180011f8:	0009883a 	mov	r4,zero
180011fc:	800148c0 	call	1800148c <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
18001200:	8002ce40 	call	18002ce4 <rand>
18001204:	1007883a 	mov	r3,r2
18001208:	00a00034 	movhi	r2,32768
1800120c:	108003c4 	addi	r2,r2,15
18001210:	1884703a 	and	r2,r3,r2
18001214:	1000040e 	bge	r2,zero,18001228 <paletteTest+0x118>
18001218:	10bfffc4 	addi	r2,r2,-1
1800121c:	00fffc04 	movi	r3,-16
18001220:	10c4b03a 	or	r2,r2,r3
18001224:	10800044 	addi	r2,r2,1
18001228:	14003fcc 	andi	r16,r2,255
1800122c:	8002ce40 	call	18002ce4 <rand>
18001230:	1007883a 	mov	r3,r2
18001234:	00a00034 	movhi	r2,32768
18001238:	108003c4 	addi	r2,r2,15
1800123c:	1884703a 	and	r2,r3,r2
18001240:	1000040e 	bge	r2,zero,18001254 <paletteTest+0x144>
18001244:	10bfffc4 	addi	r2,r2,-1
18001248:	00fffc04 	movi	r3,-16
1800124c:	10c4b03a 	or	r2,r2,r3
18001250:	10800044 	addi	r2,r2,1
18001254:	14403fcc 	andi	r17,r2,255
18001258:	8002ce40 	call	18002ce4 <rand>
1800125c:	1007883a 	mov	r3,r2
18001260:	00a00034 	movhi	r2,32768
18001264:	108003c4 	addi	r2,r2,15
18001268:	1884703a 	and	r2,r3,r2
1800126c:	1000040e 	bge	r2,zero,18001280 <paletteTest+0x170>
18001270:	10bfffc4 	addi	r2,r2,-1
18001274:	00fffc04 	movi	r3,-16
18001278:	10c4b03a 	or	r2,r2,r3
1800127c:	10800044 	addi	r2,r2,1
18001280:	10803fcc 	andi	r2,r2,255
18001284:	100f883a 	mov	r7,r2
18001288:	880d883a 	mov	r6,r17
1800128c:	800b883a 	mov	r5,r16
18001290:	01000044 	movi	r4,1
18001294:	800148c0 	call	1800148c <setColorPalette>
//	setColorPalette(0,0,0,15);
//	setColorPalette(1,15,0,0);
//	printf(" PALETTE 0 & 1\n");
//	printf(" %u %u\n", vga_ctrl->PALETTE[0]/2%4096, vga_ctrl->PALETTE[0]/8192);

	for (int i = 0; i < 100; i ++)
18001298:	e0bffd17 	ldw	r2,-12(fp)
1800129c:	10800044 	addi	r2,r2,1
180012a0:	e0bffd15 	stw	r2,-12(fp)
180012a4:	e0bffd17 	ldw	r2,-12(fp)
180012a8:	10801910 	cmplti	r2,r2,100
180012ac:	103fac1e 	bne	r2,zero,18001160 <__alt_data_end+0xf8001160>

	}
//	printf(" PALETTE 0 & 1\n");
//	printf(" %u %u\n", vga_ctrl->PALETTE[0]/2%4096, vga_ctrl->PALETTE[0]/8192);

}
180012b0:	0001883a 	nop
180012b4:	e6fffe04 	addi	sp,fp,-8
180012b8:	dfc00317 	ldw	ra,12(sp)
180012bc:	df000217 	ldw	fp,8(sp)
180012c0:	dc400117 	ldw	r17,4(sp)
180012c4:	dc000017 	ldw	r16,0(sp)
180012c8:	dec00404 	addi	sp,sp,16
180012cc:	f800283a 	ret

180012d0 <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
180012d0:	defffc04 	addi	sp,sp,-16
180012d4:	dfc00315 	stw	ra,12(sp)
180012d8:	df000215 	stw	fp,8(sp)
180012dc:	df000204 	addi	fp,sp,8
	printf("  textVGAColorClr\n");
180012e0:	01060074 	movhi	r4,6145
180012e4:	2118b204 	addi	r4,r4,25288
180012e8:	8002cb80 	call	18002cb8 <puts>
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
180012ec:	e03ffe15 	stw	zero,-8(fp)
180012f0:	00000706 	br	18001310 <textVGAColorClr+0x40>
	{
		vga_ctrl->VRAM[i] = 0x00;
180012f4:	d0e00117 	ldw	r3,-32764(gp)
180012f8:	e0bffe17 	ldw	r2,-8(fp)
180012fc:	1885883a 	add	r2,r3,r2
18001300:	10000005 	stb	zero,0(r2)
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	printf("  textVGAColorClr\n");
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
18001304:	e0bffe17 	ldw	r2,-8(fp)
18001308:	10800044 	addi	r2,r2,1
1800130c:	e0bffe15 	stw	r2,-8(fp)
18001310:	e0bffe17 	ldw	r2,-8(fp)
18001314:	1084b010 	cmplti	r2,r2,4800
18001318:	103ff61e 	bne	r2,zero,180012f4 <__alt_data_end+0xf80012f4>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
	for (int i = 0; i<8; i++)
1800131c:	e03fff15 	stw	zero,-4(fp)
18001320:	00000a06 	br	1800134c <textVGAColorClr+0x7c>
	{
		vga_ctrl->PALETTE[i] = 0x00000000;
18001324:	d0e00117 	ldw	r3,-32764(gp)
18001328:	e0bfff17 	ldw	r2,-4(fp)
1800132c:	10820004 	addi	r2,r2,2048
18001330:	1085883a 	add	r2,r2,r2
18001334:	1085883a 	add	r2,r2,r2
18001338:	1885883a 	add	r2,r3,r2
1800133c:	10000015 	stw	zero,0(r2)
	printf("  textVGAColorClr\n");
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
	for (int i = 0; i<8; i++)
18001340:	e0bfff17 	ldw	r2,-4(fp)
18001344:	10800044 	addi	r2,r2,1
18001348:	e0bfff15 	stw	r2,-4(fp)
1800134c:	e0bfff17 	ldw	r2,-4(fp)
18001350:	10800210 	cmplti	r2,r2,8
18001354:	103ff31e 	bne	r2,zero,18001324 <__alt_data_end+0xf8001324>
	{
		vga_ctrl->PALETTE[i] = 0x00000000;
	}
}
18001358:	0001883a 	nop
1800135c:	e037883a 	mov	sp,fp
18001360:	dfc00117 	ldw	ra,4(sp)
18001364:	df000017 	ldw	fp,0(sp)
18001368:	dec00204 	addi	sp,sp,8
1800136c:	f800283a 	ret

18001370 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
18001370:	defff704 	addi	sp,sp,-36
18001374:	dfc00815 	stw	ra,32(sp)
18001378:	df000715 	stw	fp,28(sp)
1800137c:	dc000615 	stw	r16,24(sp)
18001380:	df000704 	addi	fp,sp,28
18001384:	e13ffa15 	stw	r4,-24(fp)
18001388:	e17ffb15 	stw	r5,-20(fp)
1800138c:	e1bffc15 	stw	r6,-16(fp)
18001390:	3807883a 	mov	r3,r7
18001394:	e0800217 	ldw	r2,8(fp)
18001398:	e0fffd05 	stb	r3,-12(fp)
1800139c:	e0bffe05 	stb	r2,-8(fp)
	printf("  textVGADrawColorText\n");
180013a0:	01060074 	movhi	r4,6145
180013a4:	2118b704 	addi	r4,r4,25308
180013a8:	8002cb80 	call	18002cb8 <puts>
	int i = 0;
180013ac:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
180013b0:	00002706 	br	18001450 <textVGADrawColorText+0xe0>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
180013b4:	d4200117 	ldw	r16,-32764(gp)
180013b8:	01401404 	movi	r5,80
180013bc:	e13ffc17 	ldw	r4,-16(fp)
180013c0:	8002b640 	call	18002b64 <__mulsi3>
180013c4:	1007883a 	mov	r3,r2
180013c8:	e0bffb17 	ldw	r2,-20(fp)
180013cc:	1887883a 	add	r3,r3,r2
180013d0:	e0bff917 	ldw	r2,-28(fp)
180013d4:	1885883a 	add	r2,r3,r2
180013d8:	1085883a 	add	r2,r2,r2
180013dc:	1009883a 	mov	r4,r2
180013e0:	e0bffe03 	ldbu	r2,-8(fp)
180013e4:	1004913a 	slli	r2,r2,4
180013e8:	1007883a 	mov	r3,r2
180013ec:	e0bffd03 	ldbu	r2,-12(fp)
180013f0:	1884b03a 	or	r2,r3,r2
180013f4:	1007883a 	mov	r3,r2
180013f8:	8105883a 	add	r2,r16,r4
180013fc:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
18001400:	d4200117 	ldw	r16,-32764(gp)
18001404:	01401404 	movi	r5,80
18001408:	e13ffc17 	ldw	r4,-16(fp)
1800140c:	8002b640 	call	18002b64 <__mulsi3>
18001410:	1007883a 	mov	r3,r2
18001414:	e0bffb17 	ldw	r2,-20(fp)
18001418:	1887883a 	add	r3,r3,r2
1800141c:	e0bff917 	ldw	r2,-28(fp)
18001420:	1885883a 	add	r2,r3,r2
18001424:	1085883a 	add	r2,r2,r2
18001428:	10800044 	addi	r2,r2,1
1800142c:	e0fff917 	ldw	r3,-28(fp)
18001430:	e13ffa17 	ldw	r4,-24(fp)
18001434:	20c7883a 	add	r3,r4,r3
18001438:	18c00003 	ldbu	r3,0(r3)
1800143c:	8085883a 	add	r2,r16,r2
18001440:	10c00005 	stb	r3,0(r2)
		i++;
18001444:	e0bff917 	ldw	r2,-28(fp)
18001448:	10800044 	addi	r2,r2,1
1800144c:	e0bff915 	stw	r2,-28(fp)

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	printf("  textVGADrawColorText\n");
	int i = 0;
	while (str[i]!=0)
18001450:	e0bff917 	ldw	r2,-28(fp)
18001454:	e0fffa17 	ldw	r3,-24(fp)
18001458:	1885883a 	add	r2,r3,r2
1800145c:	10800003 	ldbu	r2,0(r2)
18001460:	10803fcc 	andi	r2,r2,255
18001464:	1080201c 	xori	r2,r2,128
18001468:	10bfe004 	addi	r2,r2,-128
1800146c:	103fd11e 	bne	r2,zero,180013b4 <__alt_data_end+0xf80013b4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
18001470:	0001883a 	nop
18001474:	e6ffff04 	addi	sp,fp,-4
18001478:	dfc00217 	ldw	ra,8(sp)
1800147c:	df000117 	ldw	fp,4(sp)
18001480:	dc000017 	ldw	r16,0(sp)
18001484:	dec00304 	addi	sp,sp,12
18001488:	f800283a 	ret

1800148c <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
1800148c:	defff904 	addi	sp,sp,-28
18001490:	df000615 	stw	fp,24(sp)
18001494:	df000604 	addi	fp,sp,24
18001498:	2011883a 	mov	r8,r4
1800149c:	2809883a 	mov	r4,r5
180014a0:	3007883a 	mov	r3,r6
180014a4:	3805883a 	mov	r2,r7
180014a8:	e23ffc05 	stb	r8,-16(fp)
180014ac:	e13ffd05 	stb	r4,-12(fp)
180014b0:	e0fffe05 	stb	r3,-8(fp)
180014b4:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	int color_word_index;  // from 0 to 7
	int inside_index;	   // the index inside a word, from 0 to 1
	color_word_index = color / 2;
180014b8:	e0bffc03 	ldbu	r2,-16(fp)
180014bc:	1004d07a 	srli	r2,r2,1
180014c0:	10803fcc 	andi	r2,r2,255
180014c4:	e0bffa15 	stw	r2,-24(fp)
	inside_index = color % 2;
180014c8:	e0bffc03 	ldbu	r2,-16(fp)
180014cc:	1080004c 	andi	r2,r2,1
180014d0:	e0bffb15 	stw	r2,-20(fp)
	if (0 == inside_index)
180014d4:	e0bffb17 	ldw	r2,-20(fp)
180014d8:	10001b1e 	bne	r2,zero,18001548 <setColorPalette+0xbc>
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE000) | (red << 9 | green << 5 | blue << 1);
180014dc:	d1200117 	ldw	r4,-32764(gp)
180014e0:	d0e00117 	ldw	r3,-32764(gp)
180014e4:	e0bffa17 	ldw	r2,-24(fp)
180014e8:	10820004 	addi	r2,r2,2048
180014ec:	1085883a 	add	r2,r2,r2
180014f0:	1085883a 	add	r2,r2,r2
180014f4:	1885883a 	add	r2,r3,r2
180014f8:	10c00017 	ldw	r3,0(r2)
180014fc:	00808034 	movhi	r2,512
18001500:	10b80004 	addi	r2,r2,-8192
18001504:	1886703a 	and	r3,r3,r2
18001508:	e0bffd03 	ldbu	r2,-12(fp)
1800150c:	100a927a 	slli	r5,r2,9
18001510:	e0bffe03 	ldbu	r2,-8(fp)
18001514:	1004917a 	slli	r2,r2,5
18001518:	288ab03a 	or	r5,r5,r2
1800151c:	e0bfff03 	ldbu	r2,-4(fp)
18001520:	1085883a 	add	r2,r2,r2
18001524:	2884b03a 	or	r2,r5,r2
18001528:	1886b03a 	or	r3,r3,r2
1800152c:	e0bffa17 	ldw	r2,-24(fp)
18001530:	10820004 	addi	r2,r2,2048
18001534:	1085883a 	add	r2,r2,r2
18001538:	1085883a 	add	r2,r2,r2
1800153c:	2085883a 	add	r2,r4,r2
18001540:	10c00015 	stw	r3,0(r2)
	else
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE) | (red << 21 | green << 17 | blue << 13);
}
18001544:	00001806 	br	180015a8 <setColorPalette+0x11c>
	color_word_index = color / 2;
	inside_index = color % 2;
	if (0 == inside_index)
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE000) | (red << 9 | green << 5 | blue << 1);
	else
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE) | (red << 21 | green << 17 | blue << 13);
18001548:	d1200117 	ldw	r4,-32764(gp)
1800154c:	d0e00117 	ldw	r3,-32764(gp)
18001550:	e0bffa17 	ldw	r2,-24(fp)
18001554:	10820004 	addi	r2,r2,2048
18001558:	1085883a 	add	r2,r2,r2
1800155c:	1085883a 	add	r2,r2,r2
18001560:	1885883a 	add	r2,r3,r2
18001564:	10800017 	ldw	r2,0(r2)
18001568:	1087ff8c 	andi	r2,r2,8190
1800156c:	e0fffd03 	ldbu	r3,-12(fp)
18001570:	180a957a 	slli	r5,r3,21
18001574:	e0fffe03 	ldbu	r3,-8(fp)
18001578:	1806947a 	slli	r3,r3,17
1800157c:	28cab03a 	or	r5,r5,r3
18001580:	e0ffff03 	ldbu	r3,-4(fp)
18001584:	1806937a 	slli	r3,r3,13
18001588:	28c6b03a 	or	r3,r5,r3
1800158c:	10c6b03a 	or	r3,r2,r3
18001590:	e0bffa17 	ldw	r2,-24(fp)
18001594:	10820004 	addi	r2,r2,2048
18001598:	1085883a 	add	r2,r2,r2
1800159c:	1085883a 	add	r2,r2,r2
180015a0:	2085883a 	add	r2,r4,r2
180015a4:	10c00015 	stw	r3,0(r2)
}
180015a8:	0001883a 	nop
180015ac:	e037883a 	mov	sp,fp
180015b0:	df000017 	ldw	fp,0(sp)
180015b4:	dec00104 	addi	sp,sp,4
180015b8:	f800283a 	ret

180015bc <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
180015bc:	deffe004 	addi	sp,sp,-128
180015c0:	dfc01f15 	stw	ra,124(sp)
180015c4:	df001e15 	stw	fp,120(sp)
180015c8:	dcc01d15 	stw	r19,116(sp)
180015cc:	dc801c15 	stw	r18,112(sp)
180015d0:	dc401b15 	stw	r17,108(sp)
180015d4:	dc001a15 	stw	r16,104(sp)
180015d8:	df001e04 	addi	fp,sp,120
	printf("textVGAColorScreenSaver\n");
180015dc:	01060074 	movhi	r4,6145
180015e0:	2118bd04 	addi	r4,r4,25332
180015e4:	8002cb80 	call	18002cb8 <puts>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
180015e8:	80012d00 	call	180012d0 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
180015ec:	e03fe515 	stw	zero,-108(fp)
180015f0:	00002806 	br	18001694 <textVGAColorScreenSaver+0xd8>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
180015f4:	e0bfe517 	ldw	r2,-108(fp)
180015f8:	14403fcc 	andi	r17,r2,255
180015fc:	04060074 	movhi	r16,6145
18001600:	841a1504 	addi	r16,r16,26708
18001604:	e0bfe517 	ldw	r2,-108(fp)
18001608:	014005c4 	movi	r5,23
1800160c:	1009883a 	mov	r4,r2
18001610:	8002b640 	call	18002b64 <__mulsi3>
18001614:	8085883a 	add	r2,r16,r2
18001618:	10800504 	addi	r2,r2,20
1800161c:	10800003 	ldbu	r2,0(r2)
18001620:	14803fcc 	andi	r18,r2,255
18001624:	04060074 	movhi	r16,6145
18001628:	841a1504 	addi	r16,r16,26708
1800162c:	e0bfe517 	ldw	r2,-108(fp)
18001630:	014005c4 	movi	r5,23
18001634:	1009883a 	mov	r4,r2
18001638:	8002b640 	call	18002b64 <__mulsi3>
1800163c:	8085883a 	add	r2,r16,r2
18001640:	10800544 	addi	r2,r2,21
18001644:	10800003 	ldbu	r2,0(r2)
18001648:	14c03fcc 	andi	r19,r2,255
1800164c:	04060074 	movhi	r16,6145
18001650:	841a1504 	addi	r16,r16,26708
18001654:	e0bfe517 	ldw	r2,-108(fp)
18001658:	014005c4 	movi	r5,23
1800165c:	1009883a 	mov	r4,r2
18001660:	8002b640 	call	18002b64 <__mulsi3>
18001664:	8085883a 	add	r2,r16,r2
18001668:	10800584 	addi	r2,r2,22
1800166c:	10800003 	ldbu	r2,0(r2)
18001670:	10803fcc 	andi	r2,r2,255
18001674:	100f883a 	mov	r7,r2
18001678:	980d883a 	mov	r6,r19
1800167c:	900b883a 	mov	r5,r18
18001680:	8809883a 	mov	r4,r17
18001684:	800148c0 	call	1800148c <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
18001688:	e0bfe517 	ldw	r2,-108(fp)
1800168c:	10800044 	addi	r2,r2,1
18001690:	e0bfe515 	stw	r2,-108(fp)
18001694:	e0bfe517 	ldw	r2,-108(fp)
18001698:	10800410 	cmplti	r2,r2,16
1800169c:	103fd51e 	bne	r2,zero,180015f4 <__alt_data_end+0xf80015f4>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
180016a0:	8002ce40 	call	18002ce4 <rand>
180016a4:	1007883a 	mov	r3,r2
180016a8:	00a00034 	movhi	r2,32768
180016ac:	108003c4 	addi	r2,r2,15
180016b0:	1884703a 	and	r2,r3,r2
180016b4:	1000040e 	bge	r2,zero,180016c8 <textVGAColorScreenSaver+0x10c>
180016b8:	10bfffc4 	addi	r2,r2,-1
180016bc:	00fffc04 	movi	r3,-16
180016c0:	10c4b03a 	or	r2,r2,r3
180016c4:	10800044 	addi	r2,r2,1
180016c8:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
180016cc:	8002ce40 	call	18002ce4 <rand>
180016d0:	1007883a 	mov	r3,r2
180016d4:	00a00034 	movhi	r2,32768
180016d8:	108003c4 	addi	r2,r2,15
180016dc:	1884703a 	and	r2,r3,r2
180016e0:	1000040e 	bge	r2,zero,180016f4 <textVGAColorScreenSaver+0x138>
180016e4:	10bfffc4 	addi	r2,r2,-1
180016e8:	00fffc04 	movi	r3,-16
180016ec:	10c4b03a 	or	r2,r2,r3
180016f0:	10800044 	addi	r2,r2,1
180016f4:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
180016f8:	00001606 	br	18001754 <textVGAColorScreenSaver+0x198>
		{
			fg = rand() % 16;
180016fc:	8002ce40 	call	18002ce4 <rand>
18001700:	1007883a 	mov	r3,r2
18001704:	00a00034 	movhi	r2,32768
18001708:	108003c4 	addi	r2,r2,15
1800170c:	1884703a 	and	r2,r3,r2
18001710:	1000040e 	bge	r2,zero,18001724 <textVGAColorScreenSaver+0x168>
18001714:	10bfffc4 	addi	r2,r2,-1
18001718:	00fffc04 	movi	r3,-16
1800171c:	10c4b03a 	or	r2,r2,r3
18001720:	10800044 	addi	r2,r2,1
18001724:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
18001728:	8002ce40 	call	18002ce4 <rand>
1800172c:	1007883a 	mov	r3,r2
18001730:	00a00034 	movhi	r2,32768
18001734:	108003c4 	addi	r2,r2,15
18001738:	1884703a 	and	r2,r3,r2
1800173c:	1000040e 	bge	r2,zero,18001750 <textVGAColorScreenSaver+0x194>
18001740:	10bfffc4 	addi	r2,r2,-1
18001744:	00fffc04 	movi	r3,-16
18001748:	10c4b03a 	or	r2,r2,r3
1800174c:	10800044 	addi	r2,r2,1
18001750:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
18001754:	e0ffe317 	ldw	r3,-116(fp)
18001758:	e0bfe417 	ldw	r2,-112(fp)
1800175c:	18bfe726 	beq	r3,r2,180016fc <__alt_data_end+0xf80016fc>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
18001760:	014005c4 	movi	r5,23
18001764:	e13fe317 	ldw	r4,-116(fp)
18001768:	8002b640 	call	18002b64 <__mulsi3>
1800176c:	1007883a 	mov	r3,r2
18001770:	00860074 	movhi	r2,6145
18001774:	109a1504 	addi	r2,r2,26708
18001778:	18a1883a 	add	r16,r3,r2
1800177c:	014005c4 	movi	r5,23
18001780:	e13fe417 	ldw	r4,-112(fp)
18001784:	8002b640 	call	18002b64 <__mulsi3>
18001788:	1007883a 	mov	r3,r2
1800178c:	00860074 	movhi	r2,6145
18001790:	109a1504 	addi	r2,r2,26708
18001794:	1887883a 	add	r3,r3,r2
18001798:	e0bfe804 	addi	r2,fp,-96
1800179c:	180f883a 	mov	r7,r3
180017a0:	800d883a 	mov	r6,r16
180017a4:	01460074 	movhi	r5,6145
180017a8:	2958c304 	addi	r5,r5,25356
180017ac:	1009883a 	mov	r4,r2
180017b0:	8002da00 	call	18002da0 <sprintf>
		x = rand() % (80-strlen(color_string));
180017b4:	8002ce40 	call	18002ce4 <rand>
180017b8:	1021883a 	mov	r16,r2
180017bc:	e0bfe804 	addi	r2,fp,-96
180017c0:	1009883a 	mov	r4,r2
180017c4:	8002e0c0 	call	18002e0c <strlen>
180017c8:	1007883a 	mov	r3,r2
180017cc:	00801404 	movi	r2,80
180017d0:	10c5c83a 	sub	r2,r2,r3
180017d4:	100b883a 	mov	r5,r2
180017d8:	8009883a 	mov	r4,r16
180017dc:	8002b0c0 	call	18002b0c <__umodsi3>
180017e0:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
180017e4:	8002ce40 	call	18002ce4 <rand>
180017e8:	01400784 	movi	r5,30
180017ec:	1009883a 	mov	r4,r2
180017f0:	8002a340 	call	18002a34 <__modsi3>
180017f4:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
180017f8:	e0bfe417 	ldw	r2,-112(fp)
180017fc:	11003fcc 	andi	r4,r2,255
18001800:	e0bfe317 	ldw	r2,-116(fp)
18001804:	10803fcc 	andi	r2,r2,255
18001808:	e0ffe804 	addi	r3,fp,-96
1800180c:	d8800015 	stw	r2,0(sp)
18001810:	200f883a 	mov	r7,r4
18001814:	e1bfe717 	ldw	r6,-100(fp)
18001818:	e17fe617 	ldw	r5,-104(fp)
1800181c:	1809883a 	mov	r4,r3
18001820:	80013700 	call	18001370 <textVGADrawColorText>
		usleep (100000);
18001824:	010000b4 	movhi	r4,2
18001828:	2121a804 	addi	r4,r4,-31072
1800182c:	8013bc00 	call	18013bc0 <usleep>
	}
18001830:	003f9b06 	br	180016a0 <__alt_data_end+0xf80016a0>

18001834 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
18001834:	defffc04 	addi	sp,sp,-16
18001838:	dfc00315 	stw	ra,12(sp)
1800183c:	df000215 	stw	fp,8(sp)
18001840:	df000204 	addi	fp,sp,8
18001844:	2007883a 	mov	r3,r4
18001848:	2805883a 	mov	r2,r5
1800184c:	e0fffe0d 	sth	r3,-8(fp)
18001850:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
18001854:	e0bffe0b 	ldhu	r2,-8(fp)
18001858:	100b883a 	mov	r5,r2
1800185c:	01000084 	movi	r4,2
18001860:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA, Data);
18001864:	e0bfff0b 	ldhu	r2,-4(fp)
18001868:	100b883a 	mov	r5,r2
1800186c:	0009883a 	mov	r4,zero
18001870:	80002f40 	call	180002f4 <IO_write>
}
18001874:	0001883a 	nop
18001878:	e037883a 	mov	sp,fp
1800187c:	dfc00117 	ldw	ra,4(sp)
18001880:	df000017 	ldw	fp,0(sp)
18001884:	dec00204 	addi	sp,sp,8
18001888:	f800283a 	ret

1800188c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
1800188c:	defffc04 	addi	sp,sp,-16
18001890:	dfc00315 	stw	ra,12(sp)
18001894:	df000215 	stw	fp,8(sp)
18001898:	df000204 	addi	fp,sp,8
1800189c:	2005883a 	mov	r2,r4
180018a0:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	alt_u16 temp;
	IO_write(HPI_ADDR, Address);
180018a4:	e0bfff0b 	ldhu	r2,-4(fp)
180018a8:	100b883a 	mov	r5,r2
180018ac:	01000084 	movi	r4,2
180018b0:	80002f40 	call	180002f4 <IO_write>
	temp = IO_read(HPI_DATA);
180018b4:	0009883a 	mov	r4,zero
180018b8:	80003640 	call	18000364 <IO_read>
180018bc:	e0bffe0d 	sth	r2,-8(fp)
	return temp;
180018c0:	e0bffe0b 	ldhu	r2,-8(fp)
}
180018c4:	e037883a 	mov	sp,fp
180018c8:	dfc00117 	ldw	ra,4(sp)
180018cc:	df000017 	ldw	fp,0(sp)
180018d0:	dec00204 	addi	sp,sp,8
180018d4:	f800283a 	ret

180018d8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
180018d8:	defffe04 	addi	sp,sp,-8
180018dc:	dfc00115 	stw	ra,4(sp)
180018e0:	df000015 	stw	fp,0(sp)
180018e4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
180018e8:	017e9414 	movui	r5,64080
180018ec:	01000044 	movi	r4,1
180018f0:	80002f40 	call	180002f4 <IO_write>
	usleep(100000);
180018f4:	010000b4 	movhi	r4,2
180018f8:	2121a804 	addi	r4,r4,-31072
180018fc:	8013bc00 	call	18013bc0 <usleep>
	printf("[USB INIT]:reset finished!\n");
18001900:	01060074 	movhi	r4,6145
18001904:	2118cc04 	addi	r4,r4,25392
18001908:	8002cb80 	call	18002cb8 <puts>

	usleep(500000);
1800190c:	01000234 	movhi	r4,8
18001910:	21284804 	addi	r4,r4,-24288
18001914:	8013bc00 	call	18013bc0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
18001918:	01060074 	movhi	r4,6145
1800191c:	2118d304 	addi	r4,r4,25420
18001920:	8002cb80 	call	18002cb8 <puts>
	IO_read(HPI_MAILBOX);
18001924:	01000044 	movi	r4,1
18001928:	80003640 	call	18000364 <IO_read>
	IO_read(HPI_STATUS);
1800192c:	010000c4 	movi	r4,3
18001930:	80003640 	call	18000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
18001934:	01005104 	movi	r4,324
18001938:	800188c0 	call	1800188c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1800193c:	000b883a 	mov	r5,zero
18001940:	01005104 	movi	r4,324
18001944:	80018340 	call	18001834 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
18001948:	01005204 	movi	r4,328
1800194c:	800188c0 	call	1800188c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
18001950:	000b883a 	mov	r5,zero
18001954:	01005204 	movi	r4,328
18001958:	80018340 	call	18001834 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1800195c:	017fffd4 	movui	r5,65535
18001960:	01302414 	movui	r4,49296
18001964:	80018340 	call	18001834 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
18001968:	017fffd4 	movui	r5,65535
1800196c:	01302c14 	movui	r4,49328
18001970:	80018340 	call	18001834 <UsbWrite>
}
18001974:	0001883a 	nop
18001978:	e037883a 	mov	sp,fp
1800197c:	dfc00117 	ldw	ra,4(sp)
18001980:	df000017 	ldw	fp,0(sp)
18001984:	dec00204 	addi	sp,sp,8
18001988:	f800283a 	ret

1800198c <UsbSetAddress>:


void UsbSetAddress()
{
1800198c:	defffe04 	addi	sp,sp,-8
18001990:	dfc00115 	stw	ra,4(sp)
18001994:	df000015 	stw	fp,0(sp)
18001998:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1800199c:	01414004 	movi	r5,1280
180019a0:	01000084 	movi	r4,2
180019a4:	80002f40 	call	180002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
180019a8:	01414304 	movi	r5,1292
180019ac:	0009883a 	mov	r4,zero
180019b0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
180019b4:	01400204 	movi	r5,8
180019b8:	0009883a 	mov	r4,zero
180019bc:	80002f40 	call	180002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
180019c0:	01403404 	movi	r5,208
180019c4:	0009883a 	mov	r4,zero
180019c8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
180019cc:	01400044 	movi	r5,1
180019d0:	0009883a 	mov	r4,zero
180019d4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
180019d8:	014004c4 	movi	r5,19
180019dc:	0009883a 	mov	r4,zero
180019e0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
180019e4:	01414504 	movi	r5,1300
180019e8:	0009883a 	mov	r4,zero
180019ec:	80002f40 	call	180002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
180019f0:	01414004 	movi	r5,1280
180019f4:	0009883a 	mov	r4,zero
180019f8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
180019fc:	01400084 	movi	r5,2
18001a00:	0009883a 	mov	r4,zero
18001a04:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18001a08:	000b883a 	mov	r5,zero
18001a0c:	0009883a 	mov	r4,zero
18001a10:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18001a14:	000b883a 	mov	r5,zero
18001a18:	0009883a 	mov	r4,zero
18001a1c:	80002f40 	call	180002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
18001a20:	000b883a 	mov	r5,zero
18001a24:	0009883a 	mov	r4,zero
18001a28:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
18001a2c:	000b883a 	mov	r5,zero
18001a30:	0009883a 	mov	r4,zero
18001a34:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
18001a38:	01402404 	movi	r5,144
18001a3c:	0009883a 	mov	r4,zero
18001a40:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
18001a44:	01401044 	movi	r5,65
18001a48:	0009883a 	mov	r4,zero
18001a4c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001a50:	014004c4 	movi	r5,19
18001a54:	0009883a 	mov	r4,zero
18001a58:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18001a5c:	000b883a 	mov	r5,zero
18001a60:	0009883a 	mov	r4,zero
18001a64:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18001a68:	01414004 	movi	r5,1280
18001a6c:	01006c04 	movi	r4,432
18001a70:	80018340 	call	18001834 <UsbWrite>
}
18001a74:	0001883a 	nop
18001a78:	e037883a 	mov	sp,fp
18001a7c:	dfc00117 	ldw	ra,4(sp)
18001a80:	df000017 	ldw	fp,0(sp)
18001a84:	dec00204 	addi	sp,sp,8
18001a88:	f800283a 	ret

18001a8c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
18001a8c:	defffe04 	addi	sp,sp,-8
18001a90:	dfc00115 	stw	ra,4(sp)
18001a94:	df000015 	stw	fp,0(sp)
18001a98:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
18001a9c:	01414004 	movi	r5,1280
18001aa0:	01000084 	movi	r4,2
18001aa4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
18001aa8:	01414304 	movi	r5,1292
18001aac:	0009883a 	mov	r4,zero
18001ab0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
18001ab4:	01400204 	movi	r5,8
18001ab8:	0009883a 	mov	r4,zero
18001abc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
18001ac0:	0140b404 	movi	r5,720
18001ac4:	0009883a 	mov	r4,zero
18001ac8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
18001acc:	01400044 	movi	r5,1
18001ad0:	0009883a 	mov	r4,zero
18001ad4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001ad8:	014004c4 	movi	r5,19
18001adc:	0009883a 	mov	r4,zero
18001ae0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
18001ae4:	01414504 	movi	r5,1300
18001ae8:	0009883a 	mov	r4,zero
18001aec:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
18001af0:	0141a004 	movi	r5,1664
18001af4:	0009883a 	mov	r4,zero
18001af8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
18001afc:	01404004 	movi	r5,256
18001b00:	0009883a 	mov	r4,zero
18001b04:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18001b08:	000b883a 	mov	r5,zero
18001b0c:	0009883a 	mov	r4,zero
18001b10:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
18001b14:	01400204 	movi	r5,8
18001b18:	0009883a 	mov	r4,zero
18001b1c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
18001b20:	01414b04 	movi	r5,1324
18001b24:	0009883a 	mov	r4,zero
18001b28:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
18001b2c:	01400204 	movi	r5,8
18001b30:	0009883a 	mov	r4,zero
18001b34:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
18001b38:	0140a404 	movi	r5,656
18001b3c:	0009883a 	mov	r4,zero
18001b40:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
18001b44:	01401044 	movi	r5,65
18001b48:	0009883a 	mov	r4,zero
18001b4c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001b50:	014004c4 	movi	r5,19
18001b54:	0009883a 	mov	r4,zero
18001b58:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
18001b5c:	01414804 	movi	r5,1312
18001b60:	0009883a 	mov	r4,zero
18001b64:	80002f40 	call	180002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
18001b68:	000b883a 	mov	r5,zero
18001b6c:	0009883a 	mov	r4,zero
18001b70:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
18001b74:	000b883a 	mov	r5,zero
18001b78:	0009883a 	mov	r4,zero
18001b7c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
18001b80:	01408404 	movi	r5,528
18001b84:	0009883a 	mov	r4,zero
18001b88:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
18001b8c:	01401044 	movi	r5,65
18001b90:	0009883a 	mov	r4,zero
18001b94:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001b98:	014004c4 	movi	r5,19
18001b9c:	0009883a 	mov	r4,zero
18001ba0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18001ba4:	000b883a 	mov	r5,zero
18001ba8:	0009883a 	mov	r4,zero
18001bac:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18001bb0:	01414004 	movi	r5,1280
18001bb4:	01006c04 	movi	r4,432
18001bb8:	80018340 	call	18001834 <UsbWrite>
}
18001bbc:	0001883a 	nop
18001bc0:	e037883a 	mov	sp,fp
18001bc4:	dfc00117 	ldw	ra,4(sp)
18001bc8:	df000017 	ldw	fp,0(sp)
18001bcc:	dec00204 	addi	sp,sp,8
18001bd0:	f800283a 	ret

18001bd4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
18001bd4:	defffe04 	addi	sp,sp,-8
18001bd8:	dfc00115 	stw	ra,4(sp)
18001bdc:	df000015 	stw	fp,0(sp)
18001be0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
18001be4:	01414004 	movi	r5,1280
18001be8:	01000084 	movi	r4,2
18001bec:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
18001bf0:	01414304 	movi	r5,1292
18001bf4:	0009883a 	mov	r4,zero
18001bf8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
18001bfc:	01400204 	movi	r5,8
18001c00:	0009883a 	mov	r4,zero
18001c04:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
18001c08:	0140b404 	movi	r5,720
18001c0c:	0009883a 	mov	r4,zero
18001c10:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
18001c14:	01400044 	movi	r5,1
18001c18:	0009883a 	mov	r4,zero
18001c1c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001c20:	014004c4 	movi	r5,19
18001c24:	0009883a 	mov	r4,zero
18001c28:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
18001c2c:	01414504 	movi	r5,1300
18001c30:	0009883a 	mov	r4,zero
18001c34:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
18001c38:	0141a004 	movi	r5,1664
18001c3c:	0009883a 	mov	r4,zero
18001c40:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
18001c44:	01404004 	movi	r5,256
18001c48:	0009883a 	mov	r4,zero
18001c4c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
18001c50:	000b883a 	mov	r5,zero
18001c54:	0009883a 	mov	r4,zero
18001c58:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
18001c5c:	01400484 	movi	r5,18
18001c60:	0009883a 	mov	r4,zero
18001c64:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
18001c68:	01415104 	movi	r5,1348
18001c6c:	0009883a 	mov	r4,zero
18001c70:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
18001c74:	01400204 	movi	r5,8
18001c78:	0009883a 	mov	r4,zero
18001c7c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
18001c80:	0140a404 	movi	r5,656
18001c84:	0009883a 	mov	r4,zero
18001c88:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
18001c8c:	01401044 	movi	r5,65
18001c90:	0009883a 	mov	r4,zero
18001c94:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
18001c98:	014004c4 	movi	r5,19
18001c9c:	0009883a 	mov	r4,zero
18001ca0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
18001ca4:	01414804 	movi	r5,1312
18001ca8:	0009883a 	mov	r4,zero
18001cac:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
18001cb0:	01415304 	movi	r5,1356
18001cb4:	0009883a 	mov	r4,zero
18001cb8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
18001cbc:	01400204 	movi	r5,8
18001cc0:	0009883a 	mov	r4,zero
18001cc4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
18001cc8:	0140a404 	movi	r5,656
18001ccc:	0009883a 	mov	r4,zero
18001cd0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
18001cd4:	01400044 	movi	r5,1
18001cd8:	0009883a 	mov	r4,zero
18001cdc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
18001ce0:	014004c4 	movi	r5,19
18001ce4:	0009883a 	mov	r4,zero
18001ce8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
18001cec:	01414b04 	movi	r5,1324
18001cf0:	0009883a 	mov	r4,zero
18001cf4:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
18001cf8:	01415504 	movi	r5,1364
18001cfc:	0009883a 	mov	r4,zero
18001d00:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
18001d04:	01400084 	movi	r5,2
18001d08:	0009883a 	mov	r4,zero
18001d0c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
18001d10:	0140a404 	movi	r5,656
18001d14:	0009883a 	mov	r4,zero
18001d18:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
18001d1c:	01401044 	movi	r5,65
18001d20:	0009883a 	mov	r4,zero
18001d24:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
18001d28:	014004c4 	movi	r5,19
18001d2c:	0009883a 	mov	r4,zero
18001d30:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
18001d34:	01414e04 	movi	r5,1336
18001d38:	0009883a 	mov	r4,zero
18001d3c:	80002f40 	call	180002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
18001d40:	000b883a 	mov	r5,zero
18001d44:	0009883a 	mov	r4,zero
18001d48:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
18001d4c:	000b883a 	mov	r5,zero
18001d50:	0009883a 	mov	r4,zero
18001d54:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
18001d58:	01408404 	movi	r5,528
18001d5c:	0009883a 	mov	r4,zero
18001d60:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
18001d64:	01401044 	movi	r5,65
18001d68:	0009883a 	mov	r4,zero
18001d6c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
18001d70:	014004c4 	movi	r5,19
18001d74:	0009883a 	mov	r4,zero
18001d78:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
18001d7c:	000b883a 	mov	r5,zero
18001d80:	0009883a 	mov	r4,zero
18001d84:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18001d88:	01414004 	movi	r5,1280
18001d8c:	01006c04 	movi	r4,432
18001d90:	80018340 	call	18001834 <UsbWrite>
}
18001d94:	0001883a 	nop
18001d98:	e037883a 	mov	sp,fp
18001d9c:	dfc00117 	ldw	ra,4(sp)
18001da0:	df000017 	ldw	fp,0(sp)
18001da4:	dec00204 	addi	sp,sp,8
18001da8:	f800283a 	ret

18001dac <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
18001dac:	defffe04 	addi	sp,sp,-8
18001db0:	dfc00115 	stw	ra,4(sp)
18001db4:	df000015 	stw	fp,0(sp)
18001db8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
18001dbc:	01414004 	movi	r5,1280
18001dc0:	01000084 	movi	r4,2
18001dc4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
18001dc8:	01414304 	movi	r5,1292
18001dcc:	0009883a 	mov	r4,zero
18001dd0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
18001dd4:	01400204 	movi	r5,8
18001dd8:	0009883a 	mov	r4,zero
18001ddc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
18001de0:	0140b404 	movi	r5,720
18001de4:	0009883a 	mov	r4,zero
18001de8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
18001dec:	01400044 	movi	r5,1
18001df0:	0009883a 	mov	r4,zero
18001df4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001df8:	014004c4 	movi	r5,19
18001dfc:	0009883a 	mov	r4,zero
18001e00:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
18001e04:	01414504 	movi	r5,1300
18001e08:	0009883a 	mov	r4,zero
18001e0c:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
18001e10:	0141a004 	movi	r5,1664
18001e14:	0009883a 	mov	r4,zero
18001e18:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
18001e1c:	01408004 	movi	r5,512
18001e20:	0009883a 	mov	r4,zero
18001e24:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
18001e28:	000b883a 	mov	r5,zero
18001e2c:	0009883a 	mov	r4,zero
18001e30:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
18001e34:	01400244 	movi	r5,9
18001e38:	0009883a 	mov	r4,zero
18001e3c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
18001e40:	01415104 	movi	r5,1348
18001e44:	0009883a 	mov	r4,zero
18001e48:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
18001e4c:	01400204 	movi	r5,8
18001e50:	0009883a 	mov	r4,zero
18001e54:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
18001e58:	0140a404 	movi	r5,656
18001e5c:	0009883a 	mov	r4,zero
18001e60:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
18001e64:	01401044 	movi	r5,65
18001e68:	0009883a 	mov	r4,zero
18001e6c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
18001e70:	014004c4 	movi	r5,19
18001e74:	0009883a 	mov	r4,zero
18001e78:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
18001e7c:	01414804 	movi	r5,1312
18001e80:	0009883a 	mov	r4,zero
18001e84:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
18001e88:	01415304 	movi	r5,1356
18001e8c:	0009883a 	mov	r4,zero
18001e90:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
18001e94:	01400044 	movi	r5,1
18001e98:	0009883a 	mov	r4,zero
18001e9c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
18001ea0:	0140a404 	movi	r5,656
18001ea4:	0009883a 	mov	r4,zero
18001ea8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
18001eac:	01400044 	movi	r5,1
18001eb0:	0009883a 	mov	r4,zero
18001eb4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
18001eb8:	014004c4 	movi	r5,19
18001ebc:	0009883a 	mov	r4,zero
18001ec0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
18001ec4:	01414b04 	movi	r5,1324
18001ec8:	0009883a 	mov	r4,zero
18001ecc:	80002f40 	call	180002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
18001ed0:	000b883a 	mov	r5,zero
18001ed4:	0009883a 	mov	r4,zero
18001ed8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
18001edc:	000b883a 	mov	r5,zero
18001ee0:	0009883a 	mov	r4,zero
18001ee4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
18001ee8:	01408404 	movi	r5,528
18001eec:	0009883a 	mov	r4,zero
18001ef0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
18001ef4:	01401044 	movi	r5,65
18001ef8:	0009883a 	mov	r4,zero
18001efc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
18001f00:	014004c4 	movi	r5,19
18001f04:	0009883a 	mov	r4,zero
18001f08:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
18001f0c:	000b883a 	mov	r5,zero
18001f10:	0009883a 	mov	r4,zero
18001f14:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18001f18:	01414004 	movi	r5,1280
18001f1c:	01006c04 	movi	r4,432
18001f20:	80018340 	call	18001834 <UsbWrite>
}
18001f24:	0001883a 	nop
18001f28:	e037883a 	mov	sp,fp
18001f2c:	dfc00117 	ldw	ra,4(sp)
18001f30:	df000017 	ldw	fp,0(sp)
18001f34:	dec00204 	addi	sp,sp,8
18001f38:	f800283a 	ret

18001f3c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
18001f3c:	defffe04 	addi	sp,sp,-8
18001f40:	dfc00115 	stw	ra,4(sp)
18001f44:	df000015 	stw	fp,0(sp)
18001f48:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
18001f4c:	01414004 	movi	r5,1280
18001f50:	01000084 	movi	r4,2
18001f54:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
18001f58:	01414304 	movi	r5,1292
18001f5c:	0009883a 	mov	r4,zero
18001f60:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
18001f64:	01400204 	movi	r5,8
18001f68:	0009883a 	mov	r4,zero
18001f6c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
18001f70:	0140b404 	movi	r5,720
18001f74:	0009883a 	mov	r4,zero
18001f78:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
18001f7c:	01400044 	movi	r5,1
18001f80:	0009883a 	mov	r4,zero
18001f84:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18001f88:	014004c4 	movi	r5,19
18001f8c:	0009883a 	mov	r4,zero
18001f90:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
18001f94:	01414504 	movi	r5,1300
18001f98:	0009883a 	mov	r4,zero
18001f9c:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
18001fa0:	0141a004 	movi	r5,1664
18001fa4:	0009883a 	mov	r4,zero
18001fa8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
18001fac:	01408004 	movi	r5,512
18001fb0:	0009883a 	mov	r4,zero
18001fb4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
18001fb8:	000b883a 	mov	r5,zero
18001fbc:	0009883a 	mov	r4,zero
18001fc0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
18001fc4:	01403fc4 	movi	r5,255
18001fc8:	0009883a 	mov	r4,zero
18001fcc:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
18001fd0:	01415704 	movi	r5,1372
18001fd4:	0009883a 	mov	r4,zero
18001fd8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
18001fdc:	01400204 	movi	r5,8
18001fe0:	0009883a 	mov	r4,zero
18001fe4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
18001fe8:	0140a404 	movi	r5,656
18001fec:	0009883a 	mov	r4,zero
18001ff0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
18001ff4:	01401044 	movi	r5,65
18001ff8:	0009883a 	mov	r4,zero
18001ffc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
18002000:	014004c4 	movi	r5,19
18002004:	0009883a 	mov	r4,zero
18002008:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1800200c:	01414804 	movi	r5,1312
18002010:	0009883a 	mov	r4,zero
18002014:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
18002018:	01415904 	movi	r5,1380
1800201c:	0009883a 	mov	r4,zero
18002020:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
18002024:	01400204 	movi	r5,8
18002028:	0009883a 	mov	r4,zero
1800202c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
18002030:	0140a404 	movi	r5,656
18002034:	0009883a 	mov	r4,zero
18002038:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1800203c:	01400044 	movi	r5,1
18002040:	0009883a 	mov	r4,zero
18002044:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
18002048:	014004c4 	movi	r5,19
1800204c:	0009883a 	mov	r4,zero
18002050:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
18002054:	01414b04 	movi	r5,1324
18002058:	0009883a 	mov	r4,zero
1800205c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
18002060:	01415b04 	movi	r5,1388
18002064:	0009883a 	mov	r4,zero
18002068:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1800206c:	01400204 	movi	r5,8
18002070:	0009883a 	mov	r4,zero
18002074:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
18002078:	0140a404 	movi	r5,656
1800207c:	0009883a 	mov	r4,zero
18002080:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
18002084:	01401044 	movi	r5,65
18002088:	0009883a 	mov	r4,zero
1800208c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
18002090:	014004c4 	movi	r5,19
18002094:	0009883a 	mov	r4,zero
18002098:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1800209c:	01414e04 	movi	r5,1336
180020a0:	0009883a 	mov	r4,zero
180020a4:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
180020a8:	01415d04 	movi	r5,1396
180020ac:	0009883a 	mov	r4,zero
180020b0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
180020b4:	01400204 	movi	r5,8
180020b8:	0009883a 	mov	r4,zero
180020bc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
180020c0:	0140a404 	movi	r5,656
180020c4:	0009883a 	mov	r4,zero
180020c8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
180020cc:	01400044 	movi	r5,1
180020d0:	0009883a 	mov	r4,zero
180020d4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
180020d8:	014004c4 	movi	r5,19
180020dc:	0009883a 	mov	r4,zero
180020e0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
180020e4:	01415104 	movi	r5,1348
180020e8:	0009883a 	mov	r4,zero
180020ec:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
180020f0:	01415f04 	movi	r5,1404
180020f4:	0009883a 	mov	r4,zero
180020f8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
180020fc:	01400084 	movi	r5,2
18002100:	0009883a 	mov	r4,zero
18002104:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
18002108:	0140a404 	movi	r5,656
1800210c:	0009883a 	mov	r4,zero
18002110:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
18002114:	01401044 	movi	r5,65
18002118:	0009883a 	mov	r4,zero
1800211c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
18002120:	014004c4 	movi	r5,19
18002124:	0009883a 	mov	r4,zero
18002128:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1800212c:	01415404 	movi	r5,1360
18002130:	0009883a 	mov	r4,zero
18002134:	80002f40 	call	180002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
18002138:	000b883a 	mov	r5,zero
1800213c:	0009883a 	mov	r4,zero
18002140:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
18002144:	000b883a 	mov	r5,zero
18002148:	0009883a 	mov	r4,zero
1800214c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
18002150:	01408404 	movi	r5,528
18002154:	0009883a 	mov	r4,zero
18002158:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
1800215c:	01401044 	movi	r5,65
18002160:	0009883a 	mov	r4,zero
18002164:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
18002168:	014004c4 	movi	r5,19
1800216c:	0009883a 	mov	r4,zero
18002170:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
18002174:	000b883a 	mov	r5,zero
18002178:	0009883a 	mov	r4,zero
1800217c:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18002180:	01414004 	movi	r5,1280
18002184:	01006c04 	movi	r4,432
18002188:	80018340 	call	18001834 <UsbWrite>
}
1800218c:	0001883a 	nop
18002190:	e037883a 	mov	sp,fp
18002194:	dfc00117 	ldw	ra,4(sp)
18002198:	df000017 	ldw	fp,0(sp)
1800219c:	dec00204 	addi	sp,sp,8
180021a0:	f800283a 	ret

180021a4 <UsbSetConfig>:

void UsbSetConfig()
{
180021a4:	defffe04 	addi	sp,sp,-8
180021a8:	dfc00115 	stw	ra,4(sp)
180021ac:	df000015 	stw	fp,0(sp)
180021b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
180021b4:	01414004 	movi	r5,1280
180021b8:	01000084 	movi	r4,2
180021bc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
180021c0:	01414304 	movi	r5,1292
180021c4:	0009883a 	mov	r4,zero
180021c8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
180021cc:	01400204 	movi	r5,8
180021d0:	0009883a 	mov	r4,zero
180021d4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
180021d8:	0140b404 	movi	r5,720
180021dc:	0009883a 	mov	r4,zero
180021e0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
180021e4:	01400044 	movi	r5,1
180021e8:	0009883a 	mov	r4,zero
180021ec:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
180021f0:	014004c4 	movi	r5,19
180021f4:	0009883a 	mov	r4,zero
180021f8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
180021fc:	01414504 	movi	r5,1300
18002200:	0009883a 	mov	r4,zero
18002204:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
18002208:	01424004 	movi	r5,2304
1800220c:	0009883a 	mov	r4,zero
18002210:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
18002214:	01400044 	movi	r5,1
18002218:	0009883a 	mov	r4,zero
1800221c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18002220:	000b883a 	mov	r5,zero
18002224:	0009883a 	mov	r4,zero
18002228:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1800222c:	000b883a 	mov	r5,zero
18002230:	0009883a 	mov	r4,zero
18002234:	80002f40 	call	180002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
18002238:	000b883a 	mov	r5,zero
1800223c:	0009883a 	mov	r4,zero
18002240:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
18002244:	000b883a 	mov	r5,zero
18002248:	0009883a 	mov	r4,zero
1800224c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
18002250:	0140a404 	movi	r5,656
18002254:	0009883a 	mov	r4,zero
18002258:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1800225c:	01401044 	movi	r5,65
18002260:	0009883a 	mov	r4,zero
18002264:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18002268:	014004c4 	movi	r5,19
1800226c:	0009883a 	mov	r4,zero
18002270:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18002274:	000b883a 	mov	r5,zero
18002278:	0009883a 	mov	r4,zero
1800227c:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18002280:	01414004 	movi	r5,1280
18002284:	01006c04 	movi	r4,432
18002288:	80018340 	call	18001834 <UsbWrite>

}
1800228c:	0001883a 	nop
18002290:	e037883a 	mov	sp,fp
18002294:	dfc00117 	ldw	ra,4(sp)
18002298:	df000017 	ldw	fp,0(sp)
1800229c:	dec00204 	addi	sp,sp,8
180022a0:	f800283a 	ret

180022a4 <UsbClassRequest>:

void UsbClassRequest()
{
180022a4:	defffe04 	addi	sp,sp,-8
180022a8:	dfc00115 	stw	ra,4(sp)
180022ac:	df000015 	stw	fp,0(sp)
180022b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
180022b4:	01414004 	movi	r5,1280
180022b8:	01000084 	movi	r4,2
180022bc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
180022c0:	01414304 	movi	r5,1292
180022c4:	0009883a 	mov	r4,zero
180022c8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
180022cc:	01400204 	movi	r5,8
180022d0:	0009883a 	mov	r4,zero
180022d4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
180022d8:	0140b404 	movi	r5,720
180022dc:	0009883a 	mov	r4,zero
180022e0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
180022e4:	01400044 	movi	r5,1
180022e8:	0009883a 	mov	r4,zero
180022ec:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
180022f0:	014004c4 	movi	r5,19
180022f4:	0009883a 	mov	r4,zero
180022f8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
180022fc:	01414504 	movi	r5,1300
18002300:	0009883a 	mov	r4,zero
18002304:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
18002308:	01428844 	movi	r5,2593
1800230c:	0009883a 	mov	r4,zero
18002310:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
18002314:	000b883a 	mov	r5,zero
18002318:	0009883a 	mov	r4,zero
1800231c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18002320:	000b883a 	mov	r5,zero
18002324:	0009883a 	mov	r4,zero
18002328:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1800232c:	000b883a 	mov	r5,zero
18002330:	0009883a 	mov	r4,zero
18002334:	80002f40 	call	180002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
18002338:	000b883a 	mov	r5,zero
1800233c:	0009883a 	mov	r4,zero
18002340:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
18002344:	000b883a 	mov	r5,zero
18002348:	0009883a 	mov	r4,zero
1800234c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
18002350:	0140a404 	movi	r5,656
18002354:	0009883a 	mov	r4,zero
18002358:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
1800235c:	01401044 	movi	r5,65
18002360:	0009883a 	mov	r4,zero
18002364:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18002368:	014004c4 	movi	r5,19
1800236c:	0009883a 	mov	r4,zero
18002370:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
18002374:	000b883a 	mov	r5,zero
18002378:	0009883a 	mov	r4,zero
1800237c:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18002380:	01414004 	movi	r5,1280
18002384:	01006c04 	movi	r4,432
18002388:	80018340 	call	18001834 <UsbWrite>
}
1800238c:	0001883a 	nop
18002390:	e037883a 	mov	sp,fp
18002394:	dfc00117 	ldw	ra,4(sp)
18002398:	df000017 	ldw	fp,0(sp)
1800239c:	dec00204 	addi	sp,sp,8
180023a0:	f800283a 	ret

180023a4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
180023a4:	defffe04 	addi	sp,sp,-8
180023a8:	dfc00115 	stw	ra,4(sp)
180023ac:	df000015 	stw	fp,0(sp)
180023b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
180023b4:	01414004 	movi	r5,1280
180023b8:	01000084 	movi	r4,2
180023bc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
180023c0:	01414304 	movi	r5,1292
180023c4:	0009883a 	mov	r4,zero
180023c8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
180023cc:	01400204 	movi	r5,8
180023d0:	0009883a 	mov	r4,zero
180023d4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
180023d8:	0140b404 	movi	r5,720
180023dc:	0009883a 	mov	r4,zero
180023e0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
180023e4:	01400044 	movi	r5,1
180023e8:	0009883a 	mov	r4,zero
180023ec:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
180023f0:	014004c4 	movi	r5,19
180023f4:	0009883a 	mov	r4,zero
180023f8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
180023fc:	01414504 	movi	r5,1300
18002400:	0009883a 	mov	r4,zero
18002404:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
18002408:	0141a044 	movi	r5,1665
1800240c:	0009883a 	mov	r4,zero
18002410:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
18002414:	01484004 	movi	r5,8448
18002418:	0009883a 	mov	r4,zero
1800241c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
18002420:	000b883a 	mov	r5,zero
18002424:	0009883a 	mov	r4,zero
18002428:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1800242c:	01401ec4 	movi	r5,123
18002430:	0009883a 	mov	r4,zero
18002434:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
18002438:	01415104 	movi	r5,1348
1800243c:	0009883a 	mov	r4,zero
18002440:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
18002444:	01400204 	movi	r5,8
18002448:	0009883a 	mov	r4,zero
1800244c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
18002450:	0140a404 	movi	r5,656
18002454:	0009883a 	mov	r4,zero
18002458:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1800245c:	01401044 	movi	r5,65
18002460:	0009883a 	mov	r4,zero
18002464:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
18002468:	014004c4 	movi	r5,19
1800246c:	0009883a 	mov	r4,zero
18002470:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
18002474:	01414804 	movi	r5,1312
18002478:	0009883a 	mov	r4,zero
1800247c:	80002f40 	call	180002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
18002480:	000b883a 	mov	r5,zero
18002484:	0009883a 	mov	r4,zero
18002488:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1800248c:	000b883a 	mov	r5,zero
18002490:	0009883a 	mov	r4,zero
18002494:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
18002498:	01408404 	movi	r5,528
1800249c:	0009883a 	mov	r4,zero
180024a0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
180024a4:	01401044 	movi	r5,65
180024a8:	0009883a 	mov	r4,zero
180024ac:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
180024b0:	014004c4 	movi	r5,19
180024b4:	0009883a 	mov	r4,zero
180024b8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
180024bc:	000b883a 	mov	r5,zero
180024c0:	0009883a 	mov	r4,zero
180024c4:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
180024c8:	01414004 	movi	r5,1280
180024cc:	01006c04 	movi	r4,432
180024d0:	80018340 	call	18001834 <UsbWrite>

}
180024d4:	0001883a 	nop
180024d8:	e037883a 	mov	sp,fp
180024dc:	dfc00117 	ldw	ra,4(sp)
180024e0:	df000017 	ldw	fp,0(sp)
180024e4:	dec00204 	addi	sp,sp,8
180024e8:	f800283a 	ret

180024ec <UsbGetReportDesc>:


void UsbGetReportDesc()
{
180024ec:	defffe04 	addi	sp,sp,-8
180024f0:	dfc00115 	stw	ra,4(sp)
180024f4:	df000015 	stw	fp,0(sp)
180024f8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
180024fc:	01414004 	movi	r5,1280
18002500:	01000084 	movi	r4,2
18002504:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
18002508:	01414304 	movi	r5,1292
1800250c:	0009883a 	mov	r4,zero
18002510:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
18002514:	01400204 	movi	r5,8
18002518:	0009883a 	mov	r4,zero
1800251c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
18002520:	0140b404 	movi	r5,720
18002524:	0009883a 	mov	r4,zero
18002528:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1800252c:	01400044 	movi	r5,1
18002530:	0009883a 	mov	r4,zero
18002534:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
18002538:	014004c4 	movi	r5,19
1800253c:	0009883a 	mov	r4,zero
18002540:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
18002544:	01414504 	movi	r5,1300
18002548:	0009883a 	mov	r4,zero
1800254c:	80002f40 	call	180002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
18002550:	0141a044 	movi	r5,1665
18002554:	0009883a 	mov	r4,zero
18002558:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
1800255c:	01488004 	movi	r5,8704
18002560:	0009883a 	mov	r4,zero
18002564:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
18002568:	000b883a 	mov	r5,zero
1800256c:	0009883a 	mov	r4,zero
18002570:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
18002574:	01401ec4 	movi	r5,123
18002578:	0009883a 	mov	r4,zero
1800257c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
18002580:	01416004 	movi	r5,1408
18002584:	0009883a 	mov	r4,zero
18002588:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1800258c:	01400204 	movi	r5,8
18002590:	0009883a 	mov	r4,zero
18002594:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
18002598:	0140a404 	movi	r5,656
1800259c:	0009883a 	mov	r4,zero
180025a0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
180025a4:	01401044 	movi	r5,65
180025a8:	0009883a 	mov	r4,zero
180025ac:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
180025b0:	014004c4 	movi	r5,19
180025b4:	0009883a 	mov	r4,zero
180025b8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
180025bc:	01414804 	movi	r5,1312
180025c0:	0009883a 	mov	r4,zero
180025c4:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
180025c8:	01416204 	movi	r5,1416
180025cc:	0009883a 	mov	r4,zero
180025d0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
180025d4:	01400204 	movi	r5,8
180025d8:	0009883a 	mov	r4,zero
180025dc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
180025e0:	0140a404 	movi	r5,656
180025e4:	0009883a 	mov	r4,zero
180025e8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
180025ec:	01400044 	movi	r5,1
180025f0:	0009883a 	mov	r4,zero
180025f4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
180025f8:	014004c4 	movi	r5,19
180025fc:	0009883a 	mov	r4,zero
18002600:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
18002604:	01414b04 	movi	r5,1324
18002608:	0009883a 	mov	r4,zero
1800260c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
18002610:	01416404 	movi	r5,1424
18002614:	0009883a 	mov	r4,zero
18002618:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1800261c:	01400204 	movi	r5,8
18002620:	0009883a 	mov	r4,zero
18002624:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
18002628:	0140a404 	movi	r5,656
1800262c:	0009883a 	mov	r4,zero
18002630:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
18002634:	01401044 	movi	r5,65
18002638:	0009883a 	mov	r4,zero
1800263c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
18002640:	014004c4 	movi	r5,19
18002644:	0009883a 	mov	r4,zero
18002648:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1800264c:	01414e04 	movi	r5,1336
18002650:	0009883a 	mov	r4,zero
18002654:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
18002658:	01416604 	movi	r5,1432
1800265c:	0009883a 	mov	r4,zero
18002660:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
18002664:	01400204 	movi	r5,8
18002668:	0009883a 	mov	r4,zero
1800266c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
18002670:	0140a404 	movi	r5,656
18002674:	0009883a 	mov	r4,zero
18002678:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1800267c:	01400044 	movi	r5,1
18002680:	0009883a 	mov	r4,zero
18002684:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
18002688:	014004c4 	movi	r5,19
1800268c:	0009883a 	mov	r4,zero
18002690:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
18002694:	01415104 	movi	r5,1348
18002698:	0009883a 	mov	r4,zero
1800269c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
180026a0:	01416804 	movi	r5,1440
180026a4:	0009883a 	mov	r4,zero
180026a8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
180026ac:	01400204 	movi	r5,8
180026b0:	0009883a 	mov	r4,zero
180026b4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
180026b8:	0140a404 	movi	r5,656
180026bc:	0009883a 	mov	r4,zero
180026c0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
180026c4:	01401044 	movi	r5,65
180026c8:	0009883a 	mov	r4,zero
180026cc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
180026d0:	014004c4 	movi	r5,19
180026d4:	0009883a 	mov	r4,zero
180026d8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
180026dc:	01415404 	movi	r5,1360
180026e0:	0009883a 	mov	r4,zero
180026e4:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
180026e8:	01416a04 	movi	r5,1448
180026ec:	0009883a 	mov	r4,zero
180026f0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
180026f4:	01400204 	movi	r5,8
180026f8:	0009883a 	mov	r4,zero
180026fc:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
18002700:	0140a404 	movi	r5,656
18002704:	0009883a 	mov	r4,zero
18002708:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1800270c:	01400044 	movi	r5,1
18002710:	0009883a 	mov	r4,zero
18002714:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
18002718:	014004c4 	movi	r5,19
1800271c:	0009883a 	mov	r4,zero
18002720:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
18002724:	01415704 	movi	r5,1372
18002728:	0009883a 	mov	r4,zero
1800272c:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
18002730:	01416c04 	movi	r5,1456
18002734:	0009883a 	mov	r4,zero
18002738:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1800273c:	01400204 	movi	r5,8
18002740:	0009883a 	mov	r4,zero
18002744:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
18002748:	0140a404 	movi	r5,656
1800274c:	0009883a 	mov	r4,zero
18002750:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
18002754:	01401044 	movi	r5,65
18002758:	0009883a 	mov	r4,zero
1800275c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
18002760:	014004c4 	movi	r5,19
18002764:	0009883a 	mov	r4,zero
18002768:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
1800276c:	01415a04 	movi	r5,1384
18002770:	0009883a 	mov	r4,zero
18002774:	80002f40 	call	180002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
18002778:	01416e04 	movi	r5,1464
1800277c:	0009883a 	mov	r4,zero
18002780:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
18002784:	014000c4 	movi	r5,3
18002788:	0009883a 	mov	r4,zero
1800278c:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
18002790:	0140a404 	movi	r5,656
18002794:	0009883a 	mov	r4,zero
18002798:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1800279c:	01400044 	movi	r5,1
180027a0:	0009883a 	mov	r4,zero
180027a4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
180027a8:	014004c4 	movi	r5,19
180027ac:	0009883a 	mov	r4,zero
180027b0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
180027b4:	01415d04 	movi	r5,1396
180027b8:	0009883a 	mov	r4,zero
180027bc:	80002f40 	call	180002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
180027c0:	000b883a 	mov	r5,zero
180027c4:	0009883a 	mov	r4,zero
180027c8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
180027cc:	000b883a 	mov	r5,zero
180027d0:	0009883a 	mov	r4,zero
180027d4:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
180027d8:	01408404 	movi	r5,528
180027dc:	0009883a 	mov	r4,zero
180027e0:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
180027e4:	01401044 	movi	r5,65
180027e8:	0009883a 	mov	r4,zero
180027ec:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
180027f0:	014004c4 	movi	r5,19
180027f4:	0009883a 	mov	r4,zero
180027f8:	80002f40 	call	180002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
180027fc:	000b883a 	mov	r5,zero
18002800:	0009883a 	mov	r4,zero
18002804:	80002f40 	call	180002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
18002808:	01414004 	movi	r5,1280
1800280c:	01006c04 	movi	r4,432
18002810:	80018340 	call	18001834 <UsbWrite>

}
18002814:	0001883a 	nop
18002818:	e037883a 	mov	sp,fp
1800281c:	dfc00117 	ldw	ra,4(sp)
18002820:	df000017 	ldw	fp,0(sp)
18002824:	dec00204 	addi	sp,sp,8
18002828:	f800283a 	ret

1800282c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
1800282c:	defffd04 	addi	sp,sp,-12
18002830:	dfc00215 	stw	ra,8(sp)
18002834:	df000115 	stw	fp,4(sp)
18002838:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
1800283c:	01005104 	movi	r4,324
18002840:	800188c0 	call	1800188c <UsbRead>
18002844:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
18002848:	000b883a 	mov	r5,zero
1800284c:	01005104 	movi	r4,324
18002850:	80018340 	call	18001834 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
18002854:	00000d06 	br	1800288c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
18002858:	e0bfff0b 	ldhu	r2,-4(fp)
1800285c:	10000526 	beq	r2,zero,18002874 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
18002860:	e0bfff0b 	ldhu	r2,-4(fp)
18002864:	100b883a 	mov	r5,r2
18002868:	01060074 	movhi	r4,6145
1800286c:	2118dc04 	addi	r4,r4,25456
18002870:	8002bbc0 	call	18002bbc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
18002874:	01005104 	movi	r4,324
18002878:	800188c0 	call	1800188c <UsbRead>
1800287c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
18002880:	000b883a 	mov	r5,zero
18002884:	01005104 	movi	r4,324
18002888:	80018340 	call	18001834 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1800288c:	e0bfff0b 	ldhu	r2,-4(fp)
18002890:	10840018 	cmpnei	r2,r2,4096
18002894:	103ff01e 	bne	r2,zero,18002858 <__alt_data_end+0xf8002858>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
18002898:	e0bfff0b 	ldhu	r2,-4(fp)
}
1800289c:	e037883a 	mov	sp,fp
180028a0:	dfc00117 	ldw	ra,4(sp)
180028a4:	df000017 	ldw	fp,0(sp)
180028a8:	dec00204 	addi	sp,sp,8
180028ac:	f800283a 	ret

180028b0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
180028b0:	defffd04 	addi	sp,sp,-12
180028b4:	dfc00215 	stw	ra,8(sp)
180028b8:	df000115 	stw	fp,4(sp)
180028bc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
180028c0:	010000c4 	movi	r4,3
180028c4:	80003640 	call	18000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
180028c8:	01005104 	movi	r4,324
180028cc:	800188c0 	call	1800188c <UsbRead>
180028d0:	10bfffcc 	andi	r2,r2,65535
180028d4:	10840018 	cmpnei	r2,r2,4096
180028d8:	1000091e 	bne	r2,zero,18002900 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
180028dc:	000b883a 	mov	r5,zero
180028e0:	01005104 	movi	r4,324
180028e4:	80018340 	call	18001834 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
180028e8:	0001883a 	nop
180028ec:	010000c4 	movi	r4,3
180028f0:	80003640 	call	18000364 <IO_read>
180028f4:	10bfffcc 	andi	r2,r2,65535
180028f8:	1080040c 	andi	r2,r2,16
180028fc:	103ffb26 	beq	r2,zero,180028ec <__alt_data_end+0xf80028ec>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
18002900:	01414204 	movi	r5,1288
18002904:	01000084 	movi	r4,2
18002908:	80002f40 	call	180002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1800290c:	0009883a 	mov	r4,zero
18002910:	80003640 	call	18000364 <IO_read>
18002914:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
18002918:	e0bfff0b 	ldhu	r2,-4(fp)
}
1800291c:	e037883a 	mov	sp,fp
18002920:	dfc00117 	ldw	ra,4(sp)
18002924:	df000017 	ldw	fp,0(sp)
18002928:	dec00204 	addi	sp,sp,8
1800292c:	f800283a 	ret

18002930 <UsbPrintMem>:


void UsbPrintMem()
{
18002930:	defffc04 	addi	sp,sp,-16
18002934:	dfc00315 	stw	ra,12(sp)
18002938:	df000215 	stw	fp,8(sp)
1800293c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
18002940:	01414004 	movi	r5,1280
18002944:	01000084 	movi	r4,2
18002948:	80002f40 	call	180002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
1800294c:	e03ffe15 	stw	zero,-8(fp)
18002950:	00000e06 	br	1800298c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
18002954:	0009883a 	mov	r4,zero
18002958:	80003640 	call	18000364 <IO_read>
1800295c:	10bfffcc 	andi	r2,r2,65535
18002960:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
18002964:	e0bffe17 	ldw	r2,-8(fp)
18002968:	10814004 	addi	r2,r2,1280
1800296c:	e1bfff17 	ldw	r6,-4(fp)
18002970:	100b883a 	mov	r5,r2
18002974:	01060074 	movhi	r4,6145
18002978:	2118e404 	addi	r4,r4,25488
1800297c:	8002bbc0 	call	18002bbc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
18002980:	e0bffe17 	ldw	r2,-8(fp)
18002984:	10800084 	addi	r2,r2,2
18002988:	e0bffe15 	stw	r2,-8(fp)
1800298c:	e0bffe17 	ldw	r2,-8(fp)
18002990:	10803250 	cmplti	r2,r2,201
18002994:	103fef1e 	bne	r2,zero,18002954 <__alt_data_end+0xf8002954>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
18002998:	0001883a 	nop
1800299c:	e037883a 	mov	sp,fp
180029a0:	dfc00117 	ldw	ra,4(sp)
180029a4:	df000017 	ldw	fp,0(sp)
180029a8:	dec00204 	addi	sp,sp,8
180029ac:	f800283a 	ret

180029b0 <__divsi3>:
180029b0:	20001b16 	blt	r4,zero,18002a20 <__divsi3+0x70>
180029b4:	000f883a 	mov	r7,zero
180029b8:	28001616 	blt	r5,zero,18002a14 <__divsi3+0x64>
180029bc:	200d883a 	mov	r6,r4
180029c0:	29001a2e 	bgeu	r5,r4,18002a2c <__divsi3+0x7c>
180029c4:	00800804 	movi	r2,32
180029c8:	00c00044 	movi	r3,1
180029cc:	00000106 	br	180029d4 <__divsi3+0x24>
180029d0:	10000d26 	beq	r2,zero,18002a08 <__divsi3+0x58>
180029d4:	294b883a 	add	r5,r5,r5
180029d8:	10bfffc4 	addi	r2,r2,-1
180029dc:	18c7883a 	add	r3,r3,r3
180029e0:	293ffb36 	bltu	r5,r4,180029d0 <__alt_data_end+0xf80029d0>
180029e4:	0005883a 	mov	r2,zero
180029e8:	18000726 	beq	r3,zero,18002a08 <__divsi3+0x58>
180029ec:	0005883a 	mov	r2,zero
180029f0:	31400236 	bltu	r6,r5,180029fc <__divsi3+0x4c>
180029f4:	314dc83a 	sub	r6,r6,r5
180029f8:	10c4b03a 	or	r2,r2,r3
180029fc:	1806d07a 	srli	r3,r3,1
18002a00:	280ad07a 	srli	r5,r5,1
18002a04:	183ffa1e 	bne	r3,zero,180029f0 <__alt_data_end+0xf80029f0>
18002a08:	38000126 	beq	r7,zero,18002a10 <__divsi3+0x60>
18002a0c:	0085c83a 	sub	r2,zero,r2
18002a10:	f800283a 	ret
18002a14:	014bc83a 	sub	r5,zero,r5
18002a18:	39c0005c 	xori	r7,r7,1
18002a1c:	003fe706 	br	180029bc <__alt_data_end+0xf80029bc>
18002a20:	0109c83a 	sub	r4,zero,r4
18002a24:	01c00044 	movi	r7,1
18002a28:	003fe306 	br	180029b8 <__alt_data_end+0xf80029b8>
18002a2c:	00c00044 	movi	r3,1
18002a30:	003fee06 	br	180029ec <__alt_data_end+0xf80029ec>

18002a34 <__modsi3>:
18002a34:	20001716 	blt	r4,zero,18002a94 <__modsi3+0x60>
18002a38:	000f883a 	mov	r7,zero
18002a3c:	2005883a 	mov	r2,r4
18002a40:	28001216 	blt	r5,zero,18002a8c <__modsi3+0x58>
18002a44:	2900162e 	bgeu	r5,r4,18002aa0 <__modsi3+0x6c>
18002a48:	01800804 	movi	r6,32
18002a4c:	00c00044 	movi	r3,1
18002a50:	00000106 	br	18002a58 <__modsi3+0x24>
18002a54:	30000a26 	beq	r6,zero,18002a80 <__modsi3+0x4c>
18002a58:	294b883a 	add	r5,r5,r5
18002a5c:	31bfffc4 	addi	r6,r6,-1
18002a60:	18c7883a 	add	r3,r3,r3
18002a64:	293ffb36 	bltu	r5,r4,18002a54 <__alt_data_end+0xf8002a54>
18002a68:	18000526 	beq	r3,zero,18002a80 <__modsi3+0x4c>
18002a6c:	1806d07a 	srli	r3,r3,1
18002a70:	11400136 	bltu	r2,r5,18002a78 <__modsi3+0x44>
18002a74:	1145c83a 	sub	r2,r2,r5
18002a78:	280ad07a 	srli	r5,r5,1
18002a7c:	183ffb1e 	bne	r3,zero,18002a6c <__alt_data_end+0xf8002a6c>
18002a80:	38000126 	beq	r7,zero,18002a88 <__modsi3+0x54>
18002a84:	0085c83a 	sub	r2,zero,r2
18002a88:	f800283a 	ret
18002a8c:	014bc83a 	sub	r5,zero,r5
18002a90:	003fec06 	br	18002a44 <__alt_data_end+0xf8002a44>
18002a94:	0109c83a 	sub	r4,zero,r4
18002a98:	01c00044 	movi	r7,1
18002a9c:	003fe706 	br	18002a3c <__alt_data_end+0xf8002a3c>
18002aa0:	00c00044 	movi	r3,1
18002aa4:	003ff106 	br	18002a6c <__alt_data_end+0xf8002a6c>

18002aa8 <__udivsi3>:
18002aa8:	200d883a 	mov	r6,r4
18002aac:	2900152e 	bgeu	r5,r4,18002b04 <__udivsi3+0x5c>
18002ab0:	28001416 	blt	r5,zero,18002b04 <__udivsi3+0x5c>
18002ab4:	00800804 	movi	r2,32
18002ab8:	00c00044 	movi	r3,1
18002abc:	00000206 	br	18002ac8 <__udivsi3+0x20>
18002ac0:	10000e26 	beq	r2,zero,18002afc <__udivsi3+0x54>
18002ac4:	28000516 	blt	r5,zero,18002adc <__udivsi3+0x34>
18002ac8:	294b883a 	add	r5,r5,r5
18002acc:	10bfffc4 	addi	r2,r2,-1
18002ad0:	18c7883a 	add	r3,r3,r3
18002ad4:	293ffa36 	bltu	r5,r4,18002ac0 <__alt_data_end+0xf8002ac0>
18002ad8:	18000826 	beq	r3,zero,18002afc <__udivsi3+0x54>
18002adc:	0005883a 	mov	r2,zero
18002ae0:	31400236 	bltu	r6,r5,18002aec <__udivsi3+0x44>
18002ae4:	314dc83a 	sub	r6,r6,r5
18002ae8:	10c4b03a 	or	r2,r2,r3
18002aec:	1806d07a 	srli	r3,r3,1
18002af0:	280ad07a 	srli	r5,r5,1
18002af4:	183ffa1e 	bne	r3,zero,18002ae0 <__alt_data_end+0xf8002ae0>
18002af8:	f800283a 	ret
18002afc:	0005883a 	mov	r2,zero
18002b00:	f800283a 	ret
18002b04:	00c00044 	movi	r3,1
18002b08:	003ff406 	br	18002adc <__alt_data_end+0xf8002adc>

18002b0c <__umodsi3>:
18002b0c:	2005883a 	mov	r2,r4
18002b10:	2900122e 	bgeu	r5,r4,18002b5c <__umodsi3+0x50>
18002b14:	28001116 	blt	r5,zero,18002b5c <__umodsi3+0x50>
18002b18:	01800804 	movi	r6,32
18002b1c:	00c00044 	movi	r3,1
18002b20:	00000206 	br	18002b2c <__umodsi3+0x20>
18002b24:	30000c26 	beq	r6,zero,18002b58 <__umodsi3+0x4c>
18002b28:	28000516 	blt	r5,zero,18002b40 <__umodsi3+0x34>
18002b2c:	294b883a 	add	r5,r5,r5
18002b30:	31bfffc4 	addi	r6,r6,-1
18002b34:	18c7883a 	add	r3,r3,r3
18002b38:	293ffa36 	bltu	r5,r4,18002b24 <__alt_data_end+0xf8002b24>
18002b3c:	18000626 	beq	r3,zero,18002b58 <__umodsi3+0x4c>
18002b40:	1806d07a 	srli	r3,r3,1
18002b44:	11400136 	bltu	r2,r5,18002b4c <__umodsi3+0x40>
18002b48:	1145c83a 	sub	r2,r2,r5
18002b4c:	280ad07a 	srli	r5,r5,1
18002b50:	183ffb1e 	bne	r3,zero,18002b40 <__alt_data_end+0xf8002b40>
18002b54:	f800283a 	ret
18002b58:	f800283a 	ret
18002b5c:	00c00044 	movi	r3,1
18002b60:	003ff706 	br	18002b40 <__alt_data_end+0xf8002b40>

18002b64 <__mulsi3>:
18002b64:	0005883a 	mov	r2,zero
18002b68:	20000726 	beq	r4,zero,18002b88 <__mulsi3+0x24>
18002b6c:	20c0004c 	andi	r3,r4,1
18002b70:	2008d07a 	srli	r4,r4,1
18002b74:	18000126 	beq	r3,zero,18002b7c <__mulsi3+0x18>
18002b78:	1145883a 	add	r2,r2,r5
18002b7c:	294b883a 	add	r5,r5,r5
18002b80:	203ffa1e 	bne	r4,zero,18002b6c <__alt_data_end+0xf8002b6c>
18002b84:	f800283a 	ret
18002b88:	f800283a 	ret

18002b8c <_printf_r>:
18002b8c:	defffd04 	addi	sp,sp,-12
18002b90:	2805883a 	mov	r2,r5
18002b94:	dfc00015 	stw	ra,0(sp)
18002b98:	d9800115 	stw	r6,4(sp)
18002b9c:	d9c00215 	stw	r7,8(sp)
18002ba0:	21400217 	ldw	r5,8(r4)
18002ba4:	d9c00104 	addi	r7,sp,4
18002ba8:	100d883a 	mov	r6,r2
18002bac:	80051600 	call	18005160 <___vfprintf_internal_r>
18002bb0:	dfc00017 	ldw	ra,0(sp)
18002bb4:	dec00304 	addi	sp,sp,12
18002bb8:	f800283a 	ret

18002bbc <printf>:
18002bbc:	defffc04 	addi	sp,sp,-16
18002bc0:	dfc00015 	stw	ra,0(sp)
18002bc4:	d9400115 	stw	r5,4(sp)
18002bc8:	d9800215 	stw	r6,8(sp)
18002bcc:	d9c00315 	stw	r7,12(sp)
18002bd0:	008600b4 	movhi	r2,6146
18002bd4:	10a11f04 	addi	r2,r2,-31620
18002bd8:	10800017 	ldw	r2,0(r2)
18002bdc:	200b883a 	mov	r5,r4
18002be0:	d9800104 	addi	r6,sp,4
18002be4:	11000217 	ldw	r4,8(r2)
18002be8:	800743c0 	call	1800743c <__vfprintf_internal>
18002bec:	dfc00017 	ldw	ra,0(sp)
18002bf0:	dec00404 	addi	sp,sp,16
18002bf4:	f800283a 	ret

18002bf8 <_puts_r>:
18002bf8:	defff604 	addi	sp,sp,-40
18002bfc:	dc000715 	stw	r16,28(sp)
18002c00:	2021883a 	mov	r16,r4
18002c04:	2809883a 	mov	r4,r5
18002c08:	dc400815 	stw	r17,32(sp)
18002c0c:	dfc00915 	stw	ra,36(sp)
18002c10:	2823883a 	mov	r17,r5
18002c14:	8002e0c0 	call	18002e0c <strlen>
18002c18:	10c00044 	addi	r3,r2,1
18002c1c:	d8800115 	stw	r2,4(sp)
18002c20:	00860074 	movhi	r2,6145
18002c24:	1098e904 	addi	r2,r2,25508
18002c28:	d8800215 	stw	r2,8(sp)
18002c2c:	00800044 	movi	r2,1
18002c30:	d8800315 	stw	r2,12(sp)
18002c34:	00800084 	movi	r2,2
18002c38:	dc400015 	stw	r17,0(sp)
18002c3c:	d8c00615 	stw	r3,24(sp)
18002c40:	dec00415 	stw	sp,16(sp)
18002c44:	d8800515 	stw	r2,20(sp)
18002c48:	80000226 	beq	r16,zero,18002c54 <_puts_r+0x5c>
18002c4c:	80800e17 	ldw	r2,56(r16)
18002c50:	10001426 	beq	r2,zero,18002ca4 <_puts_r+0xac>
18002c54:	81400217 	ldw	r5,8(r16)
18002c58:	2880030b 	ldhu	r2,12(r5)
18002c5c:	10c8000c 	andi	r3,r2,8192
18002c60:	1800061e 	bne	r3,zero,18002c7c <_puts_r+0x84>
18002c64:	29001917 	ldw	r4,100(r5)
18002c68:	00f7ffc4 	movi	r3,-8193
18002c6c:	10880014 	ori	r2,r2,8192
18002c70:	20c6703a 	and	r3,r4,r3
18002c74:	2880030d 	sth	r2,12(r5)
18002c78:	28c01915 	stw	r3,100(r5)
18002c7c:	d9800404 	addi	r6,sp,16
18002c80:	8009883a 	mov	r4,r16
18002c84:	80099a40 	call	180099a4 <__sfvwrite_r>
18002c88:	1000091e 	bne	r2,zero,18002cb0 <_puts_r+0xb8>
18002c8c:	00800284 	movi	r2,10
18002c90:	dfc00917 	ldw	ra,36(sp)
18002c94:	dc400817 	ldw	r17,32(sp)
18002c98:	dc000717 	ldw	r16,28(sp)
18002c9c:	dec00a04 	addi	sp,sp,40
18002ca0:	f800283a 	ret
18002ca4:	8009883a 	mov	r4,r16
18002ca8:	80095200 	call	18009520 <__sinit>
18002cac:	003fe906 	br	18002c54 <__alt_data_end+0xf8002c54>
18002cb0:	00bfffc4 	movi	r2,-1
18002cb4:	003ff606 	br	18002c90 <__alt_data_end+0xf8002c90>

18002cb8 <puts>:
18002cb8:	008600b4 	movhi	r2,6146
18002cbc:	10a11f04 	addi	r2,r2,-31620
18002cc0:	200b883a 	mov	r5,r4
18002cc4:	11000017 	ldw	r4,0(r2)
18002cc8:	8002bf81 	jmpi	18002bf8 <_puts_r>

18002ccc <srand>:
18002ccc:	008600b4 	movhi	r2,6146
18002cd0:	10a11f04 	addi	r2,r2,-31620
18002cd4:	10800017 	ldw	r2,0(r2)
18002cd8:	11002915 	stw	r4,164(r2)
18002cdc:	10002a15 	stw	zero,168(r2)
18002ce0:	f800283a 	ret

18002ce4 <rand>:
18002ce4:	008600b4 	movhi	r2,6146
18002ce8:	defffe04 	addi	sp,sp,-8
18002cec:	10a11f04 	addi	r2,r2,-31620
18002cf0:	dc000015 	stw	r16,0(sp)
18002cf4:	14000017 	ldw	r16,0(r2)
18002cf8:	dfc00115 	stw	ra,4(sp)
18002cfc:	01932574 	movhi	r6,19605
18002d00:	81002917 	ldw	r4,164(r16)
18002d04:	81402a17 	ldw	r5,168(r16)
18002d08:	01d614b4 	movhi	r7,22610
18002d0c:	319fcb44 	addi	r6,r6,32557
18002d10:	39fd0b44 	addi	r7,r7,-3027
18002d14:	800fdf80 	call	1800fdf8 <__muldi3>
18002d18:	11000044 	addi	r4,r2,1
18002d1c:	2085803a 	cmpltu	r2,r4,r2
18002d20:	10c7883a 	add	r3,r2,r3
18002d24:	00a00034 	movhi	r2,32768
18002d28:	10bfffc4 	addi	r2,r2,-1
18002d2c:	1884703a 	and	r2,r3,r2
18002d30:	81002915 	stw	r4,164(r16)
18002d34:	80c02a15 	stw	r3,168(r16)
18002d38:	dfc00117 	ldw	ra,4(sp)
18002d3c:	dc000017 	ldw	r16,0(sp)
18002d40:	dec00204 	addi	sp,sp,8
18002d44:	f800283a 	ret

18002d48 <_sprintf_r>:
18002d48:	deffe404 	addi	sp,sp,-112
18002d4c:	2807883a 	mov	r3,r5
18002d50:	dfc01a15 	stw	ra,104(sp)
18002d54:	d9c01b15 	stw	r7,108(sp)
18002d58:	00a00034 	movhi	r2,32768
18002d5c:	10bfffc4 	addi	r2,r2,-1
18002d60:	02008204 	movi	r8,520
18002d64:	d8800215 	stw	r2,8(sp)
18002d68:	d8800515 	stw	r2,20(sp)
18002d6c:	d9c01b04 	addi	r7,sp,108
18002d70:	d80b883a 	mov	r5,sp
18002d74:	00bfffc4 	movi	r2,-1
18002d78:	d8c00015 	stw	r3,0(sp)
18002d7c:	d8c00415 	stw	r3,16(sp)
18002d80:	da00030d 	sth	r8,12(sp)
18002d84:	d880038d 	sth	r2,14(sp)
18002d88:	8002ea40 	call	18002ea4 <___svfprintf_internal_r>
18002d8c:	d8c00017 	ldw	r3,0(sp)
18002d90:	18000005 	stb	zero,0(r3)
18002d94:	dfc01a17 	ldw	ra,104(sp)
18002d98:	dec01c04 	addi	sp,sp,112
18002d9c:	f800283a 	ret

18002da0 <sprintf>:
18002da0:	deffe304 	addi	sp,sp,-116
18002da4:	2007883a 	mov	r3,r4
18002da8:	dfc01a15 	stw	ra,104(sp)
18002dac:	d9801b15 	stw	r6,108(sp)
18002db0:	d9c01c15 	stw	r7,112(sp)
18002db4:	010600b4 	movhi	r4,6146
18002db8:	21211f04 	addi	r4,r4,-31620
18002dbc:	21000017 	ldw	r4,0(r4)
18002dc0:	00a00034 	movhi	r2,32768
18002dc4:	10bfffc4 	addi	r2,r2,-1
18002dc8:	280d883a 	mov	r6,r5
18002dcc:	02008204 	movi	r8,520
18002dd0:	d8800215 	stw	r2,8(sp)
18002dd4:	d8800515 	stw	r2,20(sp)
18002dd8:	d9c01b04 	addi	r7,sp,108
18002ddc:	d80b883a 	mov	r5,sp
18002de0:	00bfffc4 	movi	r2,-1
18002de4:	d8c00015 	stw	r3,0(sp)
18002de8:	d8c00415 	stw	r3,16(sp)
18002dec:	da00030d 	sth	r8,12(sp)
18002df0:	d880038d 	sth	r2,14(sp)
18002df4:	8002ea40 	call	18002ea4 <___svfprintf_internal_r>
18002df8:	d8c00017 	ldw	r3,0(sp)
18002dfc:	18000005 	stb	zero,0(r3)
18002e00:	dfc01a17 	ldw	ra,104(sp)
18002e04:	dec01d04 	addi	sp,sp,116
18002e08:	f800283a 	ret

18002e0c <strlen>:
18002e0c:	208000cc 	andi	r2,r4,3
18002e10:	10002026 	beq	r2,zero,18002e94 <strlen+0x88>
18002e14:	20800007 	ldb	r2,0(r4)
18002e18:	10002026 	beq	r2,zero,18002e9c <strlen+0x90>
18002e1c:	2005883a 	mov	r2,r4
18002e20:	00000206 	br	18002e2c <strlen+0x20>
18002e24:	10c00007 	ldb	r3,0(r2)
18002e28:	18001826 	beq	r3,zero,18002e8c <strlen+0x80>
18002e2c:	10800044 	addi	r2,r2,1
18002e30:	10c000cc 	andi	r3,r2,3
18002e34:	183ffb1e 	bne	r3,zero,18002e24 <__alt_data_end+0xf8002e24>
18002e38:	10c00017 	ldw	r3,0(r2)
18002e3c:	01ffbff4 	movhi	r7,65279
18002e40:	39ffbfc4 	addi	r7,r7,-257
18002e44:	00ca303a 	nor	r5,zero,r3
18002e48:	01a02074 	movhi	r6,32897
18002e4c:	19c7883a 	add	r3,r3,r7
18002e50:	31a02004 	addi	r6,r6,-32640
18002e54:	1946703a 	and	r3,r3,r5
18002e58:	1986703a 	and	r3,r3,r6
18002e5c:	1800091e 	bne	r3,zero,18002e84 <strlen+0x78>
18002e60:	10800104 	addi	r2,r2,4
18002e64:	10c00017 	ldw	r3,0(r2)
18002e68:	19cb883a 	add	r5,r3,r7
18002e6c:	00c6303a 	nor	r3,zero,r3
18002e70:	28c6703a 	and	r3,r5,r3
18002e74:	1986703a 	and	r3,r3,r6
18002e78:	183ff926 	beq	r3,zero,18002e60 <__alt_data_end+0xf8002e60>
18002e7c:	00000106 	br	18002e84 <strlen+0x78>
18002e80:	10800044 	addi	r2,r2,1
18002e84:	10c00007 	ldb	r3,0(r2)
18002e88:	183ffd1e 	bne	r3,zero,18002e80 <__alt_data_end+0xf8002e80>
18002e8c:	1105c83a 	sub	r2,r2,r4
18002e90:	f800283a 	ret
18002e94:	2005883a 	mov	r2,r4
18002e98:	003fe706 	br	18002e38 <__alt_data_end+0xf8002e38>
18002e9c:	0005883a 	mov	r2,zero
18002ea0:	f800283a 	ret

18002ea4 <___svfprintf_internal_r>:
18002ea4:	deffb704 	addi	sp,sp,-292
18002ea8:	dfc04815 	stw	ra,288(sp)
18002eac:	ddc04615 	stw	r23,280(sp)
18002eb0:	d9402d15 	stw	r5,180(sp)
18002eb4:	d9003915 	stw	r4,228(sp)
18002eb8:	302f883a 	mov	r23,r6
18002ebc:	d9c02e15 	stw	r7,184(sp)
18002ec0:	df004715 	stw	fp,284(sp)
18002ec4:	dd804515 	stw	r22,276(sp)
18002ec8:	dd404415 	stw	r21,272(sp)
18002ecc:	dd004315 	stw	r20,268(sp)
18002ed0:	dcc04215 	stw	r19,264(sp)
18002ed4:	dc804115 	stw	r18,260(sp)
18002ed8:	dc404015 	stw	r17,256(sp)
18002edc:	dc003f15 	stw	r16,252(sp)
18002ee0:	800a0a00 	call	1800a0a0 <_localeconv_r>
18002ee4:	10800017 	ldw	r2,0(r2)
18002ee8:	1009883a 	mov	r4,r2
18002eec:	d8803415 	stw	r2,208(sp)
18002ef0:	8002e0c0 	call	18002e0c <strlen>
18002ef4:	d8c02d17 	ldw	r3,180(sp)
18002ef8:	d8803815 	stw	r2,224(sp)
18002efc:	1880030b 	ldhu	r2,12(r3)
18002f00:	1080200c 	andi	r2,r2,128
18002f04:	10000226 	beq	r2,zero,18002f10 <___svfprintf_internal_r+0x6c>
18002f08:	18800417 	ldw	r2,16(r3)
18002f0c:	1006b126 	beq	r2,zero,180049d4 <___svfprintf_internal_r+0x1b30>
18002f10:	dcc03917 	ldw	r19,228(sp)
18002f14:	d8c00404 	addi	r3,sp,16
18002f18:	05460074 	movhi	r21,6145
18002f1c:	d9001e04 	addi	r4,sp,120
18002f20:	ad58fa84 	addi	r21,r21,25578
18002f24:	d8c01e15 	stw	r3,120(sp)
18002f28:	d8002015 	stw	zero,128(sp)
18002f2c:	d8001f15 	stw	zero,124(sp)
18002f30:	d8003315 	stw	zero,204(sp)
18002f34:	d8003615 	stw	zero,216(sp)
18002f38:	d8003715 	stw	zero,220(sp)
18002f3c:	1811883a 	mov	r8,r3
18002f40:	d8003a15 	stw	zero,232(sp)
18002f44:	d8003b15 	stw	zero,236(sp)
18002f48:	d8002f15 	stw	zero,188(sp)
18002f4c:	d9002815 	stw	r4,160(sp)
18002f50:	b8800007 	ldb	r2,0(r23)
18002f54:	10027726 	beq	r2,zero,18003934 <___svfprintf_internal_r+0xa90>
18002f58:	00c00944 	movi	r3,37
18002f5c:	b823883a 	mov	r17,r23
18002f60:	10c0021e 	bne	r2,r3,18002f6c <___svfprintf_internal_r+0xc8>
18002f64:	00001406 	br	18002fb8 <___svfprintf_internal_r+0x114>
18002f68:	10c00326 	beq	r2,r3,18002f78 <___svfprintf_internal_r+0xd4>
18002f6c:	8c400044 	addi	r17,r17,1
18002f70:	88800007 	ldb	r2,0(r17)
18002f74:	103ffc1e 	bne	r2,zero,18002f68 <__alt_data_end+0xf8002f68>
18002f78:	8de1c83a 	sub	r16,r17,r23
18002f7c:	80000e26 	beq	r16,zero,18002fb8 <___svfprintf_internal_r+0x114>
18002f80:	d8c02017 	ldw	r3,128(sp)
18002f84:	d8801f17 	ldw	r2,124(sp)
18002f88:	45c00015 	stw	r23,0(r8)
18002f8c:	1c07883a 	add	r3,r3,r16
18002f90:	10800044 	addi	r2,r2,1
18002f94:	d8c02015 	stw	r3,128(sp)
18002f98:	44000115 	stw	r16,4(r8)
18002f9c:	d8801f15 	stw	r2,124(sp)
18002fa0:	00c001c4 	movi	r3,7
18002fa4:	18809916 	blt	r3,r2,1800320c <___svfprintf_internal_r+0x368>
18002fa8:	42000204 	addi	r8,r8,8
18002fac:	d9402f17 	ldw	r5,188(sp)
18002fb0:	2c0b883a 	add	r5,r5,r16
18002fb4:	d9402f15 	stw	r5,188(sp)
18002fb8:	88800007 	ldb	r2,0(r17)
18002fbc:	10009a26 	beq	r2,zero,18003228 <___svfprintf_internal_r+0x384>
18002fc0:	8dc00044 	addi	r23,r17,1
18002fc4:	8c400047 	ldb	r17,1(r17)
18002fc8:	0021883a 	mov	r16,zero
18002fcc:	00bfffc4 	movi	r2,-1
18002fd0:	0025883a 	mov	r18,zero
18002fd4:	dc002905 	stb	r16,164(sp)
18002fd8:	d8002785 	stb	zero,158(sp)
18002fdc:	d8002b05 	stb	zero,172(sp)
18002fe0:	d8802a15 	stw	r2,168(sp)
18002fe4:	d8003115 	stw	zero,196(sp)
18002fe8:	05001604 	movi	r20,88
18002fec:	05800244 	movi	r22,9
18002ff0:	4039883a 	mov	fp,r8
18002ff4:	9021883a 	mov	r16,r18
18002ff8:	bdc00044 	addi	r23,r23,1
18002ffc:	88bff804 	addi	r2,r17,-32
18003000:	a0831e36 	bltu	r20,r2,18003c7c <___svfprintf_internal_r+0xdd8>
18003004:	100490ba 	slli	r2,r2,2
18003008:	00c60034 	movhi	r3,6144
1800300c:	18cc0704 	addi	r3,r3,12316
18003010:	10c5883a 	add	r2,r2,r3
18003014:	10800017 	ldw	r2,0(r2)
18003018:	1000683a 	jmp	r2
1800301c:	18003bc4 	addi	zero,r3,239
18003020:	18003c7c 	xorhi	zero,r3,241
18003024:	18003c7c 	xorhi	zero,r3,241
18003028:	18003bb8 	rdprs	zero,r3,238
1800302c:	18003c7c 	xorhi	zero,r3,241
18003030:	18003c7c 	xorhi	zero,r3,241
18003034:	18003c7c 	xorhi	zero,r3,241
18003038:	18003c7c 	xorhi	zero,r3,241
1800303c:	18003c7c 	xorhi	zero,r3,241
18003040:	18003c7c 	xorhi	zero,r3,241
18003044:	18003284 	addi	zero,r3,202
18003048:	18003ac8 	cmpgei	zero,r3,235
1800304c:	18003c7c 	xorhi	zero,r3,241
18003050:	18003190 	cmplti	zero,r3,198
18003054:	180032a8 	cmpgeui	zero,r3,202
18003058:	18003c7c 	xorhi	zero,r3,241
1800305c:	18003334 	orhi	zero,r3,204
18003060:	180032f8 	rdprs	zero,r3,203
18003064:	180032f8 	rdprs	zero,r3,203
18003068:	180032f8 	rdprs	zero,r3,203
1800306c:	180032f8 	rdprs	zero,r3,203
18003070:	180032f8 	rdprs	zero,r3,203
18003074:	180032f8 	rdprs	zero,r3,203
18003078:	180032f8 	rdprs	zero,r3,203
1800307c:	180032f8 	rdprs	zero,r3,203
18003080:	180032f8 	rdprs	zero,r3,203
18003084:	18003c7c 	xorhi	zero,r3,241
18003088:	18003c7c 	xorhi	zero,r3,241
1800308c:	18003c7c 	xorhi	zero,r3,241
18003090:	18003c7c 	xorhi	zero,r3,241
18003094:	18003c7c 	xorhi	zero,r3,241
18003098:	18003c7c 	xorhi	zero,r3,241
1800309c:	18003c7c 	xorhi	zero,r3,241
180030a0:	18003c7c 	xorhi	zero,r3,241
180030a4:	18003c7c 	xorhi	zero,r3,241
180030a8:	18003c7c 	xorhi	zero,r3,241
180030ac:	180033f8 	rdprs	zero,r3,207
180030b0:	18003340 	call	11800334 <__alt_mem_onchip_memory2_0+0x11800334>
180030b4:	18003c7c 	xorhi	zero,r3,241
180030b8:	18003340 	call	11800334 <__alt_mem_onchip_memory2_0+0x11800334>
180030bc:	18003c7c 	xorhi	zero,r3,241
180030c0:	18003c7c 	xorhi	zero,r3,241
180030c4:	18003c7c 	xorhi	zero,r3,241
180030c8:	18003c7c 	xorhi	zero,r3,241
180030cc:	180033ec 	andhi	zero,r3,207
180030d0:	18003c7c 	xorhi	zero,r3,241
180030d4:	18003c7c 	xorhi	zero,r3,241
180030d8:	180034c0 	call	1180034c <__alt_mem_onchip_memory2_0+0x1180034c>
180030dc:	18003c7c 	xorhi	zero,r3,241
180030e0:	18003c7c 	xorhi	zero,r3,241
180030e4:	18003c7c 	xorhi	zero,r3,241
180030e8:	18003c7c 	xorhi	zero,r3,241
180030ec:	18003c7c 	xorhi	zero,r3,241
180030f0:	1800393c 	xorhi	zero,r3,228
180030f4:	18003c7c 	xorhi	zero,r3,241
180030f8:	18003c7c 	xorhi	zero,r3,241
180030fc:	180039a8 	cmpgeui	zero,r3,230
18003100:	18003c7c 	xorhi	zero,r3,241
18003104:	18003c7c 	xorhi	zero,r3,241
18003108:	18003c7c 	xorhi	zero,r3,241
1800310c:	18003c7c 	xorhi	zero,r3,241
18003110:	18003c7c 	xorhi	zero,r3,241
18003114:	18003c7c 	xorhi	zero,r3,241
18003118:	18003c7c 	xorhi	zero,r3,241
1800311c:	18003c7c 	xorhi	zero,r3,241
18003120:	18003c7c 	xorhi	zero,r3,241
18003124:	18003c7c 	xorhi	zero,r3,241
18003128:	18003a64 	muli	zero,r3,233
1800312c:	18003be4 	muli	zero,r3,239
18003130:	18003340 	call	11800334 <__alt_mem_onchip_memory2_0+0x11800334>
18003134:	18003340 	call	11800334 <__alt_mem_onchip_memory2_0+0x11800334>
18003138:	18003340 	call	11800334 <__alt_mem_onchip_memory2_0+0x11800334>
1800313c:	18003c58 	cmpnei	zero,r3,241
18003140:	18003be4 	muli	zero,r3,239
18003144:	18003c7c 	xorhi	zero,r3,241
18003148:	18003c7c 	xorhi	zero,r3,241
1800314c:	18003c04 	addi	zero,r3,240
18003150:	18003c7c 	xorhi	zero,r3,241
18003154:	18003c18 	cmpnei	zero,r3,240
18003158:	18003aa8 	cmpgeui	zero,r3,234
1800315c:	1800319c 	xori	zero,r3,198
18003160:	18003ae0 	cmpeqi	zero,r3,235
18003164:	18003c7c 	xorhi	zero,r3,241
18003168:	18003aec 	andhi	zero,r3,235
1800316c:	18003c7c 	xorhi	zero,r3,241
18003170:	18003b50 	cmplti	zero,r3,237
18003174:	18003c7c 	xorhi	zero,r3,241
18003178:	18003c7c 	xorhi	zero,r3,241
1800317c:	18003b70 	cmpltui	zero,r3,237
18003180:	d8c03117 	ldw	r3,196(sp)
18003184:	d8802e15 	stw	r2,184(sp)
18003188:	00c7c83a 	sub	r3,zero,r3
1800318c:	d8c03115 	stw	r3,196(sp)
18003190:	84000114 	ori	r16,r16,4
18003194:	bc400007 	ldb	r17,0(r23)
18003198:	003f9706 	br	18002ff8 <__alt_data_end+0xf8002ff8>
1800319c:	00800c04 	movi	r2,48
180031a0:	d8802705 	stb	r2,156(sp)
180031a4:	00801e04 	movi	r2,120
180031a8:	d8802745 	stb	r2,157(sp)
180031ac:	d9002a17 	ldw	r4,168(sp)
180031b0:	d8802e17 	ldw	r2,184(sp)
180031b4:	d8002785 	stb	zero,158(sp)
180031b8:	e011883a 	mov	r8,fp
180031bc:	10c00104 	addi	r3,r2,4
180031c0:	15000017 	ldw	r20,0(r2)
180031c4:	002d883a 	mov	r22,zero
180031c8:	80800094 	ori	r2,r16,2
180031cc:	2002b616 	blt	r4,zero,18003ca8 <___svfprintf_internal_r+0xe04>
180031d0:	00bfdfc4 	movi	r2,-129
180031d4:	80a4703a 	and	r18,r16,r2
180031d8:	d8c02e15 	stw	r3,184(sp)
180031dc:	94800094 	ori	r18,r18,2
180031e0:	a002a01e 	bne	r20,zero,18003c64 <___svfprintf_internal_r+0xdc0>
180031e4:	01460074 	movhi	r5,6145
180031e8:	2958f304 	addi	r5,r5,25548
180031ec:	d9403a15 	stw	r5,232(sp)
180031f0:	04401e04 	movi	r17,120
180031f4:	d8c02a17 	ldw	r3,168(sp)
180031f8:	0039883a 	mov	fp,zero
180031fc:	1801e626 	beq	r3,zero,18003998 <___svfprintf_internal_r+0xaf4>
18003200:	0029883a 	mov	r20,zero
18003204:	002d883a 	mov	r22,zero
18003208:	00020506 	br	18003a20 <___svfprintf_internal_r+0xb7c>
1800320c:	d9402d17 	ldw	r5,180(sp)
18003210:	d9801e04 	addi	r6,sp,120
18003214:	9809883a 	mov	r4,r19
18003218:	800c8440 	call	1800c844 <__ssprint_r>
1800321c:	1000081e 	bne	r2,zero,18003240 <___svfprintf_internal_r+0x39c>
18003220:	da000404 	addi	r8,sp,16
18003224:	003f6106 	br	18002fac <__alt_data_end+0xf8002fac>
18003228:	d8802017 	ldw	r2,128(sp)
1800322c:	10000426 	beq	r2,zero,18003240 <___svfprintf_internal_r+0x39c>
18003230:	d9402d17 	ldw	r5,180(sp)
18003234:	d9003917 	ldw	r4,228(sp)
18003238:	d9801e04 	addi	r6,sp,120
1800323c:	800c8440 	call	1800c844 <__ssprint_r>
18003240:	d8802d17 	ldw	r2,180(sp)
18003244:	10c0030b 	ldhu	r3,12(r2)
18003248:	d8802f17 	ldw	r2,188(sp)
1800324c:	18c0100c 	andi	r3,r3,64
18003250:	1806251e 	bne	r3,zero,18004ae8 <___svfprintf_internal_r+0x1c44>
18003254:	dfc04817 	ldw	ra,288(sp)
18003258:	df004717 	ldw	fp,284(sp)
1800325c:	ddc04617 	ldw	r23,280(sp)
18003260:	dd804517 	ldw	r22,276(sp)
18003264:	dd404417 	ldw	r21,272(sp)
18003268:	dd004317 	ldw	r20,268(sp)
1800326c:	dcc04217 	ldw	r19,264(sp)
18003270:	dc804117 	ldw	r18,260(sp)
18003274:	dc404017 	ldw	r17,256(sp)
18003278:	dc003f17 	ldw	r16,252(sp)
1800327c:	dec04904 	addi	sp,sp,292
18003280:	f800283a 	ret
18003284:	d9002e17 	ldw	r4,184(sp)
18003288:	d9402e17 	ldw	r5,184(sp)
1800328c:	21000017 	ldw	r4,0(r4)
18003290:	28800104 	addi	r2,r5,4
18003294:	d9003115 	stw	r4,196(sp)
18003298:	203fb916 	blt	r4,zero,18003180 <__alt_data_end+0xf8003180>
1800329c:	d8802e15 	stw	r2,184(sp)
180032a0:	bc400007 	ldb	r17,0(r23)
180032a4:	003f5406 	br	18002ff8 <__alt_data_end+0xf8002ff8>
180032a8:	bc400007 	ldb	r17,0(r23)
180032ac:	01000a84 	movi	r4,42
180032b0:	b8c00044 	addi	r3,r23,1
180032b4:	89076926 	beq	r17,r4,1800505c <___svfprintf_internal_r+0x21b8>
180032b8:	8cbff404 	addi	r18,r17,-48
180032bc:	b486b936 	bltu	r22,r18,18004da4 <___svfprintf_internal_r+0x1f00>
180032c0:	0009883a 	mov	r4,zero
180032c4:	1823883a 	mov	r17,r3
180032c8:	01400284 	movi	r5,10
180032cc:	8002b640 	call	18002b64 <__mulsi3>
180032d0:	88c00007 	ldb	r3,0(r17)
180032d4:	1489883a 	add	r4,r2,r18
180032d8:	8dc00044 	addi	r23,r17,1
180032dc:	1cbff404 	addi	r18,r3,-48
180032e0:	b823883a 	mov	r17,r23
180032e4:	b4bff82e 	bgeu	r22,r18,180032c8 <__alt_data_end+0xf80032c8>
180032e8:	1823883a 	mov	r17,r3
180032ec:	20060416 	blt	r4,zero,18004b00 <___svfprintf_internal_r+0x1c5c>
180032f0:	d9002a15 	stw	r4,168(sp)
180032f4:	003f4106 	br	18002ffc <__alt_data_end+0xf8002ffc>
180032f8:	8cbff404 	addi	r18,r17,-48
180032fc:	d8003115 	stw	zero,196(sp)
18003300:	0009883a 	mov	r4,zero
18003304:	b823883a 	mov	r17,r23
18003308:	01400284 	movi	r5,10
1800330c:	8002b640 	call	18002b64 <__mulsi3>
18003310:	88c00007 	ldb	r3,0(r17)
18003314:	9089883a 	add	r4,r18,r2
18003318:	bdc00044 	addi	r23,r23,1
1800331c:	1cbff404 	addi	r18,r3,-48
18003320:	b823883a 	mov	r17,r23
18003324:	b4bff82e 	bgeu	r22,r18,18003308 <__alt_data_end+0xf8003308>
18003328:	1823883a 	mov	r17,r3
1800332c:	d9003115 	stw	r4,196(sp)
18003330:	003f3206 	br	18002ffc <__alt_data_end+0xf8002ffc>
18003334:	84002014 	ori	r16,r16,128
18003338:	bc400007 	ldb	r17,0(r23)
1800333c:	003f2e06 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003340:	8025883a 	mov	r18,r16
18003344:	dc002903 	ldbu	r16,164(sp)
18003348:	e011883a 	mov	r8,fp
1800334c:	84003fcc 	andi	r16,r16,255
18003350:	8007721e 	bne	r16,zero,1800511c <___svfprintf_internal_r+0x2278>
18003354:	9080020c 	andi	r2,r18,8
18003358:	1004a526 	beq	r2,zero,180045f0 <___svfprintf_internal_r+0x174c>
1800335c:	d9002e17 	ldw	r4,184(sp)
18003360:	d9402e17 	ldw	r5,184(sp)
18003364:	d8802e17 	ldw	r2,184(sp)
18003368:	21000017 	ldw	r4,0(r4)
1800336c:	29400117 	ldw	r5,4(r5)
18003370:	10800204 	addi	r2,r2,8
18003374:	d9003615 	stw	r4,216(sp)
18003378:	d9403715 	stw	r5,220(sp)
1800337c:	d8802e15 	stw	r2,184(sp)
18003380:	d9003617 	ldw	r4,216(sp)
18003384:	d9403717 	ldw	r5,220(sp)
18003388:	da003e15 	stw	r8,248(sp)
1800338c:	04000044 	movi	r16,1
18003390:	800c5640 	call	1800c564 <__fpclassifyd>
18003394:	da003e17 	ldw	r8,248(sp)
18003398:	1404731e 	bne	r2,r16,18004568 <___svfprintf_internal_r+0x16c4>
1800339c:	d9003617 	ldw	r4,216(sp)
180033a0:	d9403717 	ldw	r5,220(sp)
180033a4:	000d883a 	mov	r6,zero
180033a8:	000f883a 	mov	r7,zero
180033ac:	8011ea40 	call	18011ea4 <__ledf2>
180033b0:	da003e17 	ldw	r8,248(sp)
180033b4:	10061b16 	blt	r2,zero,18004c24 <___svfprintf_internal_r+0x1d80>
180033b8:	df002783 	ldbu	fp,158(sp)
180033bc:	008011c4 	movi	r2,71
180033c0:	1445810e 	bge	r2,r17,180049c8 <___svfprintf_internal_r+0x1b24>
180033c4:	04060074 	movhi	r16,6145
180033c8:	8418eb04 	addi	r16,r16,25516
180033cc:	00c000c4 	movi	r3,3
180033d0:	00bfdfc4 	movi	r2,-129
180033d4:	d8c02915 	stw	r3,164(sp)
180033d8:	90a4703a 	and	r18,r18,r2
180033dc:	d8c02b15 	stw	r3,172(sp)
180033e0:	d8002a15 	stw	zero,168(sp)
180033e4:	d8003215 	stw	zero,200(sp)
180033e8:	00006c06 	br	1800359c <___svfprintf_internal_r+0x6f8>
180033ec:	84000214 	ori	r16,r16,8
180033f0:	bc400007 	ldb	r17,0(r23)
180033f4:	003f0006 	br	18002ff8 <__alt_data_end+0xf8002ff8>
180033f8:	8025883a 	mov	r18,r16
180033fc:	dc002903 	ldbu	r16,164(sp)
18003400:	e011883a 	mov	r8,fp
18003404:	84003fcc 	andi	r16,r16,255
18003408:	80073f1e 	bne	r16,zero,18005108 <___svfprintf_internal_r+0x2264>
1800340c:	94800414 	ori	r18,r18,16
18003410:	9080080c 	andi	r2,r18,32
18003414:	1003bb26 	beq	r2,zero,18004304 <___svfprintf_internal_r+0x1460>
18003418:	d9002e17 	ldw	r4,184(sp)
1800341c:	20800117 	ldw	r2,4(r4)
18003420:	25000017 	ldw	r20,0(r4)
18003424:	21000204 	addi	r4,r4,8
18003428:	d9002e15 	stw	r4,184(sp)
1800342c:	102d883a 	mov	r22,r2
18003430:	1003bd16 	blt	r2,zero,18004328 <___svfprintf_internal_r+0x1484>
18003434:	d9002a17 	ldw	r4,168(sp)
18003438:	df002783 	ldbu	fp,158(sp)
1800343c:	2003d016 	blt	r4,zero,18004380 <___svfprintf_internal_r+0x14dc>
18003440:	00ffdfc4 	movi	r3,-129
18003444:	a584b03a 	or	r2,r20,r22
18003448:	90e4703a 	and	r18,r18,r3
1800344c:	10015026 	beq	r2,zero,18003990 <___svfprintf_internal_r+0xaec>
18003450:	b0037026 	beq	r22,zero,18004214 <___svfprintf_internal_r+0x1370>
18003454:	dc402915 	stw	r17,164(sp)
18003458:	dc001e04 	addi	r16,sp,120
1800345c:	b023883a 	mov	r17,r22
18003460:	402d883a 	mov	r22,r8
18003464:	a009883a 	mov	r4,r20
18003468:	880b883a 	mov	r5,r17
1800346c:	01800284 	movi	r6,10
18003470:	000f883a 	mov	r7,zero
18003474:	80105000 	call	18010500 <__umoddi3>
18003478:	10800c04 	addi	r2,r2,48
1800347c:	843fffc4 	addi	r16,r16,-1
18003480:	a009883a 	mov	r4,r20
18003484:	880b883a 	mov	r5,r17
18003488:	80800005 	stb	r2,0(r16)
1800348c:	01800284 	movi	r6,10
18003490:	000f883a 	mov	r7,zero
18003494:	800ff040 	call	1800ff04 <__udivdi3>
18003498:	1029883a 	mov	r20,r2
1800349c:	10c4b03a 	or	r2,r2,r3
180034a0:	1823883a 	mov	r17,r3
180034a4:	103fef1e 	bne	r2,zero,18003464 <__alt_data_end+0xf8003464>
180034a8:	d8c02817 	ldw	r3,160(sp)
180034ac:	dc402917 	ldw	r17,164(sp)
180034b0:	b011883a 	mov	r8,r22
180034b4:	1c07c83a 	sub	r3,r3,r16
180034b8:	d8c02b15 	stw	r3,172(sp)
180034bc:	00003106 	br	18003584 <___svfprintf_internal_r+0x6e0>
180034c0:	8025883a 	mov	r18,r16
180034c4:	dc002903 	ldbu	r16,164(sp)
180034c8:	e011883a 	mov	r8,fp
180034cc:	84003fcc 	andi	r16,r16,255
180034d0:	80070a1e 	bne	r16,zero,180050fc <___svfprintf_internal_r+0x2258>
180034d4:	94800414 	ori	r18,r18,16
180034d8:	9080080c 	andi	r2,r18,32
180034dc:	1002f626 	beq	r2,zero,180040b8 <___svfprintf_internal_r+0x1214>
180034e0:	d9002e17 	ldw	r4,184(sp)
180034e4:	d9402a17 	ldw	r5,168(sp)
180034e8:	d8002785 	stb	zero,158(sp)
180034ec:	20800204 	addi	r2,r4,8
180034f0:	25000017 	ldw	r20,0(r4)
180034f4:	25800117 	ldw	r22,4(r4)
180034f8:	28043716 	blt	r5,zero,180045d8 <___svfprintf_internal_r+0x1734>
180034fc:	013fdfc4 	movi	r4,-129
18003500:	a586b03a 	or	r3,r20,r22
18003504:	d8802e15 	stw	r2,184(sp)
18003508:	9124703a 	and	r18,r18,r4
1800350c:	1802f71e 	bne	r3,zero,180040ec <___svfprintf_internal_r+0x1248>
18003510:	d9402a17 	ldw	r5,168(sp)
18003514:	0039883a 	mov	fp,zero
18003518:	2806df26 	beq	r5,zero,18005098 <___svfprintf_internal_r+0x21f4>
1800351c:	0029883a 	mov	r20,zero
18003520:	002d883a 	mov	r22,zero
18003524:	dc001e04 	addi	r16,sp,120
18003528:	a006d0fa 	srli	r3,r20,3
1800352c:	b008977a 	slli	r4,r22,29
18003530:	b02cd0fa 	srli	r22,r22,3
18003534:	a50001cc 	andi	r20,r20,7
18003538:	a0800c04 	addi	r2,r20,48
1800353c:	843fffc4 	addi	r16,r16,-1
18003540:	20e8b03a 	or	r20,r4,r3
18003544:	80800005 	stb	r2,0(r16)
18003548:	a586b03a 	or	r3,r20,r22
1800354c:	183ff61e 	bne	r3,zero,18003528 <__alt_data_end+0xf8003528>
18003550:	90c0004c 	andi	r3,r18,1
18003554:	18013f26 	beq	r3,zero,18003a54 <___svfprintf_internal_r+0xbb0>
18003558:	10803fcc 	andi	r2,r2,255
1800355c:	1080201c 	xori	r2,r2,128
18003560:	10bfe004 	addi	r2,r2,-128
18003564:	00c00c04 	movi	r3,48
18003568:	10c13a26 	beq	r2,r3,18003a54 <___svfprintf_internal_r+0xbb0>
1800356c:	80ffffc5 	stb	r3,-1(r16)
18003570:	d8c02817 	ldw	r3,160(sp)
18003574:	80bfffc4 	addi	r2,r16,-1
18003578:	1021883a 	mov	r16,r2
1800357c:	1887c83a 	sub	r3,r3,r2
18003580:	d8c02b15 	stw	r3,172(sp)
18003584:	d8802b17 	ldw	r2,172(sp)
18003588:	d9002a17 	ldw	r4,168(sp)
1800358c:	1100010e 	bge	r2,r4,18003594 <___svfprintf_internal_r+0x6f0>
18003590:	2005883a 	mov	r2,r4
18003594:	d8802915 	stw	r2,164(sp)
18003598:	d8003215 	stw	zero,200(sp)
1800359c:	e7003fcc 	andi	fp,fp,255
180035a0:	e700201c 	xori	fp,fp,128
180035a4:	e73fe004 	addi	fp,fp,-128
180035a8:	e0000326 	beq	fp,zero,180035b8 <___svfprintf_internal_r+0x714>
180035ac:	d8c02917 	ldw	r3,164(sp)
180035b0:	18c00044 	addi	r3,r3,1
180035b4:	d8c02915 	stw	r3,164(sp)
180035b8:	90c0008c 	andi	r3,r18,2
180035bc:	d8c02c15 	stw	r3,176(sp)
180035c0:	18000326 	beq	r3,zero,180035d0 <___svfprintf_internal_r+0x72c>
180035c4:	d8c02917 	ldw	r3,164(sp)
180035c8:	18c00084 	addi	r3,r3,2
180035cc:	d8c02915 	stw	r3,164(sp)
180035d0:	90c0210c 	andi	r3,r18,132
180035d4:	d8c03015 	stw	r3,192(sp)
180035d8:	1801c31e 	bne	r3,zero,18003ce8 <___svfprintf_internal_r+0xe44>
180035dc:	d9003117 	ldw	r4,196(sp)
180035e0:	d8c02917 	ldw	r3,164(sp)
180035e4:	20e9c83a 	sub	r20,r4,r3
180035e8:	0501bf0e 	bge	zero,r20,18003ce8 <___svfprintf_internal_r+0xe44>
180035ec:	02400404 	movi	r9,16
180035f0:	d8c02017 	ldw	r3,128(sp)
180035f4:	d8801f17 	ldw	r2,124(sp)
180035f8:	4d053d0e 	bge	r9,r20,18004af0 <___svfprintf_internal_r+0x1c4c>
180035fc:	01460074 	movhi	r5,6145
18003600:	2958fe84 	addi	r5,r5,25594
18003604:	dc403c15 	stw	r17,240(sp)
18003608:	d9403515 	stw	r5,212(sp)
1800360c:	a023883a 	mov	r17,r20
18003610:	482d883a 	mov	r22,r9
18003614:	9029883a 	mov	r20,r18
18003618:	070001c4 	movi	fp,7
1800361c:	8025883a 	mov	r18,r16
18003620:	dc002d17 	ldw	r16,180(sp)
18003624:	00000306 	br	18003634 <___svfprintf_internal_r+0x790>
18003628:	8c7ffc04 	addi	r17,r17,-16
1800362c:	42000204 	addi	r8,r8,8
18003630:	b440130e 	bge	r22,r17,18003680 <___svfprintf_internal_r+0x7dc>
18003634:	01060074 	movhi	r4,6145
18003638:	18c00404 	addi	r3,r3,16
1800363c:	10800044 	addi	r2,r2,1
18003640:	2118fe84 	addi	r4,r4,25594
18003644:	41000015 	stw	r4,0(r8)
18003648:	45800115 	stw	r22,4(r8)
1800364c:	d8c02015 	stw	r3,128(sp)
18003650:	d8801f15 	stw	r2,124(sp)
18003654:	e0bff40e 	bge	fp,r2,18003628 <__alt_data_end+0xf8003628>
18003658:	d9801e04 	addi	r6,sp,120
1800365c:	800b883a 	mov	r5,r16
18003660:	9809883a 	mov	r4,r19
18003664:	800c8440 	call	1800c844 <__ssprint_r>
18003668:	103ef51e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
1800366c:	8c7ffc04 	addi	r17,r17,-16
18003670:	d8c02017 	ldw	r3,128(sp)
18003674:	d8801f17 	ldw	r2,124(sp)
18003678:	da000404 	addi	r8,sp,16
1800367c:	b47fed16 	blt	r22,r17,18003634 <__alt_data_end+0xf8003634>
18003680:	9021883a 	mov	r16,r18
18003684:	a025883a 	mov	r18,r20
18003688:	8829883a 	mov	r20,r17
1800368c:	dc403c17 	ldw	r17,240(sp)
18003690:	d9403517 	ldw	r5,212(sp)
18003694:	a0c7883a 	add	r3,r20,r3
18003698:	10800044 	addi	r2,r2,1
1800369c:	41400015 	stw	r5,0(r8)
180036a0:	45000115 	stw	r20,4(r8)
180036a4:	d8c02015 	stw	r3,128(sp)
180036a8:	d8801f15 	stw	r2,124(sp)
180036ac:	010001c4 	movi	r4,7
180036b0:	2082c116 	blt	r4,r2,180041b8 <___svfprintf_internal_r+0x1314>
180036b4:	df002787 	ldb	fp,158(sp)
180036b8:	42000204 	addi	r8,r8,8
180036bc:	e0000c26 	beq	fp,zero,180036f0 <___svfprintf_internal_r+0x84c>
180036c0:	d8801f17 	ldw	r2,124(sp)
180036c4:	d9002784 	addi	r4,sp,158
180036c8:	18c00044 	addi	r3,r3,1
180036cc:	10800044 	addi	r2,r2,1
180036d0:	41000015 	stw	r4,0(r8)
180036d4:	01000044 	movi	r4,1
180036d8:	41000115 	stw	r4,4(r8)
180036dc:	d8c02015 	stw	r3,128(sp)
180036e0:	d8801f15 	stw	r2,124(sp)
180036e4:	010001c4 	movi	r4,7
180036e8:	20825a16 	blt	r4,r2,18004054 <___svfprintf_internal_r+0x11b0>
180036ec:	42000204 	addi	r8,r8,8
180036f0:	d8802c17 	ldw	r2,176(sp)
180036f4:	10000c26 	beq	r2,zero,18003728 <___svfprintf_internal_r+0x884>
180036f8:	d8801f17 	ldw	r2,124(sp)
180036fc:	d9002704 	addi	r4,sp,156
18003700:	18c00084 	addi	r3,r3,2
18003704:	10800044 	addi	r2,r2,1
18003708:	41000015 	stw	r4,0(r8)
1800370c:	01000084 	movi	r4,2
18003710:	41000115 	stw	r4,4(r8)
18003714:	d8c02015 	stw	r3,128(sp)
18003718:	d8801f15 	stw	r2,124(sp)
1800371c:	010001c4 	movi	r4,7
18003720:	20825416 	blt	r4,r2,18004074 <___svfprintf_internal_r+0x11d0>
18003724:	42000204 	addi	r8,r8,8
18003728:	d9003017 	ldw	r4,192(sp)
1800372c:	00802004 	movi	r2,128
18003730:	2081b926 	beq	r4,r2,18003e18 <___svfprintf_internal_r+0xf74>
18003734:	d9402a17 	ldw	r5,168(sp)
18003738:	d8802b17 	ldw	r2,172(sp)
1800373c:	28adc83a 	sub	r22,r5,r2
18003740:	05802f0e 	bge	zero,r22,18003800 <___svfprintf_internal_r+0x95c>
18003744:	07000404 	movi	fp,16
18003748:	d8801f17 	ldw	r2,124(sp)
1800374c:	e583e20e 	bge	fp,r22,180046d8 <___svfprintf_internal_r+0x1834>
18003750:	01460074 	movhi	r5,6145
18003754:	2958fa84 	addi	r5,r5,25578
18003758:	dc402a15 	stw	r17,168(sp)
1800375c:	d9402c15 	stw	r5,176(sp)
18003760:	b023883a 	mov	r17,r22
18003764:	050001c4 	movi	r20,7
18003768:	902d883a 	mov	r22,r18
1800376c:	8025883a 	mov	r18,r16
18003770:	dc002d17 	ldw	r16,180(sp)
18003774:	00000306 	br	18003784 <___svfprintf_internal_r+0x8e0>
18003778:	8c7ffc04 	addi	r17,r17,-16
1800377c:	42000204 	addi	r8,r8,8
18003780:	e440110e 	bge	fp,r17,180037c8 <___svfprintf_internal_r+0x924>
18003784:	18c00404 	addi	r3,r3,16
18003788:	10800044 	addi	r2,r2,1
1800378c:	45400015 	stw	r21,0(r8)
18003790:	47000115 	stw	fp,4(r8)
18003794:	d8c02015 	stw	r3,128(sp)
18003798:	d8801f15 	stw	r2,124(sp)
1800379c:	a0bff60e 	bge	r20,r2,18003778 <__alt_data_end+0xf8003778>
180037a0:	d9801e04 	addi	r6,sp,120
180037a4:	800b883a 	mov	r5,r16
180037a8:	9809883a 	mov	r4,r19
180037ac:	800c8440 	call	1800c844 <__ssprint_r>
180037b0:	103ea31e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180037b4:	8c7ffc04 	addi	r17,r17,-16
180037b8:	d8c02017 	ldw	r3,128(sp)
180037bc:	d8801f17 	ldw	r2,124(sp)
180037c0:	da000404 	addi	r8,sp,16
180037c4:	e47fef16 	blt	fp,r17,18003784 <__alt_data_end+0xf8003784>
180037c8:	9021883a 	mov	r16,r18
180037cc:	b025883a 	mov	r18,r22
180037d0:	882d883a 	mov	r22,r17
180037d4:	dc402a17 	ldw	r17,168(sp)
180037d8:	d9002c17 	ldw	r4,176(sp)
180037dc:	1d87883a 	add	r3,r3,r22
180037e0:	10800044 	addi	r2,r2,1
180037e4:	41000015 	stw	r4,0(r8)
180037e8:	45800115 	stw	r22,4(r8)
180037ec:	d8c02015 	stw	r3,128(sp)
180037f0:	d8801f15 	stw	r2,124(sp)
180037f4:	010001c4 	movi	r4,7
180037f8:	20820e16 	blt	r4,r2,18004034 <___svfprintf_internal_r+0x1190>
180037fc:	42000204 	addi	r8,r8,8
18003800:	9080400c 	andi	r2,r18,256
18003804:	10013a1e 	bne	r2,zero,18003cf0 <___svfprintf_internal_r+0xe4c>
18003808:	d9402b17 	ldw	r5,172(sp)
1800380c:	d8801f17 	ldw	r2,124(sp)
18003810:	44000015 	stw	r16,0(r8)
18003814:	1947883a 	add	r3,r3,r5
18003818:	10800044 	addi	r2,r2,1
1800381c:	41400115 	stw	r5,4(r8)
18003820:	d8c02015 	stw	r3,128(sp)
18003824:	d8801f15 	stw	r2,124(sp)
18003828:	010001c4 	movi	r4,7
1800382c:	2081f316 	blt	r4,r2,18003ffc <___svfprintf_internal_r+0x1158>
18003830:	42000204 	addi	r8,r8,8
18003834:	9480010c 	andi	r18,r18,4
18003838:	90003226 	beq	r18,zero,18003904 <___svfprintf_internal_r+0xa60>
1800383c:	d9403117 	ldw	r5,196(sp)
18003840:	d8802917 	ldw	r2,164(sp)
18003844:	28a1c83a 	sub	r16,r5,r2
18003848:	04002e0e 	bge	zero,r16,18003904 <___svfprintf_internal_r+0xa60>
1800384c:	04400404 	movi	r17,16
18003850:	d8801f17 	ldw	r2,124(sp)
18003854:	8c04db0e 	bge	r17,r16,18004bc4 <___svfprintf_internal_r+0x1d20>
18003858:	01460074 	movhi	r5,6145
1800385c:	2958fe84 	addi	r5,r5,25594
18003860:	d9403515 	stw	r5,212(sp)
18003864:	048001c4 	movi	r18,7
18003868:	dd002d17 	ldw	r20,180(sp)
1800386c:	00000306 	br	1800387c <___svfprintf_internal_r+0x9d8>
18003870:	843ffc04 	addi	r16,r16,-16
18003874:	42000204 	addi	r8,r8,8
18003878:	8c00130e 	bge	r17,r16,180038c8 <___svfprintf_internal_r+0xa24>
1800387c:	01060074 	movhi	r4,6145
18003880:	18c00404 	addi	r3,r3,16
18003884:	10800044 	addi	r2,r2,1
18003888:	2118fe84 	addi	r4,r4,25594
1800388c:	41000015 	stw	r4,0(r8)
18003890:	44400115 	stw	r17,4(r8)
18003894:	d8c02015 	stw	r3,128(sp)
18003898:	d8801f15 	stw	r2,124(sp)
1800389c:	90bff40e 	bge	r18,r2,18003870 <__alt_data_end+0xf8003870>
180038a0:	d9801e04 	addi	r6,sp,120
180038a4:	a00b883a 	mov	r5,r20
180038a8:	9809883a 	mov	r4,r19
180038ac:	800c8440 	call	1800c844 <__ssprint_r>
180038b0:	103e631e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180038b4:	843ffc04 	addi	r16,r16,-16
180038b8:	d8c02017 	ldw	r3,128(sp)
180038bc:	d8801f17 	ldw	r2,124(sp)
180038c0:	da000404 	addi	r8,sp,16
180038c4:	8c3fed16 	blt	r17,r16,1800387c <__alt_data_end+0xf800387c>
180038c8:	d9403517 	ldw	r5,212(sp)
180038cc:	1c07883a 	add	r3,r3,r16
180038d0:	10800044 	addi	r2,r2,1
180038d4:	41400015 	stw	r5,0(r8)
180038d8:	44000115 	stw	r16,4(r8)
180038dc:	d8c02015 	stw	r3,128(sp)
180038e0:	d8801f15 	stw	r2,124(sp)
180038e4:	010001c4 	movi	r4,7
180038e8:	2080060e 	bge	r4,r2,18003904 <___svfprintf_internal_r+0xa60>
180038ec:	d9402d17 	ldw	r5,180(sp)
180038f0:	d9801e04 	addi	r6,sp,120
180038f4:	9809883a 	mov	r4,r19
180038f8:	800c8440 	call	1800c844 <__ssprint_r>
180038fc:	103e501e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18003900:	d8c02017 	ldw	r3,128(sp)
18003904:	d8803117 	ldw	r2,196(sp)
18003908:	d9002917 	ldw	r4,164(sp)
1800390c:	1100010e 	bge	r2,r4,18003914 <___svfprintf_internal_r+0xa70>
18003910:	2005883a 	mov	r2,r4
18003914:	d9402f17 	ldw	r5,188(sp)
18003918:	288b883a 	add	r5,r5,r2
1800391c:	d9402f15 	stw	r5,188(sp)
18003920:	1801be1e 	bne	r3,zero,1800401c <___svfprintf_internal_r+0x1178>
18003924:	b8800007 	ldb	r2,0(r23)
18003928:	d8001f15 	stw	zero,124(sp)
1800392c:	da000404 	addi	r8,sp,16
18003930:	103d891e 	bne	r2,zero,18002f58 <__alt_data_end+0xf8002f58>
18003934:	b823883a 	mov	r17,r23
18003938:	003d9f06 	br	18002fb8 <__alt_data_end+0xf8002fb8>
1800393c:	8025883a 	mov	r18,r16
18003940:	dc002903 	ldbu	r16,164(sp)
18003944:	e011883a 	mov	r8,fp
18003948:	84003fcc 	andi	r16,r16,255
1800394c:	8005e61e 	bne	r16,zero,180050e8 <___svfprintf_internal_r+0x2244>
18003950:	94800414 	ori	r18,r18,16
18003954:	9080080c 	andi	r2,r18,32
18003958:	10022026 	beq	r2,zero,180041dc <___svfprintf_internal_r+0x1338>
1800395c:	d9002e17 	ldw	r4,184(sp)
18003960:	d9402a17 	ldw	r5,168(sp)
18003964:	d8002785 	stb	zero,158(sp)
18003968:	20c00204 	addi	r3,r4,8
1800396c:	25000017 	ldw	r20,0(r4)
18003970:	25800117 	ldw	r22,4(r4)
18003974:	2803ad16 	blt	r5,zero,1800482c <___svfprintf_internal_r+0x1988>
18003978:	013fdfc4 	movi	r4,-129
1800397c:	a584b03a 	or	r2,r20,r22
18003980:	d8c02e15 	stw	r3,184(sp)
18003984:	9124703a 	and	r18,r18,r4
18003988:	0039883a 	mov	fp,zero
1800398c:	103eb01e 	bne	r2,zero,18003450 <__alt_data_end+0xf8003450>
18003990:	d8802a17 	ldw	r2,168(sp)
18003994:	1002e71e 	bne	r2,zero,18004534 <___svfprintf_internal_r+0x1690>
18003998:	d8002a15 	stw	zero,168(sp)
1800399c:	d8002b15 	stw	zero,172(sp)
180039a0:	dc001e04 	addi	r16,sp,120
180039a4:	003ef706 	br	18003584 <__alt_data_end+0xf8003584>
180039a8:	8025883a 	mov	r18,r16
180039ac:	dc002903 	ldbu	r16,164(sp)
180039b0:	e011883a 	mov	r8,fp
180039b4:	84003fcc 	andi	r16,r16,255
180039b8:	8005c81e 	bne	r16,zero,180050dc <___svfprintf_internal_r+0x2238>
180039bc:	01060074 	movhi	r4,6145
180039c0:	2118ee04 	addi	r4,r4,25528
180039c4:	d9003a15 	stw	r4,232(sp)
180039c8:	9080080c 	andi	r2,r18,32
180039cc:	10007226 	beq	r2,zero,18003b98 <___svfprintf_internal_r+0xcf4>
180039d0:	d9402e17 	ldw	r5,184(sp)
180039d4:	2d000017 	ldw	r20,0(r5)
180039d8:	2d800117 	ldw	r22,4(r5)
180039dc:	29400204 	addi	r5,r5,8
180039e0:	d9402e15 	stw	r5,184(sp)
180039e4:	9080004c 	andi	r2,r18,1
180039e8:	1001aa26 	beq	r2,zero,18004094 <___svfprintf_internal_r+0x11f0>
180039ec:	a584b03a 	or	r2,r20,r22
180039f0:	10032526 	beq	r2,zero,18004688 <___svfprintf_internal_r+0x17e4>
180039f4:	d8c02a17 	ldw	r3,168(sp)
180039f8:	00800c04 	movi	r2,48
180039fc:	d8802705 	stb	r2,156(sp)
18003a00:	dc402745 	stb	r17,157(sp)
18003a04:	d8002785 	stb	zero,158(sp)
18003a08:	90800094 	ori	r2,r18,2
18003a0c:	1804a316 	blt	r3,zero,18004c9c <___svfprintf_internal_r+0x1df8>
18003a10:	00bfdfc4 	movi	r2,-129
18003a14:	90a4703a 	and	r18,r18,r2
18003a18:	94800094 	ori	r18,r18,2
18003a1c:	0039883a 	mov	fp,zero
18003a20:	d9003a17 	ldw	r4,232(sp)
18003a24:	dc001e04 	addi	r16,sp,120
18003a28:	a08003cc 	andi	r2,r20,15
18003a2c:	b006973a 	slli	r3,r22,28
18003a30:	2085883a 	add	r2,r4,r2
18003a34:	a028d13a 	srli	r20,r20,4
18003a38:	10800003 	ldbu	r2,0(r2)
18003a3c:	b02cd13a 	srli	r22,r22,4
18003a40:	843fffc4 	addi	r16,r16,-1
18003a44:	1d28b03a 	or	r20,r3,r20
18003a48:	80800005 	stb	r2,0(r16)
18003a4c:	a584b03a 	or	r2,r20,r22
18003a50:	103ff51e 	bne	r2,zero,18003a28 <__alt_data_end+0xf8003a28>
18003a54:	d8c02817 	ldw	r3,160(sp)
18003a58:	1c07c83a 	sub	r3,r3,r16
18003a5c:	d8c02b15 	stw	r3,172(sp)
18003a60:	003ec806 	br	18003584 <__alt_data_end+0xf8003584>
18003a64:	d8c02e17 	ldw	r3,184(sp)
18003a68:	d9002e17 	ldw	r4,184(sp)
18003a6c:	8025883a 	mov	r18,r16
18003a70:	18800017 	ldw	r2,0(r3)
18003a74:	21000104 	addi	r4,r4,4
18003a78:	00c00044 	movi	r3,1
18003a7c:	e011883a 	mov	r8,fp
18003a80:	d8c02915 	stw	r3,164(sp)
18003a84:	d8002785 	stb	zero,158(sp)
18003a88:	d8801405 	stb	r2,80(sp)
18003a8c:	d9002e15 	stw	r4,184(sp)
18003a90:	d8c02b15 	stw	r3,172(sp)
18003a94:	d8002a15 	stw	zero,168(sp)
18003a98:	d8003215 	stw	zero,200(sp)
18003a9c:	dc001404 	addi	r16,sp,80
18003aa0:	0039883a 	mov	fp,zero
18003aa4:	003ec406 	br	180035b8 <__alt_data_end+0xf80035b8>
18003aa8:	8025883a 	mov	r18,r16
18003aac:	dc002903 	ldbu	r16,164(sp)
18003ab0:	e011883a 	mov	r8,fp
18003ab4:	84003fcc 	andi	r16,r16,255
18003ab8:	803e8726 	beq	r16,zero,180034d8 <__alt_data_end+0xf80034d8>
18003abc:	d8c02b03 	ldbu	r3,172(sp)
18003ac0:	d8c02785 	stb	r3,158(sp)
18003ac4:	003e8406 	br	180034d8 <__alt_data_end+0xf80034d8>
18003ac8:	00c00044 	movi	r3,1
18003acc:	d8c02905 	stb	r3,164(sp)
18003ad0:	00c00ac4 	movi	r3,43
18003ad4:	d8c02b05 	stb	r3,172(sp)
18003ad8:	bc400007 	ldb	r17,0(r23)
18003adc:	003d4606 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003ae0:	84000814 	ori	r16,r16,32
18003ae4:	bc400007 	ldb	r17,0(r23)
18003ae8:	003d4306 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003aec:	d8802e17 	ldw	r2,184(sp)
18003af0:	8025883a 	mov	r18,r16
18003af4:	d8002785 	stb	zero,158(sp)
18003af8:	14000017 	ldw	r16,0(r2)
18003afc:	e011883a 	mov	r8,fp
18003b00:	15000104 	addi	r20,r2,4
18003b04:	80042126 	beq	r16,zero,18004b8c <___svfprintf_internal_r+0x1ce8>
18003b08:	d8c02a17 	ldw	r3,168(sp)
18003b0c:	1803ee16 	blt	r3,zero,18004ac8 <___svfprintf_internal_r+0x1c24>
18003b10:	180d883a 	mov	r6,r3
18003b14:	000b883a 	mov	r5,zero
18003b18:	8009883a 	mov	r4,r16
18003b1c:	df003e15 	stw	fp,248(sp)
18003b20:	800aa980 	call	1800aa98 <memchr>
18003b24:	da003e17 	ldw	r8,248(sp)
18003b28:	10046a26 	beq	r2,zero,18004cd4 <___svfprintf_internal_r+0x1e30>
18003b2c:	1405c83a 	sub	r2,r2,r16
18003b30:	d8802b15 	stw	r2,172(sp)
18003b34:	1003ea16 	blt	r2,zero,18004ae0 <___svfprintf_internal_r+0x1c3c>
18003b38:	df002783 	ldbu	fp,158(sp)
18003b3c:	d8802915 	stw	r2,164(sp)
18003b40:	dd002e15 	stw	r20,184(sp)
18003b44:	d8002a15 	stw	zero,168(sp)
18003b48:	d8003215 	stw	zero,200(sp)
18003b4c:	003e9306 	br	1800359c <__alt_data_end+0xf800359c>
18003b50:	8025883a 	mov	r18,r16
18003b54:	dc002903 	ldbu	r16,164(sp)
18003b58:	e011883a 	mov	r8,fp
18003b5c:	84003fcc 	andi	r16,r16,255
18003b60:	803f7c26 	beq	r16,zero,18003954 <__alt_data_end+0xf8003954>
18003b64:	d8c02b03 	ldbu	r3,172(sp)
18003b68:	d8c02785 	stb	r3,158(sp)
18003b6c:	003f7906 	br	18003954 <__alt_data_end+0xf8003954>
18003b70:	8025883a 	mov	r18,r16
18003b74:	dc002903 	ldbu	r16,164(sp)
18003b78:	e011883a 	mov	r8,fp
18003b7c:	84003fcc 	andi	r16,r16,255
18003b80:	8005741e 	bne	r16,zero,18005154 <___svfprintf_internal_r+0x22b0>
18003b84:	01060074 	movhi	r4,6145
18003b88:	2118f304 	addi	r4,r4,25548
18003b8c:	d9003a15 	stw	r4,232(sp)
18003b90:	9080080c 	andi	r2,r18,32
18003b94:	103f8e1e 	bne	r2,zero,180039d0 <__alt_data_end+0xf80039d0>
18003b98:	9080040c 	andi	r2,r18,16
18003b9c:	1002a726 	beq	r2,zero,1800463c <___svfprintf_internal_r+0x1798>
18003ba0:	d8802e17 	ldw	r2,184(sp)
18003ba4:	002d883a 	mov	r22,zero
18003ba8:	15000017 	ldw	r20,0(r2)
18003bac:	10800104 	addi	r2,r2,4
18003bb0:	d8802e15 	stw	r2,184(sp)
18003bb4:	003f8b06 	br	180039e4 <__alt_data_end+0xf80039e4>
18003bb8:	84000054 	ori	r16,r16,1
18003bbc:	bc400007 	ldb	r17,0(r23)
18003bc0:	003d0d06 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003bc4:	d8802b07 	ldb	r2,172(sp)
18003bc8:	1002a41e 	bne	r2,zero,1800465c <___svfprintf_internal_r+0x17b8>
18003bcc:	00c00044 	movi	r3,1
18003bd0:	d8c02905 	stb	r3,164(sp)
18003bd4:	00c00804 	movi	r3,32
18003bd8:	d8c02b05 	stb	r3,172(sp)
18003bdc:	bc400007 	ldb	r17,0(r23)
18003be0:	003d0506 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003be4:	8025883a 	mov	r18,r16
18003be8:	dc002903 	ldbu	r16,164(sp)
18003bec:	e011883a 	mov	r8,fp
18003bf0:	84003fcc 	andi	r16,r16,255
18003bf4:	803e0626 	beq	r16,zero,18003410 <__alt_data_end+0xf8003410>
18003bf8:	d8c02b03 	ldbu	r3,172(sp)
18003bfc:	d8c02785 	stb	r3,158(sp)
18003c00:	003e0306 	br	18003410 <__alt_data_end+0xf8003410>
18003c04:	bc400007 	ldb	r17,0(r23)
18003c08:	00801b04 	movi	r2,108
18003c0c:	88830a26 	beq	r17,r2,18004838 <___svfprintf_internal_r+0x1994>
18003c10:	84000414 	ori	r16,r16,16
18003c14:	003cf806 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003c18:	8025883a 	mov	r18,r16
18003c1c:	dc002903 	ldbu	r16,164(sp)
18003c20:	e011883a 	mov	r8,fp
18003c24:	84003fcc 	andi	r16,r16,255
18003c28:	8005471e 	bne	r16,zero,18005148 <___svfprintf_internal_r+0x22a4>
18003c2c:	9080080c 	andi	r2,r18,32
18003c30:	10028c26 	beq	r2,zero,18004664 <___svfprintf_internal_r+0x17c0>
18003c34:	d9002e17 	ldw	r4,184(sp)
18003c38:	d9402f17 	ldw	r5,188(sp)
18003c3c:	20800017 	ldw	r2,0(r4)
18003c40:	2807d7fa 	srai	r3,r5,31
18003c44:	21000104 	addi	r4,r4,4
18003c48:	d9002e15 	stw	r4,184(sp)
18003c4c:	11400015 	stw	r5,0(r2)
18003c50:	10c00115 	stw	r3,4(r2)
18003c54:	003cbe06 	br	18002f50 <__alt_data_end+0xf8002f50>
18003c58:	84001014 	ori	r16,r16,64
18003c5c:	bc400007 	ldb	r17,0(r23)
18003c60:	003ce506 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18003c64:	01060074 	movhi	r4,6145
18003c68:	2118f304 	addi	r4,r4,25548
18003c6c:	0039883a 	mov	fp,zero
18003c70:	d9003a15 	stw	r4,232(sp)
18003c74:	04401e04 	movi	r17,120
18003c78:	003f6906 	br	18003a20 <__alt_data_end+0xf8003a20>
18003c7c:	8025883a 	mov	r18,r16
18003c80:	dc002903 	ldbu	r16,164(sp)
18003c84:	e011883a 	mov	r8,fp
18003c88:	84003fcc 	andi	r16,r16,255
18003c8c:	8005261e 	bne	r16,zero,18005128 <___svfprintf_internal_r+0x2284>
18003c90:	883d6526 	beq	r17,zero,18003228 <__alt_data_end+0xf8003228>
18003c94:	00c00044 	movi	r3,1
18003c98:	d8c02915 	stw	r3,164(sp)
18003c9c:	dc401405 	stb	r17,80(sp)
18003ca0:	d8002785 	stb	zero,158(sp)
18003ca4:	003f7a06 	br	18003a90 <__alt_data_end+0xf8003a90>
18003ca8:	01060074 	movhi	r4,6145
18003cac:	2118f304 	addi	r4,r4,25548
18003cb0:	d9003a15 	stw	r4,232(sp)
18003cb4:	d8c02e15 	stw	r3,184(sp)
18003cb8:	1025883a 	mov	r18,r2
18003cbc:	04401e04 	movi	r17,120
18003cc0:	a584b03a 	or	r2,r20,r22
18003cc4:	1000fa1e 	bne	r2,zero,180040b0 <___svfprintf_internal_r+0x120c>
18003cc8:	0039883a 	mov	fp,zero
18003ccc:	00800084 	movi	r2,2
18003cd0:	10803fcc 	andi	r2,r2,255
18003cd4:	00c00044 	movi	r3,1
18003cd8:	10c21626 	beq	r2,r3,18004534 <___svfprintf_internal_r+0x1690>
18003cdc:	00c00084 	movi	r3,2
18003ce0:	10fe0e1e 	bne	r2,r3,1800351c <__alt_data_end+0xf800351c>
18003ce4:	003d4606 	br	18003200 <__alt_data_end+0xf8003200>
18003ce8:	d8c02017 	ldw	r3,128(sp)
18003cec:	003e7306 	br	180036bc <__alt_data_end+0xf80036bc>
18003cf0:	00801944 	movi	r2,101
18003cf4:	14407c0e 	bge	r2,r17,18003ee8 <___svfprintf_internal_r+0x1044>
18003cf8:	d9003617 	ldw	r4,216(sp)
18003cfc:	d9403717 	ldw	r5,220(sp)
18003d00:	000d883a 	mov	r6,zero
18003d04:	000f883a 	mov	r7,zero
18003d08:	d8c03d15 	stw	r3,244(sp)
18003d0c:	da003e15 	stw	r8,248(sp)
18003d10:	8011d400 	call	18011d40 <__eqdf2>
18003d14:	d8c03d17 	ldw	r3,244(sp)
18003d18:	da003e17 	ldw	r8,248(sp)
18003d1c:	1000f51e 	bne	r2,zero,180040f4 <___svfprintf_internal_r+0x1250>
18003d20:	d8801f17 	ldw	r2,124(sp)
18003d24:	01060074 	movhi	r4,6145
18003d28:	2118fa04 	addi	r4,r4,25576
18003d2c:	18c00044 	addi	r3,r3,1
18003d30:	10800044 	addi	r2,r2,1
18003d34:	41000015 	stw	r4,0(r8)
18003d38:	01000044 	movi	r4,1
18003d3c:	41000115 	stw	r4,4(r8)
18003d40:	d8c02015 	stw	r3,128(sp)
18003d44:	d8801f15 	stw	r2,124(sp)
18003d48:	010001c4 	movi	r4,7
18003d4c:	20826616 	blt	r4,r2,180046e8 <___svfprintf_internal_r+0x1844>
18003d50:	42000204 	addi	r8,r8,8
18003d54:	d8802617 	ldw	r2,152(sp)
18003d58:	d9403317 	ldw	r5,204(sp)
18003d5c:	11400216 	blt	r2,r5,18003d68 <___svfprintf_internal_r+0xec4>
18003d60:	9080004c 	andi	r2,r18,1
18003d64:	103eb326 	beq	r2,zero,18003834 <__alt_data_end+0xf8003834>
18003d68:	d8803817 	ldw	r2,224(sp)
18003d6c:	d9003417 	ldw	r4,208(sp)
18003d70:	d9403817 	ldw	r5,224(sp)
18003d74:	1887883a 	add	r3,r3,r2
18003d78:	d8801f17 	ldw	r2,124(sp)
18003d7c:	41000015 	stw	r4,0(r8)
18003d80:	41400115 	stw	r5,4(r8)
18003d84:	10800044 	addi	r2,r2,1
18003d88:	d8c02015 	stw	r3,128(sp)
18003d8c:	d8801f15 	stw	r2,124(sp)
18003d90:	010001c4 	movi	r4,7
18003d94:	2082af16 	blt	r4,r2,18004854 <___svfprintf_internal_r+0x19b0>
18003d98:	42000204 	addi	r8,r8,8
18003d9c:	d8803317 	ldw	r2,204(sp)
18003da0:	143fffc4 	addi	r16,r2,-1
18003da4:	043ea30e 	bge	zero,r16,18003834 <__alt_data_end+0xf8003834>
18003da8:	04400404 	movi	r17,16
18003dac:	d8801f17 	ldw	r2,124(sp)
18003db0:	8c00860e 	bge	r17,r16,18003fcc <___svfprintf_internal_r+0x1128>
18003db4:	01460074 	movhi	r5,6145
18003db8:	2958fa84 	addi	r5,r5,25578
18003dbc:	d9402c15 	stw	r5,176(sp)
18003dc0:	058001c4 	movi	r22,7
18003dc4:	dd002d17 	ldw	r20,180(sp)
18003dc8:	00000306 	br	18003dd8 <___svfprintf_internal_r+0xf34>
18003dcc:	42000204 	addi	r8,r8,8
18003dd0:	843ffc04 	addi	r16,r16,-16
18003dd4:	8c00800e 	bge	r17,r16,18003fd8 <___svfprintf_internal_r+0x1134>
18003dd8:	18c00404 	addi	r3,r3,16
18003ddc:	10800044 	addi	r2,r2,1
18003de0:	45400015 	stw	r21,0(r8)
18003de4:	44400115 	stw	r17,4(r8)
18003de8:	d8c02015 	stw	r3,128(sp)
18003dec:	d8801f15 	stw	r2,124(sp)
18003df0:	b0bff60e 	bge	r22,r2,18003dcc <__alt_data_end+0xf8003dcc>
18003df4:	d9801e04 	addi	r6,sp,120
18003df8:	a00b883a 	mov	r5,r20
18003dfc:	9809883a 	mov	r4,r19
18003e00:	800c8440 	call	1800c844 <__ssprint_r>
18003e04:	103d0e1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18003e08:	d8c02017 	ldw	r3,128(sp)
18003e0c:	d8801f17 	ldw	r2,124(sp)
18003e10:	da000404 	addi	r8,sp,16
18003e14:	003fee06 	br	18003dd0 <__alt_data_end+0xf8003dd0>
18003e18:	d9403117 	ldw	r5,196(sp)
18003e1c:	d8802917 	ldw	r2,164(sp)
18003e20:	28adc83a 	sub	r22,r5,r2
18003e24:	05be430e 	bge	zero,r22,18003734 <__alt_data_end+0xf8003734>
18003e28:	07000404 	movi	fp,16
18003e2c:	d8801f17 	ldw	r2,124(sp)
18003e30:	e583a20e 	bge	fp,r22,18004cbc <___svfprintf_internal_r+0x1e18>
18003e34:	01460074 	movhi	r5,6145
18003e38:	2958fa84 	addi	r5,r5,25578
18003e3c:	dc403015 	stw	r17,192(sp)
18003e40:	d9402c15 	stw	r5,176(sp)
18003e44:	b023883a 	mov	r17,r22
18003e48:	050001c4 	movi	r20,7
18003e4c:	902d883a 	mov	r22,r18
18003e50:	8025883a 	mov	r18,r16
18003e54:	dc002d17 	ldw	r16,180(sp)
18003e58:	00000306 	br	18003e68 <___svfprintf_internal_r+0xfc4>
18003e5c:	8c7ffc04 	addi	r17,r17,-16
18003e60:	42000204 	addi	r8,r8,8
18003e64:	e440110e 	bge	fp,r17,18003eac <___svfprintf_internal_r+0x1008>
18003e68:	18c00404 	addi	r3,r3,16
18003e6c:	10800044 	addi	r2,r2,1
18003e70:	45400015 	stw	r21,0(r8)
18003e74:	47000115 	stw	fp,4(r8)
18003e78:	d8c02015 	stw	r3,128(sp)
18003e7c:	d8801f15 	stw	r2,124(sp)
18003e80:	a0bff60e 	bge	r20,r2,18003e5c <__alt_data_end+0xf8003e5c>
18003e84:	d9801e04 	addi	r6,sp,120
18003e88:	800b883a 	mov	r5,r16
18003e8c:	9809883a 	mov	r4,r19
18003e90:	800c8440 	call	1800c844 <__ssprint_r>
18003e94:	103cea1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18003e98:	8c7ffc04 	addi	r17,r17,-16
18003e9c:	d8c02017 	ldw	r3,128(sp)
18003ea0:	d8801f17 	ldw	r2,124(sp)
18003ea4:	da000404 	addi	r8,sp,16
18003ea8:	e47fef16 	blt	fp,r17,18003e68 <__alt_data_end+0xf8003e68>
18003eac:	9021883a 	mov	r16,r18
18003eb0:	b025883a 	mov	r18,r22
18003eb4:	882d883a 	mov	r22,r17
18003eb8:	dc403017 	ldw	r17,192(sp)
18003ebc:	d9002c17 	ldw	r4,176(sp)
18003ec0:	1d87883a 	add	r3,r3,r22
18003ec4:	10800044 	addi	r2,r2,1
18003ec8:	41000015 	stw	r4,0(r8)
18003ecc:	45800115 	stw	r22,4(r8)
18003ed0:	d8c02015 	stw	r3,128(sp)
18003ed4:	d8801f15 	stw	r2,124(sp)
18003ed8:	010001c4 	movi	r4,7
18003edc:	20819a16 	blt	r4,r2,18004548 <___svfprintf_internal_r+0x16a4>
18003ee0:	42000204 	addi	r8,r8,8
18003ee4:	003e1306 	br	18003734 <__alt_data_end+0xf8003734>
18003ee8:	d9403317 	ldw	r5,204(sp)
18003eec:	00800044 	movi	r2,1
18003ef0:	18c00044 	addi	r3,r3,1
18003ef4:	1141710e 	bge	r2,r5,180044bc <___svfprintf_internal_r+0x1618>
18003ef8:	dc401f17 	ldw	r17,124(sp)
18003efc:	00800044 	movi	r2,1
18003f00:	40800115 	stw	r2,4(r8)
18003f04:	8c400044 	addi	r17,r17,1
18003f08:	44000015 	stw	r16,0(r8)
18003f0c:	d8c02015 	stw	r3,128(sp)
18003f10:	dc401f15 	stw	r17,124(sp)
18003f14:	008001c4 	movi	r2,7
18003f18:	14417416 	blt	r2,r17,180044ec <___svfprintf_internal_r+0x1648>
18003f1c:	42000204 	addi	r8,r8,8
18003f20:	d8803817 	ldw	r2,224(sp)
18003f24:	d9003417 	ldw	r4,208(sp)
18003f28:	8c400044 	addi	r17,r17,1
18003f2c:	10c7883a 	add	r3,r2,r3
18003f30:	40800115 	stw	r2,4(r8)
18003f34:	41000015 	stw	r4,0(r8)
18003f38:	d8c02015 	stw	r3,128(sp)
18003f3c:	dc401f15 	stw	r17,124(sp)
18003f40:	008001c4 	movi	r2,7
18003f44:	14417216 	blt	r2,r17,18004510 <___svfprintf_internal_r+0x166c>
18003f48:	45800204 	addi	r22,r8,8
18003f4c:	d9003617 	ldw	r4,216(sp)
18003f50:	d9403717 	ldw	r5,220(sp)
18003f54:	000d883a 	mov	r6,zero
18003f58:	000f883a 	mov	r7,zero
18003f5c:	d8c03d15 	stw	r3,244(sp)
18003f60:	8011d400 	call	18011d40 <__eqdf2>
18003f64:	d8c03d17 	ldw	r3,244(sp)
18003f68:	1000b326 	beq	r2,zero,18004238 <___svfprintf_internal_r+0x1394>
18003f6c:	d9403317 	ldw	r5,204(sp)
18003f70:	84000044 	addi	r16,r16,1
18003f74:	8c400044 	addi	r17,r17,1
18003f78:	28bfffc4 	addi	r2,r5,-1
18003f7c:	1887883a 	add	r3,r3,r2
18003f80:	b0800115 	stw	r2,4(r22)
18003f84:	b4000015 	stw	r16,0(r22)
18003f88:	d8c02015 	stw	r3,128(sp)
18003f8c:	dc401f15 	stw	r17,124(sp)
18003f90:	008001c4 	movi	r2,7
18003f94:	1440d216 	blt	r2,r17,180042e0 <___svfprintf_internal_r+0x143c>
18003f98:	b5800204 	addi	r22,r22,8
18003f9c:	d9003b17 	ldw	r4,236(sp)
18003fa0:	df0022c4 	addi	fp,sp,139
18003fa4:	8c400044 	addi	r17,r17,1
18003fa8:	20c7883a 	add	r3,r4,r3
18003fac:	b7000015 	stw	fp,0(r22)
18003fb0:	b1000115 	stw	r4,4(r22)
18003fb4:	d8c02015 	stw	r3,128(sp)
18003fb8:	dc401f15 	stw	r17,124(sp)
18003fbc:	008001c4 	movi	r2,7
18003fc0:	14400e16 	blt	r2,r17,18003ffc <___svfprintf_internal_r+0x1158>
18003fc4:	b2000204 	addi	r8,r22,8
18003fc8:	003e1a06 	br	18003834 <__alt_data_end+0xf8003834>
18003fcc:	01060074 	movhi	r4,6145
18003fd0:	2118fa84 	addi	r4,r4,25578
18003fd4:	d9002c15 	stw	r4,176(sp)
18003fd8:	d9002c17 	ldw	r4,176(sp)
18003fdc:	1c07883a 	add	r3,r3,r16
18003fe0:	44000115 	stw	r16,4(r8)
18003fe4:	41000015 	stw	r4,0(r8)
18003fe8:	10800044 	addi	r2,r2,1
18003fec:	d8c02015 	stw	r3,128(sp)
18003ff0:	d8801f15 	stw	r2,124(sp)
18003ff4:	010001c4 	movi	r4,7
18003ff8:	20be0d0e 	bge	r4,r2,18003830 <__alt_data_end+0xf8003830>
18003ffc:	d9402d17 	ldw	r5,180(sp)
18004000:	d9801e04 	addi	r6,sp,120
18004004:	9809883a 	mov	r4,r19
18004008:	800c8440 	call	1800c844 <__ssprint_r>
1800400c:	103c8c1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004010:	d8c02017 	ldw	r3,128(sp)
18004014:	da000404 	addi	r8,sp,16
18004018:	003e0606 	br	18003834 <__alt_data_end+0xf8003834>
1800401c:	d9402d17 	ldw	r5,180(sp)
18004020:	d9801e04 	addi	r6,sp,120
18004024:	9809883a 	mov	r4,r19
18004028:	800c8440 	call	1800c844 <__ssprint_r>
1800402c:	103e3d26 	beq	r2,zero,18003924 <__alt_data_end+0xf8003924>
18004030:	003c8306 	br	18003240 <__alt_data_end+0xf8003240>
18004034:	d9402d17 	ldw	r5,180(sp)
18004038:	d9801e04 	addi	r6,sp,120
1800403c:	9809883a 	mov	r4,r19
18004040:	800c8440 	call	1800c844 <__ssprint_r>
18004044:	103c7e1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004048:	d8c02017 	ldw	r3,128(sp)
1800404c:	da000404 	addi	r8,sp,16
18004050:	003deb06 	br	18003800 <__alt_data_end+0xf8003800>
18004054:	d9402d17 	ldw	r5,180(sp)
18004058:	d9801e04 	addi	r6,sp,120
1800405c:	9809883a 	mov	r4,r19
18004060:	800c8440 	call	1800c844 <__ssprint_r>
18004064:	103c761e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004068:	d8c02017 	ldw	r3,128(sp)
1800406c:	da000404 	addi	r8,sp,16
18004070:	003d9f06 	br	180036f0 <__alt_data_end+0xf80036f0>
18004074:	d9402d17 	ldw	r5,180(sp)
18004078:	d9801e04 	addi	r6,sp,120
1800407c:	9809883a 	mov	r4,r19
18004080:	800c8440 	call	1800c844 <__ssprint_r>
18004084:	103c6e1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004088:	d8c02017 	ldw	r3,128(sp)
1800408c:	da000404 	addi	r8,sp,16
18004090:	003da506 	br	18003728 <__alt_data_end+0xf8003728>
18004094:	d9402a17 	ldw	r5,168(sp)
18004098:	d8002785 	stb	zero,158(sp)
1800409c:	283f0816 	blt	r5,zero,18003cc0 <__alt_data_end+0xf8003cc0>
180040a0:	00ffdfc4 	movi	r3,-129
180040a4:	a584b03a 	or	r2,r20,r22
180040a8:	90e4703a 	and	r18,r18,r3
180040ac:	103c5126 	beq	r2,zero,180031f4 <__alt_data_end+0xf80031f4>
180040b0:	0039883a 	mov	fp,zero
180040b4:	003e5a06 	br	18003a20 <__alt_data_end+0xf8003a20>
180040b8:	9080040c 	andi	r2,r18,16
180040bc:	10013d26 	beq	r2,zero,180045b4 <___svfprintf_internal_r+0x1710>
180040c0:	d8c02e17 	ldw	r3,184(sp)
180040c4:	d9002a17 	ldw	r4,168(sp)
180040c8:	d8002785 	stb	zero,158(sp)
180040cc:	18800104 	addi	r2,r3,4
180040d0:	1d000017 	ldw	r20,0(r3)
180040d4:	002d883a 	mov	r22,zero
180040d8:	20013f16 	blt	r4,zero,180045d8 <___svfprintf_internal_r+0x1734>
180040dc:	00ffdfc4 	movi	r3,-129
180040e0:	d8802e15 	stw	r2,184(sp)
180040e4:	90e4703a 	and	r18,r18,r3
180040e8:	a03d0926 	beq	r20,zero,18003510 <__alt_data_end+0xf8003510>
180040ec:	0039883a 	mov	fp,zero
180040f0:	003d0c06 	br	18003524 <__alt_data_end+0xf8003524>
180040f4:	dc402617 	ldw	r17,152(sp)
180040f8:	0441830e 	bge	zero,r17,18004708 <___svfprintf_internal_r+0x1864>
180040fc:	dc403217 	ldw	r17,200(sp)
18004100:	d8803317 	ldw	r2,204(sp)
18004104:	1440010e 	bge	r2,r17,1800410c <___svfprintf_internal_r+0x1268>
18004108:	1023883a 	mov	r17,r2
1800410c:	04400a0e 	bge	zero,r17,18004138 <___svfprintf_internal_r+0x1294>
18004110:	d8801f17 	ldw	r2,124(sp)
18004114:	1c47883a 	add	r3,r3,r17
18004118:	44000015 	stw	r16,0(r8)
1800411c:	10800044 	addi	r2,r2,1
18004120:	44400115 	stw	r17,4(r8)
18004124:	d8c02015 	stw	r3,128(sp)
18004128:	d8801f15 	stw	r2,124(sp)
1800412c:	010001c4 	movi	r4,7
18004130:	20827516 	blt	r4,r2,18004b08 <___svfprintf_internal_r+0x1c64>
18004134:	42000204 	addi	r8,r8,8
18004138:	88027b16 	blt	r17,zero,18004b28 <___svfprintf_internal_r+0x1c84>
1800413c:	d9003217 	ldw	r4,200(sp)
18004140:	2463c83a 	sub	r17,r4,r17
18004144:	0440990e 	bge	zero,r17,180043ac <___svfprintf_internal_r+0x1508>
18004148:	05800404 	movi	r22,16
1800414c:	d8801f17 	ldw	r2,124(sp)
18004150:	b441530e 	bge	r22,r17,180046a0 <___svfprintf_internal_r+0x17fc>
18004154:	01060074 	movhi	r4,6145
18004158:	2118fa84 	addi	r4,r4,25578
1800415c:	d9002c15 	stw	r4,176(sp)
18004160:	070001c4 	movi	fp,7
18004164:	dd002d17 	ldw	r20,180(sp)
18004168:	00000306 	br	18004178 <___svfprintf_internal_r+0x12d4>
1800416c:	42000204 	addi	r8,r8,8
18004170:	8c7ffc04 	addi	r17,r17,-16
18004174:	b4414d0e 	bge	r22,r17,180046ac <___svfprintf_internal_r+0x1808>
18004178:	18c00404 	addi	r3,r3,16
1800417c:	10800044 	addi	r2,r2,1
18004180:	45400015 	stw	r21,0(r8)
18004184:	45800115 	stw	r22,4(r8)
18004188:	d8c02015 	stw	r3,128(sp)
1800418c:	d8801f15 	stw	r2,124(sp)
18004190:	e0bff60e 	bge	fp,r2,1800416c <__alt_data_end+0xf800416c>
18004194:	d9801e04 	addi	r6,sp,120
18004198:	a00b883a 	mov	r5,r20
1800419c:	9809883a 	mov	r4,r19
180041a0:	800c8440 	call	1800c844 <__ssprint_r>
180041a4:	103c261e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180041a8:	d8c02017 	ldw	r3,128(sp)
180041ac:	d8801f17 	ldw	r2,124(sp)
180041b0:	da000404 	addi	r8,sp,16
180041b4:	003fee06 	br	18004170 <__alt_data_end+0xf8004170>
180041b8:	d9402d17 	ldw	r5,180(sp)
180041bc:	d9801e04 	addi	r6,sp,120
180041c0:	9809883a 	mov	r4,r19
180041c4:	800c8440 	call	1800c844 <__ssprint_r>
180041c8:	103c1d1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180041cc:	d8c02017 	ldw	r3,128(sp)
180041d0:	df002787 	ldb	fp,158(sp)
180041d4:	da000404 	addi	r8,sp,16
180041d8:	003d3806 	br	180036bc <__alt_data_end+0xf80036bc>
180041dc:	9080040c 	andi	r2,r18,16
180041e0:	10005c26 	beq	r2,zero,18004354 <___svfprintf_internal_r+0x14b0>
180041e4:	d8c02e17 	ldw	r3,184(sp)
180041e8:	d9002a17 	ldw	r4,168(sp)
180041ec:	d8002785 	stb	zero,158(sp)
180041f0:	18800104 	addi	r2,r3,4
180041f4:	1d000017 	ldw	r20,0(r3)
180041f8:	002d883a 	mov	r22,zero
180041fc:	20005e16 	blt	r4,zero,18004378 <___svfprintf_internal_r+0x14d4>
18004200:	00ffdfc4 	movi	r3,-129
18004204:	d8802e15 	stw	r2,184(sp)
18004208:	90e4703a 	and	r18,r18,r3
1800420c:	0039883a 	mov	fp,zero
18004210:	a03ddf26 	beq	r20,zero,18003990 <__alt_data_end+0xf8003990>
18004214:	00800244 	movi	r2,9
18004218:	153c8e36 	bltu	r2,r20,18003454 <__alt_data_end+0xf8003454>
1800421c:	a5000c04 	addi	r20,r20,48
18004220:	dc001dc4 	addi	r16,sp,119
18004224:	dd001dc5 	stb	r20,119(sp)
18004228:	d8c02817 	ldw	r3,160(sp)
1800422c:	1c07c83a 	sub	r3,r3,r16
18004230:	d8c02b15 	stw	r3,172(sp)
18004234:	003cd306 	br	18003584 <__alt_data_end+0xf8003584>
18004238:	d8803317 	ldw	r2,204(sp)
1800423c:	143fffc4 	addi	r16,r2,-1
18004240:	043f560e 	bge	zero,r16,18003f9c <__alt_data_end+0xf8003f9c>
18004244:	07000404 	movi	fp,16
18004248:	e403530e 	bge	fp,r16,18004f98 <___svfprintf_internal_r+0x20f4>
1800424c:	01460074 	movhi	r5,6145
18004250:	2958fa84 	addi	r5,r5,25578
18004254:	d9402c15 	stw	r5,176(sp)
18004258:	01c001c4 	movi	r7,7
1800425c:	dd002d17 	ldw	r20,180(sp)
18004260:	00000306 	br	18004270 <___svfprintf_internal_r+0x13cc>
18004264:	843ffc04 	addi	r16,r16,-16
18004268:	b5800204 	addi	r22,r22,8
1800426c:	e400130e 	bge	fp,r16,180042bc <___svfprintf_internal_r+0x1418>
18004270:	18c00404 	addi	r3,r3,16
18004274:	8c400044 	addi	r17,r17,1
18004278:	b5400015 	stw	r21,0(r22)
1800427c:	b7000115 	stw	fp,4(r22)
18004280:	d8c02015 	stw	r3,128(sp)
18004284:	dc401f15 	stw	r17,124(sp)
18004288:	3c7ff60e 	bge	r7,r17,18004264 <__alt_data_end+0xf8004264>
1800428c:	d9801e04 	addi	r6,sp,120
18004290:	a00b883a 	mov	r5,r20
18004294:	9809883a 	mov	r4,r19
18004298:	d9c03d15 	stw	r7,244(sp)
1800429c:	800c8440 	call	1800c844 <__ssprint_r>
180042a0:	d9c03d17 	ldw	r7,244(sp)
180042a4:	103be61e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180042a8:	843ffc04 	addi	r16,r16,-16
180042ac:	d8c02017 	ldw	r3,128(sp)
180042b0:	dc401f17 	ldw	r17,124(sp)
180042b4:	dd800404 	addi	r22,sp,16
180042b8:	e43fed16 	blt	fp,r16,18004270 <__alt_data_end+0xf8004270>
180042bc:	d8802c17 	ldw	r2,176(sp)
180042c0:	1c07883a 	add	r3,r3,r16
180042c4:	8c400044 	addi	r17,r17,1
180042c8:	b0800015 	stw	r2,0(r22)
180042cc:	b4000115 	stw	r16,4(r22)
180042d0:	d8c02015 	stw	r3,128(sp)
180042d4:	dc401f15 	stw	r17,124(sp)
180042d8:	008001c4 	movi	r2,7
180042dc:	147f2e0e 	bge	r2,r17,18003f98 <__alt_data_end+0xf8003f98>
180042e0:	d9402d17 	ldw	r5,180(sp)
180042e4:	d9801e04 	addi	r6,sp,120
180042e8:	9809883a 	mov	r4,r19
180042ec:	800c8440 	call	1800c844 <__ssprint_r>
180042f0:	103bd31e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180042f4:	d8c02017 	ldw	r3,128(sp)
180042f8:	dc401f17 	ldw	r17,124(sp)
180042fc:	dd800404 	addi	r22,sp,16
18004300:	003f2606 	br	18003f9c <__alt_data_end+0xf8003f9c>
18004304:	9080040c 	andi	r2,r18,16
18004308:	1000c326 	beq	r2,zero,18004618 <___svfprintf_internal_r+0x1774>
1800430c:	d9402e17 	ldw	r5,184(sp)
18004310:	2d000017 	ldw	r20,0(r5)
18004314:	29400104 	addi	r5,r5,4
18004318:	d9402e15 	stw	r5,184(sp)
1800431c:	a02dd7fa 	srai	r22,r20,31
18004320:	b005883a 	mov	r2,r22
18004324:	103c430e 	bge	r2,zero,18003434 <__alt_data_end+0xf8003434>
18004328:	d9402a17 	ldw	r5,168(sp)
1800432c:	0529c83a 	sub	r20,zero,r20
18004330:	07000b44 	movi	fp,45
18004334:	a004c03a 	cmpne	r2,r20,zero
18004338:	05adc83a 	sub	r22,zero,r22
1800433c:	df002785 	stb	fp,158(sp)
18004340:	b0adc83a 	sub	r22,r22,r2
18004344:	28022e16 	blt	r5,zero,18004c00 <___svfprintf_internal_r+0x1d5c>
18004348:	00bfdfc4 	movi	r2,-129
1800434c:	90a4703a 	and	r18,r18,r2
18004350:	003c3f06 	br	18003450 <__alt_data_end+0xf8003450>
18004354:	9080100c 	andi	r2,r18,64
18004358:	d8002785 	stb	zero,158(sp)
1800435c:	10012526 	beq	r2,zero,180047f4 <___svfprintf_internal_r+0x1950>
18004360:	d9402e17 	ldw	r5,184(sp)
18004364:	d8c02a17 	ldw	r3,168(sp)
18004368:	002d883a 	mov	r22,zero
1800436c:	28800104 	addi	r2,r5,4
18004370:	2d00000b 	ldhu	r20,0(r5)
18004374:	183fa20e 	bge	r3,zero,18004200 <__alt_data_end+0xf8004200>
18004378:	d8802e15 	stw	r2,184(sp)
1800437c:	0039883a 	mov	fp,zero
18004380:	a584b03a 	or	r2,r20,r22
18004384:	103c321e 	bne	r2,zero,18003450 <__alt_data_end+0xf8003450>
18004388:	00800044 	movi	r2,1
1800438c:	003e5006 	br	18003cd0 <__alt_data_end+0xf8003cd0>
18004390:	d9402d17 	ldw	r5,180(sp)
18004394:	d9801e04 	addi	r6,sp,120
18004398:	9809883a 	mov	r4,r19
1800439c:	800c8440 	call	1800c844 <__ssprint_r>
180043a0:	103ba71e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180043a4:	d8c02017 	ldw	r3,128(sp)
180043a8:	da000404 	addi	r8,sp,16
180043ac:	d9003217 	ldw	r4,200(sp)
180043b0:	d8802617 	ldw	r2,152(sp)
180043b4:	d9403317 	ldw	r5,204(sp)
180043b8:	8123883a 	add	r17,r16,r4
180043bc:	11400216 	blt	r2,r5,180043c8 <___svfprintf_internal_r+0x1524>
180043c0:	9100004c 	andi	r4,r18,1
180043c4:	20000d26 	beq	r4,zero,180043fc <___svfprintf_internal_r+0x1558>
180043c8:	d9003817 	ldw	r4,224(sp)
180043cc:	d9403417 	ldw	r5,208(sp)
180043d0:	1907883a 	add	r3,r3,r4
180043d4:	d9001f17 	ldw	r4,124(sp)
180043d8:	41400015 	stw	r5,0(r8)
180043dc:	d9403817 	ldw	r5,224(sp)
180043e0:	21000044 	addi	r4,r4,1
180043e4:	d8c02015 	stw	r3,128(sp)
180043e8:	41400115 	stw	r5,4(r8)
180043ec:	d9001f15 	stw	r4,124(sp)
180043f0:	014001c4 	movi	r5,7
180043f4:	2901dc16 	blt	r5,r4,18004b68 <___svfprintf_internal_r+0x1cc4>
180043f8:	42000204 	addi	r8,r8,8
180043fc:	d9003317 	ldw	r4,204(sp)
18004400:	8121883a 	add	r16,r16,r4
18004404:	2085c83a 	sub	r2,r4,r2
18004408:	8461c83a 	sub	r16,r16,r17
1800440c:	1400010e 	bge	r2,r16,18004414 <___svfprintf_internal_r+0x1570>
18004410:	1021883a 	mov	r16,r2
18004414:	04000a0e 	bge	zero,r16,18004440 <___svfprintf_internal_r+0x159c>
18004418:	d9001f17 	ldw	r4,124(sp)
1800441c:	1c07883a 	add	r3,r3,r16
18004420:	44400015 	stw	r17,0(r8)
18004424:	21000044 	addi	r4,r4,1
18004428:	44000115 	stw	r16,4(r8)
1800442c:	d8c02015 	stw	r3,128(sp)
18004430:	d9001f15 	stw	r4,124(sp)
18004434:	014001c4 	movi	r5,7
18004438:	2901e616 	blt	r5,r4,18004bd4 <___svfprintf_internal_r+0x1d30>
1800443c:	42000204 	addi	r8,r8,8
18004440:	8001f616 	blt	r16,zero,18004c1c <___svfprintf_internal_r+0x1d78>
18004444:	1421c83a 	sub	r16,r2,r16
18004448:	043cfa0e 	bge	zero,r16,18003834 <__alt_data_end+0xf8003834>
1800444c:	04400404 	movi	r17,16
18004450:	d8801f17 	ldw	r2,124(sp)
18004454:	8c3edd0e 	bge	r17,r16,18003fcc <__alt_data_end+0xf8003fcc>
18004458:	01460074 	movhi	r5,6145
1800445c:	2958fa84 	addi	r5,r5,25578
18004460:	d9402c15 	stw	r5,176(sp)
18004464:	058001c4 	movi	r22,7
18004468:	dd002d17 	ldw	r20,180(sp)
1800446c:	00000306 	br	1800447c <___svfprintf_internal_r+0x15d8>
18004470:	42000204 	addi	r8,r8,8
18004474:	843ffc04 	addi	r16,r16,-16
18004478:	8c3ed70e 	bge	r17,r16,18003fd8 <__alt_data_end+0xf8003fd8>
1800447c:	18c00404 	addi	r3,r3,16
18004480:	10800044 	addi	r2,r2,1
18004484:	45400015 	stw	r21,0(r8)
18004488:	44400115 	stw	r17,4(r8)
1800448c:	d8c02015 	stw	r3,128(sp)
18004490:	d8801f15 	stw	r2,124(sp)
18004494:	b0bff60e 	bge	r22,r2,18004470 <__alt_data_end+0xf8004470>
18004498:	d9801e04 	addi	r6,sp,120
1800449c:	a00b883a 	mov	r5,r20
180044a0:	9809883a 	mov	r4,r19
180044a4:	800c8440 	call	1800c844 <__ssprint_r>
180044a8:	103b651e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180044ac:	d8c02017 	ldw	r3,128(sp)
180044b0:	d8801f17 	ldw	r2,124(sp)
180044b4:	da000404 	addi	r8,sp,16
180044b8:	003fee06 	br	18004474 <__alt_data_end+0xf8004474>
180044bc:	9088703a 	and	r4,r18,r2
180044c0:	203e8d1e 	bne	r4,zero,18003ef8 <__alt_data_end+0xf8003ef8>
180044c4:	dc401f17 	ldw	r17,124(sp)
180044c8:	40800115 	stw	r2,4(r8)
180044cc:	44000015 	stw	r16,0(r8)
180044d0:	8c400044 	addi	r17,r17,1
180044d4:	d8c02015 	stw	r3,128(sp)
180044d8:	dc401f15 	stw	r17,124(sp)
180044dc:	008001c4 	movi	r2,7
180044e0:	147f7f16 	blt	r2,r17,180042e0 <__alt_data_end+0xf80042e0>
180044e4:	45800204 	addi	r22,r8,8
180044e8:	003eac06 	br	18003f9c <__alt_data_end+0xf8003f9c>
180044ec:	d9402d17 	ldw	r5,180(sp)
180044f0:	d9801e04 	addi	r6,sp,120
180044f4:	9809883a 	mov	r4,r19
180044f8:	800c8440 	call	1800c844 <__ssprint_r>
180044fc:	103b501e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004500:	d8c02017 	ldw	r3,128(sp)
18004504:	dc401f17 	ldw	r17,124(sp)
18004508:	da000404 	addi	r8,sp,16
1800450c:	003e8406 	br	18003f20 <__alt_data_end+0xf8003f20>
18004510:	d9402d17 	ldw	r5,180(sp)
18004514:	d9801e04 	addi	r6,sp,120
18004518:	9809883a 	mov	r4,r19
1800451c:	800c8440 	call	1800c844 <__ssprint_r>
18004520:	103b471e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004524:	d8c02017 	ldw	r3,128(sp)
18004528:	dc401f17 	ldw	r17,124(sp)
1800452c:	dd800404 	addi	r22,sp,16
18004530:	003e8606 	br	18003f4c <__alt_data_end+0xf8003f4c>
18004534:	0029883a 	mov	r20,zero
18004538:	a5000c04 	addi	r20,r20,48
1800453c:	dc001dc4 	addi	r16,sp,119
18004540:	dd001dc5 	stb	r20,119(sp)
18004544:	003f3806 	br	18004228 <__alt_data_end+0xf8004228>
18004548:	d9402d17 	ldw	r5,180(sp)
1800454c:	d9801e04 	addi	r6,sp,120
18004550:	9809883a 	mov	r4,r19
18004554:	800c8440 	call	1800c844 <__ssprint_r>
18004558:	103b391e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
1800455c:	d8c02017 	ldw	r3,128(sp)
18004560:	da000404 	addi	r8,sp,16
18004564:	003c7306 	br	18003734 <__alt_data_end+0xf8003734>
18004568:	d9003617 	ldw	r4,216(sp)
1800456c:	d9403717 	ldw	r5,220(sp)
18004570:	da003e15 	stw	r8,248(sp)
18004574:	800c5640 	call	1800c564 <__fpclassifyd>
18004578:	da003e17 	ldw	r8,248(sp)
1800457c:	1000bd1e 	bne	r2,zero,18004874 <___svfprintf_internal_r+0x19d0>
18004580:	008011c4 	movi	r2,71
18004584:	14411e0e 	bge	r2,r17,18004a00 <___svfprintf_internal_r+0x1b5c>
18004588:	04060074 	movhi	r16,6145
1800458c:	8418ed04 	addi	r16,r16,25524
18004590:	00c000c4 	movi	r3,3
18004594:	00bfdfc4 	movi	r2,-129
18004598:	d8c02915 	stw	r3,164(sp)
1800459c:	90a4703a 	and	r18,r18,r2
180045a0:	df002783 	ldbu	fp,158(sp)
180045a4:	d8c02b15 	stw	r3,172(sp)
180045a8:	d8002a15 	stw	zero,168(sp)
180045ac:	d8003215 	stw	zero,200(sp)
180045b0:	003bfa06 	br	1800359c <__alt_data_end+0xf800359c>
180045b4:	9080100c 	andi	r2,r18,64
180045b8:	d8002785 	stb	zero,158(sp)
180045bc:	10009426 	beq	r2,zero,18004810 <___svfprintf_internal_r+0x196c>
180045c0:	d9402e17 	ldw	r5,184(sp)
180045c4:	d8c02a17 	ldw	r3,168(sp)
180045c8:	002d883a 	mov	r22,zero
180045cc:	28800104 	addi	r2,r5,4
180045d0:	2d00000b 	ldhu	r20,0(r5)
180045d4:	183ec10e 	bge	r3,zero,180040dc <__alt_data_end+0xf80040dc>
180045d8:	a586b03a 	or	r3,r20,r22
180045dc:	d8802e15 	stw	r2,184(sp)
180045e0:	183ec21e 	bne	r3,zero,180040ec <__alt_data_end+0xf80040ec>
180045e4:	0039883a 	mov	fp,zero
180045e8:	0005883a 	mov	r2,zero
180045ec:	003db806 	br	18003cd0 <__alt_data_end+0xf8003cd0>
180045f0:	d8c02e17 	ldw	r3,184(sp)
180045f4:	d9002e17 	ldw	r4,184(sp)
180045f8:	d9402e17 	ldw	r5,184(sp)
180045fc:	18c00017 	ldw	r3,0(r3)
18004600:	21000117 	ldw	r4,4(r4)
18004604:	29400204 	addi	r5,r5,8
18004608:	d8c03615 	stw	r3,216(sp)
1800460c:	d9003715 	stw	r4,220(sp)
18004610:	d9402e15 	stw	r5,184(sp)
18004614:	003b5a06 	br	18003380 <__alt_data_end+0xf8003380>
18004618:	9080100c 	andi	r2,r18,64
1800461c:	10010726 	beq	r2,zero,18004a3c <___svfprintf_internal_r+0x1b98>
18004620:	d8802e17 	ldw	r2,184(sp)
18004624:	1500000f 	ldh	r20,0(r2)
18004628:	10800104 	addi	r2,r2,4
1800462c:	d8802e15 	stw	r2,184(sp)
18004630:	a02dd7fa 	srai	r22,r20,31
18004634:	b005883a 	mov	r2,r22
18004638:	003b7d06 	br	18003430 <__alt_data_end+0xf8003430>
1800463c:	9080100c 	andi	r2,r18,64
18004640:	10010526 	beq	r2,zero,18004a58 <___svfprintf_internal_r+0x1bb4>
18004644:	d8c02e17 	ldw	r3,184(sp)
18004648:	002d883a 	mov	r22,zero
1800464c:	1d00000b 	ldhu	r20,0(r3)
18004650:	18c00104 	addi	r3,r3,4
18004654:	d8c02e15 	stw	r3,184(sp)
18004658:	003ce206 	br	180039e4 <__alt_data_end+0xf80039e4>
1800465c:	bc400007 	ldb	r17,0(r23)
18004660:	003a6506 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18004664:	9080040c 	andi	r2,r18,16
18004668:	10010126 	beq	r2,zero,18004a70 <___svfprintf_internal_r+0x1bcc>
1800466c:	d8c02e17 	ldw	r3,184(sp)
18004670:	d9002f17 	ldw	r4,188(sp)
18004674:	18800017 	ldw	r2,0(r3)
18004678:	18c00104 	addi	r3,r3,4
1800467c:	d8c02e15 	stw	r3,184(sp)
18004680:	11000015 	stw	r4,0(r2)
18004684:	003a3206 	br	18002f50 <__alt_data_end+0xf8002f50>
18004688:	d9002a17 	ldw	r4,168(sp)
1800468c:	d8002785 	stb	zero,158(sp)
18004690:	203d8d16 	blt	r4,zero,18003cc8 <__alt_data_end+0xf8003cc8>
18004694:	00bfdfc4 	movi	r2,-129
18004698:	90a4703a 	and	r18,r18,r2
1800469c:	003ad506 	br	180031f4 <__alt_data_end+0xf80031f4>
180046a0:	01460074 	movhi	r5,6145
180046a4:	2958fa84 	addi	r5,r5,25578
180046a8:	d9402c15 	stw	r5,176(sp)
180046ac:	d9402c17 	ldw	r5,176(sp)
180046b0:	1c47883a 	add	r3,r3,r17
180046b4:	10800044 	addi	r2,r2,1
180046b8:	41400015 	stw	r5,0(r8)
180046bc:	44400115 	stw	r17,4(r8)
180046c0:	d8c02015 	stw	r3,128(sp)
180046c4:	d8801f15 	stw	r2,124(sp)
180046c8:	010001c4 	movi	r4,7
180046cc:	20bf3016 	blt	r4,r2,18004390 <__alt_data_end+0xf8004390>
180046d0:	42000204 	addi	r8,r8,8
180046d4:	003f3506 	br	180043ac <__alt_data_end+0xf80043ac>
180046d8:	01060074 	movhi	r4,6145
180046dc:	2118fa84 	addi	r4,r4,25578
180046e0:	d9002c15 	stw	r4,176(sp)
180046e4:	003c3c06 	br	180037d8 <__alt_data_end+0xf80037d8>
180046e8:	d9402d17 	ldw	r5,180(sp)
180046ec:	d9801e04 	addi	r6,sp,120
180046f0:	9809883a 	mov	r4,r19
180046f4:	800c8440 	call	1800c844 <__ssprint_r>
180046f8:	103ad11e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180046fc:	d8c02017 	ldw	r3,128(sp)
18004700:	da000404 	addi	r8,sp,16
18004704:	003d9306 	br	18003d54 <__alt_data_end+0xf8003d54>
18004708:	d8801f17 	ldw	r2,124(sp)
1800470c:	01460074 	movhi	r5,6145
18004710:	01000044 	movi	r4,1
18004714:	18c00044 	addi	r3,r3,1
18004718:	10800044 	addi	r2,r2,1
1800471c:	2958fa04 	addi	r5,r5,25576
18004720:	41000115 	stw	r4,4(r8)
18004724:	41400015 	stw	r5,0(r8)
18004728:	d8c02015 	stw	r3,128(sp)
1800472c:	d8801f15 	stw	r2,124(sp)
18004730:	010001c4 	movi	r4,7
18004734:	2080b516 	blt	r4,r2,18004a0c <___svfprintf_internal_r+0x1b68>
18004738:	42000204 	addi	r8,r8,8
1800473c:	8800041e 	bne	r17,zero,18004750 <___svfprintf_internal_r+0x18ac>
18004740:	d8803317 	ldw	r2,204(sp)
18004744:	1000021e 	bne	r2,zero,18004750 <___svfprintf_internal_r+0x18ac>
18004748:	9080004c 	andi	r2,r18,1
1800474c:	103c3926 	beq	r2,zero,18003834 <__alt_data_end+0xf8003834>
18004750:	d9003817 	ldw	r4,224(sp)
18004754:	d8801f17 	ldw	r2,124(sp)
18004758:	d9403417 	ldw	r5,208(sp)
1800475c:	20c7883a 	add	r3,r4,r3
18004760:	10800044 	addi	r2,r2,1
18004764:	41000115 	stw	r4,4(r8)
18004768:	41400015 	stw	r5,0(r8)
1800476c:	d8c02015 	stw	r3,128(sp)
18004770:	d8801f15 	stw	r2,124(sp)
18004774:	010001c4 	movi	r4,7
18004778:	20818016 	blt	r4,r2,18004d7c <___svfprintf_internal_r+0x1ed8>
1800477c:	42000204 	addi	r8,r8,8
18004780:	0463c83a 	sub	r17,zero,r17
18004784:	0440cb0e 	bge	zero,r17,18004ab4 <___svfprintf_internal_r+0x1c10>
18004788:	05800404 	movi	r22,16
1800478c:	b440e80e 	bge	r22,r17,18004b30 <___svfprintf_internal_r+0x1c8c>
18004790:	01460074 	movhi	r5,6145
18004794:	2958fa84 	addi	r5,r5,25578
18004798:	d9402c15 	stw	r5,176(sp)
1800479c:	070001c4 	movi	fp,7
180047a0:	dd002d17 	ldw	r20,180(sp)
180047a4:	00000306 	br	180047b4 <___svfprintf_internal_r+0x1910>
180047a8:	42000204 	addi	r8,r8,8
180047ac:	8c7ffc04 	addi	r17,r17,-16
180047b0:	b440e20e 	bge	r22,r17,18004b3c <___svfprintf_internal_r+0x1c98>
180047b4:	18c00404 	addi	r3,r3,16
180047b8:	10800044 	addi	r2,r2,1
180047bc:	45400015 	stw	r21,0(r8)
180047c0:	45800115 	stw	r22,4(r8)
180047c4:	d8c02015 	stw	r3,128(sp)
180047c8:	d8801f15 	stw	r2,124(sp)
180047cc:	e0bff60e 	bge	fp,r2,180047a8 <__alt_data_end+0xf80047a8>
180047d0:	d9801e04 	addi	r6,sp,120
180047d4:	a00b883a 	mov	r5,r20
180047d8:	9809883a 	mov	r4,r19
180047dc:	800c8440 	call	1800c844 <__ssprint_r>
180047e0:	103a971e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
180047e4:	d8c02017 	ldw	r3,128(sp)
180047e8:	d8801f17 	ldw	r2,124(sp)
180047ec:	da000404 	addi	r8,sp,16
180047f0:	003fee06 	br	180047ac <__alt_data_end+0xf80047ac>
180047f4:	d9002e17 	ldw	r4,184(sp)
180047f8:	d9402a17 	ldw	r5,168(sp)
180047fc:	002d883a 	mov	r22,zero
18004800:	20800104 	addi	r2,r4,4
18004804:	25000017 	ldw	r20,0(r4)
18004808:	283e7d0e 	bge	r5,zero,18004200 <__alt_data_end+0xf8004200>
1800480c:	003eda06 	br	18004378 <__alt_data_end+0xf8004378>
18004810:	d9002e17 	ldw	r4,184(sp)
18004814:	d9402a17 	ldw	r5,168(sp)
18004818:	002d883a 	mov	r22,zero
1800481c:	20800104 	addi	r2,r4,4
18004820:	25000017 	ldw	r20,0(r4)
18004824:	283e2d0e 	bge	r5,zero,180040dc <__alt_data_end+0xf80040dc>
18004828:	003f6b06 	br	180045d8 <__alt_data_end+0xf80045d8>
1800482c:	d8c02e15 	stw	r3,184(sp)
18004830:	0039883a 	mov	fp,zero
18004834:	003ed206 	br	18004380 <__alt_data_end+0xf8004380>
18004838:	bc400043 	ldbu	r17,1(r23)
1800483c:	84000814 	ori	r16,r16,32
18004840:	bdc00044 	addi	r23,r23,1
18004844:	8c403fcc 	andi	r17,r17,255
18004848:	8c40201c 	xori	r17,r17,128
1800484c:	8c7fe004 	addi	r17,r17,-128
18004850:	0039e906 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18004854:	d9402d17 	ldw	r5,180(sp)
18004858:	d9801e04 	addi	r6,sp,120
1800485c:	9809883a 	mov	r4,r19
18004860:	800c8440 	call	1800c844 <__ssprint_r>
18004864:	103a761e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004868:	d8c02017 	ldw	r3,128(sp)
1800486c:	da000404 	addi	r8,sp,16
18004870:	003d4a06 	br	18003d9c <__alt_data_end+0xf8003d9c>
18004874:	d9002a17 	ldw	r4,168(sp)
18004878:	05bff7c4 	movi	r22,-33
1800487c:	00bfffc4 	movi	r2,-1
18004880:	8dac703a 	and	r22,r17,r22
18004884:	20806a26 	beq	r4,r2,18004a30 <___svfprintf_internal_r+0x1b8c>
18004888:	008011c4 	movi	r2,71
1800488c:	b0813726 	beq	r22,r2,18004d6c <___svfprintf_internal_r+0x1ec8>
18004890:	d9003717 	ldw	r4,220(sp)
18004894:	90c04014 	ori	r3,r18,256
18004898:	d8c02c15 	stw	r3,176(sp)
1800489c:	20015d16 	blt	r4,zero,18004e14 <___svfprintf_internal_r+0x1f70>
180048a0:	dd003717 	ldw	r20,220(sp)
180048a4:	d8002905 	stb	zero,164(sp)
180048a8:	00801984 	movi	r2,102
180048ac:	88814026 	beq	r17,r2,18004db0 <___svfprintf_internal_r+0x1f0c>
180048b0:	00801184 	movi	r2,70
180048b4:	88817126 	beq	r17,r2,18004e7c <___svfprintf_internal_r+0x1fd8>
180048b8:	00801144 	movi	r2,69
180048bc:	b0816226 	beq	r22,r2,18004e48 <___svfprintf_internal_r+0x1fa4>
180048c0:	d8c02a17 	ldw	r3,168(sp)
180048c4:	d8802104 	addi	r2,sp,132
180048c8:	d8800315 	stw	r2,12(sp)
180048cc:	d9403617 	ldw	r5,216(sp)
180048d0:	d8802504 	addi	r2,sp,148
180048d4:	d8800215 	stw	r2,8(sp)
180048d8:	d8802604 	addi	r2,sp,152
180048dc:	d8c00015 	stw	r3,0(sp)
180048e0:	d8800115 	stw	r2,4(sp)
180048e4:	01c00084 	movi	r7,2
180048e8:	a00d883a 	mov	r6,r20
180048ec:	9809883a 	mov	r4,r19
180048f0:	d8c03d15 	stw	r3,244(sp)
180048f4:	da003e15 	stw	r8,248(sp)
180048f8:	80078900 	call	18007890 <_dtoa_r>
180048fc:	1021883a 	mov	r16,r2
18004900:	008019c4 	movi	r2,103
18004904:	d8c03d17 	ldw	r3,244(sp)
18004908:	da003e17 	ldw	r8,248(sp)
1800490c:	8880e726 	beq	r17,r2,18004cac <___svfprintf_internal_r+0x1e08>
18004910:	008011c4 	movi	r2,71
18004914:	8880d426 	beq	r17,r2,18004c68 <___svfprintf_internal_r+0x1dc4>
18004918:	80f9883a 	add	fp,r16,r3
1800491c:	d9003617 	ldw	r4,216(sp)
18004920:	000d883a 	mov	r6,zero
18004924:	000f883a 	mov	r7,zero
18004928:	a00b883a 	mov	r5,r20
1800492c:	da003e15 	stw	r8,248(sp)
18004930:	8011d400 	call	18011d40 <__eqdf2>
18004934:	da003e17 	ldw	r8,248(sp)
18004938:	1000e426 	beq	r2,zero,18004ccc <___svfprintf_internal_r+0x1e28>
1800493c:	d8802117 	ldw	r2,132(sp)
18004940:	1700062e 	bgeu	r2,fp,1800495c <___svfprintf_internal_r+0x1ab8>
18004944:	01000c04 	movi	r4,48
18004948:	10c00044 	addi	r3,r2,1
1800494c:	d8c02115 	stw	r3,132(sp)
18004950:	11000005 	stb	r4,0(r2)
18004954:	d8802117 	ldw	r2,132(sp)
18004958:	173ffb36 	bltu	r2,fp,18004948 <__alt_data_end+0xf8004948>
1800495c:	1405c83a 	sub	r2,r2,r16
18004960:	d8803315 	stw	r2,204(sp)
18004964:	008011c4 	movi	r2,71
18004968:	b080c526 	beq	r22,r2,18004c80 <___svfprintf_internal_r+0x1ddc>
1800496c:	00801944 	movi	r2,101
18004970:	1441d80e 	bge	r2,r17,180050d4 <___svfprintf_internal_r+0x2230>
18004974:	d8c02617 	ldw	r3,152(sp)
18004978:	00801984 	movi	r2,102
1800497c:	d8c03215 	stw	r3,200(sp)
18004980:	88813426 	beq	r17,r2,18004e54 <___svfprintf_internal_r+0x1fb0>
18004984:	d8c03217 	ldw	r3,200(sp)
18004988:	d9003317 	ldw	r4,204(sp)
1800498c:	19012516 	blt	r3,r4,18004e24 <___svfprintf_internal_r+0x1f80>
18004990:	9480004c 	andi	r18,r18,1
18004994:	9001841e 	bne	r18,zero,18004fa8 <___svfprintf_internal_r+0x2104>
18004998:	1805883a 	mov	r2,r3
1800499c:	1801cb16 	blt	r3,zero,180050cc <___svfprintf_internal_r+0x2228>
180049a0:	d8c03217 	ldw	r3,200(sp)
180049a4:	044019c4 	movi	r17,103
180049a8:	d8c02b15 	stw	r3,172(sp)
180049ac:	df002907 	ldb	fp,164(sp)
180049b0:	e000a61e 	bne	fp,zero,18004c4c <___svfprintf_internal_r+0x1da8>
180049b4:	df002783 	ldbu	fp,158(sp)
180049b8:	d8802915 	stw	r2,164(sp)
180049bc:	dc802c17 	ldw	r18,176(sp)
180049c0:	d8002a15 	stw	zero,168(sp)
180049c4:	003af506 	br	1800359c <__alt_data_end+0xf800359c>
180049c8:	04060074 	movhi	r16,6145
180049cc:	8418ea04 	addi	r16,r16,25512
180049d0:	003a7e06 	br	180033cc <__alt_data_end+0xf80033cc>
180049d4:	d9003917 	ldw	r4,228(sp)
180049d8:	04001004 	movi	r16,64
180049dc:	800b883a 	mov	r5,r16
180049e0:	800a28c0 	call	1800a28c <_malloc_r>
180049e4:	d9002d17 	ldw	r4,180(sp)
180049e8:	20800015 	stw	r2,0(r4)
180049ec:	20800415 	stw	r2,16(r4)
180049f0:	1001d026 	beq	r2,zero,18005134 <___svfprintf_internal_r+0x2290>
180049f4:	d8802d17 	ldw	r2,180(sp)
180049f8:	14000515 	stw	r16,20(r2)
180049fc:	00394406 	br	18002f10 <__alt_data_end+0xf8002f10>
18004a00:	04060074 	movhi	r16,6145
18004a04:	8418ec04 	addi	r16,r16,25520
18004a08:	003ee106 	br	18004590 <__alt_data_end+0xf8004590>
18004a0c:	d9402d17 	ldw	r5,180(sp)
18004a10:	d9801e04 	addi	r6,sp,120
18004a14:	9809883a 	mov	r4,r19
18004a18:	800c8440 	call	1800c844 <__ssprint_r>
18004a1c:	103a081e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004a20:	dc402617 	ldw	r17,152(sp)
18004a24:	d8c02017 	ldw	r3,128(sp)
18004a28:	da000404 	addi	r8,sp,16
18004a2c:	003f4306 	br	1800473c <__alt_data_end+0xf800473c>
18004a30:	01400184 	movi	r5,6
18004a34:	d9402a15 	stw	r5,168(sp)
18004a38:	003f9506 	br	18004890 <__alt_data_end+0xf8004890>
18004a3c:	d8c02e17 	ldw	r3,184(sp)
18004a40:	1d000017 	ldw	r20,0(r3)
18004a44:	18c00104 	addi	r3,r3,4
18004a48:	d8c02e15 	stw	r3,184(sp)
18004a4c:	a02dd7fa 	srai	r22,r20,31
18004a50:	b005883a 	mov	r2,r22
18004a54:	003a7606 	br	18003430 <__alt_data_end+0xf8003430>
18004a58:	d9002e17 	ldw	r4,184(sp)
18004a5c:	002d883a 	mov	r22,zero
18004a60:	25000017 	ldw	r20,0(r4)
18004a64:	21000104 	addi	r4,r4,4
18004a68:	d9002e15 	stw	r4,184(sp)
18004a6c:	003bdd06 	br	180039e4 <__alt_data_end+0xf80039e4>
18004a70:	9480100c 	andi	r18,r18,64
18004a74:	90006e26 	beq	r18,zero,18004c30 <___svfprintf_internal_r+0x1d8c>
18004a78:	d9402e17 	ldw	r5,184(sp)
18004a7c:	d8c02f17 	ldw	r3,188(sp)
18004a80:	28800017 	ldw	r2,0(r5)
18004a84:	29400104 	addi	r5,r5,4
18004a88:	d9402e15 	stw	r5,184(sp)
18004a8c:	10c0000d 	sth	r3,0(r2)
18004a90:	00392f06 	br	18002f50 <__alt_data_end+0xf8002f50>
18004a94:	d9402d17 	ldw	r5,180(sp)
18004a98:	d9801e04 	addi	r6,sp,120
18004a9c:	9809883a 	mov	r4,r19
18004aa0:	800c8440 	call	1800c844 <__ssprint_r>
18004aa4:	1039e61e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004aa8:	d8c02017 	ldw	r3,128(sp)
18004aac:	d8801f17 	ldw	r2,124(sp)
18004ab0:	da000404 	addi	r8,sp,16
18004ab4:	d9403317 	ldw	r5,204(sp)
18004ab8:	10800044 	addi	r2,r2,1
18004abc:	44000015 	stw	r16,0(r8)
18004ac0:	28c7883a 	add	r3,r5,r3
18004ac4:	003b5506 	br	1800381c <__alt_data_end+0xf800381c>
18004ac8:	8009883a 	mov	r4,r16
18004acc:	df003e15 	stw	fp,248(sp)
18004ad0:	8002e0c0 	call	18002e0c <strlen>
18004ad4:	d8802b15 	stw	r2,172(sp)
18004ad8:	da003e17 	ldw	r8,248(sp)
18004adc:	103c160e 	bge	r2,zero,18003b38 <__alt_data_end+0xf8003b38>
18004ae0:	0005883a 	mov	r2,zero
18004ae4:	003c1406 	br	18003b38 <__alt_data_end+0xf8003b38>
18004ae8:	00bfffc4 	movi	r2,-1
18004aec:	0039d906 	br	18003254 <__alt_data_end+0xf8003254>
18004af0:	01060074 	movhi	r4,6145
18004af4:	2118fe84 	addi	r4,r4,25594
18004af8:	d9003515 	stw	r4,212(sp)
18004afc:	003ae406 	br	18003690 <__alt_data_end+0xf8003690>
18004b00:	013fffc4 	movi	r4,-1
18004b04:	0039fa06 	br	180032f0 <__alt_data_end+0xf80032f0>
18004b08:	d9402d17 	ldw	r5,180(sp)
18004b0c:	d9801e04 	addi	r6,sp,120
18004b10:	9809883a 	mov	r4,r19
18004b14:	800c8440 	call	1800c844 <__ssprint_r>
18004b18:	1039c91e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004b1c:	d8c02017 	ldw	r3,128(sp)
18004b20:	da000404 	addi	r8,sp,16
18004b24:	003d8406 	br	18004138 <__alt_data_end+0xf8004138>
18004b28:	0023883a 	mov	r17,zero
18004b2c:	003d8306 	br	1800413c <__alt_data_end+0xf800413c>
18004b30:	01060074 	movhi	r4,6145
18004b34:	2118fa84 	addi	r4,r4,25578
18004b38:	d9002c15 	stw	r4,176(sp)
18004b3c:	d9002c17 	ldw	r4,176(sp)
18004b40:	1c47883a 	add	r3,r3,r17
18004b44:	10800044 	addi	r2,r2,1
18004b48:	41000015 	stw	r4,0(r8)
18004b4c:	44400115 	stw	r17,4(r8)
18004b50:	d8c02015 	stw	r3,128(sp)
18004b54:	d8801f15 	stw	r2,124(sp)
18004b58:	010001c4 	movi	r4,7
18004b5c:	20bfcd16 	blt	r4,r2,18004a94 <__alt_data_end+0xf8004a94>
18004b60:	42000204 	addi	r8,r8,8
18004b64:	003fd306 	br	18004ab4 <__alt_data_end+0xf8004ab4>
18004b68:	d9402d17 	ldw	r5,180(sp)
18004b6c:	d9801e04 	addi	r6,sp,120
18004b70:	9809883a 	mov	r4,r19
18004b74:	800c8440 	call	1800c844 <__ssprint_r>
18004b78:	1039b11e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004b7c:	d8802617 	ldw	r2,152(sp)
18004b80:	d8c02017 	ldw	r3,128(sp)
18004b84:	da000404 	addi	r8,sp,16
18004b88:	003e1c06 	br	180043fc <__alt_data_end+0xf80043fc>
18004b8c:	d8802a17 	ldw	r2,168(sp)
18004b90:	00c00184 	movi	r3,6
18004b94:	1880012e 	bgeu	r3,r2,18004b9c <___svfprintf_internal_r+0x1cf8>
18004b98:	1805883a 	mov	r2,r3
18004b9c:	d8802b15 	stw	r2,172(sp)
18004ba0:	1000f316 	blt	r2,zero,18004f70 <___svfprintf_internal_r+0x20cc>
18004ba4:	04060074 	movhi	r16,6145
18004ba8:	d8802915 	stw	r2,164(sp)
18004bac:	dd002e15 	stw	r20,184(sp)
18004bb0:	d8002a15 	stw	zero,168(sp)
18004bb4:	d8003215 	stw	zero,200(sp)
18004bb8:	8418f804 	addi	r16,r16,25568
18004bbc:	0039883a 	mov	fp,zero
18004bc0:	003a7d06 	br	180035b8 <__alt_data_end+0xf80035b8>
18004bc4:	01060074 	movhi	r4,6145
18004bc8:	2118fe84 	addi	r4,r4,25594
18004bcc:	d9003515 	stw	r4,212(sp)
18004bd0:	003b3d06 	br	180038c8 <__alt_data_end+0xf80038c8>
18004bd4:	d9402d17 	ldw	r5,180(sp)
18004bd8:	d9801e04 	addi	r6,sp,120
18004bdc:	9809883a 	mov	r4,r19
18004be0:	800c8440 	call	1800c844 <__ssprint_r>
18004be4:	1039961e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004be8:	d8802617 	ldw	r2,152(sp)
18004bec:	d9403317 	ldw	r5,204(sp)
18004bf0:	d8c02017 	ldw	r3,128(sp)
18004bf4:	da000404 	addi	r8,sp,16
18004bf8:	2885c83a 	sub	r2,r5,r2
18004bfc:	003e1006 	br	18004440 <__alt_data_end+0xf8004440>
18004c00:	00800044 	movi	r2,1
18004c04:	10803fcc 	andi	r2,r2,255
18004c08:	00c00044 	movi	r3,1
18004c0c:	10fa1026 	beq	r2,r3,18003450 <__alt_data_end+0xf8003450>
18004c10:	00c00084 	movi	r3,2
18004c14:	10fb8226 	beq	r2,r3,18003a20 <__alt_data_end+0xf8003a20>
18004c18:	003a4206 	br	18003524 <__alt_data_end+0xf8003524>
18004c1c:	0021883a 	mov	r16,zero
18004c20:	003e0806 	br	18004444 <__alt_data_end+0xf8004444>
18004c24:	07000b44 	movi	fp,45
18004c28:	df002785 	stb	fp,158(sp)
18004c2c:	0039e306 	br	180033bc <__alt_data_end+0xf80033bc>
18004c30:	d9002e17 	ldw	r4,184(sp)
18004c34:	d9402f17 	ldw	r5,188(sp)
18004c38:	20800017 	ldw	r2,0(r4)
18004c3c:	21000104 	addi	r4,r4,4
18004c40:	d9002e15 	stw	r4,184(sp)
18004c44:	11400015 	stw	r5,0(r2)
18004c48:	0038c106 	br	18002f50 <__alt_data_end+0xf8002f50>
18004c4c:	00c00b44 	movi	r3,45
18004c50:	d8c02785 	stb	r3,158(sp)
18004c54:	d8802915 	stw	r2,164(sp)
18004c58:	dc802c17 	ldw	r18,176(sp)
18004c5c:	d8002a15 	stw	zero,168(sp)
18004c60:	07000b44 	movi	fp,45
18004c64:	003a5106 	br	180035ac <__alt_data_end+0xf80035ac>
18004c68:	9080004c 	andi	r2,r18,1
18004c6c:	1000941e 	bne	r2,zero,18004ec0 <___svfprintf_internal_r+0x201c>
18004c70:	d8802117 	ldw	r2,132(sp)
18004c74:	1405c83a 	sub	r2,r2,r16
18004c78:	d8803315 	stw	r2,204(sp)
18004c7c:	b441151e 	bne	r22,r17,180050d4 <___svfprintf_internal_r+0x2230>
18004c80:	dd802617 	ldw	r22,152(sp)
18004c84:	00bfff44 	movi	r2,-3
18004c88:	b0801a16 	blt	r22,r2,18004cf4 <___svfprintf_internal_r+0x1e50>
18004c8c:	d9402a17 	ldw	r5,168(sp)
18004c90:	2d801816 	blt	r5,r22,18004cf4 <___svfprintf_internal_r+0x1e50>
18004c94:	dd803215 	stw	r22,200(sp)
18004c98:	003f3a06 	br	18004984 <__alt_data_end+0xf8004984>
18004c9c:	1025883a 	mov	r18,r2
18004ca0:	0039883a 	mov	fp,zero
18004ca4:	00800084 	movi	r2,2
18004ca8:	003fd606 	br	18004c04 <__alt_data_end+0xf8004c04>
18004cac:	9080004c 	andi	r2,r18,1
18004cb0:	103f191e 	bne	r2,zero,18004918 <__alt_data_end+0xf8004918>
18004cb4:	d8802117 	ldw	r2,132(sp)
18004cb8:	003f2806 	br	1800495c <__alt_data_end+0xf800495c>
18004cbc:	01060074 	movhi	r4,6145
18004cc0:	2118fa84 	addi	r4,r4,25578
18004cc4:	d9002c15 	stw	r4,176(sp)
18004cc8:	003c7c06 	br	18003ebc <__alt_data_end+0xf8003ebc>
18004ccc:	e005883a 	mov	r2,fp
18004cd0:	003f2206 	br	1800495c <__alt_data_end+0xf800495c>
18004cd4:	d9002a17 	ldw	r4,168(sp)
18004cd8:	df002783 	ldbu	fp,158(sp)
18004cdc:	dd002e15 	stw	r20,184(sp)
18004ce0:	d9002915 	stw	r4,164(sp)
18004ce4:	d9002b15 	stw	r4,172(sp)
18004ce8:	d8002a15 	stw	zero,168(sp)
18004cec:	d8003215 	stw	zero,200(sp)
18004cf0:	003a2a06 	br	1800359c <__alt_data_end+0xf800359c>
18004cf4:	8c7fff84 	addi	r17,r17,-2
18004cf8:	b5bfffc4 	addi	r22,r22,-1
18004cfc:	dd802615 	stw	r22,152(sp)
18004d00:	dc4022c5 	stb	r17,139(sp)
18004d04:	b000c316 	blt	r22,zero,18005014 <___svfprintf_internal_r+0x2170>
18004d08:	00800ac4 	movi	r2,43
18004d0c:	d8802305 	stb	r2,140(sp)
18004d10:	00800244 	movi	r2,9
18004d14:	15806e16 	blt	r2,r22,18004ed0 <___svfprintf_internal_r+0x202c>
18004d18:	00800c04 	movi	r2,48
18004d1c:	b5800c04 	addi	r22,r22,48
18004d20:	d8802345 	stb	r2,141(sp)
18004d24:	dd802385 	stb	r22,142(sp)
18004d28:	d88023c4 	addi	r2,sp,143
18004d2c:	df0022c4 	addi	fp,sp,139
18004d30:	d8c03317 	ldw	r3,204(sp)
18004d34:	1739c83a 	sub	fp,r2,fp
18004d38:	d9003317 	ldw	r4,204(sp)
18004d3c:	e0c7883a 	add	r3,fp,r3
18004d40:	df003b15 	stw	fp,236(sp)
18004d44:	d8c02b15 	stw	r3,172(sp)
18004d48:	00800044 	movi	r2,1
18004d4c:	1100b70e 	bge	r2,r4,1800502c <___svfprintf_internal_r+0x2188>
18004d50:	d8c02b17 	ldw	r3,172(sp)
18004d54:	18c00044 	addi	r3,r3,1
18004d58:	d8c02b15 	stw	r3,172(sp)
18004d5c:	1805883a 	mov	r2,r3
18004d60:	1800b016 	blt	r3,zero,18005024 <___svfprintf_internal_r+0x2180>
18004d64:	d8003215 	stw	zero,200(sp)
18004d68:	003f1006 	br	180049ac <__alt_data_end+0xf80049ac>
18004d6c:	d8802a17 	ldw	r2,168(sp)
18004d70:	103ec71e 	bne	r2,zero,18004890 <__alt_data_end+0xf8004890>
18004d74:	dc002a15 	stw	r16,168(sp)
18004d78:	003ec506 	br	18004890 <__alt_data_end+0xf8004890>
18004d7c:	d9402d17 	ldw	r5,180(sp)
18004d80:	d9801e04 	addi	r6,sp,120
18004d84:	9809883a 	mov	r4,r19
18004d88:	800c8440 	call	1800c844 <__ssprint_r>
18004d8c:	10392c1e 	bne	r2,zero,18003240 <__alt_data_end+0xf8003240>
18004d90:	dc402617 	ldw	r17,152(sp)
18004d94:	d8c02017 	ldw	r3,128(sp)
18004d98:	d8801f17 	ldw	r2,124(sp)
18004d9c:	da000404 	addi	r8,sp,16
18004da0:	003e7706 	br	18004780 <__alt_data_end+0xf8004780>
18004da4:	182f883a 	mov	r23,r3
18004da8:	d8002a15 	stw	zero,168(sp)
18004dac:	00389306 	br	18002ffc <__alt_data_end+0xf8002ffc>
18004db0:	d8c02a17 	ldw	r3,168(sp)
18004db4:	d8802104 	addi	r2,sp,132
18004db8:	d8800315 	stw	r2,12(sp)
18004dbc:	d9403617 	ldw	r5,216(sp)
18004dc0:	d8802504 	addi	r2,sp,148
18004dc4:	d8800215 	stw	r2,8(sp)
18004dc8:	d8802604 	addi	r2,sp,152
18004dcc:	d8c00015 	stw	r3,0(sp)
18004dd0:	9809883a 	mov	r4,r19
18004dd4:	d8800115 	stw	r2,4(sp)
18004dd8:	01c000c4 	movi	r7,3
18004ddc:	a00d883a 	mov	r6,r20
18004de0:	da003e15 	stw	r8,248(sp)
18004de4:	80078900 	call	18007890 <_dtoa_r>
18004de8:	d9002a17 	ldw	r4,168(sp)
18004dec:	da003e17 	ldw	r8,248(sp)
18004df0:	1021883a 	mov	r16,r2
18004df4:	1139883a 	add	fp,r2,r4
18004df8:	2007883a 	mov	r3,r4
18004dfc:	81000007 	ldb	r4,0(r16)
18004e00:	00800c04 	movi	r2,48
18004e04:	20806f26 	beq	r4,r2,18004fc4 <___svfprintf_internal_r+0x2120>
18004e08:	d8c02617 	ldw	r3,152(sp)
18004e0c:	e0f9883a 	add	fp,fp,r3
18004e10:	003ec206 	br	1800491c <__alt_data_end+0xf800491c>
18004e14:	00c00b44 	movi	r3,45
18004e18:	2520003c 	xorhi	r20,r4,32768
18004e1c:	d8c02905 	stb	r3,164(sp)
18004e20:	003ea106 	br	180048a8 <__alt_data_end+0xf80048a8>
18004e24:	d8c03217 	ldw	r3,200(sp)
18004e28:	00c0890e 	bge	zero,r3,18005050 <___svfprintf_internal_r+0x21ac>
18004e2c:	00800044 	movi	r2,1
18004e30:	d9003317 	ldw	r4,204(sp)
18004e34:	1105883a 	add	r2,r2,r4
18004e38:	d8802b15 	stw	r2,172(sp)
18004e3c:	10005f16 	blt	r2,zero,18004fbc <___svfprintf_internal_r+0x2118>
18004e40:	044019c4 	movi	r17,103
18004e44:	003ed906 	br	180049ac <__alt_data_end+0xf80049ac>
18004e48:	d9002a17 	ldw	r4,168(sp)
18004e4c:	20c00044 	addi	r3,r4,1
18004e50:	003e9c06 	br	180048c4 <__alt_data_end+0xf80048c4>
18004e54:	d9002a17 	ldw	r4,168(sp)
18004e58:	00c0680e 	bge	zero,r3,18004ffc <___svfprintf_internal_r+0x2158>
18004e5c:	2000461e 	bne	r4,zero,18004f78 <___svfprintf_internal_r+0x20d4>
18004e60:	9480004c 	andi	r18,r18,1
18004e64:	9000441e 	bne	r18,zero,18004f78 <___svfprintf_internal_r+0x20d4>
18004e68:	1805883a 	mov	r2,r3
18004e6c:	1800a116 	blt	r3,zero,180050f4 <___svfprintf_internal_r+0x2250>
18004e70:	d8c03217 	ldw	r3,200(sp)
18004e74:	d8c02b15 	stw	r3,172(sp)
18004e78:	003ecc06 	br	180049ac <__alt_data_end+0xf80049ac>
18004e7c:	d9402a17 	ldw	r5,168(sp)
18004e80:	d8802104 	addi	r2,sp,132
18004e84:	d8800315 	stw	r2,12(sp)
18004e88:	d9400015 	stw	r5,0(sp)
18004e8c:	d8802504 	addi	r2,sp,148
18004e90:	d9403617 	ldw	r5,216(sp)
18004e94:	d8800215 	stw	r2,8(sp)
18004e98:	d8802604 	addi	r2,sp,152
18004e9c:	d8800115 	stw	r2,4(sp)
18004ea0:	01c000c4 	movi	r7,3
18004ea4:	a00d883a 	mov	r6,r20
18004ea8:	9809883a 	mov	r4,r19
18004eac:	da003e15 	stw	r8,248(sp)
18004eb0:	80078900 	call	18007890 <_dtoa_r>
18004eb4:	d8c02a17 	ldw	r3,168(sp)
18004eb8:	da003e17 	ldw	r8,248(sp)
18004ebc:	1021883a 	mov	r16,r2
18004ec0:	00801184 	movi	r2,70
18004ec4:	80f9883a 	add	fp,r16,r3
18004ec8:	88bfcc26 	beq	r17,r2,18004dfc <__alt_data_end+0xf8004dfc>
18004ecc:	003e9306 	br	1800491c <__alt_data_end+0xf800491c>
18004ed0:	df0022c4 	addi	fp,sp,139
18004ed4:	dc002a15 	stw	r16,168(sp)
18004ed8:	9829883a 	mov	r20,r19
18004edc:	e021883a 	mov	r16,fp
18004ee0:	4027883a 	mov	r19,r8
18004ee4:	b009883a 	mov	r4,r22
18004ee8:	01400284 	movi	r5,10
18004eec:	8002a340 	call	18002a34 <__modsi3>
18004ef0:	10800c04 	addi	r2,r2,48
18004ef4:	843fffc4 	addi	r16,r16,-1
18004ef8:	b009883a 	mov	r4,r22
18004efc:	01400284 	movi	r5,10
18004f00:	80800005 	stb	r2,0(r16)
18004f04:	80029b00 	call	180029b0 <__divsi3>
18004f08:	102d883a 	mov	r22,r2
18004f0c:	00800244 	movi	r2,9
18004f10:	15bff416 	blt	r2,r22,18004ee4 <__alt_data_end+0xf8004ee4>
18004f14:	9811883a 	mov	r8,r19
18004f18:	b0800c04 	addi	r2,r22,48
18004f1c:	a027883a 	mov	r19,r20
18004f20:	8029883a 	mov	r20,r16
18004f24:	a17fffc4 	addi	r5,r20,-1
18004f28:	a0bfffc5 	stb	r2,-1(r20)
18004f2c:	dc002a17 	ldw	r16,168(sp)
18004f30:	2f00782e 	bgeu	r5,fp,18005114 <___svfprintf_internal_r+0x2270>
18004f34:	d9c02384 	addi	r7,sp,142
18004f38:	3d0fc83a 	sub	r7,r7,r20
18004f3c:	d9002344 	addi	r4,sp,141
18004f40:	e1cf883a 	add	r7,fp,r7
18004f44:	00000106 	br	18004f4c <___svfprintf_internal_r+0x20a8>
18004f48:	28800003 	ldbu	r2,0(r5)
18004f4c:	20800005 	stb	r2,0(r4)
18004f50:	21000044 	addi	r4,r4,1
18004f54:	29400044 	addi	r5,r5,1
18004f58:	21fffb1e 	bne	r4,r7,18004f48 <__alt_data_end+0xf8004f48>
18004f5c:	d8802304 	addi	r2,sp,140
18004f60:	1505c83a 	sub	r2,r2,r20
18004f64:	d8c02344 	addi	r3,sp,141
18004f68:	1885883a 	add	r2,r3,r2
18004f6c:	003f7006 	br	18004d30 <__alt_data_end+0xf8004d30>
18004f70:	0005883a 	mov	r2,zero
18004f74:	003f0b06 	br	18004ba4 <__alt_data_end+0xf8004ba4>
18004f78:	d9002a17 	ldw	r4,168(sp)
18004f7c:	d8c03217 	ldw	r3,200(sp)
18004f80:	20800044 	addi	r2,r4,1
18004f84:	1885883a 	add	r2,r3,r2
18004f88:	d8802b15 	stw	r2,172(sp)
18004f8c:	103e870e 	bge	r2,zero,180049ac <__alt_data_end+0xf80049ac>
18004f90:	0005883a 	mov	r2,zero
18004f94:	003e8506 	br	180049ac <__alt_data_end+0xf80049ac>
18004f98:	01060074 	movhi	r4,6145
18004f9c:	2118fa84 	addi	r4,r4,25578
18004fa0:	d9002c15 	stw	r4,176(sp)
18004fa4:	003cc506 	br	180042bc <__alt_data_end+0xf80042bc>
18004fa8:	d8c03217 	ldw	r3,200(sp)
18004fac:	18c00044 	addi	r3,r3,1
18004fb0:	d8c02b15 	stw	r3,172(sp)
18004fb4:	1805883a 	mov	r2,r3
18004fb8:	183fa10e 	bge	r3,zero,18004e40 <__alt_data_end+0xf8004e40>
18004fbc:	0005883a 	mov	r2,zero
18004fc0:	003f9f06 	br	18004e40 <__alt_data_end+0xf8004e40>
18004fc4:	d9003617 	ldw	r4,216(sp)
18004fc8:	000d883a 	mov	r6,zero
18004fcc:	000f883a 	mov	r7,zero
18004fd0:	a00b883a 	mov	r5,r20
18004fd4:	d8c03d15 	stw	r3,244(sp)
18004fd8:	da003e15 	stw	r8,248(sp)
18004fdc:	8011d400 	call	18011d40 <__eqdf2>
18004fe0:	d8c03d17 	ldw	r3,244(sp)
18004fe4:	da003e17 	ldw	r8,248(sp)
18004fe8:	103f8726 	beq	r2,zero,18004e08 <__alt_data_end+0xf8004e08>
18004fec:	00800044 	movi	r2,1
18004ff0:	10c7c83a 	sub	r3,r2,r3
18004ff4:	d8c02615 	stw	r3,152(sp)
18004ff8:	003f8406 	br	18004e0c <__alt_data_end+0xf8004e0c>
18004ffc:	20000e1e 	bne	r4,zero,18005038 <___svfprintf_internal_r+0x2194>
18005000:	9480004c 	andi	r18,r18,1
18005004:	90000c1e 	bne	r18,zero,18005038 <___svfprintf_internal_r+0x2194>
18005008:	00800044 	movi	r2,1
1800500c:	d8802b15 	stw	r2,172(sp)
18005010:	003e6606 	br	180049ac <__alt_data_end+0xf80049ac>
18005014:	00800b44 	movi	r2,45
18005018:	05adc83a 	sub	r22,zero,r22
1800501c:	d8802305 	stb	r2,140(sp)
18005020:	003f3b06 	br	18004d10 <__alt_data_end+0xf8004d10>
18005024:	0005883a 	mov	r2,zero
18005028:	003f4e06 	br	18004d64 <__alt_data_end+0xf8004d64>
1800502c:	90a4703a 	and	r18,r18,r2
18005030:	903f4a26 	beq	r18,zero,18004d5c <__alt_data_end+0xf8004d5c>
18005034:	003f4606 	br	18004d50 <__alt_data_end+0xf8004d50>
18005038:	d8c02a17 	ldw	r3,168(sp)
1800503c:	18c00084 	addi	r3,r3,2
18005040:	d8c02b15 	stw	r3,172(sp)
18005044:	1805883a 	mov	r2,r3
18005048:	183e580e 	bge	r3,zero,180049ac <__alt_data_end+0xf80049ac>
1800504c:	003fd006 	br	18004f90 <__alt_data_end+0xf8004f90>
18005050:	00800084 	movi	r2,2
18005054:	10c5c83a 	sub	r2,r2,r3
18005058:	003f7506 	br	18004e30 <__alt_data_end+0xf8004e30>
1800505c:	d9402e17 	ldw	r5,184(sp)
18005060:	d9002e17 	ldw	r4,184(sp)
18005064:	bc400043 	ldbu	r17,1(r23)
18005068:	29400017 	ldw	r5,0(r5)
1800506c:	20800104 	addi	r2,r4,4
18005070:	d8802e15 	stw	r2,184(sp)
18005074:	d9402a15 	stw	r5,168(sp)
18005078:	182f883a 	mov	r23,r3
1800507c:	283df10e 	bge	r5,zero,18004844 <__alt_data_end+0xf8004844>
18005080:	8c403fcc 	andi	r17,r17,255
18005084:	017fffc4 	movi	r5,-1
18005088:	8c40201c 	xori	r17,r17,128
1800508c:	d9402a15 	stw	r5,168(sp)
18005090:	8c7fe004 	addi	r17,r17,-128
18005094:	0037d806 	br	18002ff8 <__alt_data_end+0xf8002ff8>
18005098:	9080004c 	andi	r2,r18,1
1800509c:	0039883a 	mov	fp,zero
180050a0:	10000726 	beq	r2,zero,180050c0 <___svfprintf_internal_r+0x221c>
180050a4:	d8c02817 	ldw	r3,160(sp)
180050a8:	dc001dc4 	addi	r16,sp,119
180050ac:	00800c04 	movi	r2,48
180050b0:	1c07c83a 	sub	r3,r3,r16
180050b4:	d8801dc5 	stb	r2,119(sp)
180050b8:	d8c02b15 	stw	r3,172(sp)
180050bc:	00393106 	br	18003584 <__alt_data_end+0xf8003584>
180050c0:	d8002b15 	stw	zero,172(sp)
180050c4:	dc001e04 	addi	r16,sp,120
180050c8:	00392e06 	br	18003584 <__alt_data_end+0xf8003584>
180050cc:	0005883a 	mov	r2,zero
180050d0:	003e3306 	br	180049a0 <__alt_data_end+0xf80049a0>
180050d4:	dd802617 	ldw	r22,152(sp)
180050d8:	003f0706 	br	18004cf8 <__alt_data_end+0xf8004cf8>
180050dc:	d8c02b03 	ldbu	r3,172(sp)
180050e0:	d8c02785 	stb	r3,158(sp)
180050e4:	003a3506 	br	180039bc <__alt_data_end+0xf80039bc>
180050e8:	d8c02b03 	ldbu	r3,172(sp)
180050ec:	d8c02785 	stb	r3,158(sp)
180050f0:	003a1706 	br	18003950 <__alt_data_end+0xf8003950>
180050f4:	0005883a 	mov	r2,zero
180050f8:	003f5d06 	br	18004e70 <__alt_data_end+0xf8004e70>
180050fc:	d8c02b03 	ldbu	r3,172(sp)
18005100:	d8c02785 	stb	r3,158(sp)
18005104:	0038f306 	br	180034d4 <__alt_data_end+0xf80034d4>
18005108:	d8c02b03 	ldbu	r3,172(sp)
1800510c:	d8c02785 	stb	r3,158(sp)
18005110:	0038be06 	br	1800340c <__alt_data_end+0xf800340c>
18005114:	d8802344 	addi	r2,sp,141
18005118:	003f0506 	br	18004d30 <__alt_data_end+0xf8004d30>
1800511c:	d8c02b03 	ldbu	r3,172(sp)
18005120:	d8c02785 	stb	r3,158(sp)
18005124:	00388b06 	br	18003354 <__alt_data_end+0xf8003354>
18005128:	d8c02b03 	ldbu	r3,172(sp)
1800512c:	d8c02785 	stb	r3,158(sp)
18005130:	003ad706 	br	18003c90 <__alt_data_end+0xf8003c90>
18005134:	d9403917 	ldw	r5,228(sp)
18005138:	00800304 	movi	r2,12
1800513c:	28800015 	stw	r2,0(r5)
18005140:	00bfffc4 	movi	r2,-1
18005144:	00384306 	br	18003254 <__alt_data_end+0xf8003254>
18005148:	d8c02b03 	ldbu	r3,172(sp)
1800514c:	d8c02785 	stb	r3,158(sp)
18005150:	003ab606 	br	18003c2c <__alt_data_end+0xf8003c2c>
18005154:	d8c02b03 	ldbu	r3,172(sp)
18005158:	d8c02785 	stb	r3,158(sp)
1800515c:	003a8906 	br	18003b84 <__alt_data_end+0xf8003b84>

18005160 <___vfprintf_internal_r>:
18005160:	deffb804 	addi	sp,sp,-288
18005164:	dfc04715 	stw	ra,284(sp)
18005168:	ddc04515 	stw	r23,276(sp)
1800516c:	dd404315 	stw	r21,268(sp)
18005170:	d9002d15 	stw	r4,180(sp)
18005174:	282f883a 	mov	r23,r5
18005178:	302b883a 	mov	r21,r6
1800517c:	d9c02e15 	stw	r7,184(sp)
18005180:	df004615 	stw	fp,280(sp)
18005184:	dd804415 	stw	r22,272(sp)
18005188:	dd004215 	stw	r20,264(sp)
1800518c:	dcc04115 	stw	r19,260(sp)
18005190:	dc804015 	stw	r18,256(sp)
18005194:	dc403f15 	stw	r17,252(sp)
18005198:	dc003e15 	stw	r16,248(sp)
1800519c:	800a0a00 	call	1800a0a0 <_localeconv_r>
180051a0:	10800017 	ldw	r2,0(r2)
180051a4:	1009883a 	mov	r4,r2
180051a8:	d8803415 	stw	r2,208(sp)
180051ac:	8002e0c0 	call	18002e0c <strlen>
180051b0:	d8803715 	stw	r2,220(sp)
180051b4:	d8802d17 	ldw	r2,180(sp)
180051b8:	10000226 	beq	r2,zero,180051c4 <___vfprintf_internal_r+0x64>
180051bc:	10800e17 	ldw	r2,56(r2)
180051c0:	1000fb26 	beq	r2,zero,180055b0 <___vfprintf_internal_r+0x450>
180051c4:	b880030b 	ldhu	r2,12(r23)
180051c8:	10c8000c 	andi	r3,r2,8192
180051cc:	1800061e 	bne	r3,zero,180051e8 <___vfprintf_internal_r+0x88>
180051d0:	b9001917 	ldw	r4,100(r23)
180051d4:	00f7ffc4 	movi	r3,-8193
180051d8:	10880014 	ori	r2,r2,8192
180051dc:	20c6703a 	and	r3,r4,r3
180051e0:	b880030d 	sth	r2,12(r23)
180051e4:	b8c01915 	stw	r3,100(r23)
180051e8:	10c0020c 	andi	r3,r2,8
180051ec:	1800c326 	beq	r3,zero,180054fc <___vfprintf_internal_r+0x39c>
180051f0:	b8c00417 	ldw	r3,16(r23)
180051f4:	1800c126 	beq	r3,zero,180054fc <___vfprintf_internal_r+0x39c>
180051f8:	1080068c 	andi	r2,r2,26
180051fc:	00c00284 	movi	r3,10
18005200:	10c0c626 	beq	r2,r3,1800551c <___vfprintf_internal_r+0x3bc>
18005204:	d8c00404 	addi	r3,sp,16
18005208:	05060074 	movhi	r20,6145
1800520c:	d9001e04 	addi	r4,sp,120
18005210:	a5190284 	addi	r20,r20,25610
18005214:	d8c01e15 	stw	r3,120(sp)
18005218:	d8002015 	stw	zero,128(sp)
1800521c:	d8001f15 	stw	zero,124(sp)
18005220:	d8003315 	stw	zero,204(sp)
18005224:	d8003615 	stw	zero,216(sp)
18005228:	d8003815 	stw	zero,224(sp)
1800522c:	1811883a 	mov	r8,r3
18005230:	d8003915 	stw	zero,228(sp)
18005234:	d8003a15 	stw	zero,232(sp)
18005238:	d8002f15 	stw	zero,188(sp)
1800523c:	d9002815 	stw	r4,160(sp)
18005240:	a8800007 	ldb	r2,0(r21)
18005244:	10028b26 	beq	r2,zero,18005c74 <___vfprintf_internal_r+0xb14>
18005248:	00c00944 	movi	r3,37
1800524c:	a823883a 	mov	r17,r21
18005250:	10c0021e 	bne	r2,r3,1800525c <___vfprintf_internal_r+0xfc>
18005254:	00001406 	br	180052a8 <___vfprintf_internal_r+0x148>
18005258:	10c00326 	beq	r2,r3,18005268 <___vfprintf_internal_r+0x108>
1800525c:	8c400044 	addi	r17,r17,1
18005260:	88800007 	ldb	r2,0(r17)
18005264:	103ffc1e 	bne	r2,zero,18005258 <__alt_data_end+0xf8005258>
18005268:	8d61c83a 	sub	r16,r17,r21
1800526c:	80000e26 	beq	r16,zero,180052a8 <___vfprintf_internal_r+0x148>
18005270:	d8c02017 	ldw	r3,128(sp)
18005274:	d8801f17 	ldw	r2,124(sp)
18005278:	45400015 	stw	r21,0(r8)
1800527c:	1c07883a 	add	r3,r3,r16
18005280:	10800044 	addi	r2,r2,1
18005284:	d8c02015 	stw	r3,128(sp)
18005288:	44000115 	stw	r16,4(r8)
1800528c:	d8801f15 	stw	r2,124(sp)
18005290:	00c001c4 	movi	r3,7
18005294:	1880a916 	blt	r3,r2,1800553c <___vfprintf_internal_r+0x3dc>
18005298:	42000204 	addi	r8,r8,8
1800529c:	d9402f17 	ldw	r5,188(sp)
180052a0:	2c0b883a 	add	r5,r5,r16
180052a4:	d9402f15 	stw	r5,188(sp)
180052a8:	88800007 	ldb	r2,0(r17)
180052ac:	1000aa26 	beq	r2,zero,18005558 <___vfprintf_internal_r+0x3f8>
180052b0:	8d400044 	addi	r21,r17,1
180052b4:	8c400047 	ldb	r17,1(r17)
180052b8:	0021883a 	mov	r16,zero
180052bc:	00bfffc4 	movi	r2,-1
180052c0:	0025883a 	mov	r18,zero
180052c4:	dc002905 	stb	r16,164(sp)
180052c8:	d8002785 	stb	zero,158(sp)
180052cc:	d8002b05 	stb	zero,172(sp)
180052d0:	d8802a15 	stw	r2,168(sp)
180052d4:	d8003115 	stw	zero,196(sp)
180052d8:	04c01604 	movi	r19,88
180052dc:	05800244 	movi	r22,9
180052e0:	9021883a 	mov	r16,r18
180052e4:	4039883a 	mov	fp,r8
180052e8:	ad400044 	addi	r21,r21,1
180052ec:	88bff804 	addi	r2,r17,-32
180052f0:	98833236 	bltu	r19,r2,18005fbc <___vfprintf_internal_r+0xe5c>
180052f4:	100490ba 	slli	r2,r2,2
180052f8:	00c60034 	movhi	r3,6144
180052fc:	18d4c304 	addi	r3,r3,21260
18005300:	10c5883a 	add	r2,r2,r3
18005304:	10800017 	ldw	r2,0(r2)
18005308:	1000683a 	jmp	r2
1800530c:	18005eb4 	orhi	zero,r3,378
18005310:	18005fbc 	xorhi	zero,r3,382
18005314:	18005fbc 	xorhi	zero,r3,382
18005318:	18005ed4 	ori	zero,r3,379
1800531c:	18005fbc 	xorhi	zero,r3,382
18005320:	18005fbc 	xorhi	zero,r3,382
18005324:	18005fbc 	xorhi	zero,r3,382
18005328:	18005fbc 	xorhi	zero,r3,382
1800532c:	18005fbc 	xorhi	zero,r3,382
18005330:	18005fbc 	xorhi	zero,r3,382
18005334:	180055bc 	xorhi	zero,r3,342
18005338:	18005dc4 	addi	zero,r3,375
1800533c:	18005fbc 	xorhi	zero,r3,382
18005340:	18005480 	call	11800548 <__alt_mem_onchip_memory2_0+0x11800548>
18005344:	180055e0 	cmpeqi	zero,r3,343
18005348:	18005fbc 	xorhi	zero,r3,382
1800534c:	18005630 	cmpltui	zero,r3,344
18005350:	1800563c 	xorhi	zero,r3,344
18005354:	1800563c 	xorhi	zero,r3,344
18005358:	1800563c 	xorhi	zero,r3,344
1800535c:	1800563c 	xorhi	zero,r3,344
18005360:	1800563c 	xorhi	zero,r3,344
18005364:	1800563c 	xorhi	zero,r3,344
18005368:	1800563c 	xorhi	zero,r3,344
1800536c:	1800563c 	xorhi	zero,r3,344
18005370:	1800563c 	xorhi	zero,r3,344
18005374:	18005fbc 	xorhi	zero,r3,382
18005378:	18005fbc 	xorhi	zero,r3,382
1800537c:	18005fbc 	xorhi	zero,r3,382
18005380:	18005fbc 	xorhi	zero,r3,382
18005384:	18005fbc 	xorhi	zero,r3,382
18005388:	18005fbc 	xorhi	zero,r3,382
1800538c:	18005fbc 	xorhi	zero,r3,382
18005390:	18005fbc 	xorhi	zero,r3,382
18005394:	18005fbc 	xorhi	zero,r3,382
18005398:	18005fbc 	xorhi	zero,r3,382
1800539c:	18005678 	rdprs	zero,r3,345
180053a0:	18005740 	call	11800574 <__alt_mem_onchip_memory2_0+0x11800574>
180053a4:	18005fbc 	xorhi	zero,r3,382
180053a8:	18005740 	call	11800574 <__alt_mem_onchip_memory2_0+0x11800574>
180053ac:	18005fbc 	xorhi	zero,r3,382
180053b0:	18005fbc 	xorhi	zero,r3,382
180053b4:	18005fbc 	xorhi	zero,r3,382
180053b8:	18005fbc 	xorhi	zero,r3,382
180053bc:	180057ec 	andhi	zero,r3,351
180053c0:	18005fbc 	xorhi	zero,r3,382
180053c4:	18005fbc 	xorhi	zero,r3,382
180053c8:	180057f8 	rdprs	zero,r3,351
180053cc:	18005fbc 	xorhi	zero,r3,382
180053d0:	18005fbc 	xorhi	zero,r3,382
180053d4:	18005fbc 	xorhi	zero,r3,382
180053d8:	18005fbc 	xorhi	zero,r3,382
180053dc:	18005fbc 	xorhi	zero,r3,382
180053e0:	18005c7c 	xorhi	zero,r3,369
180053e4:	18005fbc 	xorhi	zero,r3,382
180053e8:	18005fbc 	xorhi	zero,r3,382
180053ec:	18005ce8 	cmpgeui	zero,r3,371
180053f0:	18005fbc 	xorhi	zero,r3,382
180053f4:	18005fbc 	xorhi	zero,r3,382
180053f8:	18005fbc 	xorhi	zero,r3,382
180053fc:	18005fbc 	xorhi	zero,r3,382
18005400:	18005fbc 	xorhi	zero,r3,382
18005404:	18005fbc 	xorhi	zero,r3,382
18005408:	18005fbc 	xorhi	zero,r3,382
1800540c:	18005fbc 	xorhi	zero,r3,382
18005410:	18005fbc 	xorhi	zero,r3,382
18005414:	18005fbc 	xorhi	zero,r3,382
18005418:	18005f60 	cmpeqi	zero,r3,381
1800541c:	18005ee0 	cmpeqi	zero,r3,379
18005420:	18005740 	call	11800574 <__alt_mem_onchip_memory2_0+0x11800574>
18005424:	18005740 	call	11800574 <__alt_mem_onchip_memory2_0+0x11800574>
18005428:	18005740 	call	11800574 <__alt_mem_onchip_memory2_0+0x11800574>
1800542c:	18005f00 	call	118005f0 <__alt_mem_onchip_memory2_0+0x118005f0>
18005430:	18005ee0 	cmpeqi	zero,r3,379
18005434:	18005fbc 	xorhi	zero,r3,382
18005438:	18005fbc 	xorhi	zero,r3,382
1800543c:	18005f0c 	andi	zero,r3,380
18005440:	18005fbc 	xorhi	zero,r3,382
18005444:	18005f20 	cmpeqi	zero,r3,380
18005448:	18005da4 	muli	zero,r3,374
1800544c:	1800548c 	andi	zero,r3,338
18005450:	18005ddc 	xori	zero,r3,375
18005454:	18005fbc 	xorhi	zero,r3,382
18005458:	18005de8 	cmpgeui	zero,r3,375
1800545c:	18005fbc 	xorhi	zero,r3,382
18005460:	18005e4c 	andi	zero,r3,377
18005464:	18005fbc 	xorhi	zero,r3,382
18005468:	18005fbc 	xorhi	zero,r3,382
1800546c:	18005e6c 	andhi	zero,r3,377
18005470:	d8c03117 	ldw	r3,196(sp)
18005474:	d8802e15 	stw	r2,184(sp)
18005478:	00c7c83a 	sub	r3,zero,r3
1800547c:	d8c03115 	stw	r3,196(sp)
18005480:	84000114 	ori	r16,r16,4
18005484:	ac400007 	ldb	r17,0(r21)
18005488:	003f9706 	br	180052e8 <__alt_data_end+0xf80052e8>
1800548c:	00800c04 	movi	r2,48
18005490:	d8802705 	stb	r2,156(sp)
18005494:	00801e04 	movi	r2,120
18005498:	d8802745 	stb	r2,157(sp)
1800549c:	d9002a17 	ldw	r4,168(sp)
180054a0:	d8802e17 	ldw	r2,184(sp)
180054a4:	d8002785 	stb	zero,158(sp)
180054a8:	e011883a 	mov	r8,fp
180054ac:	10c00104 	addi	r3,r2,4
180054b0:	14c00017 	ldw	r19,0(r2)
180054b4:	002d883a 	mov	r22,zero
180054b8:	80800094 	ori	r2,r16,2
180054bc:	2002ca16 	blt	r4,zero,18005fe8 <___vfprintf_internal_r+0xe88>
180054c0:	00bfdfc4 	movi	r2,-129
180054c4:	80a4703a 	and	r18,r16,r2
180054c8:	d8c02e15 	stw	r3,184(sp)
180054cc:	94800094 	ori	r18,r18,2
180054d0:	9802b41e 	bne	r19,zero,18005fa4 <___vfprintf_internal_r+0xe44>
180054d4:	01460074 	movhi	r5,6145
180054d8:	2958f304 	addi	r5,r5,25548
180054dc:	d9403915 	stw	r5,228(sp)
180054e0:	04401e04 	movi	r17,120
180054e4:	d8802a17 	ldw	r2,168(sp)
180054e8:	0039883a 	mov	fp,zero
180054ec:	1001fa26 	beq	r2,zero,18005cd8 <___vfprintf_internal_r+0xb78>
180054f0:	0027883a 	mov	r19,zero
180054f4:	002d883a 	mov	r22,zero
180054f8:	00021906 	br	18005d60 <___vfprintf_internal_r+0xc00>
180054fc:	d9002d17 	ldw	r4,180(sp)
18005500:	b80b883a 	mov	r5,r23
18005504:	80075140 	call	18007514 <__swsetup_r>
18005508:	1005dc1e 	bne	r2,zero,18006c7c <___vfprintf_internal_r+0x1b1c>
1800550c:	b880030b 	ldhu	r2,12(r23)
18005510:	00c00284 	movi	r3,10
18005514:	1080068c 	andi	r2,r2,26
18005518:	10ff3a1e 	bne	r2,r3,18005204 <__alt_data_end+0xf8005204>
1800551c:	b880038f 	ldh	r2,14(r23)
18005520:	103f3816 	blt	r2,zero,18005204 <__alt_data_end+0xf8005204>
18005524:	d9c02e17 	ldw	r7,184(sp)
18005528:	d9002d17 	ldw	r4,180(sp)
1800552c:	a80d883a 	mov	r6,r21
18005530:	b80b883a 	mov	r5,r23
18005534:	80074580 	call	18007458 <__sbprintf>
18005538:	00001106 	br	18005580 <___vfprintf_internal_r+0x420>
1800553c:	d9002d17 	ldw	r4,180(sp)
18005540:	d9801e04 	addi	r6,sp,120
18005544:	b80b883a 	mov	r5,r23
18005548:	800deb00 	call	1800deb0 <__sprint_r>
1800554c:	1000081e 	bne	r2,zero,18005570 <___vfprintf_internal_r+0x410>
18005550:	da000404 	addi	r8,sp,16
18005554:	003f5106 	br	1800529c <__alt_data_end+0xf800529c>
18005558:	d8802017 	ldw	r2,128(sp)
1800555c:	10000426 	beq	r2,zero,18005570 <___vfprintf_internal_r+0x410>
18005560:	d9002d17 	ldw	r4,180(sp)
18005564:	d9801e04 	addi	r6,sp,120
18005568:	b80b883a 	mov	r5,r23
1800556c:	800deb00 	call	1800deb0 <__sprint_r>
18005570:	b880030b 	ldhu	r2,12(r23)
18005574:	1080100c 	andi	r2,r2,64
18005578:	1005c01e 	bne	r2,zero,18006c7c <___vfprintf_internal_r+0x1b1c>
1800557c:	d8802f17 	ldw	r2,188(sp)
18005580:	dfc04717 	ldw	ra,284(sp)
18005584:	df004617 	ldw	fp,280(sp)
18005588:	ddc04517 	ldw	r23,276(sp)
1800558c:	dd804417 	ldw	r22,272(sp)
18005590:	dd404317 	ldw	r21,268(sp)
18005594:	dd004217 	ldw	r20,264(sp)
18005598:	dcc04117 	ldw	r19,260(sp)
1800559c:	dc804017 	ldw	r18,256(sp)
180055a0:	dc403f17 	ldw	r17,252(sp)
180055a4:	dc003e17 	ldw	r16,248(sp)
180055a8:	dec04804 	addi	sp,sp,288
180055ac:	f800283a 	ret
180055b0:	d9002d17 	ldw	r4,180(sp)
180055b4:	80095200 	call	18009520 <__sinit>
180055b8:	003f0206 	br	180051c4 <__alt_data_end+0xf80051c4>
180055bc:	d9002e17 	ldw	r4,184(sp)
180055c0:	d9402e17 	ldw	r5,184(sp)
180055c4:	21000017 	ldw	r4,0(r4)
180055c8:	28800104 	addi	r2,r5,4
180055cc:	d9003115 	stw	r4,196(sp)
180055d0:	203fa716 	blt	r4,zero,18005470 <__alt_data_end+0xf8005470>
180055d4:	d8802e15 	stw	r2,184(sp)
180055d8:	ac400007 	ldb	r17,0(r21)
180055dc:	003f4206 	br	180052e8 <__alt_data_end+0xf80052e8>
180055e0:	ac400007 	ldb	r17,0(r21)
180055e4:	01000a84 	movi	r4,42
180055e8:	a8c00044 	addi	r3,r21,1
180055ec:	89075826 	beq	r17,r4,18007350 <___vfprintf_internal_r+0x21f0>
180055f0:	8cbff404 	addi	r18,r17,-48
180055f4:	b486ae36 	bltu	r22,r18,180070b0 <___vfprintf_internal_r+0x1f50>
180055f8:	0009883a 	mov	r4,zero
180055fc:	1823883a 	mov	r17,r3
18005600:	01400284 	movi	r5,10
18005604:	8002b640 	call	18002b64 <__mulsi3>
18005608:	88c00007 	ldb	r3,0(r17)
1800560c:	1489883a 	add	r4,r2,r18
18005610:	8d400044 	addi	r21,r17,1
18005614:	1cbff404 	addi	r18,r3,-48
18005618:	a823883a 	mov	r17,r21
1800561c:	b4bff82e 	bgeu	r22,r18,18005600 <__alt_data_end+0xf8005600>
18005620:	1823883a 	mov	r17,r3
18005624:	2005f616 	blt	r4,zero,18006e00 <___vfprintf_internal_r+0x1ca0>
18005628:	d9002a15 	stw	r4,168(sp)
1800562c:	003f2f06 	br	180052ec <__alt_data_end+0xf80052ec>
18005630:	84002014 	ori	r16,r16,128
18005634:	ac400007 	ldb	r17,0(r21)
18005638:	003f2b06 	br	180052e8 <__alt_data_end+0xf80052e8>
1800563c:	8cbff404 	addi	r18,r17,-48
18005640:	d8003115 	stw	zero,196(sp)
18005644:	0009883a 	mov	r4,zero
18005648:	a823883a 	mov	r17,r21
1800564c:	01400284 	movi	r5,10
18005650:	8002b640 	call	18002b64 <__mulsi3>
18005654:	88c00007 	ldb	r3,0(r17)
18005658:	9089883a 	add	r4,r18,r2
1800565c:	ad400044 	addi	r21,r21,1
18005660:	1cbff404 	addi	r18,r3,-48
18005664:	a823883a 	mov	r17,r21
18005668:	b4bff82e 	bgeu	r22,r18,1800564c <__alt_data_end+0xf800564c>
1800566c:	1823883a 	mov	r17,r3
18005670:	d9003115 	stw	r4,196(sp)
18005674:	003f1d06 	br	180052ec <__alt_data_end+0xf80052ec>
18005678:	8025883a 	mov	r18,r16
1800567c:	dc002903 	ldbu	r16,164(sp)
18005680:	e011883a 	mov	r8,fp
18005684:	84003fcc 	andi	r16,r16,255
18005688:	8007531e 	bne	r16,zero,180073d8 <___vfprintf_internal_r+0x2278>
1800568c:	94800414 	ori	r18,r18,16
18005690:	9080080c 	andi	r2,r18,32
18005694:	1003a326 	beq	r2,zero,18006524 <___vfprintf_internal_r+0x13c4>
18005698:	d9002e17 	ldw	r4,184(sp)
1800569c:	20800117 	ldw	r2,4(r4)
180056a0:	24c00017 	ldw	r19,0(r4)
180056a4:	21000204 	addi	r4,r4,8
180056a8:	d9002e15 	stw	r4,184(sp)
180056ac:	102d883a 	mov	r22,r2
180056b0:	10047316 	blt	r2,zero,18006880 <___vfprintf_internal_r+0x1720>
180056b4:	d9002a17 	ldw	r4,168(sp)
180056b8:	df002783 	ldbu	fp,158(sp)
180056bc:	2003e416 	blt	r4,zero,18006650 <___vfprintf_internal_r+0x14f0>
180056c0:	00ffdfc4 	movi	r3,-129
180056c4:	9d84b03a 	or	r2,r19,r22
180056c8:	90e4703a 	and	r18,r18,r3
180056cc:	10018026 	beq	r2,zero,18005cd0 <___vfprintf_internal_r+0xb70>
180056d0:	b003ab26 	beq	r22,zero,18006580 <___vfprintf_internal_r+0x1420>
180056d4:	dc402915 	stw	r17,164(sp)
180056d8:	dc001e04 	addi	r16,sp,120
180056dc:	b023883a 	mov	r17,r22
180056e0:	402d883a 	mov	r22,r8
180056e4:	9809883a 	mov	r4,r19
180056e8:	880b883a 	mov	r5,r17
180056ec:	01800284 	movi	r6,10
180056f0:	000f883a 	mov	r7,zero
180056f4:	80105000 	call	18010500 <__umoddi3>
180056f8:	10800c04 	addi	r2,r2,48
180056fc:	843fffc4 	addi	r16,r16,-1
18005700:	9809883a 	mov	r4,r19
18005704:	880b883a 	mov	r5,r17
18005708:	80800005 	stb	r2,0(r16)
1800570c:	01800284 	movi	r6,10
18005710:	000f883a 	mov	r7,zero
18005714:	800ff040 	call	1800ff04 <__udivdi3>
18005718:	1027883a 	mov	r19,r2
1800571c:	10c4b03a 	or	r2,r2,r3
18005720:	1823883a 	mov	r17,r3
18005724:	103fef1e 	bne	r2,zero,180056e4 <__alt_data_end+0xf80056e4>
18005728:	d8c02817 	ldw	r3,160(sp)
1800572c:	dc402917 	ldw	r17,164(sp)
18005730:	b011883a 	mov	r8,r22
18005734:	1c07c83a 	sub	r3,r3,r16
18005738:	d8c02b15 	stw	r3,172(sp)
1800573c:	00005f06 	br	180058bc <___vfprintf_internal_r+0x75c>
18005740:	8025883a 	mov	r18,r16
18005744:	dc002903 	ldbu	r16,164(sp)
18005748:	e011883a 	mov	r8,fp
1800574c:	84003fcc 	andi	r16,r16,255
18005750:	80071e1e 	bne	r16,zero,180073cc <___vfprintf_internal_r+0x226c>
18005754:	9080020c 	andi	r2,r18,8
18005758:	1004af26 	beq	r2,zero,18006a18 <___vfprintf_internal_r+0x18b8>
1800575c:	d9002e17 	ldw	r4,184(sp)
18005760:	d9402e17 	ldw	r5,184(sp)
18005764:	d8802e17 	ldw	r2,184(sp)
18005768:	21000017 	ldw	r4,0(r4)
1800576c:	29400117 	ldw	r5,4(r5)
18005770:	10800204 	addi	r2,r2,8
18005774:	d9003615 	stw	r4,216(sp)
18005778:	d9403815 	stw	r5,224(sp)
1800577c:	d8802e15 	stw	r2,184(sp)
18005780:	d9003617 	ldw	r4,216(sp)
18005784:	d9403817 	ldw	r5,224(sp)
18005788:	da003d15 	stw	r8,244(sp)
1800578c:	04000044 	movi	r16,1
18005790:	800c5640 	call	1800c564 <__fpclassifyd>
18005794:	da003d17 	ldw	r8,244(sp)
18005798:	1404441e 	bne	r2,r16,180068ac <___vfprintf_internal_r+0x174c>
1800579c:	d9003617 	ldw	r4,216(sp)
180057a0:	d9403817 	ldw	r5,224(sp)
180057a4:	000d883a 	mov	r6,zero
180057a8:	000f883a 	mov	r7,zero
180057ac:	8011ea40 	call	18011ea4 <__ledf2>
180057b0:	da003d17 	ldw	r8,244(sp)
180057b4:	1005e316 	blt	r2,zero,18006f44 <___vfprintf_internal_r+0x1de4>
180057b8:	df002783 	ldbu	fp,158(sp)
180057bc:	008011c4 	movi	r2,71
180057c0:	1445580e 	bge	r2,r17,18006d24 <___vfprintf_internal_r+0x1bc4>
180057c4:	04060074 	movhi	r16,6145
180057c8:	8418eb04 	addi	r16,r16,25516
180057cc:	00c000c4 	movi	r3,3
180057d0:	00bfdfc4 	movi	r2,-129
180057d4:	d8c02915 	stw	r3,164(sp)
180057d8:	90a4703a 	and	r18,r18,r2
180057dc:	d8c02b15 	stw	r3,172(sp)
180057e0:	d8002a15 	stw	zero,168(sp)
180057e4:	d8003215 	stw	zero,200(sp)
180057e8:	00003a06 	br	180058d4 <___vfprintf_internal_r+0x774>
180057ec:	84000214 	ori	r16,r16,8
180057f0:	ac400007 	ldb	r17,0(r21)
180057f4:	003ebc06 	br	180052e8 <__alt_data_end+0xf80052e8>
180057f8:	8025883a 	mov	r18,r16
180057fc:	dc002903 	ldbu	r16,164(sp)
18005800:	e011883a 	mov	r8,fp
18005804:	84003fcc 	andi	r16,r16,255
18005808:	8007001e 	bne	r16,zero,1800740c <___vfprintf_internal_r+0x22ac>
1800580c:	94800414 	ori	r18,r18,16
18005810:	9080080c 	andi	r2,r18,32
18005814:	1002fa26 	beq	r2,zero,18006400 <___vfprintf_internal_r+0x12a0>
18005818:	d9002e17 	ldw	r4,184(sp)
1800581c:	d9402a17 	ldw	r5,168(sp)
18005820:	d8002785 	stb	zero,158(sp)
18005824:	20800204 	addi	r2,r4,8
18005828:	24c00017 	ldw	r19,0(r4)
1800582c:	25800117 	ldw	r22,4(r4)
18005830:	2804b116 	blt	r5,zero,18006af8 <___vfprintf_internal_r+0x1998>
18005834:	013fdfc4 	movi	r4,-129
18005838:	9d86b03a 	or	r3,r19,r22
1800583c:	d8802e15 	stw	r2,184(sp)
18005840:	9124703a 	and	r18,r18,r4
18005844:	1802fb1e 	bne	r3,zero,18006434 <___vfprintf_internal_r+0x12d4>
18005848:	d8c02a17 	ldw	r3,168(sp)
1800584c:	0039883a 	mov	fp,zero
18005850:	1805e526 	beq	r3,zero,18006fe8 <___vfprintf_internal_r+0x1e88>
18005854:	0027883a 	mov	r19,zero
18005858:	002d883a 	mov	r22,zero
1800585c:	dc001e04 	addi	r16,sp,120
18005860:	9806d0fa 	srli	r3,r19,3
18005864:	b008977a 	slli	r4,r22,29
18005868:	b02cd0fa 	srli	r22,r22,3
1800586c:	9cc001cc 	andi	r19,r19,7
18005870:	98800c04 	addi	r2,r19,48
18005874:	843fffc4 	addi	r16,r16,-1
18005878:	20e6b03a 	or	r19,r4,r3
1800587c:	80800005 	stb	r2,0(r16)
18005880:	9d86b03a 	or	r3,r19,r22
18005884:	183ff61e 	bne	r3,zero,18005860 <__alt_data_end+0xf8005860>
18005888:	90c0004c 	andi	r3,r18,1
1800588c:	18014126 	beq	r3,zero,18005d94 <___vfprintf_internal_r+0xc34>
18005890:	10803fcc 	andi	r2,r2,255
18005894:	1080201c 	xori	r2,r2,128
18005898:	10bfe004 	addi	r2,r2,-128
1800589c:	00c00c04 	movi	r3,48
180058a0:	10c13c26 	beq	r2,r3,18005d94 <___vfprintf_internal_r+0xc34>
180058a4:	80ffffc5 	stb	r3,-1(r16)
180058a8:	d8c02817 	ldw	r3,160(sp)
180058ac:	80bfffc4 	addi	r2,r16,-1
180058b0:	1021883a 	mov	r16,r2
180058b4:	1887c83a 	sub	r3,r3,r2
180058b8:	d8c02b15 	stw	r3,172(sp)
180058bc:	d8802b17 	ldw	r2,172(sp)
180058c0:	d9002a17 	ldw	r4,168(sp)
180058c4:	1100010e 	bge	r2,r4,180058cc <___vfprintf_internal_r+0x76c>
180058c8:	2005883a 	mov	r2,r4
180058cc:	d8802915 	stw	r2,164(sp)
180058d0:	d8003215 	stw	zero,200(sp)
180058d4:	e7003fcc 	andi	fp,fp,255
180058d8:	e700201c 	xori	fp,fp,128
180058dc:	e73fe004 	addi	fp,fp,-128
180058e0:	e0000326 	beq	fp,zero,180058f0 <___vfprintf_internal_r+0x790>
180058e4:	d8c02917 	ldw	r3,164(sp)
180058e8:	18c00044 	addi	r3,r3,1
180058ec:	d8c02915 	stw	r3,164(sp)
180058f0:	90c0008c 	andi	r3,r18,2
180058f4:	d8c02c15 	stw	r3,176(sp)
180058f8:	18000326 	beq	r3,zero,18005908 <___vfprintf_internal_r+0x7a8>
180058fc:	d8c02917 	ldw	r3,164(sp)
18005900:	18c00084 	addi	r3,r3,2
18005904:	d8c02915 	stw	r3,164(sp)
18005908:	90c0210c 	andi	r3,r18,132
1800590c:	d8c03015 	stw	r3,192(sp)
18005910:	1801c51e 	bne	r3,zero,18006028 <___vfprintf_internal_r+0xec8>
18005914:	d9003117 	ldw	r4,196(sp)
18005918:	d8c02917 	ldw	r3,164(sp)
1800591c:	20e7c83a 	sub	r19,r4,r3
18005920:	04c1c10e 	bge	zero,r19,18006028 <___vfprintf_internal_r+0xec8>
18005924:	02400404 	movi	r9,16
18005928:	d8c02017 	ldw	r3,128(sp)
1800592c:	d8801f17 	ldw	r2,124(sp)
18005930:	4cc52f0e 	bge	r9,r19,18006df0 <___vfprintf_internal_r+0x1c90>
18005934:	01460074 	movhi	r5,6145
18005938:	29590684 	addi	r5,r5,25626
1800593c:	dc403b15 	stw	r17,236(sp)
18005940:	d9403515 	stw	r5,212(sp)
18005944:	9823883a 	mov	r17,r19
18005948:	482d883a 	mov	r22,r9
1800594c:	9027883a 	mov	r19,r18
18005950:	070001c4 	movi	fp,7
18005954:	8025883a 	mov	r18,r16
18005958:	dc002d17 	ldw	r16,180(sp)
1800595c:	00000306 	br	1800596c <___vfprintf_internal_r+0x80c>
18005960:	8c7ffc04 	addi	r17,r17,-16
18005964:	42000204 	addi	r8,r8,8
18005968:	b440130e 	bge	r22,r17,180059b8 <___vfprintf_internal_r+0x858>
1800596c:	01060074 	movhi	r4,6145
18005970:	18c00404 	addi	r3,r3,16
18005974:	10800044 	addi	r2,r2,1
18005978:	21190684 	addi	r4,r4,25626
1800597c:	41000015 	stw	r4,0(r8)
18005980:	45800115 	stw	r22,4(r8)
18005984:	d8c02015 	stw	r3,128(sp)
18005988:	d8801f15 	stw	r2,124(sp)
1800598c:	e0bff40e 	bge	fp,r2,18005960 <__alt_data_end+0xf8005960>
18005990:	d9801e04 	addi	r6,sp,120
18005994:	b80b883a 	mov	r5,r23
18005998:	8009883a 	mov	r4,r16
1800599c:	800deb00 	call	1800deb0 <__sprint_r>
180059a0:	103ef31e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
180059a4:	8c7ffc04 	addi	r17,r17,-16
180059a8:	d8c02017 	ldw	r3,128(sp)
180059ac:	d8801f17 	ldw	r2,124(sp)
180059b0:	da000404 	addi	r8,sp,16
180059b4:	b47fed16 	blt	r22,r17,1800596c <__alt_data_end+0xf800596c>
180059b8:	9021883a 	mov	r16,r18
180059bc:	9825883a 	mov	r18,r19
180059c0:	8827883a 	mov	r19,r17
180059c4:	dc403b17 	ldw	r17,236(sp)
180059c8:	d9403517 	ldw	r5,212(sp)
180059cc:	98c7883a 	add	r3,r19,r3
180059d0:	10800044 	addi	r2,r2,1
180059d4:	41400015 	stw	r5,0(r8)
180059d8:	44c00115 	stw	r19,4(r8)
180059dc:	d8c02015 	stw	r3,128(sp)
180059e0:	d8801f15 	stw	r2,124(sp)
180059e4:	010001c4 	movi	r4,7
180059e8:	2082c516 	blt	r4,r2,18006500 <___vfprintf_internal_r+0x13a0>
180059ec:	df002787 	ldb	fp,158(sp)
180059f0:	42000204 	addi	r8,r8,8
180059f4:	e0000c26 	beq	fp,zero,18005a28 <___vfprintf_internal_r+0x8c8>
180059f8:	d8801f17 	ldw	r2,124(sp)
180059fc:	d9002784 	addi	r4,sp,158
18005a00:	18c00044 	addi	r3,r3,1
18005a04:	10800044 	addi	r2,r2,1
18005a08:	41000015 	stw	r4,0(r8)
18005a0c:	01000044 	movi	r4,1
18005a10:	41000115 	stw	r4,4(r8)
18005a14:	d8c02015 	stw	r3,128(sp)
18005a18:	d8801f15 	stw	r2,124(sp)
18005a1c:	010001c4 	movi	r4,7
18005a20:	20825e16 	blt	r4,r2,1800639c <___vfprintf_internal_r+0x123c>
18005a24:	42000204 	addi	r8,r8,8
18005a28:	d8802c17 	ldw	r2,176(sp)
18005a2c:	10000c26 	beq	r2,zero,18005a60 <___vfprintf_internal_r+0x900>
18005a30:	d8801f17 	ldw	r2,124(sp)
18005a34:	d9002704 	addi	r4,sp,156
18005a38:	18c00084 	addi	r3,r3,2
18005a3c:	10800044 	addi	r2,r2,1
18005a40:	41000015 	stw	r4,0(r8)
18005a44:	01000084 	movi	r4,2
18005a48:	41000115 	stw	r4,4(r8)
18005a4c:	d8c02015 	stw	r3,128(sp)
18005a50:	d8801f15 	stw	r2,124(sp)
18005a54:	010001c4 	movi	r4,7
18005a58:	20825816 	blt	r4,r2,180063bc <___vfprintf_internal_r+0x125c>
18005a5c:	42000204 	addi	r8,r8,8
18005a60:	d9003017 	ldw	r4,192(sp)
18005a64:	00802004 	movi	r2,128
18005a68:	2081bb26 	beq	r4,r2,18006158 <___vfprintf_internal_r+0xff8>
18005a6c:	d9402a17 	ldw	r5,168(sp)
18005a70:	d8802b17 	ldw	r2,172(sp)
18005a74:	28adc83a 	sub	r22,r5,r2
18005a78:	0580310e 	bge	zero,r22,18005b40 <___vfprintf_internal_r+0x9e0>
18005a7c:	07000404 	movi	fp,16
18005a80:	d8801f17 	ldw	r2,124(sp)
18005a84:	e584360e 	bge	fp,r22,18006b60 <___vfprintf_internal_r+0x1a00>
18005a88:	01460074 	movhi	r5,6145
18005a8c:	29590284 	addi	r5,r5,25610
18005a90:	dc402a15 	stw	r17,168(sp)
18005a94:	d9402c15 	stw	r5,176(sp)
18005a98:	b023883a 	mov	r17,r22
18005a9c:	04c001c4 	movi	r19,7
18005aa0:	a82d883a 	mov	r22,r21
18005aa4:	902b883a 	mov	r21,r18
18005aa8:	8025883a 	mov	r18,r16
18005aac:	dc002d17 	ldw	r16,180(sp)
18005ab0:	00000306 	br	18005ac0 <___vfprintf_internal_r+0x960>
18005ab4:	8c7ffc04 	addi	r17,r17,-16
18005ab8:	42000204 	addi	r8,r8,8
18005abc:	e440110e 	bge	fp,r17,18005b04 <___vfprintf_internal_r+0x9a4>
18005ac0:	18c00404 	addi	r3,r3,16
18005ac4:	10800044 	addi	r2,r2,1
18005ac8:	45000015 	stw	r20,0(r8)
18005acc:	47000115 	stw	fp,4(r8)
18005ad0:	d8c02015 	stw	r3,128(sp)
18005ad4:	d8801f15 	stw	r2,124(sp)
18005ad8:	98bff60e 	bge	r19,r2,18005ab4 <__alt_data_end+0xf8005ab4>
18005adc:	d9801e04 	addi	r6,sp,120
18005ae0:	b80b883a 	mov	r5,r23
18005ae4:	8009883a 	mov	r4,r16
18005ae8:	800deb00 	call	1800deb0 <__sprint_r>
18005aec:	103ea01e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18005af0:	8c7ffc04 	addi	r17,r17,-16
18005af4:	d8c02017 	ldw	r3,128(sp)
18005af8:	d8801f17 	ldw	r2,124(sp)
18005afc:	da000404 	addi	r8,sp,16
18005b00:	e47fef16 	blt	fp,r17,18005ac0 <__alt_data_end+0xf8005ac0>
18005b04:	9021883a 	mov	r16,r18
18005b08:	a825883a 	mov	r18,r21
18005b0c:	b02b883a 	mov	r21,r22
18005b10:	882d883a 	mov	r22,r17
18005b14:	dc402a17 	ldw	r17,168(sp)
18005b18:	d9002c17 	ldw	r4,176(sp)
18005b1c:	1d87883a 	add	r3,r3,r22
18005b20:	10800044 	addi	r2,r2,1
18005b24:	41000015 	stw	r4,0(r8)
18005b28:	45800115 	stw	r22,4(r8)
18005b2c:	d8c02015 	stw	r3,128(sp)
18005b30:	d8801f15 	stw	r2,124(sp)
18005b34:	010001c4 	movi	r4,7
18005b38:	20821016 	blt	r4,r2,1800637c <___vfprintf_internal_r+0x121c>
18005b3c:	42000204 	addi	r8,r8,8
18005b40:	9080400c 	andi	r2,r18,256
18005b44:	10013a1e 	bne	r2,zero,18006030 <___vfprintf_internal_r+0xed0>
18005b48:	d9402b17 	ldw	r5,172(sp)
18005b4c:	d8801f17 	ldw	r2,124(sp)
18005b50:	44000015 	stw	r16,0(r8)
18005b54:	1947883a 	add	r3,r3,r5
18005b58:	10800044 	addi	r2,r2,1
18005b5c:	41400115 	stw	r5,4(r8)
18005b60:	d8c02015 	stw	r3,128(sp)
18005b64:	d8801f15 	stw	r2,124(sp)
18005b68:	010001c4 	movi	r4,7
18005b6c:	2081f516 	blt	r4,r2,18006344 <___vfprintf_internal_r+0x11e4>
18005b70:	42000204 	addi	r8,r8,8
18005b74:	9480010c 	andi	r18,r18,4
18005b78:	90003226 	beq	r18,zero,18005c44 <___vfprintf_internal_r+0xae4>
18005b7c:	d9403117 	ldw	r5,196(sp)
18005b80:	d8802917 	ldw	r2,164(sp)
18005b84:	28a1c83a 	sub	r16,r5,r2
18005b88:	04002e0e 	bge	zero,r16,18005c44 <___vfprintf_internal_r+0xae4>
18005b8c:	04400404 	movi	r17,16
18005b90:	d8801f17 	ldw	r2,124(sp)
18005b94:	8c04c40e 	bge	r17,r16,18006ea8 <___vfprintf_internal_r+0x1d48>
18005b98:	01460074 	movhi	r5,6145
18005b9c:	29590684 	addi	r5,r5,25626
18005ba0:	d9403515 	stw	r5,212(sp)
18005ba4:	048001c4 	movi	r18,7
18005ba8:	dcc02d17 	ldw	r19,180(sp)
18005bac:	00000306 	br	18005bbc <___vfprintf_internal_r+0xa5c>
18005bb0:	843ffc04 	addi	r16,r16,-16
18005bb4:	42000204 	addi	r8,r8,8
18005bb8:	8c00130e 	bge	r17,r16,18005c08 <___vfprintf_internal_r+0xaa8>
18005bbc:	01060074 	movhi	r4,6145
18005bc0:	18c00404 	addi	r3,r3,16
18005bc4:	10800044 	addi	r2,r2,1
18005bc8:	21190684 	addi	r4,r4,25626
18005bcc:	41000015 	stw	r4,0(r8)
18005bd0:	44400115 	stw	r17,4(r8)
18005bd4:	d8c02015 	stw	r3,128(sp)
18005bd8:	d8801f15 	stw	r2,124(sp)
18005bdc:	90bff40e 	bge	r18,r2,18005bb0 <__alt_data_end+0xf8005bb0>
18005be0:	d9801e04 	addi	r6,sp,120
18005be4:	b80b883a 	mov	r5,r23
18005be8:	9809883a 	mov	r4,r19
18005bec:	800deb00 	call	1800deb0 <__sprint_r>
18005bf0:	103e5f1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18005bf4:	843ffc04 	addi	r16,r16,-16
18005bf8:	d8c02017 	ldw	r3,128(sp)
18005bfc:	d8801f17 	ldw	r2,124(sp)
18005c00:	da000404 	addi	r8,sp,16
18005c04:	8c3fed16 	blt	r17,r16,18005bbc <__alt_data_end+0xf8005bbc>
18005c08:	d9403517 	ldw	r5,212(sp)
18005c0c:	1c07883a 	add	r3,r3,r16
18005c10:	10800044 	addi	r2,r2,1
18005c14:	41400015 	stw	r5,0(r8)
18005c18:	44000115 	stw	r16,4(r8)
18005c1c:	d8c02015 	stw	r3,128(sp)
18005c20:	d8801f15 	stw	r2,124(sp)
18005c24:	010001c4 	movi	r4,7
18005c28:	2080060e 	bge	r4,r2,18005c44 <___vfprintf_internal_r+0xae4>
18005c2c:	d9002d17 	ldw	r4,180(sp)
18005c30:	d9801e04 	addi	r6,sp,120
18005c34:	b80b883a 	mov	r5,r23
18005c38:	800deb00 	call	1800deb0 <__sprint_r>
18005c3c:	103e4c1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18005c40:	d8c02017 	ldw	r3,128(sp)
18005c44:	d8803117 	ldw	r2,196(sp)
18005c48:	d9002917 	ldw	r4,164(sp)
18005c4c:	1100010e 	bge	r2,r4,18005c54 <___vfprintf_internal_r+0xaf4>
18005c50:	2005883a 	mov	r2,r4
18005c54:	d9402f17 	ldw	r5,188(sp)
18005c58:	288b883a 	add	r5,r5,r2
18005c5c:	d9402f15 	stw	r5,188(sp)
18005c60:	1801c01e 	bne	r3,zero,18006364 <___vfprintf_internal_r+0x1204>
18005c64:	a8800007 	ldb	r2,0(r21)
18005c68:	d8001f15 	stw	zero,124(sp)
18005c6c:	da000404 	addi	r8,sp,16
18005c70:	103d751e 	bne	r2,zero,18005248 <__alt_data_end+0xf8005248>
18005c74:	a823883a 	mov	r17,r21
18005c78:	003d8b06 	br	180052a8 <__alt_data_end+0xf80052a8>
18005c7c:	8025883a 	mov	r18,r16
18005c80:	dc002903 	ldbu	r16,164(sp)
18005c84:	e011883a 	mov	r8,fp
18005c88:	84003fcc 	andi	r16,r16,255
18005c8c:	8005e51e 	bne	r16,zero,18007424 <___vfprintf_internal_r+0x22c4>
18005c90:	94800414 	ori	r18,r18,16
18005c94:	9080080c 	andi	r2,r18,32
18005c98:	10022b26 	beq	r2,zero,18006548 <___vfprintf_internal_r+0x13e8>
18005c9c:	d9002e17 	ldw	r4,184(sp)
18005ca0:	d9402a17 	ldw	r5,168(sp)
18005ca4:	d8002785 	stb	zero,158(sp)
18005ca8:	20c00204 	addi	r3,r4,8
18005cac:	24c00017 	ldw	r19,0(r4)
18005cb0:	25800117 	ldw	r22,4(r4)
18005cb4:	28042e16 	blt	r5,zero,18006d70 <___vfprintf_internal_r+0x1c10>
18005cb8:	013fdfc4 	movi	r4,-129
18005cbc:	9d84b03a 	or	r2,r19,r22
18005cc0:	d8c02e15 	stw	r3,184(sp)
18005cc4:	9124703a 	and	r18,r18,r4
18005cc8:	0039883a 	mov	fp,zero
18005ccc:	103e801e 	bne	r2,zero,180056d0 <__alt_data_end+0xf80056d0>
18005cd0:	d9002a17 	ldw	r4,168(sp)
18005cd4:	2002e01e 	bne	r4,zero,18006858 <___vfprintf_internal_r+0x16f8>
18005cd8:	d8002a15 	stw	zero,168(sp)
18005cdc:	d8002b15 	stw	zero,172(sp)
18005ce0:	dc001e04 	addi	r16,sp,120
18005ce4:	003ef506 	br	180058bc <__alt_data_end+0xf80058bc>
18005ce8:	8025883a 	mov	r18,r16
18005cec:	dc002903 	ldbu	r16,164(sp)
18005cf0:	e011883a 	mov	r8,fp
18005cf4:	84003fcc 	andi	r16,r16,255
18005cf8:	8005ba1e 	bne	r16,zero,180073e4 <___vfprintf_internal_r+0x2284>
18005cfc:	01060074 	movhi	r4,6145
18005d00:	2118ee04 	addi	r4,r4,25528
18005d04:	d9003915 	stw	r4,228(sp)
18005d08:	9080080c 	andi	r2,r18,32
18005d0c:	10006126 	beq	r2,zero,18005e94 <___vfprintf_internal_r+0xd34>
18005d10:	d9402e17 	ldw	r5,184(sp)
18005d14:	2cc00017 	ldw	r19,0(r5)
18005d18:	2d800117 	ldw	r22,4(r5)
18005d1c:	29400204 	addi	r5,r5,8
18005d20:	d9402e15 	stw	r5,184(sp)
18005d24:	9080004c 	andi	r2,r18,1
18005d28:	1001ac26 	beq	r2,zero,180063dc <___vfprintf_internal_r+0x127c>
18005d2c:	9d84b03a 	or	r2,r19,r22
18005d30:	10038526 	beq	r2,zero,18006b48 <___vfprintf_internal_r+0x19e8>
18005d34:	d8c02a17 	ldw	r3,168(sp)
18005d38:	00800c04 	movi	r2,48
18005d3c:	d8802705 	stb	r2,156(sp)
18005d40:	dc402745 	stb	r17,157(sp)
18005d44:	d8002785 	stb	zero,158(sp)
18005d48:	90800094 	ori	r2,r18,2
18005d4c:	18047916 	blt	r3,zero,18006f34 <___vfprintf_internal_r+0x1dd4>
18005d50:	00bfdfc4 	movi	r2,-129
18005d54:	90a4703a 	and	r18,r18,r2
18005d58:	94800094 	ori	r18,r18,2
18005d5c:	0039883a 	mov	fp,zero
18005d60:	d9003917 	ldw	r4,228(sp)
18005d64:	dc001e04 	addi	r16,sp,120
18005d68:	988003cc 	andi	r2,r19,15
18005d6c:	b006973a 	slli	r3,r22,28
18005d70:	2085883a 	add	r2,r4,r2
18005d74:	9826d13a 	srli	r19,r19,4
18005d78:	10800003 	ldbu	r2,0(r2)
18005d7c:	b02cd13a 	srli	r22,r22,4
18005d80:	843fffc4 	addi	r16,r16,-1
18005d84:	1ce6b03a 	or	r19,r3,r19
18005d88:	80800005 	stb	r2,0(r16)
18005d8c:	9d84b03a 	or	r2,r19,r22
18005d90:	103ff51e 	bne	r2,zero,18005d68 <__alt_data_end+0xf8005d68>
18005d94:	d8c02817 	ldw	r3,160(sp)
18005d98:	1c07c83a 	sub	r3,r3,r16
18005d9c:	d8c02b15 	stw	r3,172(sp)
18005da0:	003ec606 	br	180058bc <__alt_data_end+0xf80058bc>
18005da4:	8025883a 	mov	r18,r16
18005da8:	dc002903 	ldbu	r16,164(sp)
18005dac:	e011883a 	mov	r8,fp
18005db0:	84003fcc 	andi	r16,r16,255
18005db4:	803e9626 	beq	r16,zero,18005810 <__alt_data_end+0xf8005810>
18005db8:	d8c02b03 	ldbu	r3,172(sp)
18005dbc:	d8c02785 	stb	r3,158(sp)
18005dc0:	003e9306 	br	18005810 <__alt_data_end+0xf8005810>
18005dc4:	00c00044 	movi	r3,1
18005dc8:	d8c02905 	stb	r3,164(sp)
18005dcc:	00c00ac4 	movi	r3,43
18005dd0:	d8c02b05 	stb	r3,172(sp)
18005dd4:	ac400007 	ldb	r17,0(r21)
18005dd8:	003d4306 	br	180052e8 <__alt_data_end+0xf80052e8>
18005ddc:	84000814 	ori	r16,r16,32
18005de0:	ac400007 	ldb	r17,0(r21)
18005de4:	003d4006 	br	180052e8 <__alt_data_end+0xf80052e8>
18005de8:	d8802e17 	ldw	r2,184(sp)
18005dec:	8025883a 	mov	r18,r16
18005df0:	d8002785 	stb	zero,158(sp)
18005df4:	14000017 	ldw	r16,0(r2)
18005df8:	e011883a 	mov	r8,fp
18005dfc:	14c00104 	addi	r19,r2,4
18005e00:	80042d26 	beq	r16,zero,18006eb8 <___vfprintf_internal_r+0x1d58>
18005e04:	d8c02a17 	ldw	r3,168(sp)
18005e08:	1803e416 	blt	r3,zero,18006d9c <___vfprintf_internal_r+0x1c3c>
18005e0c:	180d883a 	mov	r6,r3
18005e10:	000b883a 	mov	r5,zero
18005e14:	8009883a 	mov	r4,r16
18005e18:	df003d15 	stw	fp,244(sp)
18005e1c:	800aa980 	call	1800aa98 <memchr>
18005e20:	da003d17 	ldw	r8,244(sp)
18005e24:	10046826 	beq	r2,zero,18006fc8 <___vfprintf_internal_r+0x1e68>
18005e28:	1405c83a 	sub	r2,r2,r16
18005e2c:	d8802b15 	stw	r2,172(sp)
18005e30:	1003e016 	blt	r2,zero,18006db4 <___vfprintf_internal_r+0x1c54>
18005e34:	df002783 	ldbu	fp,158(sp)
18005e38:	d8802915 	stw	r2,164(sp)
18005e3c:	dcc02e15 	stw	r19,184(sp)
18005e40:	d8002a15 	stw	zero,168(sp)
18005e44:	d8003215 	stw	zero,200(sp)
18005e48:	003ea206 	br	180058d4 <__alt_data_end+0xf80058d4>
18005e4c:	8025883a 	mov	r18,r16
18005e50:	dc002903 	ldbu	r16,164(sp)
18005e54:	e011883a 	mov	r8,fp
18005e58:	84003fcc 	andi	r16,r16,255
18005e5c:	803f8d26 	beq	r16,zero,18005c94 <__alt_data_end+0xf8005c94>
18005e60:	d8c02b03 	ldbu	r3,172(sp)
18005e64:	d8c02785 	stb	r3,158(sp)
18005e68:	003f8a06 	br	18005c94 <__alt_data_end+0xf8005c94>
18005e6c:	8025883a 	mov	r18,r16
18005e70:	dc002903 	ldbu	r16,164(sp)
18005e74:	e011883a 	mov	r8,fp
18005e78:	84003fcc 	andi	r16,r16,255
18005e7c:	8005661e 	bne	r16,zero,18007418 <___vfprintf_internal_r+0x22b8>
18005e80:	01060074 	movhi	r4,6145
18005e84:	2118f304 	addi	r4,r4,25548
18005e88:	d9003915 	stw	r4,228(sp)
18005e8c:	9080080c 	andi	r2,r18,32
18005e90:	103f9f1e 	bne	r2,zero,18005d10 <__alt_data_end+0xf8005d10>
18005e94:	9080040c 	andi	r2,r18,16
18005e98:	1002eb26 	beq	r2,zero,18006a48 <___vfprintf_internal_r+0x18e8>
18005e9c:	d8802e17 	ldw	r2,184(sp)
18005ea0:	002d883a 	mov	r22,zero
18005ea4:	14c00017 	ldw	r19,0(r2)
18005ea8:	10800104 	addi	r2,r2,4
18005eac:	d8802e15 	stw	r2,184(sp)
18005eb0:	003f9c06 	br	18005d24 <__alt_data_end+0xf8005d24>
18005eb4:	d8802b07 	ldb	r2,172(sp)
18005eb8:	1002e11e 	bne	r2,zero,18006a40 <___vfprintf_internal_r+0x18e0>
18005ebc:	00c00044 	movi	r3,1
18005ec0:	d8c02905 	stb	r3,164(sp)
18005ec4:	00c00804 	movi	r3,32
18005ec8:	d8c02b05 	stb	r3,172(sp)
18005ecc:	ac400007 	ldb	r17,0(r21)
18005ed0:	003d0506 	br	180052e8 <__alt_data_end+0xf80052e8>
18005ed4:	84000054 	ori	r16,r16,1
18005ed8:	ac400007 	ldb	r17,0(r21)
18005edc:	003d0206 	br	180052e8 <__alt_data_end+0xf80052e8>
18005ee0:	8025883a 	mov	r18,r16
18005ee4:	dc002903 	ldbu	r16,164(sp)
18005ee8:	e011883a 	mov	r8,fp
18005eec:	84003fcc 	andi	r16,r16,255
18005ef0:	803de726 	beq	r16,zero,18005690 <__alt_data_end+0xf8005690>
18005ef4:	d8c02b03 	ldbu	r3,172(sp)
18005ef8:	d8c02785 	stb	r3,158(sp)
18005efc:	003de406 	br	18005690 <__alt_data_end+0xf8005690>
18005f00:	84001014 	ori	r16,r16,64
18005f04:	ac400007 	ldb	r17,0(r21)
18005f08:	003cf706 	br	180052e8 <__alt_data_end+0xf80052e8>
18005f0c:	ac400007 	ldb	r17,0(r21)
18005f10:	00801b04 	movi	r2,108
18005f14:	88838f26 	beq	r17,r2,18006d54 <___vfprintf_internal_r+0x1bf4>
18005f18:	84000414 	ori	r16,r16,16
18005f1c:	003cf206 	br	180052e8 <__alt_data_end+0xf80052e8>
18005f20:	8025883a 	mov	r18,r16
18005f24:	dc002903 	ldbu	r16,164(sp)
18005f28:	e011883a 	mov	r8,fp
18005f2c:	84003fcc 	andi	r16,r16,255
18005f30:	80053f1e 	bne	r16,zero,18007430 <___vfprintf_internal_r+0x22d0>
18005f34:	9080080c 	andi	r2,r18,32
18005f38:	1002d226 	beq	r2,zero,18006a84 <___vfprintf_internal_r+0x1924>
18005f3c:	d9002e17 	ldw	r4,184(sp)
18005f40:	d9402f17 	ldw	r5,188(sp)
18005f44:	20800017 	ldw	r2,0(r4)
18005f48:	2807d7fa 	srai	r3,r5,31
18005f4c:	21000104 	addi	r4,r4,4
18005f50:	d9002e15 	stw	r4,184(sp)
18005f54:	11400015 	stw	r5,0(r2)
18005f58:	10c00115 	stw	r3,4(r2)
18005f5c:	003cb806 	br	18005240 <__alt_data_end+0xf8005240>
18005f60:	d8c02e17 	ldw	r3,184(sp)
18005f64:	d9002e17 	ldw	r4,184(sp)
18005f68:	8025883a 	mov	r18,r16
18005f6c:	18800017 	ldw	r2,0(r3)
18005f70:	21000104 	addi	r4,r4,4
18005f74:	00c00044 	movi	r3,1
18005f78:	e011883a 	mov	r8,fp
18005f7c:	d8c02915 	stw	r3,164(sp)
18005f80:	d8002785 	stb	zero,158(sp)
18005f84:	d8801405 	stb	r2,80(sp)
18005f88:	d9002e15 	stw	r4,184(sp)
18005f8c:	d8c02b15 	stw	r3,172(sp)
18005f90:	d8002a15 	stw	zero,168(sp)
18005f94:	d8003215 	stw	zero,200(sp)
18005f98:	dc001404 	addi	r16,sp,80
18005f9c:	0039883a 	mov	fp,zero
18005fa0:	003e5306 	br	180058f0 <__alt_data_end+0xf80058f0>
18005fa4:	01060074 	movhi	r4,6145
18005fa8:	2118f304 	addi	r4,r4,25548
18005fac:	0039883a 	mov	fp,zero
18005fb0:	d9003915 	stw	r4,228(sp)
18005fb4:	04401e04 	movi	r17,120
18005fb8:	003f6906 	br	18005d60 <__alt_data_end+0xf8005d60>
18005fbc:	8025883a 	mov	r18,r16
18005fc0:	dc002903 	ldbu	r16,164(sp)
18005fc4:	e011883a 	mov	r8,fp
18005fc8:	84003fcc 	andi	r16,r16,255
18005fcc:	8005081e 	bne	r16,zero,180073f0 <___vfprintf_internal_r+0x2290>
18005fd0:	883d6126 	beq	r17,zero,18005558 <__alt_data_end+0xf8005558>
18005fd4:	00c00044 	movi	r3,1
18005fd8:	d8c02915 	stw	r3,164(sp)
18005fdc:	dc401405 	stb	r17,80(sp)
18005fe0:	d8002785 	stb	zero,158(sp)
18005fe4:	003fe906 	br	18005f8c <__alt_data_end+0xf8005f8c>
18005fe8:	01460074 	movhi	r5,6145
18005fec:	2958f304 	addi	r5,r5,25548
18005ff0:	d9403915 	stw	r5,228(sp)
18005ff4:	d8c02e15 	stw	r3,184(sp)
18005ff8:	1025883a 	mov	r18,r2
18005ffc:	04401e04 	movi	r17,120
18006000:	9d84b03a 	or	r2,r19,r22
18006004:	1000fc1e 	bne	r2,zero,180063f8 <___vfprintf_internal_r+0x1298>
18006008:	0039883a 	mov	fp,zero
1800600c:	00800084 	movi	r2,2
18006010:	10803fcc 	andi	r2,r2,255
18006014:	00c00044 	movi	r3,1
18006018:	10c20f26 	beq	r2,r3,18006858 <___vfprintf_internal_r+0x16f8>
1800601c:	00c00084 	movi	r3,2
18006020:	10fd3326 	beq	r2,r3,180054f0 <__alt_data_end+0xf80054f0>
18006024:	003e0b06 	br	18005854 <__alt_data_end+0xf8005854>
18006028:	d8c02017 	ldw	r3,128(sp)
1800602c:	003e7106 	br	180059f4 <__alt_data_end+0xf80059f4>
18006030:	00801944 	movi	r2,101
18006034:	14407e0e 	bge	r2,r17,18006230 <___vfprintf_internal_r+0x10d0>
18006038:	d9003617 	ldw	r4,216(sp)
1800603c:	d9403817 	ldw	r5,224(sp)
18006040:	000d883a 	mov	r6,zero
18006044:	000f883a 	mov	r7,zero
18006048:	d8c03c15 	stw	r3,240(sp)
1800604c:	da003d15 	stw	r8,244(sp)
18006050:	8011d400 	call	18011d40 <__eqdf2>
18006054:	d8c03c17 	ldw	r3,240(sp)
18006058:	da003d17 	ldw	r8,244(sp)
1800605c:	1000f71e 	bne	r2,zero,1800643c <___vfprintf_internal_r+0x12dc>
18006060:	d8801f17 	ldw	r2,124(sp)
18006064:	01060074 	movhi	r4,6145
18006068:	2118fa04 	addi	r4,r4,25576
1800606c:	18c00044 	addi	r3,r3,1
18006070:	10800044 	addi	r2,r2,1
18006074:	41000015 	stw	r4,0(r8)
18006078:	01000044 	movi	r4,1
1800607c:	41000115 	stw	r4,4(r8)
18006080:	d8c02015 	stw	r3,128(sp)
18006084:	d8801f15 	stw	r2,124(sp)
18006088:	010001c4 	movi	r4,7
1800608c:	2082b816 	blt	r4,r2,18006b70 <___vfprintf_internal_r+0x1a10>
18006090:	42000204 	addi	r8,r8,8
18006094:	d8802617 	ldw	r2,152(sp)
18006098:	d9403317 	ldw	r5,204(sp)
1800609c:	11400216 	blt	r2,r5,180060a8 <___vfprintf_internal_r+0xf48>
180060a0:	9080004c 	andi	r2,r18,1
180060a4:	103eb326 	beq	r2,zero,18005b74 <__alt_data_end+0xf8005b74>
180060a8:	d8803717 	ldw	r2,220(sp)
180060ac:	d9003417 	ldw	r4,208(sp)
180060b0:	d9403717 	ldw	r5,220(sp)
180060b4:	1887883a 	add	r3,r3,r2
180060b8:	d8801f17 	ldw	r2,124(sp)
180060bc:	41000015 	stw	r4,0(r8)
180060c0:	41400115 	stw	r5,4(r8)
180060c4:	10800044 	addi	r2,r2,1
180060c8:	d8c02015 	stw	r3,128(sp)
180060cc:	d8801f15 	stw	r2,124(sp)
180060d0:	010001c4 	movi	r4,7
180060d4:	20832916 	blt	r4,r2,18006d7c <___vfprintf_internal_r+0x1c1c>
180060d8:	42000204 	addi	r8,r8,8
180060dc:	d8803317 	ldw	r2,204(sp)
180060e0:	143fffc4 	addi	r16,r2,-1
180060e4:	043ea30e 	bge	zero,r16,18005b74 <__alt_data_end+0xf8005b74>
180060e8:	04400404 	movi	r17,16
180060ec:	d8801f17 	ldw	r2,124(sp)
180060f0:	8c00880e 	bge	r17,r16,18006314 <___vfprintf_internal_r+0x11b4>
180060f4:	01460074 	movhi	r5,6145
180060f8:	29590284 	addi	r5,r5,25610
180060fc:	d9402c15 	stw	r5,176(sp)
18006100:	058001c4 	movi	r22,7
18006104:	dcc02d17 	ldw	r19,180(sp)
18006108:	00000306 	br	18006118 <___vfprintf_internal_r+0xfb8>
1800610c:	42000204 	addi	r8,r8,8
18006110:	843ffc04 	addi	r16,r16,-16
18006114:	8c00820e 	bge	r17,r16,18006320 <___vfprintf_internal_r+0x11c0>
18006118:	18c00404 	addi	r3,r3,16
1800611c:	10800044 	addi	r2,r2,1
18006120:	45000015 	stw	r20,0(r8)
18006124:	44400115 	stw	r17,4(r8)
18006128:	d8c02015 	stw	r3,128(sp)
1800612c:	d8801f15 	stw	r2,124(sp)
18006130:	b0bff60e 	bge	r22,r2,1800610c <__alt_data_end+0xf800610c>
18006134:	d9801e04 	addi	r6,sp,120
18006138:	b80b883a 	mov	r5,r23
1800613c:	9809883a 	mov	r4,r19
18006140:	800deb00 	call	1800deb0 <__sprint_r>
18006144:	103d0a1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006148:	d8c02017 	ldw	r3,128(sp)
1800614c:	d8801f17 	ldw	r2,124(sp)
18006150:	da000404 	addi	r8,sp,16
18006154:	003fee06 	br	18006110 <__alt_data_end+0xf8006110>
18006158:	d9403117 	ldw	r5,196(sp)
1800615c:	d8802917 	ldw	r2,164(sp)
18006160:	28adc83a 	sub	r22,r5,r2
18006164:	05be410e 	bge	zero,r22,18005a6c <__alt_data_end+0xf8005a6c>
18006168:	07000404 	movi	fp,16
1800616c:	d8801f17 	ldw	r2,124(sp)
18006170:	e5838f0e 	bge	fp,r22,18006fb0 <___vfprintf_internal_r+0x1e50>
18006174:	01460074 	movhi	r5,6145
18006178:	29590284 	addi	r5,r5,25610
1800617c:	dc403015 	stw	r17,192(sp)
18006180:	d9402c15 	stw	r5,176(sp)
18006184:	b023883a 	mov	r17,r22
18006188:	04c001c4 	movi	r19,7
1800618c:	a82d883a 	mov	r22,r21
18006190:	902b883a 	mov	r21,r18
18006194:	8025883a 	mov	r18,r16
18006198:	dc002d17 	ldw	r16,180(sp)
1800619c:	00000306 	br	180061ac <___vfprintf_internal_r+0x104c>
180061a0:	8c7ffc04 	addi	r17,r17,-16
180061a4:	42000204 	addi	r8,r8,8
180061a8:	e440110e 	bge	fp,r17,180061f0 <___vfprintf_internal_r+0x1090>
180061ac:	18c00404 	addi	r3,r3,16
180061b0:	10800044 	addi	r2,r2,1
180061b4:	45000015 	stw	r20,0(r8)
180061b8:	47000115 	stw	fp,4(r8)
180061bc:	d8c02015 	stw	r3,128(sp)
180061c0:	d8801f15 	stw	r2,124(sp)
180061c4:	98bff60e 	bge	r19,r2,180061a0 <__alt_data_end+0xf80061a0>
180061c8:	d9801e04 	addi	r6,sp,120
180061cc:	b80b883a 	mov	r5,r23
180061d0:	8009883a 	mov	r4,r16
180061d4:	800deb00 	call	1800deb0 <__sprint_r>
180061d8:	103ce51e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
180061dc:	8c7ffc04 	addi	r17,r17,-16
180061e0:	d8c02017 	ldw	r3,128(sp)
180061e4:	d8801f17 	ldw	r2,124(sp)
180061e8:	da000404 	addi	r8,sp,16
180061ec:	e47fef16 	blt	fp,r17,180061ac <__alt_data_end+0xf80061ac>
180061f0:	9021883a 	mov	r16,r18
180061f4:	a825883a 	mov	r18,r21
180061f8:	b02b883a 	mov	r21,r22
180061fc:	882d883a 	mov	r22,r17
18006200:	dc403017 	ldw	r17,192(sp)
18006204:	d9002c17 	ldw	r4,176(sp)
18006208:	1d87883a 	add	r3,r3,r22
1800620c:	10800044 	addi	r2,r2,1
18006210:	41000015 	stw	r4,0(r8)
18006214:	45800115 	stw	r22,4(r8)
18006218:	d8c02015 	stw	r3,128(sp)
1800621c:	d8801f15 	stw	r2,124(sp)
18006220:	010001c4 	movi	r4,7
18006224:	20818e16 	blt	r4,r2,18006860 <___vfprintf_internal_r+0x1700>
18006228:	42000204 	addi	r8,r8,8
1800622c:	003e0f06 	br	18005a6c <__alt_data_end+0xf8005a6c>
18006230:	d9403317 	ldw	r5,204(sp)
18006234:	00800044 	movi	r2,1
18006238:	18c00044 	addi	r3,r3,1
1800623c:	1141530e 	bge	r2,r5,1800678c <___vfprintf_internal_r+0x162c>
18006240:	dc401f17 	ldw	r17,124(sp)
18006244:	00800044 	movi	r2,1
18006248:	40800115 	stw	r2,4(r8)
1800624c:	8c400044 	addi	r17,r17,1
18006250:	44000015 	stw	r16,0(r8)
18006254:	d8c02015 	stw	r3,128(sp)
18006258:	dc401f15 	stw	r17,124(sp)
1800625c:	008001c4 	movi	r2,7
18006260:	14416b16 	blt	r2,r17,18006810 <___vfprintf_internal_r+0x16b0>
18006264:	42000204 	addi	r8,r8,8
18006268:	d8803717 	ldw	r2,220(sp)
1800626c:	d9003417 	ldw	r4,208(sp)
18006270:	8c400044 	addi	r17,r17,1
18006274:	10c7883a 	add	r3,r2,r3
18006278:	40800115 	stw	r2,4(r8)
1800627c:	41000015 	stw	r4,0(r8)
18006280:	d8c02015 	stw	r3,128(sp)
18006284:	dc401f15 	stw	r17,124(sp)
18006288:	008001c4 	movi	r2,7
1800628c:	14416916 	blt	r2,r17,18006834 <___vfprintf_internal_r+0x16d4>
18006290:	45800204 	addi	r22,r8,8
18006294:	d9003617 	ldw	r4,216(sp)
18006298:	d9403817 	ldw	r5,224(sp)
1800629c:	000d883a 	mov	r6,zero
180062a0:	000f883a 	mov	r7,zero
180062a4:	d8c03c15 	stw	r3,240(sp)
180062a8:	8011d400 	call	18011d40 <__eqdf2>
180062ac:	d8c03c17 	ldw	r3,240(sp)
180062b0:	1000bc26 	beq	r2,zero,180065a4 <___vfprintf_internal_r+0x1444>
180062b4:	d9403317 	ldw	r5,204(sp)
180062b8:	84000044 	addi	r16,r16,1
180062bc:	8c400044 	addi	r17,r17,1
180062c0:	28bfffc4 	addi	r2,r5,-1
180062c4:	1887883a 	add	r3,r3,r2
180062c8:	b0800115 	stw	r2,4(r22)
180062cc:	b4000015 	stw	r16,0(r22)
180062d0:	d8c02015 	stw	r3,128(sp)
180062d4:	dc401f15 	stw	r17,124(sp)
180062d8:	008001c4 	movi	r2,7
180062dc:	14414316 	blt	r2,r17,180067ec <___vfprintf_internal_r+0x168c>
180062e0:	b5800204 	addi	r22,r22,8
180062e4:	d9003a17 	ldw	r4,232(sp)
180062e8:	df0022c4 	addi	fp,sp,139
180062ec:	8c400044 	addi	r17,r17,1
180062f0:	20c7883a 	add	r3,r4,r3
180062f4:	b7000015 	stw	fp,0(r22)
180062f8:	b1000115 	stw	r4,4(r22)
180062fc:	d8c02015 	stw	r3,128(sp)
18006300:	dc401f15 	stw	r17,124(sp)
18006304:	008001c4 	movi	r2,7
18006308:	14400e16 	blt	r2,r17,18006344 <___vfprintf_internal_r+0x11e4>
1800630c:	b2000204 	addi	r8,r22,8
18006310:	003e1806 	br	18005b74 <__alt_data_end+0xf8005b74>
18006314:	01060074 	movhi	r4,6145
18006318:	21190284 	addi	r4,r4,25610
1800631c:	d9002c15 	stw	r4,176(sp)
18006320:	d9002c17 	ldw	r4,176(sp)
18006324:	1c07883a 	add	r3,r3,r16
18006328:	44000115 	stw	r16,4(r8)
1800632c:	41000015 	stw	r4,0(r8)
18006330:	10800044 	addi	r2,r2,1
18006334:	d8c02015 	stw	r3,128(sp)
18006338:	d8801f15 	stw	r2,124(sp)
1800633c:	010001c4 	movi	r4,7
18006340:	20be0b0e 	bge	r4,r2,18005b70 <__alt_data_end+0xf8005b70>
18006344:	d9002d17 	ldw	r4,180(sp)
18006348:	d9801e04 	addi	r6,sp,120
1800634c:	b80b883a 	mov	r5,r23
18006350:	800deb00 	call	1800deb0 <__sprint_r>
18006354:	103c861e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006358:	d8c02017 	ldw	r3,128(sp)
1800635c:	da000404 	addi	r8,sp,16
18006360:	003e0406 	br	18005b74 <__alt_data_end+0xf8005b74>
18006364:	d9002d17 	ldw	r4,180(sp)
18006368:	d9801e04 	addi	r6,sp,120
1800636c:	b80b883a 	mov	r5,r23
18006370:	800deb00 	call	1800deb0 <__sprint_r>
18006374:	103e3b26 	beq	r2,zero,18005c64 <__alt_data_end+0xf8005c64>
18006378:	003c7d06 	br	18005570 <__alt_data_end+0xf8005570>
1800637c:	d9002d17 	ldw	r4,180(sp)
18006380:	d9801e04 	addi	r6,sp,120
18006384:	b80b883a 	mov	r5,r23
18006388:	800deb00 	call	1800deb0 <__sprint_r>
1800638c:	103c781e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006390:	d8c02017 	ldw	r3,128(sp)
18006394:	da000404 	addi	r8,sp,16
18006398:	003de906 	br	18005b40 <__alt_data_end+0xf8005b40>
1800639c:	d9002d17 	ldw	r4,180(sp)
180063a0:	d9801e04 	addi	r6,sp,120
180063a4:	b80b883a 	mov	r5,r23
180063a8:	800deb00 	call	1800deb0 <__sprint_r>
180063ac:	103c701e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
180063b0:	d8c02017 	ldw	r3,128(sp)
180063b4:	da000404 	addi	r8,sp,16
180063b8:	003d9b06 	br	18005a28 <__alt_data_end+0xf8005a28>
180063bc:	d9002d17 	ldw	r4,180(sp)
180063c0:	d9801e04 	addi	r6,sp,120
180063c4:	b80b883a 	mov	r5,r23
180063c8:	800deb00 	call	1800deb0 <__sprint_r>
180063cc:	103c681e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
180063d0:	d8c02017 	ldw	r3,128(sp)
180063d4:	da000404 	addi	r8,sp,16
180063d8:	003da106 	br	18005a60 <__alt_data_end+0xf8005a60>
180063dc:	d9402a17 	ldw	r5,168(sp)
180063e0:	d8002785 	stb	zero,158(sp)
180063e4:	283f0616 	blt	r5,zero,18006000 <__alt_data_end+0xf8006000>
180063e8:	00ffdfc4 	movi	r3,-129
180063ec:	9d84b03a 	or	r2,r19,r22
180063f0:	90e4703a 	and	r18,r18,r3
180063f4:	103c3b26 	beq	r2,zero,180054e4 <__alt_data_end+0xf80054e4>
180063f8:	0039883a 	mov	fp,zero
180063fc:	003e5806 	br	18005d60 <__alt_data_end+0xf8005d60>
18006400:	9080040c 	andi	r2,r18,16
18006404:	1001b326 	beq	r2,zero,18006ad4 <___vfprintf_internal_r+0x1974>
18006408:	d8c02e17 	ldw	r3,184(sp)
1800640c:	d9002a17 	ldw	r4,168(sp)
18006410:	d8002785 	stb	zero,158(sp)
18006414:	18800104 	addi	r2,r3,4
18006418:	1cc00017 	ldw	r19,0(r3)
1800641c:	002d883a 	mov	r22,zero
18006420:	2001b516 	blt	r4,zero,18006af8 <___vfprintf_internal_r+0x1998>
18006424:	00ffdfc4 	movi	r3,-129
18006428:	d8802e15 	stw	r2,184(sp)
1800642c:	90e4703a 	and	r18,r18,r3
18006430:	983d0526 	beq	r19,zero,18005848 <__alt_data_end+0xf8005848>
18006434:	0039883a 	mov	fp,zero
18006438:	003d0806 	br	1800585c <__alt_data_end+0xf800585c>
1800643c:	dc402617 	ldw	r17,152(sp)
18006440:	0441d30e 	bge	zero,r17,18006b90 <___vfprintf_internal_r+0x1a30>
18006444:	dc403217 	ldw	r17,200(sp)
18006448:	d8803317 	ldw	r2,204(sp)
1800644c:	1440010e 	bge	r2,r17,18006454 <___vfprintf_internal_r+0x12f4>
18006450:	1023883a 	mov	r17,r2
18006454:	04400a0e 	bge	zero,r17,18006480 <___vfprintf_internal_r+0x1320>
18006458:	d8801f17 	ldw	r2,124(sp)
1800645c:	1c47883a 	add	r3,r3,r17
18006460:	44000015 	stw	r16,0(r8)
18006464:	10800044 	addi	r2,r2,1
18006468:	44400115 	stw	r17,4(r8)
1800646c:	d8c02015 	stw	r3,128(sp)
18006470:	d8801f15 	stw	r2,124(sp)
18006474:	010001c4 	movi	r4,7
18006478:	20826516 	blt	r4,r2,18006e10 <___vfprintf_internal_r+0x1cb0>
1800647c:	42000204 	addi	r8,r8,8
18006480:	88026116 	blt	r17,zero,18006e08 <___vfprintf_internal_r+0x1ca8>
18006484:	d9003217 	ldw	r4,200(sp)
18006488:	2463c83a 	sub	r17,r4,r17
1800648c:	04407b0e 	bge	zero,r17,1800667c <___vfprintf_internal_r+0x151c>
18006490:	05800404 	movi	r22,16
18006494:	d8801f17 	ldw	r2,124(sp)
18006498:	b4419d0e 	bge	r22,r17,18006b10 <___vfprintf_internal_r+0x19b0>
1800649c:	01060074 	movhi	r4,6145
180064a0:	21190284 	addi	r4,r4,25610
180064a4:	d9002c15 	stw	r4,176(sp)
180064a8:	070001c4 	movi	fp,7
180064ac:	dcc02d17 	ldw	r19,180(sp)
180064b0:	00000306 	br	180064c0 <___vfprintf_internal_r+0x1360>
180064b4:	42000204 	addi	r8,r8,8
180064b8:	8c7ffc04 	addi	r17,r17,-16
180064bc:	b441970e 	bge	r22,r17,18006b1c <___vfprintf_internal_r+0x19bc>
180064c0:	18c00404 	addi	r3,r3,16
180064c4:	10800044 	addi	r2,r2,1
180064c8:	45000015 	stw	r20,0(r8)
180064cc:	45800115 	stw	r22,4(r8)
180064d0:	d8c02015 	stw	r3,128(sp)
180064d4:	d8801f15 	stw	r2,124(sp)
180064d8:	e0bff60e 	bge	fp,r2,180064b4 <__alt_data_end+0xf80064b4>
180064dc:	d9801e04 	addi	r6,sp,120
180064e0:	b80b883a 	mov	r5,r23
180064e4:	9809883a 	mov	r4,r19
180064e8:	800deb00 	call	1800deb0 <__sprint_r>
180064ec:	103c201e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
180064f0:	d8c02017 	ldw	r3,128(sp)
180064f4:	d8801f17 	ldw	r2,124(sp)
180064f8:	da000404 	addi	r8,sp,16
180064fc:	003fee06 	br	180064b8 <__alt_data_end+0xf80064b8>
18006500:	d9002d17 	ldw	r4,180(sp)
18006504:	d9801e04 	addi	r6,sp,120
18006508:	b80b883a 	mov	r5,r23
1800650c:	800deb00 	call	1800deb0 <__sprint_r>
18006510:	103c171e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006514:	d8c02017 	ldw	r3,128(sp)
18006518:	df002787 	ldb	fp,158(sp)
1800651c:	da000404 	addi	r8,sp,16
18006520:	003d3406 	br	180059f4 <__alt_data_end+0xf80059f4>
18006524:	9080040c 	andi	r2,r18,16
18006528:	10016126 	beq	r2,zero,18006ab0 <___vfprintf_internal_r+0x1950>
1800652c:	d9402e17 	ldw	r5,184(sp)
18006530:	2cc00017 	ldw	r19,0(r5)
18006534:	29400104 	addi	r5,r5,4
18006538:	d9402e15 	stw	r5,184(sp)
1800653c:	982dd7fa 	srai	r22,r19,31
18006540:	b005883a 	mov	r2,r22
18006544:	003c5a06 	br	180056b0 <__alt_data_end+0xf80056b0>
18006548:	9080040c 	andi	r2,r18,16
1800654c:	10003526 	beq	r2,zero,18006624 <___vfprintf_internal_r+0x14c4>
18006550:	d8c02e17 	ldw	r3,184(sp)
18006554:	d9002a17 	ldw	r4,168(sp)
18006558:	d8002785 	stb	zero,158(sp)
1800655c:	18800104 	addi	r2,r3,4
18006560:	1cc00017 	ldw	r19,0(r3)
18006564:	002d883a 	mov	r22,zero
18006568:	20003716 	blt	r4,zero,18006648 <___vfprintf_internal_r+0x14e8>
1800656c:	00ffdfc4 	movi	r3,-129
18006570:	d8802e15 	stw	r2,184(sp)
18006574:	90e4703a 	and	r18,r18,r3
18006578:	0039883a 	mov	fp,zero
1800657c:	983dd426 	beq	r19,zero,18005cd0 <__alt_data_end+0xf8005cd0>
18006580:	00800244 	movi	r2,9
18006584:	14fc5336 	bltu	r2,r19,180056d4 <__alt_data_end+0xf80056d4>
18006588:	d8c02817 	ldw	r3,160(sp)
1800658c:	dc001dc4 	addi	r16,sp,119
18006590:	9cc00c04 	addi	r19,r19,48
18006594:	1c07c83a 	sub	r3,r3,r16
18006598:	dcc01dc5 	stb	r19,119(sp)
1800659c:	d8c02b15 	stw	r3,172(sp)
180065a0:	003cc606 	br	180058bc <__alt_data_end+0xf80058bc>
180065a4:	d8803317 	ldw	r2,204(sp)
180065a8:	143fffc4 	addi	r16,r2,-1
180065ac:	043f4d0e 	bge	zero,r16,180062e4 <__alt_data_end+0xf80062e4>
180065b0:	07000404 	movi	fp,16
180065b4:	e400810e 	bge	fp,r16,180067bc <___vfprintf_internal_r+0x165c>
180065b8:	01460074 	movhi	r5,6145
180065bc:	29590284 	addi	r5,r5,25610
180065c0:	d9402c15 	stw	r5,176(sp)
180065c4:	01c001c4 	movi	r7,7
180065c8:	dcc02d17 	ldw	r19,180(sp)
180065cc:	00000306 	br	180065dc <___vfprintf_internal_r+0x147c>
180065d0:	b5800204 	addi	r22,r22,8
180065d4:	843ffc04 	addi	r16,r16,-16
180065d8:	e4007b0e 	bge	fp,r16,180067c8 <___vfprintf_internal_r+0x1668>
180065dc:	18c00404 	addi	r3,r3,16
180065e0:	8c400044 	addi	r17,r17,1
180065e4:	b5000015 	stw	r20,0(r22)
180065e8:	b7000115 	stw	fp,4(r22)
180065ec:	d8c02015 	stw	r3,128(sp)
180065f0:	dc401f15 	stw	r17,124(sp)
180065f4:	3c7ff60e 	bge	r7,r17,180065d0 <__alt_data_end+0xf80065d0>
180065f8:	d9801e04 	addi	r6,sp,120
180065fc:	b80b883a 	mov	r5,r23
18006600:	9809883a 	mov	r4,r19
18006604:	d9c03c15 	stw	r7,240(sp)
18006608:	800deb00 	call	1800deb0 <__sprint_r>
1800660c:	d9c03c17 	ldw	r7,240(sp)
18006610:	103bd71e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006614:	d8c02017 	ldw	r3,128(sp)
18006618:	dc401f17 	ldw	r17,124(sp)
1800661c:	dd800404 	addi	r22,sp,16
18006620:	003fec06 	br	180065d4 <__alt_data_end+0xf80065d4>
18006624:	9080100c 	andi	r2,r18,64
18006628:	d8002785 	stb	zero,158(sp)
1800662c:	10010e26 	beq	r2,zero,18006a68 <___vfprintf_internal_r+0x1908>
18006630:	d9402e17 	ldw	r5,184(sp)
18006634:	d8c02a17 	ldw	r3,168(sp)
18006638:	002d883a 	mov	r22,zero
1800663c:	28800104 	addi	r2,r5,4
18006640:	2cc0000b 	ldhu	r19,0(r5)
18006644:	183fc90e 	bge	r3,zero,1800656c <__alt_data_end+0xf800656c>
18006648:	d8802e15 	stw	r2,184(sp)
1800664c:	0039883a 	mov	fp,zero
18006650:	9d84b03a 	or	r2,r19,r22
18006654:	103c1e1e 	bne	r2,zero,180056d0 <__alt_data_end+0xf80056d0>
18006658:	00800044 	movi	r2,1
1800665c:	003e6c06 	br	18006010 <__alt_data_end+0xf8006010>
18006660:	d9002d17 	ldw	r4,180(sp)
18006664:	d9801e04 	addi	r6,sp,120
18006668:	b80b883a 	mov	r5,r23
1800666c:	800deb00 	call	1800deb0 <__sprint_r>
18006670:	103bbf1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006674:	d8c02017 	ldw	r3,128(sp)
18006678:	da000404 	addi	r8,sp,16
1800667c:	d9003217 	ldw	r4,200(sp)
18006680:	d8802617 	ldw	r2,152(sp)
18006684:	d9403317 	ldw	r5,204(sp)
18006688:	8123883a 	add	r17,r16,r4
1800668c:	11400216 	blt	r2,r5,18006698 <___vfprintf_internal_r+0x1538>
18006690:	9100004c 	andi	r4,r18,1
18006694:	20000d26 	beq	r4,zero,180066cc <___vfprintf_internal_r+0x156c>
18006698:	d9003717 	ldw	r4,220(sp)
1800669c:	d9403417 	ldw	r5,208(sp)
180066a0:	1907883a 	add	r3,r3,r4
180066a4:	d9001f17 	ldw	r4,124(sp)
180066a8:	41400015 	stw	r5,0(r8)
180066ac:	d9403717 	ldw	r5,220(sp)
180066b0:	21000044 	addi	r4,r4,1
180066b4:	d8c02015 	stw	r3,128(sp)
180066b8:	41400115 	stw	r5,4(r8)
180066bc:	d9001f15 	stw	r4,124(sp)
180066c0:	014001c4 	movi	r5,7
180066c4:	2901e816 	blt	r5,r4,18006e68 <___vfprintf_internal_r+0x1d08>
180066c8:	42000204 	addi	r8,r8,8
180066cc:	d9003317 	ldw	r4,204(sp)
180066d0:	8121883a 	add	r16,r16,r4
180066d4:	2085c83a 	sub	r2,r4,r2
180066d8:	8461c83a 	sub	r16,r16,r17
180066dc:	1400010e 	bge	r2,r16,180066e4 <___vfprintf_internal_r+0x1584>
180066e0:	1021883a 	mov	r16,r2
180066e4:	04000a0e 	bge	zero,r16,18006710 <___vfprintf_internal_r+0x15b0>
180066e8:	d9001f17 	ldw	r4,124(sp)
180066ec:	1c07883a 	add	r3,r3,r16
180066f0:	44400015 	stw	r17,0(r8)
180066f4:	21000044 	addi	r4,r4,1
180066f8:	44000115 	stw	r16,4(r8)
180066fc:	d8c02015 	stw	r3,128(sp)
18006700:	d9001f15 	stw	r4,124(sp)
18006704:	014001c4 	movi	r5,7
18006708:	2901fb16 	blt	r5,r4,18006ef8 <___vfprintf_internal_r+0x1d98>
1800670c:	42000204 	addi	r8,r8,8
18006710:	8001f716 	blt	r16,zero,18006ef0 <___vfprintf_internal_r+0x1d90>
18006714:	1421c83a 	sub	r16,r2,r16
18006718:	043d160e 	bge	zero,r16,18005b74 <__alt_data_end+0xf8005b74>
1800671c:	04400404 	movi	r17,16
18006720:	d8801f17 	ldw	r2,124(sp)
18006724:	8c3efb0e 	bge	r17,r16,18006314 <__alt_data_end+0xf8006314>
18006728:	01460074 	movhi	r5,6145
1800672c:	29590284 	addi	r5,r5,25610
18006730:	d9402c15 	stw	r5,176(sp)
18006734:	058001c4 	movi	r22,7
18006738:	dcc02d17 	ldw	r19,180(sp)
1800673c:	00000306 	br	1800674c <___vfprintf_internal_r+0x15ec>
18006740:	42000204 	addi	r8,r8,8
18006744:	843ffc04 	addi	r16,r16,-16
18006748:	8c3ef50e 	bge	r17,r16,18006320 <__alt_data_end+0xf8006320>
1800674c:	18c00404 	addi	r3,r3,16
18006750:	10800044 	addi	r2,r2,1
18006754:	45000015 	stw	r20,0(r8)
18006758:	44400115 	stw	r17,4(r8)
1800675c:	d8c02015 	stw	r3,128(sp)
18006760:	d8801f15 	stw	r2,124(sp)
18006764:	b0bff60e 	bge	r22,r2,18006740 <__alt_data_end+0xf8006740>
18006768:	d9801e04 	addi	r6,sp,120
1800676c:	b80b883a 	mov	r5,r23
18006770:	9809883a 	mov	r4,r19
18006774:	800deb00 	call	1800deb0 <__sprint_r>
18006778:	103b7d1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
1800677c:	d8c02017 	ldw	r3,128(sp)
18006780:	d8801f17 	ldw	r2,124(sp)
18006784:	da000404 	addi	r8,sp,16
18006788:	003fee06 	br	18006744 <__alt_data_end+0xf8006744>
1800678c:	9088703a 	and	r4,r18,r2
18006790:	203eab1e 	bne	r4,zero,18006240 <__alt_data_end+0xf8006240>
18006794:	dc401f17 	ldw	r17,124(sp)
18006798:	40800115 	stw	r2,4(r8)
1800679c:	44000015 	stw	r16,0(r8)
180067a0:	8c400044 	addi	r17,r17,1
180067a4:	d8c02015 	stw	r3,128(sp)
180067a8:	dc401f15 	stw	r17,124(sp)
180067ac:	008001c4 	movi	r2,7
180067b0:	14400e16 	blt	r2,r17,180067ec <___vfprintf_internal_r+0x168c>
180067b4:	45800204 	addi	r22,r8,8
180067b8:	003eca06 	br	180062e4 <__alt_data_end+0xf80062e4>
180067bc:	01060074 	movhi	r4,6145
180067c0:	21190284 	addi	r4,r4,25610
180067c4:	d9002c15 	stw	r4,176(sp)
180067c8:	d8802c17 	ldw	r2,176(sp)
180067cc:	1c07883a 	add	r3,r3,r16
180067d0:	8c400044 	addi	r17,r17,1
180067d4:	b0800015 	stw	r2,0(r22)
180067d8:	b4000115 	stw	r16,4(r22)
180067dc:	d8c02015 	stw	r3,128(sp)
180067e0:	dc401f15 	stw	r17,124(sp)
180067e4:	008001c4 	movi	r2,7
180067e8:	147ebd0e 	bge	r2,r17,180062e0 <__alt_data_end+0xf80062e0>
180067ec:	d9002d17 	ldw	r4,180(sp)
180067f0:	d9801e04 	addi	r6,sp,120
180067f4:	b80b883a 	mov	r5,r23
180067f8:	800deb00 	call	1800deb0 <__sprint_r>
180067fc:	103b5c1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006800:	d8c02017 	ldw	r3,128(sp)
18006804:	dc401f17 	ldw	r17,124(sp)
18006808:	dd800404 	addi	r22,sp,16
1800680c:	003eb506 	br	180062e4 <__alt_data_end+0xf80062e4>
18006810:	d9002d17 	ldw	r4,180(sp)
18006814:	d9801e04 	addi	r6,sp,120
18006818:	b80b883a 	mov	r5,r23
1800681c:	800deb00 	call	1800deb0 <__sprint_r>
18006820:	103b531e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006824:	d8c02017 	ldw	r3,128(sp)
18006828:	dc401f17 	ldw	r17,124(sp)
1800682c:	da000404 	addi	r8,sp,16
18006830:	003e8d06 	br	18006268 <__alt_data_end+0xf8006268>
18006834:	d9002d17 	ldw	r4,180(sp)
18006838:	d9801e04 	addi	r6,sp,120
1800683c:	b80b883a 	mov	r5,r23
18006840:	800deb00 	call	1800deb0 <__sprint_r>
18006844:	103b4a1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006848:	d8c02017 	ldw	r3,128(sp)
1800684c:	dc401f17 	ldw	r17,124(sp)
18006850:	dd800404 	addi	r22,sp,16
18006854:	003e8f06 	br	18006294 <__alt_data_end+0xf8006294>
18006858:	0027883a 	mov	r19,zero
1800685c:	003f4a06 	br	18006588 <__alt_data_end+0xf8006588>
18006860:	d9002d17 	ldw	r4,180(sp)
18006864:	d9801e04 	addi	r6,sp,120
18006868:	b80b883a 	mov	r5,r23
1800686c:	800deb00 	call	1800deb0 <__sprint_r>
18006870:	103b3f1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006874:	d8c02017 	ldw	r3,128(sp)
18006878:	da000404 	addi	r8,sp,16
1800687c:	003c7b06 	br	18005a6c <__alt_data_end+0xf8005a6c>
18006880:	d9402a17 	ldw	r5,168(sp)
18006884:	04e7c83a 	sub	r19,zero,r19
18006888:	07000b44 	movi	fp,45
1800688c:	9804c03a 	cmpne	r2,r19,zero
18006890:	05adc83a 	sub	r22,zero,r22
18006894:	df002785 	stb	fp,158(sp)
18006898:	b0adc83a 	sub	r22,r22,r2
1800689c:	28017b16 	blt	r5,zero,18006e8c <___vfprintf_internal_r+0x1d2c>
180068a0:	00bfdfc4 	movi	r2,-129
180068a4:	90a4703a 	and	r18,r18,r2
180068a8:	003b8906 	br	180056d0 <__alt_data_end+0xf80056d0>
180068ac:	d9003617 	ldw	r4,216(sp)
180068b0:	d9403817 	ldw	r5,224(sp)
180068b4:	da003d15 	stw	r8,244(sp)
180068b8:	800c5640 	call	1800c564 <__fpclassifyd>
180068bc:	da003d17 	ldw	r8,244(sp)
180068c0:	1000f026 	beq	r2,zero,18006c84 <___vfprintf_internal_r+0x1b24>
180068c4:	d9002a17 	ldw	r4,168(sp)
180068c8:	05bff7c4 	movi	r22,-33
180068cc:	00bfffc4 	movi	r2,-1
180068d0:	8dac703a 	and	r22,r17,r22
180068d4:	20820026 	beq	r4,r2,180070d8 <___vfprintf_internal_r+0x1f78>
180068d8:	008011c4 	movi	r2,71
180068dc:	b081f726 	beq	r22,r2,180070bc <___vfprintf_internal_r+0x1f5c>
180068e0:	d9003817 	ldw	r4,224(sp)
180068e4:	90c04014 	ori	r3,r18,256
180068e8:	d8c02c15 	stw	r3,176(sp)
180068ec:	20021516 	blt	r4,zero,18007144 <___vfprintf_internal_r+0x1fe4>
180068f0:	dcc03817 	ldw	r19,224(sp)
180068f4:	d8002905 	stb	zero,164(sp)
180068f8:	00801984 	movi	r2,102
180068fc:	8881f926 	beq	r17,r2,180070e4 <___vfprintf_internal_r+0x1f84>
18006900:	00801184 	movi	r2,70
18006904:	88821c26 	beq	r17,r2,18007178 <___vfprintf_internal_r+0x2018>
18006908:	00801144 	movi	r2,69
1800690c:	b081ef26 	beq	r22,r2,180070cc <___vfprintf_internal_r+0x1f6c>
18006910:	d8c02a17 	ldw	r3,168(sp)
18006914:	d8802104 	addi	r2,sp,132
18006918:	d8800315 	stw	r2,12(sp)
1800691c:	d9403617 	ldw	r5,216(sp)
18006920:	d8802504 	addi	r2,sp,148
18006924:	d9002d17 	ldw	r4,180(sp)
18006928:	d8800215 	stw	r2,8(sp)
1800692c:	d8802604 	addi	r2,sp,152
18006930:	d8c00015 	stw	r3,0(sp)
18006934:	d8800115 	stw	r2,4(sp)
18006938:	01c00084 	movi	r7,2
1800693c:	980d883a 	mov	r6,r19
18006940:	d8c03c15 	stw	r3,240(sp)
18006944:	da003d15 	stw	r8,244(sp)
18006948:	80078900 	call	18007890 <_dtoa_r>
1800694c:	1021883a 	mov	r16,r2
18006950:	008019c4 	movi	r2,103
18006954:	d8c03c17 	ldw	r3,240(sp)
18006958:	da003d17 	ldw	r8,244(sp)
1800695c:	88817126 	beq	r17,r2,18006f24 <___vfprintf_internal_r+0x1dc4>
18006960:	008011c4 	movi	r2,71
18006964:	88829126 	beq	r17,r2,180073ac <___vfprintf_internal_r+0x224c>
18006968:	80f9883a 	add	fp,r16,r3
1800696c:	d9003617 	ldw	r4,216(sp)
18006970:	000d883a 	mov	r6,zero
18006974:	000f883a 	mov	r7,zero
18006978:	980b883a 	mov	r5,r19
1800697c:	da003d15 	stw	r8,244(sp)
18006980:	8011d400 	call	18011d40 <__eqdf2>
18006984:	da003d17 	ldw	r8,244(sp)
18006988:	10018d26 	beq	r2,zero,18006fc0 <___vfprintf_internal_r+0x1e60>
1800698c:	d8802117 	ldw	r2,132(sp)
18006990:	1700062e 	bgeu	r2,fp,180069ac <___vfprintf_internal_r+0x184c>
18006994:	01000c04 	movi	r4,48
18006998:	10c00044 	addi	r3,r2,1
1800699c:	d8c02115 	stw	r3,132(sp)
180069a0:	11000005 	stb	r4,0(r2)
180069a4:	d8802117 	ldw	r2,132(sp)
180069a8:	173ffb36 	bltu	r2,fp,18006998 <__alt_data_end+0xf8006998>
180069ac:	1405c83a 	sub	r2,r2,r16
180069b0:	d8803315 	stw	r2,204(sp)
180069b4:	008011c4 	movi	r2,71
180069b8:	b0817626 	beq	r22,r2,18006f94 <___vfprintf_internal_r+0x1e34>
180069bc:	00801944 	movi	r2,101
180069c0:	1442800e 	bge	r2,r17,180073c4 <___vfprintf_internal_r+0x2264>
180069c4:	d8c02617 	ldw	r3,152(sp)
180069c8:	00801984 	movi	r2,102
180069cc:	d8c03215 	stw	r3,200(sp)
180069d0:	8881fe26 	beq	r17,r2,180071cc <___vfprintf_internal_r+0x206c>
180069d4:	d8c03217 	ldw	r3,200(sp)
180069d8:	d9003317 	ldw	r4,204(sp)
180069dc:	1901dd16 	blt	r3,r4,18007154 <___vfprintf_internal_r+0x1ff4>
180069e0:	9480004c 	andi	r18,r18,1
180069e4:	90022b1e 	bne	r18,zero,18007294 <___vfprintf_internal_r+0x2134>
180069e8:	1805883a 	mov	r2,r3
180069ec:	18028316 	blt	r3,zero,180073fc <___vfprintf_internal_r+0x229c>
180069f0:	d8c03217 	ldw	r3,200(sp)
180069f4:	044019c4 	movi	r17,103
180069f8:	d8c02b15 	stw	r3,172(sp)
180069fc:	df002907 	ldb	fp,164(sp)
18006a00:	e001531e 	bne	fp,zero,18006f50 <___vfprintf_internal_r+0x1df0>
18006a04:	df002783 	ldbu	fp,158(sp)
18006a08:	d8802915 	stw	r2,164(sp)
18006a0c:	dc802c17 	ldw	r18,176(sp)
18006a10:	d8002a15 	stw	zero,168(sp)
18006a14:	003baf06 	br	180058d4 <__alt_data_end+0xf80058d4>
18006a18:	d8c02e17 	ldw	r3,184(sp)
18006a1c:	d9002e17 	ldw	r4,184(sp)
18006a20:	d9402e17 	ldw	r5,184(sp)
18006a24:	18c00017 	ldw	r3,0(r3)
18006a28:	21000117 	ldw	r4,4(r4)
18006a2c:	29400204 	addi	r5,r5,8
18006a30:	d8c03615 	stw	r3,216(sp)
18006a34:	d9003815 	stw	r4,224(sp)
18006a38:	d9402e15 	stw	r5,184(sp)
18006a3c:	003b5006 	br	18005780 <__alt_data_end+0xf8005780>
18006a40:	ac400007 	ldb	r17,0(r21)
18006a44:	003a2806 	br	180052e8 <__alt_data_end+0xf80052e8>
18006a48:	9080100c 	andi	r2,r18,64
18006a4c:	1000a826 	beq	r2,zero,18006cf0 <___vfprintf_internal_r+0x1b90>
18006a50:	d8c02e17 	ldw	r3,184(sp)
18006a54:	002d883a 	mov	r22,zero
18006a58:	1cc0000b 	ldhu	r19,0(r3)
18006a5c:	18c00104 	addi	r3,r3,4
18006a60:	d8c02e15 	stw	r3,184(sp)
18006a64:	003caf06 	br	18005d24 <__alt_data_end+0xf8005d24>
18006a68:	d9002e17 	ldw	r4,184(sp)
18006a6c:	d9402a17 	ldw	r5,168(sp)
18006a70:	002d883a 	mov	r22,zero
18006a74:	20800104 	addi	r2,r4,4
18006a78:	24c00017 	ldw	r19,0(r4)
18006a7c:	283ebb0e 	bge	r5,zero,1800656c <__alt_data_end+0xf800656c>
18006a80:	003ef106 	br	18006648 <__alt_data_end+0xf8006648>
18006a84:	9080040c 	andi	r2,r18,16
18006a88:	1000921e 	bne	r2,zero,18006cd4 <___vfprintf_internal_r+0x1b74>
18006a8c:	9480100c 	andi	r18,r18,64
18006a90:	90013926 	beq	r18,zero,18006f78 <___vfprintf_internal_r+0x1e18>
18006a94:	d9402e17 	ldw	r5,184(sp)
18006a98:	d8c02f17 	ldw	r3,188(sp)
18006a9c:	28800017 	ldw	r2,0(r5)
18006aa0:	29400104 	addi	r5,r5,4
18006aa4:	d9402e15 	stw	r5,184(sp)
18006aa8:	10c0000d 	sth	r3,0(r2)
18006aac:	0039e406 	br	18005240 <__alt_data_end+0xf8005240>
18006ab0:	9080100c 	andi	r2,r18,64
18006ab4:	10008026 	beq	r2,zero,18006cb8 <___vfprintf_internal_r+0x1b58>
18006ab8:	d8802e17 	ldw	r2,184(sp)
18006abc:	14c0000f 	ldh	r19,0(r2)
18006ac0:	10800104 	addi	r2,r2,4
18006ac4:	d8802e15 	stw	r2,184(sp)
18006ac8:	982dd7fa 	srai	r22,r19,31
18006acc:	b005883a 	mov	r2,r22
18006ad0:	003af706 	br	180056b0 <__alt_data_end+0xf80056b0>
18006ad4:	9080100c 	andi	r2,r18,64
18006ad8:	d8002785 	stb	zero,158(sp)
18006adc:	10008a1e 	bne	r2,zero,18006d08 <___vfprintf_internal_r+0x1ba8>
18006ae0:	d9002e17 	ldw	r4,184(sp)
18006ae4:	d9402a17 	ldw	r5,168(sp)
18006ae8:	002d883a 	mov	r22,zero
18006aec:	20800104 	addi	r2,r4,4
18006af0:	24c00017 	ldw	r19,0(r4)
18006af4:	283e4b0e 	bge	r5,zero,18006424 <__alt_data_end+0xf8006424>
18006af8:	9d86b03a 	or	r3,r19,r22
18006afc:	d8802e15 	stw	r2,184(sp)
18006b00:	183e4c1e 	bne	r3,zero,18006434 <__alt_data_end+0xf8006434>
18006b04:	0039883a 	mov	fp,zero
18006b08:	0005883a 	mov	r2,zero
18006b0c:	003d4006 	br	18006010 <__alt_data_end+0xf8006010>
18006b10:	01460074 	movhi	r5,6145
18006b14:	29590284 	addi	r5,r5,25610
18006b18:	d9402c15 	stw	r5,176(sp)
18006b1c:	d9402c17 	ldw	r5,176(sp)
18006b20:	1c47883a 	add	r3,r3,r17
18006b24:	10800044 	addi	r2,r2,1
18006b28:	41400015 	stw	r5,0(r8)
18006b2c:	44400115 	stw	r17,4(r8)
18006b30:	d8c02015 	stw	r3,128(sp)
18006b34:	d8801f15 	stw	r2,124(sp)
18006b38:	010001c4 	movi	r4,7
18006b3c:	20bec816 	blt	r4,r2,18006660 <__alt_data_end+0xf8006660>
18006b40:	42000204 	addi	r8,r8,8
18006b44:	003ecd06 	br	1800667c <__alt_data_end+0xf800667c>
18006b48:	d9002a17 	ldw	r4,168(sp)
18006b4c:	d8002785 	stb	zero,158(sp)
18006b50:	203d2d16 	blt	r4,zero,18006008 <__alt_data_end+0xf8006008>
18006b54:	00bfdfc4 	movi	r2,-129
18006b58:	90a4703a 	and	r18,r18,r2
18006b5c:	003a6106 	br	180054e4 <__alt_data_end+0xf80054e4>
18006b60:	01060074 	movhi	r4,6145
18006b64:	21190284 	addi	r4,r4,25610
18006b68:	d9002c15 	stw	r4,176(sp)
18006b6c:	003bea06 	br	18005b18 <__alt_data_end+0xf8005b18>
18006b70:	d9002d17 	ldw	r4,180(sp)
18006b74:	d9801e04 	addi	r6,sp,120
18006b78:	b80b883a 	mov	r5,r23
18006b7c:	800deb00 	call	1800deb0 <__sprint_r>
18006b80:	103a7b1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006b84:	d8c02017 	ldw	r3,128(sp)
18006b88:	da000404 	addi	r8,sp,16
18006b8c:	003d4106 	br	18006094 <__alt_data_end+0xf8006094>
18006b90:	d8801f17 	ldw	r2,124(sp)
18006b94:	01460074 	movhi	r5,6145
18006b98:	01000044 	movi	r4,1
18006b9c:	18c00044 	addi	r3,r3,1
18006ba0:	10800044 	addi	r2,r2,1
18006ba4:	2958fa04 	addi	r5,r5,25576
18006ba8:	41000115 	stw	r4,4(r8)
18006bac:	41400015 	stw	r5,0(r8)
18006bb0:	d8c02015 	stw	r3,128(sp)
18006bb4:	d8801f15 	stw	r2,124(sp)
18006bb8:	010001c4 	movi	r4,7
18006bbc:	20805c16 	blt	r4,r2,18006d30 <___vfprintf_internal_r+0x1bd0>
18006bc0:	42000204 	addi	r8,r8,8
18006bc4:	8800041e 	bne	r17,zero,18006bd8 <___vfprintf_internal_r+0x1a78>
18006bc8:	d8803317 	ldw	r2,204(sp)
18006bcc:	1000021e 	bne	r2,zero,18006bd8 <___vfprintf_internal_r+0x1a78>
18006bd0:	9080004c 	andi	r2,r18,1
18006bd4:	103be726 	beq	r2,zero,18005b74 <__alt_data_end+0xf8005b74>
18006bd8:	d9003717 	ldw	r4,220(sp)
18006bdc:	d8801f17 	ldw	r2,124(sp)
18006be0:	d9403417 	ldw	r5,208(sp)
18006be4:	20c7883a 	add	r3,r4,r3
18006be8:	10800044 	addi	r2,r2,1
18006bec:	41000115 	stw	r4,4(r8)
18006bf0:	41400015 	stw	r5,0(r8)
18006bf4:	d8c02015 	stw	r3,128(sp)
18006bf8:	d8801f15 	stw	r2,124(sp)
18006bfc:	010001c4 	movi	r4,7
18006c00:	20812116 	blt	r4,r2,18007088 <___vfprintf_internal_r+0x1f28>
18006c04:	42000204 	addi	r8,r8,8
18006c08:	0463c83a 	sub	r17,zero,r17
18006c0c:	0440730e 	bge	zero,r17,18006ddc <___vfprintf_internal_r+0x1c7c>
18006c10:	05800404 	movi	r22,16
18006c14:	b440860e 	bge	r22,r17,18006e30 <___vfprintf_internal_r+0x1cd0>
18006c18:	01460074 	movhi	r5,6145
18006c1c:	29590284 	addi	r5,r5,25610
18006c20:	d9402c15 	stw	r5,176(sp)
18006c24:	070001c4 	movi	fp,7
18006c28:	dcc02d17 	ldw	r19,180(sp)
18006c2c:	00000306 	br	18006c3c <___vfprintf_internal_r+0x1adc>
18006c30:	42000204 	addi	r8,r8,8
18006c34:	8c7ffc04 	addi	r17,r17,-16
18006c38:	b440800e 	bge	r22,r17,18006e3c <___vfprintf_internal_r+0x1cdc>
18006c3c:	18c00404 	addi	r3,r3,16
18006c40:	10800044 	addi	r2,r2,1
18006c44:	45000015 	stw	r20,0(r8)
18006c48:	45800115 	stw	r22,4(r8)
18006c4c:	d8c02015 	stw	r3,128(sp)
18006c50:	d8801f15 	stw	r2,124(sp)
18006c54:	e0bff60e 	bge	fp,r2,18006c30 <__alt_data_end+0xf8006c30>
18006c58:	d9801e04 	addi	r6,sp,120
18006c5c:	b80b883a 	mov	r5,r23
18006c60:	9809883a 	mov	r4,r19
18006c64:	800deb00 	call	1800deb0 <__sprint_r>
18006c68:	103a411e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006c6c:	d8c02017 	ldw	r3,128(sp)
18006c70:	d8801f17 	ldw	r2,124(sp)
18006c74:	da000404 	addi	r8,sp,16
18006c78:	003fee06 	br	18006c34 <__alt_data_end+0xf8006c34>
18006c7c:	00bfffc4 	movi	r2,-1
18006c80:	003a3f06 	br	18005580 <__alt_data_end+0xf8005580>
18006c84:	008011c4 	movi	r2,71
18006c88:	1440b816 	blt	r2,r17,18006f6c <___vfprintf_internal_r+0x1e0c>
18006c8c:	04060074 	movhi	r16,6145
18006c90:	8418ec04 	addi	r16,r16,25520
18006c94:	00c000c4 	movi	r3,3
18006c98:	00bfdfc4 	movi	r2,-129
18006c9c:	d8c02915 	stw	r3,164(sp)
18006ca0:	90a4703a 	and	r18,r18,r2
18006ca4:	df002783 	ldbu	fp,158(sp)
18006ca8:	d8c02b15 	stw	r3,172(sp)
18006cac:	d8002a15 	stw	zero,168(sp)
18006cb0:	d8003215 	stw	zero,200(sp)
18006cb4:	003b0706 	br	180058d4 <__alt_data_end+0xf80058d4>
18006cb8:	d8c02e17 	ldw	r3,184(sp)
18006cbc:	1cc00017 	ldw	r19,0(r3)
18006cc0:	18c00104 	addi	r3,r3,4
18006cc4:	d8c02e15 	stw	r3,184(sp)
18006cc8:	982dd7fa 	srai	r22,r19,31
18006ccc:	b005883a 	mov	r2,r22
18006cd0:	003a7706 	br	180056b0 <__alt_data_end+0xf80056b0>
18006cd4:	d8c02e17 	ldw	r3,184(sp)
18006cd8:	d9002f17 	ldw	r4,188(sp)
18006cdc:	18800017 	ldw	r2,0(r3)
18006ce0:	18c00104 	addi	r3,r3,4
18006ce4:	d8c02e15 	stw	r3,184(sp)
18006ce8:	11000015 	stw	r4,0(r2)
18006cec:	00395406 	br	18005240 <__alt_data_end+0xf8005240>
18006cf0:	d9002e17 	ldw	r4,184(sp)
18006cf4:	002d883a 	mov	r22,zero
18006cf8:	24c00017 	ldw	r19,0(r4)
18006cfc:	21000104 	addi	r4,r4,4
18006d00:	d9002e15 	stw	r4,184(sp)
18006d04:	003c0706 	br	18005d24 <__alt_data_end+0xf8005d24>
18006d08:	d9402e17 	ldw	r5,184(sp)
18006d0c:	d8c02a17 	ldw	r3,168(sp)
18006d10:	002d883a 	mov	r22,zero
18006d14:	28800104 	addi	r2,r5,4
18006d18:	2cc0000b 	ldhu	r19,0(r5)
18006d1c:	183dc10e 	bge	r3,zero,18006424 <__alt_data_end+0xf8006424>
18006d20:	003f7506 	br	18006af8 <__alt_data_end+0xf8006af8>
18006d24:	04060074 	movhi	r16,6145
18006d28:	8418ea04 	addi	r16,r16,25512
18006d2c:	003aa706 	br	180057cc <__alt_data_end+0xf80057cc>
18006d30:	d9002d17 	ldw	r4,180(sp)
18006d34:	d9801e04 	addi	r6,sp,120
18006d38:	b80b883a 	mov	r5,r23
18006d3c:	800deb00 	call	1800deb0 <__sprint_r>
18006d40:	103a0b1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006d44:	dc402617 	ldw	r17,152(sp)
18006d48:	d8c02017 	ldw	r3,128(sp)
18006d4c:	da000404 	addi	r8,sp,16
18006d50:	003f9c06 	br	18006bc4 <__alt_data_end+0xf8006bc4>
18006d54:	ac400043 	ldbu	r17,1(r21)
18006d58:	84000814 	ori	r16,r16,32
18006d5c:	ad400044 	addi	r21,r21,1
18006d60:	8c403fcc 	andi	r17,r17,255
18006d64:	8c40201c 	xori	r17,r17,128
18006d68:	8c7fe004 	addi	r17,r17,-128
18006d6c:	00395e06 	br	180052e8 <__alt_data_end+0xf80052e8>
18006d70:	d8c02e15 	stw	r3,184(sp)
18006d74:	0039883a 	mov	fp,zero
18006d78:	003e3506 	br	18006650 <__alt_data_end+0xf8006650>
18006d7c:	d9002d17 	ldw	r4,180(sp)
18006d80:	d9801e04 	addi	r6,sp,120
18006d84:	b80b883a 	mov	r5,r23
18006d88:	800deb00 	call	1800deb0 <__sprint_r>
18006d8c:	1039f81e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006d90:	d8c02017 	ldw	r3,128(sp)
18006d94:	da000404 	addi	r8,sp,16
18006d98:	003cd006 	br	180060dc <__alt_data_end+0xf80060dc>
18006d9c:	8009883a 	mov	r4,r16
18006da0:	df003d15 	stw	fp,244(sp)
18006da4:	8002e0c0 	call	18002e0c <strlen>
18006da8:	d8802b15 	stw	r2,172(sp)
18006dac:	da003d17 	ldw	r8,244(sp)
18006db0:	103c200e 	bge	r2,zero,18005e34 <__alt_data_end+0xf8005e34>
18006db4:	0005883a 	mov	r2,zero
18006db8:	003c1e06 	br	18005e34 <__alt_data_end+0xf8005e34>
18006dbc:	d9002d17 	ldw	r4,180(sp)
18006dc0:	d9801e04 	addi	r6,sp,120
18006dc4:	b80b883a 	mov	r5,r23
18006dc8:	800deb00 	call	1800deb0 <__sprint_r>
18006dcc:	1039e81e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006dd0:	d8c02017 	ldw	r3,128(sp)
18006dd4:	d8801f17 	ldw	r2,124(sp)
18006dd8:	da000404 	addi	r8,sp,16
18006ddc:	d9403317 	ldw	r5,204(sp)
18006de0:	10800044 	addi	r2,r2,1
18006de4:	44000015 	stw	r16,0(r8)
18006de8:	28c7883a 	add	r3,r5,r3
18006dec:	003b5b06 	br	18005b5c <__alt_data_end+0xf8005b5c>
18006df0:	01060074 	movhi	r4,6145
18006df4:	21190684 	addi	r4,r4,25626
18006df8:	d9003515 	stw	r4,212(sp)
18006dfc:	003af206 	br	180059c8 <__alt_data_end+0xf80059c8>
18006e00:	013fffc4 	movi	r4,-1
18006e04:	003a0806 	br	18005628 <__alt_data_end+0xf8005628>
18006e08:	0023883a 	mov	r17,zero
18006e0c:	003d9d06 	br	18006484 <__alt_data_end+0xf8006484>
18006e10:	d9002d17 	ldw	r4,180(sp)
18006e14:	d9801e04 	addi	r6,sp,120
18006e18:	b80b883a 	mov	r5,r23
18006e1c:	800deb00 	call	1800deb0 <__sprint_r>
18006e20:	1039d31e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006e24:	d8c02017 	ldw	r3,128(sp)
18006e28:	da000404 	addi	r8,sp,16
18006e2c:	003d9406 	br	18006480 <__alt_data_end+0xf8006480>
18006e30:	01060074 	movhi	r4,6145
18006e34:	21190284 	addi	r4,r4,25610
18006e38:	d9002c15 	stw	r4,176(sp)
18006e3c:	d9002c17 	ldw	r4,176(sp)
18006e40:	1c47883a 	add	r3,r3,r17
18006e44:	10800044 	addi	r2,r2,1
18006e48:	41000015 	stw	r4,0(r8)
18006e4c:	44400115 	stw	r17,4(r8)
18006e50:	d8c02015 	stw	r3,128(sp)
18006e54:	d8801f15 	stw	r2,124(sp)
18006e58:	010001c4 	movi	r4,7
18006e5c:	20bfd716 	blt	r4,r2,18006dbc <__alt_data_end+0xf8006dbc>
18006e60:	42000204 	addi	r8,r8,8
18006e64:	003fdd06 	br	18006ddc <__alt_data_end+0xf8006ddc>
18006e68:	d9002d17 	ldw	r4,180(sp)
18006e6c:	d9801e04 	addi	r6,sp,120
18006e70:	b80b883a 	mov	r5,r23
18006e74:	800deb00 	call	1800deb0 <__sprint_r>
18006e78:	1039bd1e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006e7c:	d8802617 	ldw	r2,152(sp)
18006e80:	d8c02017 	ldw	r3,128(sp)
18006e84:	da000404 	addi	r8,sp,16
18006e88:	003e1006 	br	180066cc <__alt_data_end+0xf80066cc>
18006e8c:	00800044 	movi	r2,1
18006e90:	10803fcc 	andi	r2,r2,255
18006e94:	00c00044 	movi	r3,1
18006e98:	10fa0d26 	beq	r2,r3,180056d0 <__alt_data_end+0xf80056d0>
18006e9c:	00c00084 	movi	r3,2
18006ea0:	10fbaf26 	beq	r2,r3,18005d60 <__alt_data_end+0xf8005d60>
18006ea4:	003a6d06 	br	1800585c <__alt_data_end+0xf800585c>
18006ea8:	01060074 	movhi	r4,6145
18006eac:	21190684 	addi	r4,r4,25626
18006eb0:	d9003515 	stw	r4,212(sp)
18006eb4:	003b5406 	br	18005c08 <__alt_data_end+0xf8005c08>
18006eb8:	d8802a17 	ldw	r2,168(sp)
18006ebc:	00c00184 	movi	r3,6
18006ec0:	1880012e 	bgeu	r3,r2,18006ec8 <___vfprintf_internal_r+0x1d68>
18006ec4:	1805883a 	mov	r2,r3
18006ec8:	d8802b15 	stw	r2,172(sp)
18006ecc:	1000ef16 	blt	r2,zero,1800728c <___vfprintf_internal_r+0x212c>
18006ed0:	04060074 	movhi	r16,6145
18006ed4:	d8802915 	stw	r2,164(sp)
18006ed8:	dcc02e15 	stw	r19,184(sp)
18006edc:	d8002a15 	stw	zero,168(sp)
18006ee0:	d8003215 	stw	zero,200(sp)
18006ee4:	8418f804 	addi	r16,r16,25568
18006ee8:	0039883a 	mov	fp,zero
18006eec:	003a8006 	br	180058f0 <__alt_data_end+0xf80058f0>
18006ef0:	0021883a 	mov	r16,zero
18006ef4:	003e0706 	br	18006714 <__alt_data_end+0xf8006714>
18006ef8:	d9002d17 	ldw	r4,180(sp)
18006efc:	d9801e04 	addi	r6,sp,120
18006f00:	b80b883a 	mov	r5,r23
18006f04:	800deb00 	call	1800deb0 <__sprint_r>
18006f08:	1039991e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
18006f0c:	d8802617 	ldw	r2,152(sp)
18006f10:	d9403317 	ldw	r5,204(sp)
18006f14:	d8c02017 	ldw	r3,128(sp)
18006f18:	da000404 	addi	r8,sp,16
18006f1c:	2885c83a 	sub	r2,r5,r2
18006f20:	003dfb06 	br	18006710 <__alt_data_end+0xf8006710>
18006f24:	9080004c 	andi	r2,r18,1
18006f28:	103e8f1e 	bne	r2,zero,18006968 <__alt_data_end+0xf8006968>
18006f2c:	d8802117 	ldw	r2,132(sp)
18006f30:	003e9e06 	br	180069ac <__alt_data_end+0xf80069ac>
18006f34:	1025883a 	mov	r18,r2
18006f38:	0039883a 	mov	fp,zero
18006f3c:	00800084 	movi	r2,2
18006f40:	003fd306 	br	18006e90 <__alt_data_end+0xf8006e90>
18006f44:	07000b44 	movi	fp,45
18006f48:	df002785 	stb	fp,158(sp)
18006f4c:	003a1b06 	br	180057bc <__alt_data_end+0xf80057bc>
18006f50:	00c00b44 	movi	r3,45
18006f54:	d8c02785 	stb	r3,158(sp)
18006f58:	d8802915 	stw	r2,164(sp)
18006f5c:	dc802c17 	ldw	r18,176(sp)
18006f60:	d8002a15 	stw	zero,168(sp)
18006f64:	07000b44 	movi	fp,45
18006f68:	003a5e06 	br	180058e4 <__alt_data_end+0xf80058e4>
18006f6c:	04060074 	movhi	r16,6145
18006f70:	8418ed04 	addi	r16,r16,25524
18006f74:	003f4706 	br	18006c94 <__alt_data_end+0xf8006c94>
18006f78:	d9002e17 	ldw	r4,184(sp)
18006f7c:	d9402f17 	ldw	r5,188(sp)
18006f80:	20800017 	ldw	r2,0(r4)
18006f84:	21000104 	addi	r4,r4,4
18006f88:	d9002e15 	stw	r4,184(sp)
18006f8c:	11400015 	stw	r5,0(r2)
18006f90:	0038ab06 	br	18005240 <__alt_data_end+0xf8005240>
18006f94:	dd802617 	ldw	r22,152(sp)
18006f98:	00bfff44 	movi	r2,-3
18006f9c:	b0801c16 	blt	r22,r2,18007010 <___vfprintf_internal_r+0x1eb0>
18006fa0:	d9402a17 	ldw	r5,168(sp)
18006fa4:	2d801a16 	blt	r5,r22,18007010 <___vfprintf_internal_r+0x1eb0>
18006fa8:	dd803215 	stw	r22,200(sp)
18006fac:	003e8906 	br	180069d4 <__alt_data_end+0xf80069d4>
18006fb0:	01060074 	movhi	r4,6145
18006fb4:	21190284 	addi	r4,r4,25610
18006fb8:	d9002c15 	stw	r4,176(sp)
18006fbc:	003c9106 	br	18006204 <__alt_data_end+0xf8006204>
18006fc0:	e005883a 	mov	r2,fp
18006fc4:	003e7906 	br	180069ac <__alt_data_end+0xf80069ac>
18006fc8:	d9002a17 	ldw	r4,168(sp)
18006fcc:	df002783 	ldbu	fp,158(sp)
18006fd0:	dcc02e15 	stw	r19,184(sp)
18006fd4:	d9002915 	stw	r4,164(sp)
18006fd8:	d9002b15 	stw	r4,172(sp)
18006fdc:	d8002a15 	stw	zero,168(sp)
18006fe0:	d8003215 	stw	zero,200(sp)
18006fe4:	003a3b06 	br	180058d4 <__alt_data_end+0xf80058d4>
18006fe8:	9080004c 	andi	r2,r18,1
18006fec:	0039883a 	mov	fp,zero
18006ff0:	10000426 	beq	r2,zero,18007004 <___vfprintf_internal_r+0x1ea4>
18006ff4:	00800c04 	movi	r2,48
18006ff8:	dc001dc4 	addi	r16,sp,119
18006ffc:	d8801dc5 	stb	r2,119(sp)
18007000:	003b6406 	br	18005d94 <__alt_data_end+0xf8005d94>
18007004:	d8002b15 	stw	zero,172(sp)
18007008:	dc001e04 	addi	r16,sp,120
1800700c:	003a2b06 	br	180058bc <__alt_data_end+0xf80058bc>
18007010:	8c7fff84 	addi	r17,r17,-2
18007014:	b5bfffc4 	addi	r22,r22,-1
18007018:	dd802615 	stw	r22,152(sp)
1800701c:	dc4022c5 	stb	r17,139(sp)
18007020:	b000bf16 	blt	r22,zero,18007320 <___vfprintf_internal_r+0x21c0>
18007024:	00800ac4 	movi	r2,43
18007028:	d8802305 	stb	r2,140(sp)
1800702c:	00800244 	movi	r2,9
18007030:	15807016 	blt	r2,r22,180071f4 <___vfprintf_internal_r+0x2094>
18007034:	00800c04 	movi	r2,48
18007038:	b5800c04 	addi	r22,r22,48
1800703c:	d8802345 	stb	r2,141(sp)
18007040:	dd802385 	stb	r22,142(sp)
18007044:	d88023c4 	addi	r2,sp,143
18007048:	df0022c4 	addi	fp,sp,139
1800704c:	d8c03317 	ldw	r3,204(sp)
18007050:	1739c83a 	sub	fp,r2,fp
18007054:	d9003317 	ldw	r4,204(sp)
18007058:	e0c7883a 	add	r3,fp,r3
1800705c:	df003a15 	stw	fp,232(sp)
18007060:	d8c02b15 	stw	r3,172(sp)
18007064:	00800044 	movi	r2,1
18007068:	1100b30e 	bge	r2,r4,18007338 <___vfprintf_internal_r+0x21d8>
1800706c:	d8c02b17 	ldw	r3,172(sp)
18007070:	18c00044 	addi	r3,r3,1
18007074:	d8c02b15 	stw	r3,172(sp)
18007078:	1805883a 	mov	r2,r3
1800707c:	1800ac16 	blt	r3,zero,18007330 <___vfprintf_internal_r+0x21d0>
18007080:	d8003215 	stw	zero,200(sp)
18007084:	003e5d06 	br	180069fc <__alt_data_end+0xf80069fc>
18007088:	d9002d17 	ldw	r4,180(sp)
1800708c:	d9801e04 	addi	r6,sp,120
18007090:	b80b883a 	mov	r5,r23
18007094:	800deb00 	call	1800deb0 <__sprint_r>
18007098:	1039351e 	bne	r2,zero,18005570 <__alt_data_end+0xf8005570>
1800709c:	dc402617 	ldw	r17,152(sp)
180070a0:	d8c02017 	ldw	r3,128(sp)
180070a4:	d8801f17 	ldw	r2,124(sp)
180070a8:	da000404 	addi	r8,sp,16
180070ac:	003ed606 	br	18006c08 <__alt_data_end+0xf8006c08>
180070b0:	182b883a 	mov	r21,r3
180070b4:	d8002a15 	stw	zero,168(sp)
180070b8:	00388c06 	br	180052ec <__alt_data_end+0xf80052ec>
180070bc:	d8802a17 	ldw	r2,168(sp)
180070c0:	103e071e 	bne	r2,zero,180068e0 <__alt_data_end+0xf80068e0>
180070c4:	dc002a15 	stw	r16,168(sp)
180070c8:	003e0506 	br	180068e0 <__alt_data_end+0xf80068e0>
180070cc:	d9002a17 	ldw	r4,168(sp)
180070d0:	20c00044 	addi	r3,r4,1
180070d4:	003e0f06 	br	18006914 <__alt_data_end+0xf8006914>
180070d8:	01400184 	movi	r5,6
180070dc:	d9402a15 	stw	r5,168(sp)
180070e0:	003dff06 	br	180068e0 <__alt_data_end+0xf80068e0>
180070e4:	d8802104 	addi	r2,sp,132
180070e8:	d8800315 	stw	r2,12(sp)
180070ec:	d8802504 	addi	r2,sp,148
180070f0:	d8800215 	stw	r2,8(sp)
180070f4:	d8802604 	addi	r2,sp,152
180070f8:	d8800115 	stw	r2,4(sp)
180070fc:	d8802a17 	ldw	r2,168(sp)
18007100:	d9403617 	ldw	r5,216(sp)
18007104:	d9002d17 	ldw	r4,180(sp)
18007108:	d8800015 	stw	r2,0(sp)
1800710c:	01c000c4 	movi	r7,3
18007110:	980d883a 	mov	r6,r19
18007114:	da003d15 	stw	r8,244(sp)
18007118:	80078900 	call	18007890 <_dtoa_r>
1800711c:	d8c02a17 	ldw	r3,168(sp)
18007120:	da003d17 	ldw	r8,244(sp)
18007124:	1021883a 	mov	r16,r2
18007128:	10f9883a 	add	fp,r2,r3
1800712c:	81000007 	ldb	r4,0(r16)
18007130:	00800c04 	movi	r2,48
18007134:	20805e26 	beq	r4,r2,180072b0 <___vfprintf_internal_r+0x2150>
18007138:	d8c02617 	ldw	r3,152(sp)
1800713c:	e0f9883a 	add	fp,fp,r3
18007140:	003e0a06 	br	1800696c <__alt_data_end+0xf800696c>
18007144:	00c00b44 	movi	r3,45
18007148:	24e0003c 	xorhi	r19,r4,32768
1800714c:	d8c02905 	stb	r3,164(sp)
18007150:	003de906 	br	180068f8 <__alt_data_end+0xf80068f8>
18007154:	d8c03217 	ldw	r3,200(sp)
18007158:	00c07a0e 	bge	zero,r3,18007344 <___vfprintf_internal_r+0x21e4>
1800715c:	00800044 	movi	r2,1
18007160:	d9003317 	ldw	r4,204(sp)
18007164:	1105883a 	add	r2,r2,r4
18007168:	d8802b15 	stw	r2,172(sp)
1800716c:	10004e16 	blt	r2,zero,180072a8 <___vfprintf_internal_r+0x2148>
18007170:	044019c4 	movi	r17,103
18007174:	003e2106 	br	180069fc <__alt_data_end+0xf80069fc>
18007178:	d9002a17 	ldw	r4,168(sp)
1800717c:	d8802104 	addi	r2,sp,132
18007180:	d8800315 	stw	r2,12(sp)
18007184:	d9000015 	stw	r4,0(sp)
18007188:	d8802504 	addi	r2,sp,148
1800718c:	d9403617 	ldw	r5,216(sp)
18007190:	d9002d17 	ldw	r4,180(sp)
18007194:	d8800215 	stw	r2,8(sp)
18007198:	d8802604 	addi	r2,sp,152
1800719c:	d8800115 	stw	r2,4(sp)
180071a0:	01c000c4 	movi	r7,3
180071a4:	980d883a 	mov	r6,r19
180071a8:	da003d15 	stw	r8,244(sp)
180071ac:	80078900 	call	18007890 <_dtoa_r>
180071b0:	d8c02a17 	ldw	r3,168(sp)
180071b4:	da003d17 	ldw	r8,244(sp)
180071b8:	1021883a 	mov	r16,r2
180071bc:	00801184 	movi	r2,70
180071c0:	80f9883a 	add	fp,r16,r3
180071c4:	88bfd926 	beq	r17,r2,1800712c <__alt_data_end+0xf800712c>
180071c8:	003de806 	br	1800696c <__alt_data_end+0xf800696c>
180071cc:	d9002a17 	ldw	r4,168(sp)
180071d0:	00c04d0e 	bge	zero,r3,18007308 <___vfprintf_internal_r+0x21a8>
180071d4:	2000441e 	bne	r4,zero,180072e8 <___vfprintf_internal_r+0x2188>
180071d8:	9480004c 	andi	r18,r18,1
180071dc:	9000421e 	bne	r18,zero,180072e8 <___vfprintf_internal_r+0x2188>
180071e0:	1805883a 	mov	r2,r3
180071e4:	18006f16 	blt	r3,zero,180073a4 <___vfprintf_internal_r+0x2244>
180071e8:	d8c03217 	ldw	r3,200(sp)
180071ec:	d8c02b15 	stw	r3,172(sp)
180071f0:	003e0206 	br	180069fc <__alt_data_end+0xf80069fc>
180071f4:	df0022c4 	addi	fp,sp,139
180071f8:	dc002a15 	stw	r16,168(sp)
180071fc:	4027883a 	mov	r19,r8
18007200:	e021883a 	mov	r16,fp
18007204:	b009883a 	mov	r4,r22
18007208:	01400284 	movi	r5,10
1800720c:	8002a340 	call	18002a34 <__modsi3>
18007210:	10800c04 	addi	r2,r2,48
18007214:	843fffc4 	addi	r16,r16,-1
18007218:	b009883a 	mov	r4,r22
1800721c:	01400284 	movi	r5,10
18007220:	80800005 	stb	r2,0(r16)
18007224:	80029b00 	call	180029b0 <__divsi3>
18007228:	102d883a 	mov	r22,r2
1800722c:	00800244 	movi	r2,9
18007230:	15bff416 	blt	r2,r22,18007204 <__alt_data_end+0xf8007204>
18007234:	9811883a 	mov	r8,r19
18007238:	b0800c04 	addi	r2,r22,48
1800723c:	8027883a 	mov	r19,r16
18007240:	997fffc4 	addi	r5,r19,-1
18007244:	98bfffc5 	stb	r2,-1(r19)
18007248:	dc002a17 	ldw	r16,168(sp)
1800724c:	2f006d2e 	bgeu	r5,fp,18007404 <___vfprintf_internal_r+0x22a4>
18007250:	d9c02384 	addi	r7,sp,142
18007254:	3ccfc83a 	sub	r7,r7,r19
18007258:	d9002344 	addi	r4,sp,141
1800725c:	e1cf883a 	add	r7,fp,r7
18007260:	00000106 	br	18007268 <___vfprintf_internal_r+0x2108>
18007264:	28800003 	ldbu	r2,0(r5)
18007268:	20800005 	stb	r2,0(r4)
1800726c:	21000044 	addi	r4,r4,1
18007270:	29400044 	addi	r5,r5,1
18007274:	393ffb1e 	bne	r7,r4,18007264 <__alt_data_end+0xf8007264>
18007278:	d8802304 	addi	r2,sp,140
1800727c:	14c5c83a 	sub	r2,r2,r19
18007280:	d8c02344 	addi	r3,sp,141
18007284:	1885883a 	add	r2,r3,r2
18007288:	003f7006 	br	1800704c <__alt_data_end+0xf800704c>
1800728c:	0005883a 	mov	r2,zero
18007290:	003f0f06 	br	18006ed0 <__alt_data_end+0xf8006ed0>
18007294:	d8c03217 	ldw	r3,200(sp)
18007298:	18c00044 	addi	r3,r3,1
1800729c:	d8c02b15 	stw	r3,172(sp)
180072a0:	1805883a 	mov	r2,r3
180072a4:	183fb20e 	bge	r3,zero,18007170 <__alt_data_end+0xf8007170>
180072a8:	0005883a 	mov	r2,zero
180072ac:	003fb006 	br	18007170 <__alt_data_end+0xf8007170>
180072b0:	d9003617 	ldw	r4,216(sp)
180072b4:	000d883a 	mov	r6,zero
180072b8:	000f883a 	mov	r7,zero
180072bc:	980b883a 	mov	r5,r19
180072c0:	d8c03c15 	stw	r3,240(sp)
180072c4:	da003d15 	stw	r8,244(sp)
180072c8:	8011d400 	call	18011d40 <__eqdf2>
180072cc:	d8c03c17 	ldw	r3,240(sp)
180072d0:	da003d17 	ldw	r8,244(sp)
180072d4:	103f9826 	beq	r2,zero,18007138 <__alt_data_end+0xf8007138>
180072d8:	00800044 	movi	r2,1
180072dc:	10c7c83a 	sub	r3,r2,r3
180072e0:	d8c02615 	stw	r3,152(sp)
180072e4:	003f9506 	br	1800713c <__alt_data_end+0xf800713c>
180072e8:	d9002a17 	ldw	r4,168(sp)
180072ec:	d8c03217 	ldw	r3,200(sp)
180072f0:	20800044 	addi	r2,r4,1
180072f4:	1885883a 	add	r2,r3,r2
180072f8:	d8802b15 	stw	r2,172(sp)
180072fc:	103dbf0e 	bge	r2,zero,180069fc <__alt_data_end+0xf80069fc>
18007300:	0005883a 	mov	r2,zero
18007304:	003dbd06 	br	180069fc <__alt_data_end+0xf80069fc>
18007308:	2000201e 	bne	r4,zero,1800738c <___vfprintf_internal_r+0x222c>
1800730c:	9480004c 	andi	r18,r18,1
18007310:	90001e1e 	bne	r18,zero,1800738c <___vfprintf_internal_r+0x222c>
18007314:	00800044 	movi	r2,1
18007318:	d8802b15 	stw	r2,172(sp)
1800731c:	003db706 	br	180069fc <__alt_data_end+0xf80069fc>
18007320:	00800b44 	movi	r2,45
18007324:	05adc83a 	sub	r22,zero,r22
18007328:	d8802305 	stb	r2,140(sp)
1800732c:	003f3f06 	br	1800702c <__alt_data_end+0xf800702c>
18007330:	0005883a 	mov	r2,zero
18007334:	003f5206 	br	18007080 <__alt_data_end+0xf8007080>
18007338:	90a4703a 	and	r18,r18,r2
1800733c:	903f4e26 	beq	r18,zero,18007078 <__alt_data_end+0xf8007078>
18007340:	003f4a06 	br	1800706c <__alt_data_end+0xf800706c>
18007344:	00800084 	movi	r2,2
18007348:	10c5c83a 	sub	r2,r2,r3
1800734c:	003f8406 	br	18007160 <__alt_data_end+0xf8007160>
18007350:	d9402e17 	ldw	r5,184(sp)
18007354:	d9002e17 	ldw	r4,184(sp)
18007358:	ac400043 	ldbu	r17,1(r21)
1800735c:	29400017 	ldw	r5,0(r5)
18007360:	20800104 	addi	r2,r4,4
18007364:	d8802e15 	stw	r2,184(sp)
18007368:	d9402a15 	stw	r5,168(sp)
1800736c:	182b883a 	mov	r21,r3
18007370:	283e7b0e 	bge	r5,zero,18006d60 <__alt_data_end+0xf8006d60>
18007374:	8c403fcc 	andi	r17,r17,255
18007378:	017fffc4 	movi	r5,-1
1800737c:	8c40201c 	xori	r17,r17,128
18007380:	d9402a15 	stw	r5,168(sp)
18007384:	8c7fe004 	addi	r17,r17,-128
18007388:	0037d706 	br	180052e8 <__alt_data_end+0xf80052e8>
1800738c:	d8c02a17 	ldw	r3,168(sp)
18007390:	18c00084 	addi	r3,r3,2
18007394:	d8c02b15 	stw	r3,172(sp)
18007398:	1805883a 	mov	r2,r3
1800739c:	183d970e 	bge	r3,zero,180069fc <__alt_data_end+0xf80069fc>
180073a0:	003fd706 	br	18007300 <__alt_data_end+0xf8007300>
180073a4:	0005883a 	mov	r2,zero
180073a8:	003f8f06 	br	180071e8 <__alt_data_end+0xf80071e8>
180073ac:	9080004c 	andi	r2,r18,1
180073b0:	103f821e 	bne	r2,zero,180071bc <__alt_data_end+0xf80071bc>
180073b4:	d8802117 	ldw	r2,132(sp)
180073b8:	1405c83a 	sub	r2,r2,r16
180073bc:	d8803315 	stw	r2,204(sp)
180073c0:	b47ef426 	beq	r22,r17,18006f94 <__alt_data_end+0xf8006f94>
180073c4:	dd802617 	ldw	r22,152(sp)
180073c8:	003f1206 	br	18007014 <__alt_data_end+0xf8007014>
180073cc:	d8c02b03 	ldbu	r3,172(sp)
180073d0:	d8c02785 	stb	r3,158(sp)
180073d4:	0038df06 	br	18005754 <__alt_data_end+0xf8005754>
180073d8:	d8c02b03 	ldbu	r3,172(sp)
180073dc:	d8c02785 	stb	r3,158(sp)
180073e0:	0038aa06 	br	1800568c <__alt_data_end+0xf800568c>
180073e4:	d8c02b03 	ldbu	r3,172(sp)
180073e8:	d8c02785 	stb	r3,158(sp)
180073ec:	003a4306 	br	18005cfc <__alt_data_end+0xf8005cfc>
180073f0:	d8c02b03 	ldbu	r3,172(sp)
180073f4:	d8c02785 	stb	r3,158(sp)
180073f8:	003af506 	br	18005fd0 <__alt_data_end+0xf8005fd0>
180073fc:	0005883a 	mov	r2,zero
18007400:	003d7b06 	br	180069f0 <__alt_data_end+0xf80069f0>
18007404:	d8802344 	addi	r2,sp,141
18007408:	003f1006 	br	1800704c <__alt_data_end+0xf800704c>
1800740c:	d8c02b03 	ldbu	r3,172(sp)
18007410:	d8c02785 	stb	r3,158(sp)
18007414:	0038fd06 	br	1800580c <__alt_data_end+0xf800580c>
18007418:	d8c02b03 	ldbu	r3,172(sp)
1800741c:	d8c02785 	stb	r3,158(sp)
18007420:	003a9706 	br	18005e80 <__alt_data_end+0xf8005e80>
18007424:	d8c02b03 	ldbu	r3,172(sp)
18007428:	d8c02785 	stb	r3,158(sp)
1800742c:	003a1806 	br	18005c90 <__alt_data_end+0xf8005c90>
18007430:	d8c02b03 	ldbu	r3,172(sp)
18007434:	d8c02785 	stb	r3,158(sp)
18007438:	003abe06 	br	18005f34 <__alt_data_end+0xf8005f34>

1800743c <__vfprintf_internal>:
1800743c:	008600b4 	movhi	r2,6146
18007440:	10a11f04 	addi	r2,r2,-31620
18007444:	300f883a 	mov	r7,r6
18007448:	280d883a 	mov	r6,r5
1800744c:	200b883a 	mov	r5,r4
18007450:	11000017 	ldw	r4,0(r2)
18007454:	80051601 	jmpi	18005160 <___vfprintf_internal_r>

18007458 <__sbprintf>:
18007458:	2880030b 	ldhu	r2,12(r5)
1800745c:	2ac01917 	ldw	r11,100(r5)
18007460:	2a80038b 	ldhu	r10,14(r5)
18007464:	2a400717 	ldw	r9,28(r5)
18007468:	2a000917 	ldw	r8,36(r5)
1800746c:	defee204 	addi	sp,sp,-1144
18007470:	00c10004 	movi	r3,1024
18007474:	dc011a15 	stw	r16,1128(sp)
18007478:	10bfff4c 	andi	r2,r2,65533
1800747c:	2821883a 	mov	r16,r5
18007480:	d8cb883a 	add	r5,sp,r3
18007484:	dc811c15 	stw	r18,1136(sp)
18007488:	dc411b15 	stw	r17,1132(sp)
1800748c:	dfc11d15 	stw	ra,1140(sp)
18007490:	2025883a 	mov	r18,r4
18007494:	d881030d 	sth	r2,1036(sp)
18007498:	dac11915 	stw	r11,1124(sp)
1800749c:	da81038d 	sth	r10,1038(sp)
180074a0:	da410715 	stw	r9,1052(sp)
180074a4:	da010915 	stw	r8,1060(sp)
180074a8:	dec10015 	stw	sp,1024(sp)
180074ac:	dec10415 	stw	sp,1040(sp)
180074b0:	d8c10215 	stw	r3,1032(sp)
180074b4:	d8c10515 	stw	r3,1044(sp)
180074b8:	d8010615 	stw	zero,1048(sp)
180074bc:	80051600 	call	18005160 <___vfprintf_internal_r>
180074c0:	1023883a 	mov	r17,r2
180074c4:	10000416 	blt	r2,zero,180074d8 <__sbprintf+0x80>
180074c8:	d9410004 	addi	r5,sp,1024
180074cc:	9009883a 	mov	r4,r18
180074d0:	80091340 	call	18009134 <_fflush_r>
180074d4:	10000d1e 	bne	r2,zero,1800750c <__sbprintf+0xb4>
180074d8:	d881030b 	ldhu	r2,1036(sp)
180074dc:	1080100c 	andi	r2,r2,64
180074e0:	10000326 	beq	r2,zero,180074f0 <__sbprintf+0x98>
180074e4:	8080030b 	ldhu	r2,12(r16)
180074e8:	10801014 	ori	r2,r2,64
180074ec:	8080030d 	sth	r2,12(r16)
180074f0:	8805883a 	mov	r2,r17
180074f4:	dfc11d17 	ldw	ra,1140(sp)
180074f8:	dc811c17 	ldw	r18,1136(sp)
180074fc:	dc411b17 	ldw	r17,1132(sp)
18007500:	dc011a17 	ldw	r16,1128(sp)
18007504:	dec11e04 	addi	sp,sp,1144
18007508:	f800283a 	ret
1800750c:	047fffc4 	movi	r17,-1
18007510:	003ff106 	br	180074d8 <__alt_data_end+0xf80074d8>

18007514 <__swsetup_r>:
18007514:	008600b4 	movhi	r2,6146
18007518:	defffd04 	addi	sp,sp,-12
1800751c:	10a11f04 	addi	r2,r2,-31620
18007520:	dc400115 	stw	r17,4(sp)
18007524:	2023883a 	mov	r17,r4
18007528:	11000017 	ldw	r4,0(r2)
1800752c:	dc000015 	stw	r16,0(sp)
18007530:	dfc00215 	stw	ra,8(sp)
18007534:	2821883a 	mov	r16,r5
18007538:	20000226 	beq	r4,zero,18007544 <__swsetup_r+0x30>
1800753c:	20800e17 	ldw	r2,56(r4)
18007540:	10003126 	beq	r2,zero,18007608 <__swsetup_r+0xf4>
18007544:	8080030b 	ldhu	r2,12(r16)
18007548:	10c0020c 	andi	r3,r2,8
1800754c:	1009883a 	mov	r4,r2
18007550:	18000f26 	beq	r3,zero,18007590 <__swsetup_r+0x7c>
18007554:	80c00417 	ldw	r3,16(r16)
18007558:	18001526 	beq	r3,zero,180075b0 <__swsetup_r+0x9c>
1800755c:	1100004c 	andi	r4,r2,1
18007560:	20001c1e 	bne	r4,zero,180075d4 <__swsetup_r+0xc0>
18007564:	1080008c 	andi	r2,r2,2
18007568:	1000291e 	bne	r2,zero,18007610 <__swsetup_r+0xfc>
1800756c:	80800517 	ldw	r2,20(r16)
18007570:	80800215 	stw	r2,8(r16)
18007574:	18001c26 	beq	r3,zero,180075e8 <__swsetup_r+0xd4>
18007578:	0005883a 	mov	r2,zero
1800757c:	dfc00217 	ldw	ra,8(sp)
18007580:	dc400117 	ldw	r17,4(sp)
18007584:	dc000017 	ldw	r16,0(sp)
18007588:	dec00304 	addi	sp,sp,12
1800758c:	f800283a 	ret
18007590:	2080040c 	andi	r2,r4,16
18007594:	10002e26 	beq	r2,zero,18007650 <__swsetup_r+0x13c>
18007598:	2080010c 	andi	r2,r4,4
1800759c:	10001e1e 	bne	r2,zero,18007618 <__swsetup_r+0x104>
180075a0:	80c00417 	ldw	r3,16(r16)
180075a4:	20800214 	ori	r2,r4,8
180075a8:	8080030d 	sth	r2,12(r16)
180075ac:	183feb1e 	bne	r3,zero,1800755c <__alt_data_end+0xf800755c>
180075b0:	1100a00c 	andi	r4,r2,640
180075b4:	01408004 	movi	r5,512
180075b8:	217fe826 	beq	r4,r5,1800755c <__alt_data_end+0xf800755c>
180075bc:	800b883a 	mov	r5,r16
180075c0:	8809883a 	mov	r4,r17
180075c4:	800a0d00 	call	1800a0d0 <__smakebuf_r>
180075c8:	8080030b 	ldhu	r2,12(r16)
180075cc:	80c00417 	ldw	r3,16(r16)
180075d0:	003fe206 	br	1800755c <__alt_data_end+0xf800755c>
180075d4:	80800517 	ldw	r2,20(r16)
180075d8:	80000215 	stw	zero,8(r16)
180075dc:	0085c83a 	sub	r2,zero,r2
180075e0:	80800615 	stw	r2,24(r16)
180075e4:	183fe41e 	bne	r3,zero,18007578 <__alt_data_end+0xf8007578>
180075e8:	80c0030b 	ldhu	r3,12(r16)
180075ec:	0005883a 	mov	r2,zero
180075f0:	1900200c 	andi	r4,r3,128
180075f4:	203fe126 	beq	r4,zero,1800757c <__alt_data_end+0xf800757c>
180075f8:	18c01014 	ori	r3,r3,64
180075fc:	80c0030d 	sth	r3,12(r16)
18007600:	00bfffc4 	movi	r2,-1
18007604:	003fdd06 	br	1800757c <__alt_data_end+0xf800757c>
18007608:	80095200 	call	18009520 <__sinit>
1800760c:	003fcd06 	br	18007544 <__alt_data_end+0xf8007544>
18007610:	0005883a 	mov	r2,zero
18007614:	003fd606 	br	18007570 <__alt_data_end+0xf8007570>
18007618:	81400c17 	ldw	r5,48(r16)
1800761c:	28000626 	beq	r5,zero,18007638 <__swsetup_r+0x124>
18007620:	80801004 	addi	r2,r16,64
18007624:	28800326 	beq	r5,r2,18007634 <__swsetup_r+0x120>
18007628:	8809883a 	mov	r4,r17
1800762c:	80096940 	call	18009694 <_free_r>
18007630:	8100030b 	ldhu	r4,12(r16)
18007634:	80000c15 	stw	zero,48(r16)
18007638:	80c00417 	ldw	r3,16(r16)
1800763c:	00bff6c4 	movi	r2,-37
18007640:	1108703a 	and	r4,r2,r4
18007644:	80000115 	stw	zero,4(r16)
18007648:	80c00015 	stw	r3,0(r16)
1800764c:	003fd506 	br	180075a4 <__alt_data_end+0xf80075a4>
18007650:	00800244 	movi	r2,9
18007654:	88800015 	stw	r2,0(r17)
18007658:	20801014 	ori	r2,r4,64
1800765c:	8080030d 	sth	r2,12(r16)
18007660:	00bfffc4 	movi	r2,-1
18007664:	003fc506 	br	1800757c <__alt_data_end+0xf800757c>

18007668 <quorem>:
18007668:	defff204 	addi	sp,sp,-56
1800766c:	ddc00b15 	stw	r23,44(sp)
18007670:	20800417 	ldw	r2,16(r4)
18007674:	2dc00417 	ldw	r23,16(r5)
18007678:	dfc00d15 	stw	ra,52(sp)
1800767c:	df000c15 	stw	fp,48(sp)
18007680:	dd800a15 	stw	r22,40(sp)
18007684:	dd400915 	stw	r21,36(sp)
18007688:	dd000815 	stw	r20,32(sp)
1800768c:	dcc00715 	stw	r19,28(sp)
18007690:	dc800615 	stw	r18,24(sp)
18007694:	dc400515 	stw	r17,20(sp)
18007698:	dc000415 	stw	r16,16(sp)
1800769c:	15c07a16 	blt	r2,r23,18007888 <quorem+0x220>
180076a0:	bdffffc4 	addi	r23,r23,-1
180076a4:	bde9883a 	add	r20,r23,r23
180076a8:	28c00504 	addi	r3,r5,20
180076ac:	a529883a 	add	r20,r20,r20
180076b0:	1d39883a 	add	fp,r3,r20
180076b4:	24c00504 	addi	r19,r4,20
180076b8:	d9400215 	stw	r5,8(sp)
180076bc:	9d29883a 	add	r20,r19,r20
180076c0:	e1400017 	ldw	r5,0(fp)
180076c4:	d9000015 	stw	r4,0(sp)
180076c8:	a1000017 	ldw	r4,0(r20)
180076cc:	29400044 	addi	r5,r5,1
180076d0:	d8c00115 	stw	r3,4(sp)
180076d4:	dd000315 	stw	r20,12(sp)
180076d8:	8002aa80 	call	18002aa8 <__udivsi3>
180076dc:	1025883a 	mov	r18,r2
180076e0:	10003026 	beq	r2,zero,180077a4 <quorem+0x13c>
180076e4:	dc400117 	ldw	r17,4(sp)
180076e8:	9829883a 	mov	r20,r19
180076ec:	002d883a 	mov	r22,zero
180076f0:	0021883a 	mov	r16,zero
180076f4:	8d400017 	ldw	r21,0(r17)
180076f8:	900b883a 	mov	r5,r18
180076fc:	8c400104 	addi	r17,r17,4
18007700:	a93fffcc 	andi	r4,r21,65535
18007704:	8002b640 	call	18002b64 <__mulsi3>
18007708:	a808d43a 	srli	r4,r21,16
1800770c:	900b883a 	mov	r5,r18
18007710:	15ad883a 	add	r22,r2,r22
18007714:	8002b640 	call	18002b64 <__mulsi3>
18007718:	a1000017 	ldw	r4,0(r20)
1800771c:	b00cd43a 	srli	r6,r22,16
18007720:	b0ffffcc 	andi	r3,r22,65535
18007724:	217fffcc 	andi	r5,r4,65535
18007728:	2c21883a 	add	r16,r5,r16
1800772c:	80c7c83a 	sub	r3,r16,r3
18007730:	2008d43a 	srli	r4,r4,16
18007734:	1185883a 	add	r2,r2,r6
18007738:	1821d43a 	srai	r16,r3,16
1800773c:	117fffcc 	andi	r5,r2,65535
18007740:	2149c83a 	sub	r4,r4,r5
18007744:	2421883a 	add	r16,r4,r16
18007748:	8008943a 	slli	r4,r16,16
1800774c:	18ffffcc 	andi	r3,r3,65535
18007750:	102cd43a 	srli	r22,r2,16
18007754:	20c8b03a 	or	r4,r4,r3
18007758:	a1000015 	stw	r4,0(r20)
1800775c:	8021d43a 	srai	r16,r16,16
18007760:	a5000104 	addi	r20,r20,4
18007764:	e47fe32e 	bgeu	fp,r17,180076f4 <__alt_data_end+0xf80076f4>
18007768:	d8c00317 	ldw	r3,12(sp)
1800776c:	18800017 	ldw	r2,0(r3)
18007770:	10000c1e 	bne	r2,zero,180077a4 <quorem+0x13c>
18007774:	18bfff04 	addi	r2,r3,-4
18007778:	9880082e 	bgeu	r19,r2,1800779c <quorem+0x134>
1800777c:	18ffff17 	ldw	r3,-4(r3)
18007780:	18000326 	beq	r3,zero,18007790 <quorem+0x128>
18007784:	00000506 	br	1800779c <quorem+0x134>
18007788:	10c00017 	ldw	r3,0(r2)
1800778c:	1800031e 	bne	r3,zero,1800779c <quorem+0x134>
18007790:	10bfff04 	addi	r2,r2,-4
18007794:	bdffffc4 	addi	r23,r23,-1
18007798:	98bffb36 	bltu	r19,r2,18007788 <__alt_data_end+0xf8007788>
1800779c:	d8c00017 	ldw	r3,0(sp)
180077a0:	1dc00415 	stw	r23,16(r3)
180077a4:	d9400217 	ldw	r5,8(sp)
180077a8:	d9000017 	ldw	r4,0(sp)
180077ac:	800b8cc0 	call	1800b8cc <__mcmp>
180077b0:	10002816 	blt	r2,zero,18007854 <quorem+0x1ec>
180077b4:	dc400117 	ldw	r17,4(sp)
180077b8:	94800044 	addi	r18,r18,1
180077bc:	980d883a 	mov	r6,r19
180077c0:	0007883a 	mov	r3,zero
180077c4:	31000017 	ldw	r4,0(r6)
180077c8:	89400017 	ldw	r5,0(r17)
180077cc:	31800104 	addi	r6,r6,4
180077d0:	20bfffcc 	andi	r2,r4,65535
180077d4:	10c7883a 	add	r3,r2,r3
180077d8:	28bfffcc 	andi	r2,r5,65535
180077dc:	1885c83a 	sub	r2,r3,r2
180077e0:	280ad43a 	srli	r5,r5,16
180077e4:	2008d43a 	srli	r4,r4,16
180077e8:	1007d43a 	srai	r3,r2,16
180077ec:	10bfffcc 	andi	r2,r2,65535
180077f0:	2149c83a 	sub	r4,r4,r5
180077f4:	20c9883a 	add	r4,r4,r3
180077f8:	200a943a 	slli	r5,r4,16
180077fc:	8c400104 	addi	r17,r17,4
18007800:	2007d43a 	srai	r3,r4,16
18007804:	2884b03a 	or	r2,r5,r2
18007808:	30bfff15 	stw	r2,-4(r6)
1800780c:	e47fed2e 	bgeu	fp,r17,180077c4 <__alt_data_end+0xf80077c4>
18007810:	bdc5883a 	add	r2,r23,r23
18007814:	1085883a 	add	r2,r2,r2
18007818:	9887883a 	add	r3,r19,r2
1800781c:	18800017 	ldw	r2,0(r3)
18007820:	10000c1e 	bne	r2,zero,18007854 <quorem+0x1ec>
18007824:	18bfff04 	addi	r2,r3,-4
18007828:	9880082e 	bgeu	r19,r2,1800784c <quorem+0x1e4>
1800782c:	18ffff17 	ldw	r3,-4(r3)
18007830:	18000326 	beq	r3,zero,18007840 <quorem+0x1d8>
18007834:	00000506 	br	1800784c <quorem+0x1e4>
18007838:	10c00017 	ldw	r3,0(r2)
1800783c:	1800031e 	bne	r3,zero,1800784c <quorem+0x1e4>
18007840:	10bfff04 	addi	r2,r2,-4
18007844:	bdffffc4 	addi	r23,r23,-1
18007848:	98bffb36 	bltu	r19,r2,18007838 <__alt_data_end+0xf8007838>
1800784c:	d8c00017 	ldw	r3,0(sp)
18007850:	1dc00415 	stw	r23,16(r3)
18007854:	9005883a 	mov	r2,r18
18007858:	dfc00d17 	ldw	ra,52(sp)
1800785c:	df000c17 	ldw	fp,48(sp)
18007860:	ddc00b17 	ldw	r23,44(sp)
18007864:	dd800a17 	ldw	r22,40(sp)
18007868:	dd400917 	ldw	r21,36(sp)
1800786c:	dd000817 	ldw	r20,32(sp)
18007870:	dcc00717 	ldw	r19,28(sp)
18007874:	dc800617 	ldw	r18,24(sp)
18007878:	dc400517 	ldw	r17,20(sp)
1800787c:	dc000417 	ldw	r16,16(sp)
18007880:	dec00e04 	addi	sp,sp,56
18007884:	f800283a 	ret
18007888:	0005883a 	mov	r2,zero
1800788c:	003ff206 	br	18007858 <__alt_data_end+0xf8007858>

18007890 <_dtoa_r>:
18007890:	20801017 	ldw	r2,64(r4)
18007894:	deffde04 	addi	sp,sp,-136
18007898:	df002015 	stw	fp,128(sp)
1800789c:	dcc01b15 	stw	r19,108(sp)
180078a0:	dc801a15 	stw	r18,104(sp)
180078a4:	dc401915 	stw	r17,100(sp)
180078a8:	dc001815 	stw	r16,96(sp)
180078ac:	dfc02115 	stw	ra,132(sp)
180078b0:	ddc01f15 	stw	r23,124(sp)
180078b4:	dd801e15 	stw	r22,120(sp)
180078b8:	dd401d15 	stw	r21,116(sp)
180078bc:	dd001c15 	stw	r20,112(sp)
180078c0:	d9c00315 	stw	r7,12(sp)
180078c4:	2039883a 	mov	fp,r4
180078c8:	3023883a 	mov	r17,r6
180078cc:	2825883a 	mov	r18,r5
180078d0:	dc002417 	ldw	r16,144(sp)
180078d4:	3027883a 	mov	r19,r6
180078d8:	10000826 	beq	r2,zero,180078fc <_dtoa_r+0x6c>
180078dc:	21801117 	ldw	r6,68(r4)
180078e0:	00c00044 	movi	r3,1
180078e4:	100b883a 	mov	r5,r2
180078e8:	1986983a 	sll	r3,r3,r6
180078ec:	11800115 	stw	r6,4(r2)
180078f0:	10c00215 	stw	r3,8(r2)
180078f4:	800aff00 	call	1800aff0 <_Bfree>
180078f8:	e0001015 	stw	zero,64(fp)
180078fc:	88002e16 	blt	r17,zero,180079b8 <_dtoa_r+0x128>
18007900:	80000015 	stw	zero,0(r16)
18007904:	889ffc2c 	andhi	r2,r17,32752
18007908:	00dffc34 	movhi	r3,32752
1800790c:	10c01c26 	beq	r2,r3,18007980 <_dtoa_r+0xf0>
18007910:	000d883a 	mov	r6,zero
18007914:	000f883a 	mov	r7,zero
18007918:	9009883a 	mov	r4,r18
1800791c:	980b883a 	mov	r5,r19
18007920:	8011d400 	call	18011d40 <__eqdf2>
18007924:	10002b1e 	bne	r2,zero,180079d4 <_dtoa_r+0x144>
18007928:	d9c02317 	ldw	r7,140(sp)
1800792c:	00800044 	movi	r2,1
18007930:	38800015 	stw	r2,0(r7)
18007934:	d8802517 	ldw	r2,148(sp)
18007938:	10019e26 	beq	r2,zero,18007fb4 <_dtoa_r+0x724>
1800793c:	d8c02517 	ldw	r3,148(sp)
18007940:	00860074 	movhi	r2,6145
18007944:	1098fa44 	addi	r2,r2,25577
18007948:	18800015 	stw	r2,0(r3)
1800794c:	10bfffc4 	addi	r2,r2,-1
18007950:	dfc02117 	ldw	ra,132(sp)
18007954:	df002017 	ldw	fp,128(sp)
18007958:	ddc01f17 	ldw	r23,124(sp)
1800795c:	dd801e17 	ldw	r22,120(sp)
18007960:	dd401d17 	ldw	r21,116(sp)
18007964:	dd001c17 	ldw	r20,112(sp)
18007968:	dcc01b17 	ldw	r19,108(sp)
1800796c:	dc801a17 	ldw	r18,104(sp)
18007970:	dc401917 	ldw	r17,100(sp)
18007974:	dc001817 	ldw	r16,96(sp)
18007978:	dec02204 	addi	sp,sp,136
1800797c:	f800283a 	ret
18007980:	d8c02317 	ldw	r3,140(sp)
18007984:	0089c3c4 	movi	r2,9999
18007988:	18800015 	stw	r2,0(r3)
1800798c:	90017726 	beq	r18,zero,18007f6c <_dtoa_r+0x6dc>
18007990:	00860074 	movhi	r2,6145
18007994:	10990e04 	addi	r2,r2,25656
18007998:	d9002517 	ldw	r4,148(sp)
1800799c:	203fec26 	beq	r4,zero,18007950 <__alt_data_end+0xf8007950>
180079a0:	10c000c7 	ldb	r3,3(r2)
180079a4:	1801781e 	bne	r3,zero,18007f88 <_dtoa_r+0x6f8>
180079a8:	10c000c4 	addi	r3,r2,3
180079ac:	d9802517 	ldw	r6,148(sp)
180079b0:	30c00015 	stw	r3,0(r6)
180079b4:	003fe606 	br	18007950 <__alt_data_end+0xf8007950>
180079b8:	04e00034 	movhi	r19,32768
180079bc:	9cffffc4 	addi	r19,r19,-1
180079c0:	00800044 	movi	r2,1
180079c4:	8ce6703a 	and	r19,r17,r19
180079c8:	80800015 	stw	r2,0(r16)
180079cc:	9823883a 	mov	r17,r19
180079d0:	003fcc06 	br	18007904 <__alt_data_end+0xf8007904>
180079d4:	d8800204 	addi	r2,sp,8
180079d8:	d8800015 	stw	r2,0(sp)
180079dc:	d9c00104 	addi	r7,sp,4
180079e0:	900b883a 	mov	r5,r18
180079e4:	980d883a 	mov	r6,r19
180079e8:	e009883a 	mov	r4,fp
180079ec:	8820d53a 	srli	r16,r17,20
180079f0:	800bc980 	call	1800bc98 <__d2b>
180079f4:	d8800915 	stw	r2,36(sp)
180079f8:	8001651e 	bne	r16,zero,18007f90 <_dtoa_r+0x700>
180079fc:	dd800217 	ldw	r22,8(sp)
18007a00:	dc000117 	ldw	r16,4(sp)
18007a04:	00800804 	movi	r2,32
18007a08:	b421883a 	add	r16,r22,r16
18007a0c:	80c10c84 	addi	r3,r16,1074
18007a10:	10c2d10e 	bge	r2,r3,18008558 <_dtoa_r+0xcc8>
18007a14:	00801004 	movi	r2,64
18007a18:	81010484 	addi	r4,r16,1042
18007a1c:	10c7c83a 	sub	r3,r2,r3
18007a20:	9108d83a 	srl	r4,r18,r4
18007a24:	88e2983a 	sll	r17,r17,r3
18007a28:	2448b03a 	or	r4,r4,r17
18007a2c:	801325c0 	call	1801325c <__floatunsidf>
18007a30:	017f8434 	movhi	r5,65040
18007a34:	01800044 	movi	r6,1
18007a38:	1009883a 	mov	r4,r2
18007a3c:	194b883a 	add	r5,r3,r5
18007a40:	843fffc4 	addi	r16,r16,-1
18007a44:	d9801115 	stw	r6,68(sp)
18007a48:	000d883a 	mov	r6,zero
18007a4c:	01cffe34 	movhi	r7,16376
18007a50:	80128040 	call	18012804 <__subdf3>
18007a54:	0198dbf4 	movhi	r6,25455
18007a58:	01cff4f4 	movhi	r7,16339
18007a5c:	3190d844 	addi	r6,r6,17249
18007a60:	39e1e9c4 	addi	r7,r7,-30809
18007a64:	1009883a 	mov	r4,r2
18007a68:	180b883a 	mov	r5,r3
18007a6c:	8011f980 	call	18011f98 <__muldf3>
18007a70:	01a2d874 	movhi	r6,35681
18007a74:	01cff1f4 	movhi	r7,16327
18007a78:	31b22cc4 	addi	r6,r6,-14157
18007a7c:	39e28a04 	addi	r7,r7,-30168
18007a80:	180b883a 	mov	r5,r3
18007a84:	1009883a 	mov	r4,r2
18007a88:	8010ac40 	call	18010ac4 <__adddf3>
18007a8c:	8009883a 	mov	r4,r16
18007a90:	1029883a 	mov	r20,r2
18007a94:	1823883a 	mov	r17,r3
18007a98:	80131800 	call	18013180 <__floatsidf>
18007a9c:	019427f4 	movhi	r6,20639
18007aa0:	01cff4f4 	movhi	r7,16339
18007aa4:	319e7ec4 	addi	r6,r6,31227
18007aa8:	39d104c4 	addi	r7,r7,17427
18007aac:	1009883a 	mov	r4,r2
18007ab0:	180b883a 	mov	r5,r3
18007ab4:	8011f980 	call	18011f98 <__muldf3>
18007ab8:	100d883a 	mov	r6,r2
18007abc:	180f883a 	mov	r7,r3
18007ac0:	a009883a 	mov	r4,r20
18007ac4:	880b883a 	mov	r5,r17
18007ac8:	8010ac40 	call	18010ac4 <__adddf3>
18007acc:	1009883a 	mov	r4,r2
18007ad0:	180b883a 	mov	r5,r3
18007ad4:	1029883a 	mov	r20,r2
18007ad8:	1823883a 	mov	r17,r3
18007adc:	80131000 	call	18013100 <__fixdfsi>
18007ae0:	000d883a 	mov	r6,zero
18007ae4:	000f883a 	mov	r7,zero
18007ae8:	a009883a 	mov	r4,r20
18007aec:	880b883a 	mov	r5,r17
18007af0:	d8800515 	stw	r2,20(sp)
18007af4:	8011ea40 	call	18011ea4 <__ledf2>
18007af8:	10028716 	blt	r2,zero,18008518 <_dtoa_r+0xc88>
18007afc:	d8c00517 	ldw	r3,20(sp)
18007b00:	00800584 	movi	r2,22
18007b04:	10c27536 	bltu	r2,r3,180084dc <_dtoa_r+0xc4c>
18007b08:	180490fa 	slli	r2,r3,3
18007b0c:	00c60074 	movhi	r3,6145
18007b10:	18d92a04 	addi	r3,r3,25768
18007b14:	1885883a 	add	r2,r3,r2
18007b18:	11000017 	ldw	r4,0(r2)
18007b1c:	11400117 	ldw	r5,4(r2)
18007b20:	900d883a 	mov	r6,r18
18007b24:	980f883a 	mov	r7,r19
18007b28:	8011dc80 	call	18011dc8 <__gedf2>
18007b2c:	00828d0e 	bge	zero,r2,18008564 <_dtoa_r+0xcd4>
18007b30:	d9000517 	ldw	r4,20(sp)
18007b34:	d8000e15 	stw	zero,56(sp)
18007b38:	213fffc4 	addi	r4,r4,-1
18007b3c:	d9000515 	stw	r4,20(sp)
18007b40:	b42dc83a 	sub	r22,r22,r16
18007b44:	b5bfffc4 	addi	r22,r22,-1
18007b48:	b0026f16 	blt	r22,zero,18008508 <_dtoa_r+0xc78>
18007b4c:	d8000815 	stw	zero,32(sp)
18007b50:	d9c00517 	ldw	r7,20(sp)
18007b54:	38026416 	blt	r7,zero,180084e8 <_dtoa_r+0xc58>
18007b58:	b1ed883a 	add	r22,r22,r7
18007b5c:	d9c00d15 	stw	r7,52(sp)
18007b60:	d8000a15 	stw	zero,40(sp)
18007b64:	d9800317 	ldw	r6,12(sp)
18007b68:	00800244 	movi	r2,9
18007b6c:	11811436 	bltu	r2,r6,18007fc0 <_dtoa_r+0x730>
18007b70:	00800144 	movi	r2,5
18007b74:	1184e10e 	bge	r2,r6,18008efc <_dtoa_r+0x166c>
18007b78:	31bfff04 	addi	r6,r6,-4
18007b7c:	d9800315 	stw	r6,12(sp)
18007b80:	0023883a 	mov	r17,zero
18007b84:	d9800317 	ldw	r6,12(sp)
18007b88:	008000c4 	movi	r2,3
18007b8c:	30836726 	beq	r6,r2,1800892c <_dtoa_r+0x109c>
18007b90:	1183410e 	bge	r2,r6,18008898 <_dtoa_r+0x1008>
18007b94:	d9c00317 	ldw	r7,12(sp)
18007b98:	00800104 	movi	r2,4
18007b9c:	38827c26 	beq	r7,r2,18008590 <_dtoa_r+0xd00>
18007ba0:	00800144 	movi	r2,5
18007ba4:	3884c41e 	bne	r7,r2,18008eb8 <_dtoa_r+0x1628>
18007ba8:	00800044 	movi	r2,1
18007bac:	d8800b15 	stw	r2,44(sp)
18007bb0:	d8c00517 	ldw	r3,20(sp)
18007bb4:	d9002217 	ldw	r4,136(sp)
18007bb8:	1907883a 	add	r3,r3,r4
18007bbc:	19800044 	addi	r6,r3,1
18007bc0:	d8c00c15 	stw	r3,48(sp)
18007bc4:	d9800615 	stw	r6,24(sp)
18007bc8:	0183a40e 	bge	zero,r6,18008a5c <_dtoa_r+0x11cc>
18007bcc:	d9800617 	ldw	r6,24(sp)
18007bd0:	3021883a 	mov	r16,r6
18007bd4:	e0001115 	stw	zero,68(fp)
18007bd8:	008005c4 	movi	r2,23
18007bdc:	1184c92e 	bgeu	r2,r6,18008f04 <_dtoa_r+0x1674>
18007be0:	00c00044 	movi	r3,1
18007be4:	00800104 	movi	r2,4
18007be8:	1085883a 	add	r2,r2,r2
18007bec:	11000504 	addi	r4,r2,20
18007bf0:	180b883a 	mov	r5,r3
18007bf4:	18c00044 	addi	r3,r3,1
18007bf8:	313ffb2e 	bgeu	r6,r4,18007be8 <__alt_data_end+0xf8007be8>
18007bfc:	e1401115 	stw	r5,68(fp)
18007c00:	e009883a 	mov	r4,fp
18007c04:	800af480 	call	1800af48 <_Balloc>
18007c08:	d8800715 	stw	r2,28(sp)
18007c0c:	e0801015 	stw	r2,64(fp)
18007c10:	00800384 	movi	r2,14
18007c14:	1400f736 	bltu	r2,r16,18007ff4 <_dtoa_r+0x764>
18007c18:	8800f626 	beq	r17,zero,18007ff4 <_dtoa_r+0x764>
18007c1c:	d9c00517 	ldw	r7,20(sp)
18007c20:	01c39a0e 	bge	zero,r7,18008a8c <_dtoa_r+0x11fc>
18007c24:	388003cc 	andi	r2,r7,15
18007c28:	100490fa 	slli	r2,r2,3
18007c2c:	382bd13a 	srai	r21,r7,4
18007c30:	00c60074 	movhi	r3,6145
18007c34:	18d92a04 	addi	r3,r3,25768
18007c38:	1885883a 	add	r2,r3,r2
18007c3c:	a8c0040c 	andi	r3,r21,16
18007c40:	12400017 	ldw	r9,0(r2)
18007c44:	12000117 	ldw	r8,4(r2)
18007c48:	18037926 	beq	r3,zero,18008a30 <_dtoa_r+0x11a0>
18007c4c:	00860074 	movhi	r2,6145
18007c50:	10992004 	addi	r2,r2,25728
18007c54:	11800817 	ldw	r6,32(r2)
18007c58:	11c00917 	ldw	r7,36(r2)
18007c5c:	9009883a 	mov	r4,r18
18007c60:	980b883a 	mov	r5,r19
18007c64:	da001715 	stw	r8,92(sp)
18007c68:	da401615 	stw	r9,88(sp)
18007c6c:	80113700 	call	18011370 <__divdf3>
18007c70:	da001717 	ldw	r8,92(sp)
18007c74:	da401617 	ldw	r9,88(sp)
18007c78:	ad4003cc 	andi	r21,r21,15
18007c7c:	040000c4 	movi	r16,3
18007c80:	1023883a 	mov	r17,r2
18007c84:	1829883a 	mov	r20,r3
18007c88:	a8001126 	beq	r21,zero,18007cd0 <_dtoa_r+0x440>
18007c8c:	05c60074 	movhi	r23,6145
18007c90:	bdd92004 	addi	r23,r23,25728
18007c94:	4805883a 	mov	r2,r9
18007c98:	4007883a 	mov	r3,r8
18007c9c:	a980004c 	andi	r6,r21,1
18007ca0:	1009883a 	mov	r4,r2
18007ca4:	a82bd07a 	srai	r21,r21,1
18007ca8:	180b883a 	mov	r5,r3
18007cac:	30000426 	beq	r6,zero,18007cc0 <_dtoa_r+0x430>
18007cb0:	b9800017 	ldw	r6,0(r23)
18007cb4:	b9c00117 	ldw	r7,4(r23)
18007cb8:	84000044 	addi	r16,r16,1
18007cbc:	8011f980 	call	18011f98 <__muldf3>
18007cc0:	bdc00204 	addi	r23,r23,8
18007cc4:	a83ff51e 	bne	r21,zero,18007c9c <__alt_data_end+0xf8007c9c>
18007cc8:	1013883a 	mov	r9,r2
18007ccc:	1811883a 	mov	r8,r3
18007cd0:	480d883a 	mov	r6,r9
18007cd4:	400f883a 	mov	r7,r8
18007cd8:	8809883a 	mov	r4,r17
18007cdc:	a00b883a 	mov	r5,r20
18007ce0:	80113700 	call	18011370 <__divdf3>
18007ce4:	d8800f15 	stw	r2,60(sp)
18007ce8:	d8c01015 	stw	r3,64(sp)
18007cec:	d8c00e17 	ldw	r3,56(sp)
18007cf0:	18000626 	beq	r3,zero,18007d0c <_dtoa_r+0x47c>
18007cf4:	d9000f17 	ldw	r4,60(sp)
18007cf8:	d9401017 	ldw	r5,64(sp)
18007cfc:	000d883a 	mov	r6,zero
18007d00:	01cffc34 	movhi	r7,16368
18007d04:	8011ea40 	call	18011ea4 <__ledf2>
18007d08:	10040b16 	blt	r2,zero,18008d38 <_dtoa_r+0x14a8>
18007d0c:	8009883a 	mov	r4,r16
18007d10:	80131800 	call	18013180 <__floatsidf>
18007d14:	d9800f17 	ldw	r6,60(sp)
18007d18:	d9c01017 	ldw	r7,64(sp)
18007d1c:	1009883a 	mov	r4,r2
18007d20:	180b883a 	mov	r5,r3
18007d24:	8011f980 	call	18011f98 <__muldf3>
18007d28:	000d883a 	mov	r6,zero
18007d2c:	01d00734 	movhi	r7,16412
18007d30:	1009883a 	mov	r4,r2
18007d34:	180b883a 	mov	r5,r3
18007d38:	8010ac40 	call	18010ac4 <__adddf3>
18007d3c:	1021883a 	mov	r16,r2
18007d40:	d8800617 	ldw	r2,24(sp)
18007d44:	047f3034 	movhi	r17,64704
18007d48:	1c63883a 	add	r17,r3,r17
18007d4c:	10031826 	beq	r2,zero,180089b0 <_dtoa_r+0x1120>
18007d50:	d8c00517 	ldw	r3,20(sp)
18007d54:	db000617 	ldw	r12,24(sp)
18007d58:	d8c01315 	stw	r3,76(sp)
18007d5c:	d9000b17 	ldw	r4,44(sp)
18007d60:	20038f26 	beq	r4,zero,18008ba0 <_dtoa_r+0x1310>
18007d64:	60bfffc4 	addi	r2,r12,-1
18007d68:	100490fa 	slli	r2,r2,3
18007d6c:	00c60074 	movhi	r3,6145
18007d70:	18d92a04 	addi	r3,r3,25768
18007d74:	1885883a 	add	r2,r3,r2
18007d78:	11800017 	ldw	r6,0(r2)
18007d7c:	11c00117 	ldw	r7,4(r2)
18007d80:	d8800717 	ldw	r2,28(sp)
18007d84:	0009883a 	mov	r4,zero
18007d88:	014ff834 	movhi	r5,16352
18007d8c:	db001615 	stw	r12,88(sp)
18007d90:	15c00044 	addi	r23,r2,1
18007d94:	80113700 	call	18011370 <__divdf3>
18007d98:	800d883a 	mov	r6,r16
18007d9c:	880f883a 	mov	r7,r17
18007da0:	1009883a 	mov	r4,r2
18007da4:	180b883a 	mov	r5,r3
18007da8:	80128040 	call	18012804 <__subdf3>
18007dac:	d9401017 	ldw	r5,64(sp)
18007db0:	d9000f17 	ldw	r4,60(sp)
18007db4:	102b883a 	mov	r21,r2
18007db8:	d8c01215 	stw	r3,72(sp)
18007dbc:	80131000 	call	18013100 <__fixdfsi>
18007dc0:	1009883a 	mov	r4,r2
18007dc4:	1029883a 	mov	r20,r2
18007dc8:	80131800 	call	18013180 <__floatsidf>
18007dcc:	d9000f17 	ldw	r4,60(sp)
18007dd0:	d9401017 	ldw	r5,64(sp)
18007dd4:	100d883a 	mov	r6,r2
18007dd8:	180f883a 	mov	r7,r3
18007ddc:	80128040 	call	18012804 <__subdf3>
18007de0:	1823883a 	mov	r17,r3
18007de4:	d8c00717 	ldw	r3,28(sp)
18007de8:	d9401217 	ldw	r5,72(sp)
18007dec:	a2000c04 	addi	r8,r20,48
18007df0:	1021883a 	mov	r16,r2
18007df4:	1a000005 	stb	r8,0(r3)
18007df8:	800d883a 	mov	r6,r16
18007dfc:	880f883a 	mov	r7,r17
18007e00:	a809883a 	mov	r4,r21
18007e04:	4029883a 	mov	r20,r8
18007e08:	8011dc80 	call	18011dc8 <__gedf2>
18007e0c:	00841d16 	blt	zero,r2,18008e84 <_dtoa_r+0x15f4>
18007e10:	800d883a 	mov	r6,r16
18007e14:	880f883a 	mov	r7,r17
18007e18:	0009883a 	mov	r4,zero
18007e1c:	014ffc34 	movhi	r5,16368
18007e20:	80128040 	call	18012804 <__subdf3>
18007e24:	d9401217 	ldw	r5,72(sp)
18007e28:	100d883a 	mov	r6,r2
18007e2c:	180f883a 	mov	r7,r3
18007e30:	a809883a 	mov	r4,r21
18007e34:	8011dc80 	call	18011dc8 <__gedf2>
18007e38:	db001617 	ldw	r12,88(sp)
18007e3c:	00840e16 	blt	zero,r2,18008e78 <_dtoa_r+0x15e8>
18007e40:	00800044 	movi	r2,1
18007e44:	13006b0e 	bge	r2,r12,18007ff4 <_dtoa_r+0x764>
18007e48:	d9000717 	ldw	r4,28(sp)
18007e4c:	dd800f15 	stw	r22,60(sp)
18007e50:	dcc01015 	stw	r19,64(sp)
18007e54:	2319883a 	add	r12,r4,r12
18007e58:	dcc01217 	ldw	r19,72(sp)
18007e5c:	602d883a 	mov	r22,r12
18007e60:	dc801215 	stw	r18,72(sp)
18007e64:	b825883a 	mov	r18,r23
18007e68:	00000906 	br	18007e90 <_dtoa_r+0x600>
18007e6c:	80128040 	call	18012804 <__subdf3>
18007e70:	a80d883a 	mov	r6,r21
18007e74:	980f883a 	mov	r7,r19
18007e78:	1009883a 	mov	r4,r2
18007e7c:	180b883a 	mov	r5,r3
18007e80:	8011ea40 	call	18011ea4 <__ledf2>
18007e84:	1003e816 	blt	r2,zero,18008e28 <_dtoa_r+0x1598>
18007e88:	b825883a 	mov	r18,r23
18007e8c:	bd83e926 	beq	r23,r22,18008e34 <_dtoa_r+0x15a4>
18007e90:	a809883a 	mov	r4,r21
18007e94:	980b883a 	mov	r5,r19
18007e98:	000d883a 	mov	r6,zero
18007e9c:	01d00934 	movhi	r7,16420
18007ea0:	8011f980 	call	18011f98 <__muldf3>
18007ea4:	000d883a 	mov	r6,zero
18007ea8:	01d00934 	movhi	r7,16420
18007eac:	8009883a 	mov	r4,r16
18007eb0:	880b883a 	mov	r5,r17
18007eb4:	102b883a 	mov	r21,r2
18007eb8:	1827883a 	mov	r19,r3
18007ebc:	8011f980 	call	18011f98 <__muldf3>
18007ec0:	180b883a 	mov	r5,r3
18007ec4:	1009883a 	mov	r4,r2
18007ec8:	1821883a 	mov	r16,r3
18007ecc:	1023883a 	mov	r17,r2
18007ed0:	80131000 	call	18013100 <__fixdfsi>
18007ed4:	1009883a 	mov	r4,r2
18007ed8:	1029883a 	mov	r20,r2
18007edc:	80131800 	call	18013180 <__floatsidf>
18007ee0:	8809883a 	mov	r4,r17
18007ee4:	800b883a 	mov	r5,r16
18007ee8:	100d883a 	mov	r6,r2
18007eec:	180f883a 	mov	r7,r3
18007ef0:	80128040 	call	18012804 <__subdf3>
18007ef4:	a5000c04 	addi	r20,r20,48
18007ef8:	a80d883a 	mov	r6,r21
18007efc:	980f883a 	mov	r7,r19
18007f00:	1009883a 	mov	r4,r2
18007f04:	180b883a 	mov	r5,r3
18007f08:	95000005 	stb	r20,0(r18)
18007f0c:	1021883a 	mov	r16,r2
18007f10:	1823883a 	mov	r17,r3
18007f14:	8011ea40 	call	18011ea4 <__ledf2>
18007f18:	bdc00044 	addi	r23,r23,1
18007f1c:	800d883a 	mov	r6,r16
18007f20:	880f883a 	mov	r7,r17
18007f24:	0009883a 	mov	r4,zero
18007f28:	014ffc34 	movhi	r5,16368
18007f2c:	103fcf0e 	bge	r2,zero,18007e6c <__alt_data_end+0xf8007e6c>
18007f30:	d8c01317 	ldw	r3,76(sp)
18007f34:	d8c00515 	stw	r3,20(sp)
18007f38:	d9400917 	ldw	r5,36(sp)
18007f3c:	e009883a 	mov	r4,fp
18007f40:	800aff00 	call	1800aff0 <_Bfree>
18007f44:	d9000517 	ldw	r4,20(sp)
18007f48:	d9802317 	ldw	r6,140(sp)
18007f4c:	d9c02517 	ldw	r7,148(sp)
18007f50:	b8000005 	stb	zero,0(r23)
18007f54:	20800044 	addi	r2,r4,1
18007f58:	30800015 	stw	r2,0(r6)
18007f5c:	3802aa26 	beq	r7,zero,18008a08 <_dtoa_r+0x1178>
18007f60:	3dc00015 	stw	r23,0(r7)
18007f64:	d8800717 	ldw	r2,28(sp)
18007f68:	003e7906 	br	18007950 <__alt_data_end+0xf8007950>
18007f6c:	00800434 	movhi	r2,16
18007f70:	10bfffc4 	addi	r2,r2,-1
18007f74:	88a2703a 	and	r17,r17,r2
18007f78:	883e851e 	bne	r17,zero,18007990 <__alt_data_end+0xf8007990>
18007f7c:	00860074 	movhi	r2,6145
18007f80:	10990b04 	addi	r2,r2,25644
18007f84:	003e8406 	br	18007998 <__alt_data_end+0xf8007998>
18007f88:	10c00204 	addi	r3,r2,8
18007f8c:	003e8706 	br	180079ac <__alt_data_end+0xf80079ac>
18007f90:	01400434 	movhi	r5,16
18007f94:	297fffc4 	addi	r5,r5,-1
18007f98:	994a703a 	and	r5,r19,r5
18007f9c:	9009883a 	mov	r4,r18
18007fa0:	843f0044 	addi	r16,r16,-1023
18007fa4:	294ffc34 	orhi	r5,r5,16368
18007fa8:	dd800217 	ldw	r22,8(sp)
18007fac:	d8001115 	stw	zero,68(sp)
18007fb0:	003ea506 	br	18007a48 <__alt_data_end+0xf8007a48>
18007fb4:	00860074 	movhi	r2,6145
18007fb8:	1098fa04 	addi	r2,r2,25576
18007fbc:	003e6406 	br	18007950 <__alt_data_end+0xf8007950>
18007fc0:	e0001115 	stw	zero,68(fp)
18007fc4:	000b883a 	mov	r5,zero
18007fc8:	e009883a 	mov	r4,fp
18007fcc:	800af480 	call	1800af48 <_Balloc>
18007fd0:	01bfffc4 	movi	r6,-1
18007fd4:	01c00044 	movi	r7,1
18007fd8:	d8800715 	stw	r2,28(sp)
18007fdc:	d9800c15 	stw	r6,48(sp)
18007fe0:	e0801015 	stw	r2,64(fp)
18007fe4:	d8000315 	stw	zero,12(sp)
18007fe8:	d9c00b15 	stw	r7,44(sp)
18007fec:	d9800615 	stw	r6,24(sp)
18007ff0:	d8002215 	stw	zero,136(sp)
18007ff4:	d8800117 	ldw	r2,4(sp)
18007ff8:	10008916 	blt	r2,zero,18008220 <_dtoa_r+0x990>
18007ffc:	d9000517 	ldw	r4,20(sp)
18008000:	00c00384 	movi	r3,14
18008004:	19008616 	blt	r3,r4,18008220 <_dtoa_r+0x990>
18008008:	200490fa 	slli	r2,r4,3
1800800c:	00c60074 	movhi	r3,6145
18008010:	d9802217 	ldw	r6,136(sp)
18008014:	18d92a04 	addi	r3,r3,25768
18008018:	1885883a 	add	r2,r3,r2
1800801c:	14000017 	ldw	r16,0(r2)
18008020:	14400117 	ldw	r17,4(r2)
18008024:	30016316 	blt	r6,zero,180085b4 <_dtoa_r+0xd24>
18008028:	800d883a 	mov	r6,r16
1800802c:	880f883a 	mov	r7,r17
18008030:	9009883a 	mov	r4,r18
18008034:	980b883a 	mov	r5,r19
18008038:	80113700 	call	18011370 <__divdf3>
1800803c:	180b883a 	mov	r5,r3
18008040:	1009883a 	mov	r4,r2
18008044:	80131000 	call	18013100 <__fixdfsi>
18008048:	1009883a 	mov	r4,r2
1800804c:	102b883a 	mov	r21,r2
18008050:	80131800 	call	18013180 <__floatsidf>
18008054:	800d883a 	mov	r6,r16
18008058:	880f883a 	mov	r7,r17
1800805c:	1009883a 	mov	r4,r2
18008060:	180b883a 	mov	r5,r3
18008064:	8011f980 	call	18011f98 <__muldf3>
18008068:	100d883a 	mov	r6,r2
1800806c:	180f883a 	mov	r7,r3
18008070:	9009883a 	mov	r4,r18
18008074:	980b883a 	mov	r5,r19
18008078:	80128040 	call	18012804 <__subdf3>
1800807c:	d9c00717 	ldw	r7,28(sp)
18008080:	1009883a 	mov	r4,r2
18008084:	a8800c04 	addi	r2,r21,48
18008088:	38800005 	stb	r2,0(r7)
1800808c:	3dc00044 	addi	r23,r7,1
18008090:	d9c00617 	ldw	r7,24(sp)
18008094:	01800044 	movi	r6,1
18008098:	180b883a 	mov	r5,r3
1800809c:	2005883a 	mov	r2,r4
180080a0:	39803826 	beq	r7,r6,18008184 <_dtoa_r+0x8f4>
180080a4:	000d883a 	mov	r6,zero
180080a8:	01d00934 	movhi	r7,16420
180080ac:	8011f980 	call	18011f98 <__muldf3>
180080b0:	000d883a 	mov	r6,zero
180080b4:	000f883a 	mov	r7,zero
180080b8:	1009883a 	mov	r4,r2
180080bc:	180b883a 	mov	r5,r3
180080c0:	1025883a 	mov	r18,r2
180080c4:	1827883a 	mov	r19,r3
180080c8:	8011d400 	call	18011d40 <__eqdf2>
180080cc:	103f9a26 	beq	r2,zero,18007f38 <__alt_data_end+0xf8007f38>
180080d0:	d9c00617 	ldw	r7,24(sp)
180080d4:	d8c00717 	ldw	r3,28(sp)
180080d8:	b829883a 	mov	r20,r23
180080dc:	38bfffc4 	addi	r2,r7,-1
180080e0:	18ad883a 	add	r22,r3,r2
180080e4:	00000a06 	br	18008110 <_dtoa_r+0x880>
180080e8:	8011f980 	call	18011f98 <__muldf3>
180080ec:	000d883a 	mov	r6,zero
180080f0:	000f883a 	mov	r7,zero
180080f4:	1009883a 	mov	r4,r2
180080f8:	180b883a 	mov	r5,r3
180080fc:	1025883a 	mov	r18,r2
18008100:	1827883a 	mov	r19,r3
18008104:	b829883a 	mov	r20,r23
18008108:	8011d400 	call	18011d40 <__eqdf2>
1800810c:	103f8a26 	beq	r2,zero,18007f38 <__alt_data_end+0xf8007f38>
18008110:	800d883a 	mov	r6,r16
18008114:	880f883a 	mov	r7,r17
18008118:	9009883a 	mov	r4,r18
1800811c:	980b883a 	mov	r5,r19
18008120:	80113700 	call	18011370 <__divdf3>
18008124:	180b883a 	mov	r5,r3
18008128:	1009883a 	mov	r4,r2
1800812c:	80131000 	call	18013100 <__fixdfsi>
18008130:	1009883a 	mov	r4,r2
18008134:	102b883a 	mov	r21,r2
18008138:	80131800 	call	18013180 <__floatsidf>
1800813c:	800d883a 	mov	r6,r16
18008140:	880f883a 	mov	r7,r17
18008144:	1009883a 	mov	r4,r2
18008148:	180b883a 	mov	r5,r3
1800814c:	8011f980 	call	18011f98 <__muldf3>
18008150:	100d883a 	mov	r6,r2
18008154:	180f883a 	mov	r7,r3
18008158:	9009883a 	mov	r4,r18
1800815c:	980b883a 	mov	r5,r19
18008160:	80128040 	call	18012804 <__subdf3>
18008164:	aa000c04 	addi	r8,r21,48
18008168:	a2000005 	stb	r8,0(r20)
1800816c:	000d883a 	mov	r6,zero
18008170:	01d00934 	movhi	r7,16420
18008174:	1009883a 	mov	r4,r2
18008178:	180b883a 	mov	r5,r3
1800817c:	a5c00044 	addi	r23,r20,1
18008180:	b53fd91e 	bne	r22,r20,180080e8 <__alt_data_end+0xf80080e8>
18008184:	100d883a 	mov	r6,r2
18008188:	180f883a 	mov	r7,r3
1800818c:	1009883a 	mov	r4,r2
18008190:	180b883a 	mov	r5,r3
18008194:	8010ac40 	call	18010ac4 <__adddf3>
18008198:	100d883a 	mov	r6,r2
1800819c:	180f883a 	mov	r7,r3
180081a0:	8009883a 	mov	r4,r16
180081a4:	880b883a 	mov	r5,r17
180081a8:	1027883a 	mov	r19,r2
180081ac:	1825883a 	mov	r18,r3
180081b0:	8011ea40 	call	18011ea4 <__ledf2>
180081b4:	10000816 	blt	r2,zero,180081d8 <_dtoa_r+0x948>
180081b8:	980d883a 	mov	r6,r19
180081bc:	900f883a 	mov	r7,r18
180081c0:	8009883a 	mov	r4,r16
180081c4:	880b883a 	mov	r5,r17
180081c8:	8011d400 	call	18011d40 <__eqdf2>
180081cc:	103f5a1e 	bne	r2,zero,18007f38 <__alt_data_end+0xf8007f38>
180081d0:	ad40004c 	andi	r21,r21,1
180081d4:	a83f5826 	beq	r21,zero,18007f38 <__alt_data_end+0xf8007f38>
180081d8:	bd3fffc3 	ldbu	r20,-1(r23)
180081dc:	b8bfffc4 	addi	r2,r23,-1
180081e0:	1007883a 	mov	r3,r2
180081e4:	01400e44 	movi	r5,57
180081e8:	d9800717 	ldw	r6,28(sp)
180081ec:	00000506 	br	18008204 <_dtoa_r+0x974>
180081f0:	18ffffc4 	addi	r3,r3,-1
180081f4:	11824726 	beq	r2,r6,18008b14 <_dtoa_r+0x1284>
180081f8:	1d000003 	ldbu	r20,0(r3)
180081fc:	102f883a 	mov	r23,r2
18008200:	10bfffc4 	addi	r2,r2,-1
18008204:	a1003fcc 	andi	r4,r20,255
18008208:	2100201c 	xori	r4,r4,128
1800820c:	213fe004 	addi	r4,r4,-128
18008210:	217ff726 	beq	r4,r5,180081f0 <__alt_data_end+0xf80081f0>
18008214:	a2000044 	addi	r8,r20,1
18008218:	12000005 	stb	r8,0(r2)
1800821c:	003f4606 	br	18007f38 <__alt_data_end+0xf8007f38>
18008220:	d9000b17 	ldw	r4,44(sp)
18008224:	2000c826 	beq	r4,zero,18008548 <_dtoa_r+0xcb8>
18008228:	d9800317 	ldw	r6,12(sp)
1800822c:	00c00044 	movi	r3,1
18008230:	1980f90e 	bge	r3,r6,18008618 <_dtoa_r+0xd88>
18008234:	d8800617 	ldw	r2,24(sp)
18008238:	d8c00a17 	ldw	r3,40(sp)
1800823c:	157fffc4 	addi	r21,r2,-1
18008240:	1d41f316 	blt	r3,r21,18008a10 <_dtoa_r+0x1180>
18008244:	1d6bc83a 	sub	r21,r3,r21
18008248:	d9c00617 	ldw	r7,24(sp)
1800824c:	3802aa16 	blt	r7,zero,18008cf8 <_dtoa_r+0x1468>
18008250:	dd000817 	ldw	r20,32(sp)
18008254:	d8800617 	ldw	r2,24(sp)
18008258:	d8c00817 	ldw	r3,32(sp)
1800825c:	01400044 	movi	r5,1
18008260:	e009883a 	mov	r4,fp
18008264:	1887883a 	add	r3,r3,r2
18008268:	d8c00815 	stw	r3,32(sp)
1800826c:	b0ad883a 	add	r22,r22,r2
18008270:	800b37c0 	call	1800b37c <__i2b>
18008274:	1023883a 	mov	r17,r2
18008278:	a0000826 	beq	r20,zero,1800829c <_dtoa_r+0xa0c>
1800827c:	0580070e 	bge	zero,r22,1800829c <_dtoa_r+0xa0c>
18008280:	a005883a 	mov	r2,r20
18008284:	b500b916 	blt	r22,r20,1800856c <_dtoa_r+0xcdc>
18008288:	d9000817 	ldw	r4,32(sp)
1800828c:	a0a9c83a 	sub	r20,r20,r2
18008290:	b0adc83a 	sub	r22,r22,r2
18008294:	2089c83a 	sub	r4,r4,r2
18008298:	d9000815 	stw	r4,32(sp)
1800829c:	d9800a17 	ldw	r6,40(sp)
180082a0:	0181810e 	bge	zero,r6,180088a8 <_dtoa_r+0x1018>
180082a4:	d9c00b17 	ldw	r7,44(sp)
180082a8:	3800b326 	beq	r7,zero,18008578 <_dtoa_r+0xce8>
180082ac:	a800b226 	beq	r21,zero,18008578 <_dtoa_r+0xce8>
180082b0:	880b883a 	mov	r5,r17
180082b4:	a80d883a 	mov	r6,r21
180082b8:	e009883a 	mov	r4,fp
180082bc:	800b6440 	call	1800b644 <__pow5mult>
180082c0:	d9800917 	ldw	r6,36(sp)
180082c4:	100b883a 	mov	r5,r2
180082c8:	e009883a 	mov	r4,fp
180082cc:	1023883a 	mov	r17,r2
180082d0:	800b3b80 	call	1800b3b8 <__multiply>
180082d4:	1021883a 	mov	r16,r2
180082d8:	d8800a17 	ldw	r2,40(sp)
180082dc:	d9400917 	ldw	r5,36(sp)
180082e0:	e009883a 	mov	r4,fp
180082e4:	1545c83a 	sub	r2,r2,r21
180082e8:	d8800a15 	stw	r2,40(sp)
180082ec:	800aff00 	call	1800aff0 <_Bfree>
180082f0:	d8c00a17 	ldw	r3,40(sp)
180082f4:	18009f1e 	bne	r3,zero,18008574 <_dtoa_r+0xce4>
180082f8:	05c00044 	movi	r23,1
180082fc:	e009883a 	mov	r4,fp
18008300:	b80b883a 	mov	r5,r23
18008304:	800b37c0 	call	1800b37c <__i2b>
18008308:	d9000d17 	ldw	r4,52(sp)
1800830c:	102b883a 	mov	r21,r2
18008310:	2000ce26 	beq	r4,zero,1800864c <_dtoa_r+0xdbc>
18008314:	200d883a 	mov	r6,r4
18008318:	100b883a 	mov	r5,r2
1800831c:	e009883a 	mov	r4,fp
18008320:	800b6440 	call	1800b644 <__pow5mult>
18008324:	d9800317 	ldw	r6,12(sp)
18008328:	102b883a 	mov	r21,r2
1800832c:	b981810e 	bge	r23,r6,18008934 <_dtoa_r+0x10a4>
18008330:	0027883a 	mov	r19,zero
18008334:	a8800417 	ldw	r2,16(r21)
18008338:	05c00804 	movi	r23,32
1800833c:	10800104 	addi	r2,r2,4
18008340:	1085883a 	add	r2,r2,r2
18008344:	1085883a 	add	r2,r2,r2
18008348:	a885883a 	add	r2,r21,r2
1800834c:	11000017 	ldw	r4,0(r2)
18008350:	800b2640 	call	1800b264 <__hi0bits>
18008354:	b885c83a 	sub	r2,r23,r2
18008358:	1585883a 	add	r2,r2,r22
1800835c:	108007cc 	andi	r2,r2,31
18008360:	1000b326 	beq	r2,zero,18008630 <_dtoa_r+0xda0>
18008364:	00c00804 	movi	r3,32
18008368:	1887c83a 	sub	r3,r3,r2
1800836c:	01000104 	movi	r4,4
18008370:	20c2cd0e 	bge	r4,r3,18008ea8 <_dtoa_r+0x1618>
18008374:	00c00704 	movi	r3,28
18008378:	1885c83a 	sub	r2,r3,r2
1800837c:	d8c00817 	ldw	r3,32(sp)
18008380:	a0a9883a 	add	r20,r20,r2
18008384:	b0ad883a 	add	r22,r22,r2
18008388:	1887883a 	add	r3,r3,r2
1800838c:	d8c00815 	stw	r3,32(sp)
18008390:	d9800817 	ldw	r6,32(sp)
18008394:	0180040e 	bge	zero,r6,180083a8 <_dtoa_r+0xb18>
18008398:	800b883a 	mov	r5,r16
1800839c:	e009883a 	mov	r4,fp
180083a0:	800b7840 	call	1800b784 <__lshift>
180083a4:	1021883a 	mov	r16,r2
180083a8:	0580050e 	bge	zero,r22,180083c0 <_dtoa_r+0xb30>
180083ac:	a80b883a 	mov	r5,r21
180083b0:	b00d883a 	mov	r6,r22
180083b4:	e009883a 	mov	r4,fp
180083b8:	800b7840 	call	1800b784 <__lshift>
180083bc:	102b883a 	mov	r21,r2
180083c0:	d9c00e17 	ldw	r7,56(sp)
180083c4:	3801211e 	bne	r7,zero,1800884c <_dtoa_r+0xfbc>
180083c8:	d9800617 	ldw	r6,24(sp)
180083cc:	0181380e 	bge	zero,r6,180088b0 <_dtoa_r+0x1020>
180083d0:	d8c00b17 	ldw	r3,44(sp)
180083d4:	1800ab1e 	bne	r3,zero,18008684 <_dtoa_r+0xdf4>
180083d8:	dc800717 	ldw	r18,28(sp)
180083dc:	dcc00617 	ldw	r19,24(sp)
180083e0:	9029883a 	mov	r20,r18
180083e4:	00000206 	br	180083f0 <_dtoa_r+0xb60>
180083e8:	800b0180 	call	1800b018 <__multadd>
180083ec:	1021883a 	mov	r16,r2
180083f0:	a80b883a 	mov	r5,r21
180083f4:	8009883a 	mov	r4,r16
180083f8:	80076680 	call	18007668 <quorem>
180083fc:	10800c04 	addi	r2,r2,48
18008400:	90800005 	stb	r2,0(r18)
18008404:	94800044 	addi	r18,r18,1
18008408:	9507c83a 	sub	r3,r18,r20
1800840c:	000f883a 	mov	r7,zero
18008410:	01800284 	movi	r6,10
18008414:	800b883a 	mov	r5,r16
18008418:	e009883a 	mov	r4,fp
1800841c:	1cfff216 	blt	r3,r19,180083e8 <__alt_data_end+0xf80083e8>
18008420:	1011883a 	mov	r8,r2
18008424:	d8800617 	ldw	r2,24(sp)
18008428:	0082370e 	bge	zero,r2,18008d08 <_dtoa_r+0x1478>
1800842c:	d9000717 	ldw	r4,28(sp)
18008430:	0025883a 	mov	r18,zero
18008434:	20af883a 	add	r23,r4,r2
18008438:	01800044 	movi	r6,1
1800843c:	800b883a 	mov	r5,r16
18008440:	e009883a 	mov	r4,fp
18008444:	da001715 	stw	r8,92(sp)
18008448:	800b7840 	call	1800b784 <__lshift>
1800844c:	a80b883a 	mov	r5,r21
18008450:	1009883a 	mov	r4,r2
18008454:	d8800915 	stw	r2,36(sp)
18008458:	800b8cc0 	call	1800b8cc <__mcmp>
1800845c:	da001717 	ldw	r8,92(sp)
18008460:	0081800e 	bge	zero,r2,18008a64 <_dtoa_r+0x11d4>
18008464:	b93fffc3 	ldbu	r4,-1(r23)
18008468:	b8bfffc4 	addi	r2,r23,-1
1800846c:	1007883a 	mov	r3,r2
18008470:	01800e44 	movi	r6,57
18008474:	d9c00717 	ldw	r7,28(sp)
18008478:	00000506 	br	18008490 <_dtoa_r+0xc00>
1800847c:	18ffffc4 	addi	r3,r3,-1
18008480:	11c12326 	beq	r2,r7,18008910 <_dtoa_r+0x1080>
18008484:	19000003 	ldbu	r4,0(r3)
18008488:	102f883a 	mov	r23,r2
1800848c:	10bfffc4 	addi	r2,r2,-1
18008490:	21403fcc 	andi	r5,r4,255
18008494:	2940201c 	xori	r5,r5,128
18008498:	297fe004 	addi	r5,r5,-128
1800849c:	29bff726 	beq	r5,r6,1800847c <__alt_data_end+0xf800847c>
180084a0:	21000044 	addi	r4,r4,1
180084a4:	11000005 	stb	r4,0(r2)
180084a8:	a80b883a 	mov	r5,r21
180084ac:	e009883a 	mov	r4,fp
180084b0:	800aff00 	call	1800aff0 <_Bfree>
180084b4:	883ea026 	beq	r17,zero,18007f38 <__alt_data_end+0xf8007f38>
180084b8:	90000426 	beq	r18,zero,180084cc <_dtoa_r+0xc3c>
180084bc:	94400326 	beq	r18,r17,180084cc <_dtoa_r+0xc3c>
180084c0:	900b883a 	mov	r5,r18
180084c4:	e009883a 	mov	r4,fp
180084c8:	800aff00 	call	1800aff0 <_Bfree>
180084cc:	880b883a 	mov	r5,r17
180084d0:	e009883a 	mov	r4,fp
180084d4:	800aff00 	call	1800aff0 <_Bfree>
180084d8:	003e9706 	br	18007f38 <__alt_data_end+0xf8007f38>
180084dc:	01800044 	movi	r6,1
180084e0:	d9800e15 	stw	r6,56(sp)
180084e4:	003d9606 	br	18007b40 <__alt_data_end+0xf8007b40>
180084e8:	d8800817 	ldw	r2,32(sp)
180084ec:	d8c00517 	ldw	r3,20(sp)
180084f0:	d8000d15 	stw	zero,52(sp)
180084f4:	10c5c83a 	sub	r2,r2,r3
180084f8:	00c9c83a 	sub	r4,zero,r3
180084fc:	d8800815 	stw	r2,32(sp)
18008500:	d9000a15 	stw	r4,40(sp)
18008504:	003d9706 	br	18007b64 <__alt_data_end+0xf8007b64>
18008508:	05adc83a 	sub	r22,zero,r22
1800850c:	dd800815 	stw	r22,32(sp)
18008510:	002d883a 	mov	r22,zero
18008514:	003d8e06 	br	18007b50 <__alt_data_end+0xf8007b50>
18008518:	d9000517 	ldw	r4,20(sp)
1800851c:	80131800 	call	18013180 <__floatsidf>
18008520:	100d883a 	mov	r6,r2
18008524:	180f883a 	mov	r7,r3
18008528:	a009883a 	mov	r4,r20
1800852c:	880b883a 	mov	r5,r17
18008530:	8011d400 	call	18011d40 <__eqdf2>
18008534:	103d7126 	beq	r2,zero,18007afc <__alt_data_end+0xf8007afc>
18008538:	d9c00517 	ldw	r7,20(sp)
1800853c:	39ffffc4 	addi	r7,r7,-1
18008540:	d9c00515 	stw	r7,20(sp)
18008544:	003d6d06 	br	18007afc <__alt_data_end+0xf8007afc>
18008548:	dd400a17 	ldw	r21,40(sp)
1800854c:	dd000817 	ldw	r20,32(sp)
18008550:	0023883a 	mov	r17,zero
18008554:	003f4806 	br	18008278 <__alt_data_end+0xf8008278>
18008558:	10e3c83a 	sub	r17,r2,r3
1800855c:	9448983a 	sll	r4,r18,r17
18008560:	003d3206 	br	18007a2c <__alt_data_end+0xf8007a2c>
18008564:	d8000e15 	stw	zero,56(sp)
18008568:	003d7506 	br	18007b40 <__alt_data_end+0xf8007b40>
1800856c:	b005883a 	mov	r2,r22
18008570:	003f4506 	br	18008288 <__alt_data_end+0xf8008288>
18008574:	dc000915 	stw	r16,36(sp)
18008578:	d9800a17 	ldw	r6,40(sp)
1800857c:	d9400917 	ldw	r5,36(sp)
18008580:	e009883a 	mov	r4,fp
18008584:	800b6440 	call	1800b644 <__pow5mult>
18008588:	1021883a 	mov	r16,r2
1800858c:	003f5a06 	br	180082f8 <__alt_data_end+0xf80082f8>
18008590:	01c00044 	movi	r7,1
18008594:	d9c00b15 	stw	r7,44(sp)
18008598:	d8802217 	ldw	r2,136(sp)
1800859c:	0081280e 	bge	zero,r2,18008a40 <_dtoa_r+0x11b0>
180085a0:	100d883a 	mov	r6,r2
180085a4:	1021883a 	mov	r16,r2
180085a8:	d8800c15 	stw	r2,48(sp)
180085ac:	d8800615 	stw	r2,24(sp)
180085b0:	003d8806 	br	18007bd4 <__alt_data_end+0xf8007bd4>
180085b4:	d8800617 	ldw	r2,24(sp)
180085b8:	00be9b16 	blt	zero,r2,18008028 <__alt_data_end+0xf8008028>
180085bc:	10010f1e 	bne	r2,zero,180089fc <_dtoa_r+0x116c>
180085c0:	880b883a 	mov	r5,r17
180085c4:	000d883a 	mov	r6,zero
180085c8:	01d00534 	movhi	r7,16404
180085cc:	8009883a 	mov	r4,r16
180085d0:	8011f980 	call	18011f98 <__muldf3>
180085d4:	900d883a 	mov	r6,r18
180085d8:	980f883a 	mov	r7,r19
180085dc:	1009883a 	mov	r4,r2
180085e0:	180b883a 	mov	r5,r3
180085e4:	8011dc80 	call	18011dc8 <__gedf2>
180085e8:	002b883a 	mov	r21,zero
180085ec:	0023883a 	mov	r17,zero
180085f0:	1000bf16 	blt	r2,zero,180088f0 <_dtoa_r+0x1060>
180085f4:	d9802217 	ldw	r6,136(sp)
180085f8:	ddc00717 	ldw	r23,28(sp)
180085fc:	018c303a 	nor	r6,zero,r6
18008600:	d9800515 	stw	r6,20(sp)
18008604:	a80b883a 	mov	r5,r21
18008608:	e009883a 	mov	r4,fp
1800860c:	800aff00 	call	1800aff0 <_Bfree>
18008610:	883e4926 	beq	r17,zero,18007f38 <__alt_data_end+0xf8007f38>
18008614:	003fad06 	br	180084cc <__alt_data_end+0xf80084cc>
18008618:	d9c01117 	ldw	r7,68(sp)
1800861c:	3801bc26 	beq	r7,zero,18008d10 <_dtoa_r+0x1480>
18008620:	10810cc4 	addi	r2,r2,1075
18008624:	dd400a17 	ldw	r21,40(sp)
18008628:	dd000817 	ldw	r20,32(sp)
1800862c:	003f0a06 	br	18008258 <__alt_data_end+0xf8008258>
18008630:	00800704 	movi	r2,28
18008634:	d9000817 	ldw	r4,32(sp)
18008638:	a0a9883a 	add	r20,r20,r2
1800863c:	b0ad883a 	add	r22,r22,r2
18008640:	2089883a 	add	r4,r4,r2
18008644:	d9000815 	stw	r4,32(sp)
18008648:	003f5106 	br	18008390 <__alt_data_end+0xf8008390>
1800864c:	d8c00317 	ldw	r3,12(sp)
18008650:	b8c1fc0e 	bge	r23,r3,18008e44 <_dtoa_r+0x15b4>
18008654:	0027883a 	mov	r19,zero
18008658:	b805883a 	mov	r2,r23
1800865c:	003f3e06 	br	18008358 <__alt_data_end+0xf8008358>
18008660:	880b883a 	mov	r5,r17
18008664:	e009883a 	mov	r4,fp
18008668:	000f883a 	mov	r7,zero
1800866c:	01800284 	movi	r6,10
18008670:	800b0180 	call	1800b018 <__multadd>
18008674:	d9000c17 	ldw	r4,48(sp)
18008678:	1023883a 	mov	r17,r2
1800867c:	0102040e 	bge	zero,r4,18008e90 <_dtoa_r+0x1600>
18008680:	d9000615 	stw	r4,24(sp)
18008684:	0500050e 	bge	zero,r20,1800869c <_dtoa_r+0xe0c>
18008688:	880b883a 	mov	r5,r17
1800868c:	a00d883a 	mov	r6,r20
18008690:	e009883a 	mov	r4,fp
18008694:	800b7840 	call	1800b784 <__lshift>
18008698:	1023883a 	mov	r17,r2
1800869c:	9801241e 	bne	r19,zero,18008b30 <_dtoa_r+0x12a0>
180086a0:	8829883a 	mov	r20,r17
180086a4:	d9000617 	ldw	r4,24(sp)
180086a8:	dcc00717 	ldw	r19,28(sp)
180086ac:	9480004c 	andi	r18,r18,1
180086b0:	20bfffc4 	addi	r2,r4,-1
180086b4:	9885883a 	add	r2,r19,r2
180086b8:	d8800415 	stw	r2,16(sp)
180086bc:	dc800615 	stw	r18,24(sp)
180086c0:	a80b883a 	mov	r5,r21
180086c4:	8009883a 	mov	r4,r16
180086c8:	80076680 	call	18007668 <quorem>
180086cc:	880b883a 	mov	r5,r17
180086d0:	8009883a 	mov	r4,r16
180086d4:	102f883a 	mov	r23,r2
180086d8:	800b8cc0 	call	1800b8cc <__mcmp>
180086dc:	a80b883a 	mov	r5,r21
180086e0:	a00d883a 	mov	r6,r20
180086e4:	e009883a 	mov	r4,fp
180086e8:	102d883a 	mov	r22,r2
180086ec:	800b92c0 	call	1800b92c <__mdiff>
180086f0:	1007883a 	mov	r3,r2
180086f4:	10800317 	ldw	r2,12(r2)
180086f8:	bc800c04 	addi	r18,r23,48
180086fc:	180b883a 	mov	r5,r3
18008700:	10004e1e 	bne	r2,zero,1800883c <_dtoa_r+0xfac>
18008704:	8009883a 	mov	r4,r16
18008708:	d8c01615 	stw	r3,88(sp)
1800870c:	800b8cc0 	call	1800b8cc <__mcmp>
18008710:	d8c01617 	ldw	r3,88(sp)
18008714:	e009883a 	mov	r4,fp
18008718:	d8801615 	stw	r2,88(sp)
1800871c:	180b883a 	mov	r5,r3
18008720:	800aff00 	call	1800aff0 <_Bfree>
18008724:	d8801617 	ldw	r2,88(sp)
18008728:	1000041e 	bne	r2,zero,1800873c <_dtoa_r+0xeac>
1800872c:	d9800317 	ldw	r6,12(sp)
18008730:	3000021e 	bne	r6,zero,1800873c <_dtoa_r+0xeac>
18008734:	d8c00617 	ldw	r3,24(sp)
18008738:	18003726 	beq	r3,zero,18008818 <_dtoa_r+0xf88>
1800873c:	b0002016 	blt	r22,zero,180087c0 <_dtoa_r+0xf30>
18008740:	b000041e 	bne	r22,zero,18008754 <_dtoa_r+0xec4>
18008744:	d9000317 	ldw	r4,12(sp)
18008748:	2000021e 	bne	r4,zero,18008754 <_dtoa_r+0xec4>
1800874c:	d8c00617 	ldw	r3,24(sp)
18008750:	18001b26 	beq	r3,zero,180087c0 <_dtoa_r+0xf30>
18008754:	00810716 	blt	zero,r2,18008b74 <_dtoa_r+0x12e4>
18008758:	d8c00417 	ldw	r3,16(sp)
1800875c:	9d800044 	addi	r22,r19,1
18008760:	9c800005 	stb	r18,0(r19)
18008764:	b02f883a 	mov	r23,r22
18008768:	98c10626 	beq	r19,r3,18008b84 <_dtoa_r+0x12f4>
1800876c:	800b883a 	mov	r5,r16
18008770:	000f883a 	mov	r7,zero
18008774:	01800284 	movi	r6,10
18008778:	e009883a 	mov	r4,fp
1800877c:	800b0180 	call	1800b018 <__multadd>
18008780:	1021883a 	mov	r16,r2
18008784:	000f883a 	mov	r7,zero
18008788:	01800284 	movi	r6,10
1800878c:	880b883a 	mov	r5,r17
18008790:	e009883a 	mov	r4,fp
18008794:	8d002526 	beq	r17,r20,1800882c <_dtoa_r+0xf9c>
18008798:	800b0180 	call	1800b018 <__multadd>
1800879c:	a00b883a 	mov	r5,r20
180087a0:	000f883a 	mov	r7,zero
180087a4:	01800284 	movi	r6,10
180087a8:	e009883a 	mov	r4,fp
180087ac:	1023883a 	mov	r17,r2
180087b0:	800b0180 	call	1800b018 <__multadd>
180087b4:	1029883a 	mov	r20,r2
180087b8:	b027883a 	mov	r19,r22
180087bc:	003fc006 	br	180086c0 <__alt_data_end+0xf80086c0>
180087c0:	9011883a 	mov	r8,r18
180087c4:	00800e0e 	bge	zero,r2,18008800 <_dtoa_r+0xf70>
180087c8:	800b883a 	mov	r5,r16
180087cc:	01800044 	movi	r6,1
180087d0:	e009883a 	mov	r4,fp
180087d4:	da001715 	stw	r8,92(sp)
180087d8:	800b7840 	call	1800b784 <__lshift>
180087dc:	a80b883a 	mov	r5,r21
180087e0:	1009883a 	mov	r4,r2
180087e4:	1021883a 	mov	r16,r2
180087e8:	800b8cc0 	call	1800b8cc <__mcmp>
180087ec:	da001717 	ldw	r8,92(sp)
180087f0:	0081960e 	bge	zero,r2,18008e4c <_dtoa_r+0x15bc>
180087f4:	00800e44 	movi	r2,57
180087f8:	40817026 	beq	r8,r2,18008dbc <_dtoa_r+0x152c>
180087fc:	ba000c44 	addi	r8,r23,49
18008800:	8825883a 	mov	r18,r17
18008804:	9dc00044 	addi	r23,r19,1
18008808:	9a000005 	stb	r8,0(r19)
1800880c:	a023883a 	mov	r17,r20
18008810:	dc000915 	stw	r16,36(sp)
18008814:	003f2406 	br	180084a8 <__alt_data_end+0xf80084a8>
18008818:	00800e44 	movi	r2,57
1800881c:	9011883a 	mov	r8,r18
18008820:	90816626 	beq	r18,r2,18008dbc <_dtoa_r+0x152c>
18008824:	05bff516 	blt	zero,r22,180087fc <__alt_data_end+0xf80087fc>
18008828:	003ff506 	br	18008800 <__alt_data_end+0xf8008800>
1800882c:	800b0180 	call	1800b018 <__multadd>
18008830:	1023883a 	mov	r17,r2
18008834:	1029883a 	mov	r20,r2
18008838:	003fdf06 	br	180087b8 <__alt_data_end+0xf80087b8>
1800883c:	e009883a 	mov	r4,fp
18008840:	800aff00 	call	1800aff0 <_Bfree>
18008844:	00800044 	movi	r2,1
18008848:	003fbc06 	br	1800873c <__alt_data_end+0xf800873c>
1800884c:	a80b883a 	mov	r5,r21
18008850:	8009883a 	mov	r4,r16
18008854:	800b8cc0 	call	1800b8cc <__mcmp>
18008858:	103edb0e 	bge	r2,zero,180083c8 <__alt_data_end+0xf80083c8>
1800885c:	800b883a 	mov	r5,r16
18008860:	000f883a 	mov	r7,zero
18008864:	01800284 	movi	r6,10
18008868:	e009883a 	mov	r4,fp
1800886c:	800b0180 	call	1800b018 <__multadd>
18008870:	1021883a 	mov	r16,r2
18008874:	d8800517 	ldw	r2,20(sp)
18008878:	d8c00b17 	ldw	r3,44(sp)
1800887c:	10bfffc4 	addi	r2,r2,-1
18008880:	d8800515 	stw	r2,20(sp)
18008884:	183f761e 	bne	r3,zero,18008660 <__alt_data_end+0xf8008660>
18008888:	d9000c17 	ldw	r4,48(sp)
1800888c:	0101730e 	bge	zero,r4,18008e5c <_dtoa_r+0x15cc>
18008890:	d9000615 	stw	r4,24(sp)
18008894:	003ed006 	br	180083d8 <__alt_data_end+0xf80083d8>
18008898:	00800084 	movi	r2,2
1800889c:	3081861e 	bne	r6,r2,18008eb8 <_dtoa_r+0x1628>
180088a0:	d8000b15 	stw	zero,44(sp)
180088a4:	003f3c06 	br	18008598 <__alt_data_end+0xf8008598>
180088a8:	dc000917 	ldw	r16,36(sp)
180088ac:	003e9206 	br	180082f8 <__alt_data_end+0xf80082f8>
180088b0:	d9c00317 	ldw	r7,12(sp)
180088b4:	00800084 	movi	r2,2
180088b8:	11fec50e 	bge	r2,r7,180083d0 <__alt_data_end+0xf80083d0>
180088bc:	d9000617 	ldw	r4,24(sp)
180088c0:	20013c1e 	bne	r4,zero,18008db4 <_dtoa_r+0x1524>
180088c4:	a80b883a 	mov	r5,r21
180088c8:	000f883a 	mov	r7,zero
180088cc:	01800144 	movi	r6,5
180088d0:	e009883a 	mov	r4,fp
180088d4:	800b0180 	call	1800b018 <__multadd>
180088d8:	100b883a 	mov	r5,r2
180088dc:	8009883a 	mov	r4,r16
180088e0:	102b883a 	mov	r21,r2
180088e4:	800b8cc0 	call	1800b8cc <__mcmp>
180088e8:	dc000915 	stw	r16,36(sp)
180088ec:	00bf410e 	bge	zero,r2,180085f4 <__alt_data_end+0xf80085f4>
180088f0:	d9c00717 	ldw	r7,28(sp)
180088f4:	00800c44 	movi	r2,49
180088f8:	38800005 	stb	r2,0(r7)
180088fc:	d8800517 	ldw	r2,20(sp)
18008900:	3dc00044 	addi	r23,r7,1
18008904:	10800044 	addi	r2,r2,1
18008908:	d8800515 	stw	r2,20(sp)
1800890c:	003f3d06 	br	18008604 <__alt_data_end+0xf8008604>
18008910:	d9800517 	ldw	r6,20(sp)
18008914:	d9c00717 	ldw	r7,28(sp)
18008918:	00800c44 	movi	r2,49
1800891c:	31800044 	addi	r6,r6,1
18008920:	d9800515 	stw	r6,20(sp)
18008924:	38800005 	stb	r2,0(r7)
18008928:	003edf06 	br	180084a8 <__alt_data_end+0xf80084a8>
1800892c:	d8000b15 	stw	zero,44(sp)
18008930:	003c9f06 	br	18007bb0 <__alt_data_end+0xf8007bb0>
18008934:	903e7e1e 	bne	r18,zero,18008330 <__alt_data_end+0xf8008330>
18008938:	00800434 	movhi	r2,16
1800893c:	10bfffc4 	addi	r2,r2,-1
18008940:	9884703a 	and	r2,r19,r2
18008944:	1000ea1e 	bne	r2,zero,18008cf0 <_dtoa_r+0x1460>
18008948:	9cdffc2c 	andhi	r19,r19,32752
1800894c:	9800e826 	beq	r19,zero,18008cf0 <_dtoa_r+0x1460>
18008950:	d9c00817 	ldw	r7,32(sp)
18008954:	b5800044 	addi	r22,r22,1
18008958:	04c00044 	movi	r19,1
1800895c:	39c00044 	addi	r7,r7,1
18008960:	d9c00815 	stw	r7,32(sp)
18008964:	d8800d17 	ldw	r2,52(sp)
18008968:	103e721e 	bne	r2,zero,18008334 <__alt_data_end+0xf8008334>
1800896c:	00800044 	movi	r2,1
18008970:	003e7906 	br	18008358 <__alt_data_end+0xf8008358>
18008974:	8009883a 	mov	r4,r16
18008978:	80131800 	call	18013180 <__floatsidf>
1800897c:	d9800f17 	ldw	r6,60(sp)
18008980:	d9c01017 	ldw	r7,64(sp)
18008984:	1009883a 	mov	r4,r2
18008988:	180b883a 	mov	r5,r3
1800898c:	8011f980 	call	18011f98 <__muldf3>
18008990:	000d883a 	mov	r6,zero
18008994:	01d00734 	movhi	r7,16412
18008998:	1009883a 	mov	r4,r2
1800899c:	180b883a 	mov	r5,r3
180089a0:	8010ac40 	call	18010ac4 <__adddf3>
180089a4:	047f3034 	movhi	r17,64704
180089a8:	1021883a 	mov	r16,r2
180089ac:	1c63883a 	add	r17,r3,r17
180089b0:	d9000f17 	ldw	r4,60(sp)
180089b4:	d9401017 	ldw	r5,64(sp)
180089b8:	000d883a 	mov	r6,zero
180089bc:	01d00534 	movhi	r7,16404
180089c0:	80128040 	call	18012804 <__subdf3>
180089c4:	800d883a 	mov	r6,r16
180089c8:	880f883a 	mov	r7,r17
180089cc:	1009883a 	mov	r4,r2
180089d0:	180b883a 	mov	r5,r3
180089d4:	102b883a 	mov	r21,r2
180089d8:	1829883a 	mov	r20,r3
180089dc:	8011dc80 	call	18011dc8 <__gedf2>
180089e0:	00806c16 	blt	zero,r2,18008b94 <_dtoa_r+0x1304>
180089e4:	89e0003c 	xorhi	r7,r17,32768
180089e8:	800d883a 	mov	r6,r16
180089ec:	a809883a 	mov	r4,r21
180089f0:	a00b883a 	mov	r5,r20
180089f4:	8011ea40 	call	18011ea4 <__ledf2>
180089f8:	103d7e0e 	bge	r2,zero,18007ff4 <__alt_data_end+0xf8007ff4>
180089fc:	002b883a 	mov	r21,zero
18008a00:	0023883a 	mov	r17,zero
18008a04:	003efb06 	br	180085f4 <__alt_data_end+0xf80085f4>
18008a08:	d8800717 	ldw	r2,28(sp)
18008a0c:	003bd006 	br	18007950 <__alt_data_end+0xf8007950>
18008a10:	d9000a17 	ldw	r4,40(sp)
18008a14:	d9800d17 	ldw	r6,52(sp)
18008a18:	dd400a15 	stw	r21,40(sp)
18008a1c:	a905c83a 	sub	r2,r21,r4
18008a20:	308d883a 	add	r6,r6,r2
18008a24:	d9800d15 	stw	r6,52(sp)
18008a28:	002b883a 	mov	r21,zero
18008a2c:	003e0606 	br	18008248 <__alt_data_end+0xf8008248>
18008a30:	9023883a 	mov	r17,r18
18008a34:	9829883a 	mov	r20,r19
18008a38:	04000084 	movi	r16,2
18008a3c:	003c9206 	br	18007c88 <__alt_data_end+0xf8007c88>
18008a40:	04000044 	movi	r16,1
18008a44:	dc000c15 	stw	r16,48(sp)
18008a48:	dc000615 	stw	r16,24(sp)
18008a4c:	dc002215 	stw	r16,136(sp)
18008a50:	e0001115 	stw	zero,68(fp)
18008a54:	000b883a 	mov	r5,zero
18008a58:	003c6906 	br	18007c00 <__alt_data_end+0xf8007c00>
18008a5c:	3021883a 	mov	r16,r6
18008a60:	003ffb06 	br	18008a50 <__alt_data_end+0xf8008a50>
18008a64:	1000021e 	bne	r2,zero,18008a70 <_dtoa_r+0x11e0>
18008a68:	4200004c 	andi	r8,r8,1
18008a6c:	403e7d1e 	bne	r8,zero,18008464 <__alt_data_end+0xf8008464>
18008a70:	01000c04 	movi	r4,48
18008a74:	00000106 	br	18008a7c <_dtoa_r+0x11ec>
18008a78:	102f883a 	mov	r23,r2
18008a7c:	b8bfffc4 	addi	r2,r23,-1
18008a80:	10c00007 	ldb	r3,0(r2)
18008a84:	193ffc26 	beq	r3,r4,18008a78 <__alt_data_end+0xf8008a78>
18008a88:	003e8706 	br	180084a8 <__alt_data_end+0xf80084a8>
18008a8c:	d8800517 	ldw	r2,20(sp)
18008a90:	00a3c83a 	sub	r17,zero,r2
18008a94:	8800a426 	beq	r17,zero,18008d28 <_dtoa_r+0x1498>
18008a98:	888003cc 	andi	r2,r17,15
18008a9c:	100490fa 	slli	r2,r2,3
18008aa0:	00c60074 	movhi	r3,6145
18008aa4:	18d92a04 	addi	r3,r3,25768
18008aa8:	1885883a 	add	r2,r3,r2
18008aac:	11800017 	ldw	r6,0(r2)
18008ab0:	11c00117 	ldw	r7,4(r2)
18008ab4:	9009883a 	mov	r4,r18
18008ab8:	980b883a 	mov	r5,r19
18008abc:	8823d13a 	srai	r17,r17,4
18008ac0:	8011f980 	call	18011f98 <__muldf3>
18008ac4:	d8800f15 	stw	r2,60(sp)
18008ac8:	d8c01015 	stw	r3,64(sp)
18008acc:	8800e826 	beq	r17,zero,18008e70 <_dtoa_r+0x15e0>
18008ad0:	05060074 	movhi	r20,6145
18008ad4:	a5192004 	addi	r20,r20,25728
18008ad8:	04000084 	movi	r16,2
18008adc:	8980004c 	andi	r6,r17,1
18008ae0:	1009883a 	mov	r4,r2
18008ae4:	8823d07a 	srai	r17,r17,1
18008ae8:	180b883a 	mov	r5,r3
18008aec:	30000426 	beq	r6,zero,18008b00 <_dtoa_r+0x1270>
18008af0:	a1800017 	ldw	r6,0(r20)
18008af4:	a1c00117 	ldw	r7,4(r20)
18008af8:	84000044 	addi	r16,r16,1
18008afc:	8011f980 	call	18011f98 <__muldf3>
18008b00:	a5000204 	addi	r20,r20,8
18008b04:	883ff51e 	bne	r17,zero,18008adc <__alt_data_end+0xf8008adc>
18008b08:	d8800f15 	stw	r2,60(sp)
18008b0c:	d8c01015 	stw	r3,64(sp)
18008b10:	003c7606 	br	18007cec <__alt_data_end+0xf8007cec>
18008b14:	00c00c04 	movi	r3,48
18008b18:	10c00005 	stb	r3,0(r2)
18008b1c:	d8c00517 	ldw	r3,20(sp)
18008b20:	bd3fffc3 	ldbu	r20,-1(r23)
18008b24:	18c00044 	addi	r3,r3,1
18008b28:	d8c00515 	stw	r3,20(sp)
18008b2c:	003db906 	br	18008214 <__alt_data_end+0xf8008214>
18008b30:	89400117 	ldw	r5,4(r17)
18008b34:	e009883a 	mov	r4,fp
18008b38:	800af480 	call	1800af48 <_Balloc>
18008b3c:	89800417 	ldw	r6,16(r17)
18008b40:	89400304 	addi	r5,r17,12
18008b44:	11000304 	addi	r4,r2,12
18008b48:	31800084 	addi	r6,r6,2
18008b4c:	318d883a 	add	r6,r6,r6
18008b50:	318d883a 	add	r6,r6,r6
18008b54:	1027883a 	mov	r19,r2
18008b58:	800ab7c0 	call	1800ab7c <memcpy>
18008b5c:	01800044 	movi	r6,1
18008b60:	980b883a 	mov	r5,r19
18008b64:	e009883a 	mov	r4,fp
18008b68:	800b7840 	call	1800b784 <__lshift>
18008b6c:	1029883a 	mov	r20,r2
18008b70:	003ecc06 	br	180086a4 <__alt_data_end+0xf80086a4>
18008b74:	00800e44 	movi	r2,57
18008b78:	90809026 	beq	r18,r2,18008dbc <_dtoa_r+0x152c>
18008b7c:	92000044 	addi	r8,r18,1
18008b80:	003f1f06 	br	18008800 <__alt_data_end+0xf8008800>
18008b84:	9011883a 	mov	r8,r18
18008b88:	8825883a 	mov	r18,r17
18008b8c:	a023883a 	mov	r17,r20
18008b90:	003e2906 	br	18008438 <__alt_data_end+0xf8008438>
18008b94:	002b883a 	mov	r21,zero
18008b98:	0023883a 	mov	r17,zero
18008b9c:	003f5406 	br	180088f0 <__alt_data_end+0xf80088f0>
18008ba0:	61bfffc4 	addi	r6,r12,-1
18008ba4:	300490fa 	slli	r2,r6,3
18008ba8:	00c60074 	movhi	r3,6145
18008bac:	18d92a04 	addi	r3,r3,25768
18008bb0:	1885883a 	add	r2,r3,r2
18008bb4:	11000017 	ldw	r4,0(r2)
18008bb8:	11400117 	ldw	r5,4(r2)
18008bbc:	d8800717 	ldw	r2,28(sp)
18008bc0:	880f883a 	mov	r7,r17
18008bc4:	d9801215 	stw	r6,72(sp)
18008bc8:	800d883a 	mov	r6,r16
18008bcc:	db001615 	stw	r12,88(sp)
18008bd0:	15c00044 	addi	r23,r2,1
18008bd4:	8011f980 	call	18011f98 <__muldf3>
18008bd8:	d9401017 	ldw	r5,64(sp)
18008bdc:	d9000f17 	ldw	r4,60(sp)
18008be0:	d8c01515 	stw	r3,84(sp)
18008be4:	d8801415 	stw	r2,80(sp)
18008be8:	80131000 	call	18013100 <__fixdfsi>
18008bec:	1009883a 	mov	r4,r2
18008bf0:	1021883a 	mov	r16,r2
18008bf4:	80131800 	call	18013180 <__floatsidf>
18008bf8:	d9000f17 	ldw	r4,60(sp)
18008bfc:	d9401017 	ldw	r5,64(sp)
18008c00:	100d883a 	mov	r6,r2
18008c04:	180f883a 	mov	r7,r3
18008c08:	80128040 	call	18012804 <__subdf3>
18008c0c:	1829883a 	mov	r20,r3
18008c10:	d8c00717 	ldw	r3,28(sp)
18008c14:	84000c04 	addi	r16,r16,48
18008c18:	1023883a 	mov	r17,r2
18008c1c:	1c000005 	stb	r16,0(r3)
18008c20:	db001617 	ldw	r12,88(sp)
18008c24:	00800044 	movi	r2,1
18008c28:	60802226 	beq	r12,r2,18008cb4 <_dtoa_r+0x1424>
18008c2c:	d9c00717 	ldw	r7,28(sp)
18008c30:	8805883a 	mov	r2,r17
18008c34:	b82b883a 	mov	r21,r23
18008c38:	3b19883a 	add	r12,r7,r12
18008c3c:	6023883a 	mov	r17,r12
18008c40:	a007883a 	mov	r3,r20
18008c44:	dc800f15 	stw	r18,60(sp)
18008c48:	000d883a 	mov	r6,zero
18008c4c:	01d00934 	movhi	r7,16420
18008c50:	1009883a 	mov	r4,r2
18008c54:	180b883a 	mov	r5,r3
18008c58:	8011f980 	call	18011f98 <__muldf3>
18008c5c:	180b883a 	mov	r5,r3
18008c60:	1009883a 	mov	r4,r2
18008c64:	1829883a 	mov	r20,r3
18008c68:	1025883a 	mov	r18,r2
18008c6c:	80131000 	call	18013100 <__fixdfsi>
18008c70:	1009883a 	mov	r4,r2
18008c74:	1021883a 	mov	r16,r2
18008c78:	80131800 	call	18013180 <__floatsidf>
18008c7c:	100d883a 	mov	r6,r2
18008c80:	180f883a 	mov	r7,r3
18008c84:	9009883a 	mov	r4,r18
18008c88:	a00b883a 	mov	r5,r20
18008c8c:	84000c04 	addi	r16,r16,48
18008c90:	80128040 	call	18012804 <__subdf3>
18008c94:	ad400044 	addi	r21,r21,1
18008c98:	ac3fffc5 	stb	r16,-1(r21)
18008c9c:	ac7fea1e 	bne	r21,r17,18008c48 <__alt_data_end+0xf8008c48>
18008ca0:	1023883a 	mov	r17,r2
18008ca4:	d8801217 	ldw	r2,72(sp)
18008ca8:	dc800f17 	ldw	r18,60(sp)
18008cac:	1829883a 	mov	r20,r3
18008cb0:	b8af883a 	add	r23,r23,r2
18008cb4:	d9001417 	ldw	r4,80(sp)
18008cb8:	d9401517 	ldw	r5,84(sp)
18008cbc:	000d883a 	mov	r6,zero
18008cc0:	01cff834 	movhi	r7,16352
18008cc4:	8010ac40 	call	18010ac4 <__adddf3>
18008cc8:	880d883a 	mov	r6,r17
18008ccc:	a00f883a 	mov	r7,r20
18008cd0:	1009883a 	mov	r4,r2
18008cd4:	180b883a 	mov	r5,r3
18008cd8:	8011ea40 	call	18011ea4 <__ledf2>
18008cdc:	10003e0e 	bge	r2,zero,18008dd8 <_dtoa_r+0x1548>
18008ce0:	d9001317 	ldw	r4,76(sp)
18008ce4:	bd3fffc3 	ldbu	r20,-1(r23)
18008ce8:	d9000515 	stw	r4,20(sp)
18008cec:	003d3b06 	br	180081dc <__alt_data_end+0xf80081dc>
18008cf0:	0027883a 	mov	r19,zero
18008cf4:	003f1b06 	br	18008964 <__alt_data_end+0xf8008964>
18008cf8:	d8800817 	ldw	r2,32(sp)
18008cfc:	11e9c83a 	sub	r20,r2,r7
18008d00:	0005883a 	mov	r2,zero
18008d04:	003d5406 	br	18008258 <__alt_data_end+0xf8008258>
18008d08:	00800044 	movi	r2,1
18008d0c:	003dc706 	br	1800842c <__alt_data_end+0xf800842c>
18008d10:	d8c00217 	ldw	r3,8(sp)
18008d14:	00800d84 	movi	r2,54
18008d18:	dd400a17 	ldw	r21,40(sp)
18008d1c:	10c5c83a 	sub	r2,r2,r3
18008d20:	dd000817 	ldw	r20,32(sp)
18008d24:	003d4c06 	br	18008258 <__alt_data_end+0xf8008258>
18008d28:	dc800f15 	stw	r18,60(sp)
18008d2c:	dcc01015 	stw	r19,64(sp)
18008d30:	04000084 	movi	r16,2
18008d34:	003bed06 	br	18007cec <__alt_data_end+0xf8007cec>
18008d38:	d9000617 	ldw	r4,24(sp)
18008d3c:	203f0d26 	beq	r4,zero,18008974 <__alt_data_end+0xf8008974>
18008d40:	d9800c17 	ldw	r6,48(sp)
18008d44:	01bcab0e 	bge	zero,r6,18007ff4 <__alt_data_end+0xf8007ff4>
18008d48:	d9401017 	ldw	r5,64(sp)
18008d4c:	d9000f17 	ldw	r4,60(sp)
18008d50:	000d883a 	mov	r6,zero
18008d54:	01d00934 	movhi	r7,16420
18008d58:	8011f980 	call	18011f98 <__muldf3>
18008d5c:	81000044 	addi	r4,r16,1
18008d60:	d8800f15 	stw	r2,60(sp)
18008d64:	d8c01015 	stw	r3,64(sp)
18008d68:	80131800 	call	18013180 <__floatsidf>
18008d6c:	d9800f17 	ldw	r6,60(sp)
18008d70:	d9c01017 	ldw	r7,64(sp)
18008d74:	1009883a 	mov	r4,r2
18008d78:	180b883a 	mov	r5,r3
18008d7c:	8011f980 	call	18011f98 <__muldf3>
18008d80:	01d00734 	movhi	r7,16412
18008d84:	000d883a 	mov	r6,zero
18008d88:	1009883a 	mov	r4,r2
18008d8c:	180b883a 	mov	r5,r3
18008d90:	8010ac40 	call	18010ac4 <__adddf3>
18008d94:	d9c00517 	ldw	r7,20(sp)
18008d98:	047f3034 	movhi	r17,64704
18008d9c:	1021883a 	mov	r16,r2
18008da0:	39ffffc4 	addi	r7,r7,-1
18008da4:	d9c01315 	stw	r7,76(sp)
18008da8:	1c63883a 	add	r17,r3,r17
18008dac:	db000c17 	ldw	r12,48(sp)
18008db0:	003bea06 	br	18007d5c <__alt_data_end+0xf8007d5c>
18008db4:	dc000915 	stw	r16,36(sp)
18008db8:	003e0e06 	br	180085f4 <__alt_data_end+0xf80085f4>
18008dbc:	01000e44 	movi	r4,57
18008dc0:	8825883a 	mov	r18,r17
18008dc4:	9dc00044 	addi	r23,r19,1
18008dc8:	99000005 	stb	r4,0(r19)
18008dcc:	a023883a 	mov	r17,r20
18008dd0:	dc000915 	stw	r16,36(sp)
18008dd4:	003da406 	br	18008468 <__alt_data_end+0xf8008468>
18008dd8:	d9801417 	ldw	r6,80(sp)
18008ddc:	d9c01517 	ldw	r7,84(sp)
18008de0:	0009883a 	mov	r4,zero
18008de4:	014ff834 	movhi	r5,16352
18008de8:	80128040 	call	18012804 <__subdf3>
18008dec:	880d883a 	mov	r6,r17
18008df0:	a00f883a 	mov	r7,r20
18008df4:	1009883a 	mov	r4,r2
18008df8:	180b883a 	mov	r5,r3
18008dfc:	8011dc80 	call	18011dc8 <__gedf2>
18008e00:	00bc7c0e 	bge	zero,r2,18007ff4 <__alt_data_end+0xf8007ff4>
18008e04:	01000c04 	movi	r4,48
18008e08:	00000106 	br	18008e10 <_dtoa_r+0x1580>
18008e0c:	102f883a 	mov	r23,r2
18008e10:	b8bfffc4 	addi	r2,r23,-1
18008e14:	10c00007 	ldb	r3,0(r2)
18008e18:	193ffc26 	beq	r3,r4,18008e0c <__alt_data_end+0xf8008e0c>
18008e1c:	d9801317 	ldw	r6,76(sp)
18008e20:	d9800515 	stw	r6,20(sp)
18008e24:	003c4406 	br	18007f38 <__alt_data_end+0xf8007f38>
18008e28:	d9801317 	ldw	r6,76(sp)
18008e2c:	d9800515 	stw	r6,20(sp)
18008e30:	003cea06 	br	180081dc <__alt_data_end+0xf80081dc>
18008e34:	dd800f17 	ldw	r22,60(sp)
18008e38:	dcc01017 	ldw	r19,64(sp)
18008e3c:	dc801217 	ldw	r18,72(sp)
18008e40:	003c6c06 	br	18007ff4 <__alt_data_end+0xf8007ff4>
18008e44:	903e031e 	bne	r18,zero,18008654 <__alt_data_end+0xf8008654>
18008e48:	003ebb06 	br	18008938 <__alt_data_end+0xf8008938>
18008e4c:	103e6c1e 	bne	r2,zero,18008800 <__alt_data_end+0xf8008800>
18008e50:	4080004c 	andi	r2,r8,1
18008e54:	103e6a26 	beq	r2,zero,18008800 <__alt_data_end+0xf8008800>
18008e58:	003e6606 	br	180087f4 <__alt_data_end+0xf80087f4>
18008e5c:	d8c00317 	ldw	r3,12(sp)
18008e60:	00800084 	movi	r2,2
18008e64:	10c02916 	blt	r2,r3,18008f0c <_dtoa_r+0x167c>
18008e68:	d9000c17 	ldw	r4,48(sp)
18008e6c:	003e8806 	br	18008890 <__alt_data_end+0xf8008890>
18008e70:	04000084 	movi	r16,2
18008e74:	003b9d06 	br	18007cec <__alt_data_end+0xf8007cec>
18008e78:	d9001317 	ldw	r4,76(sp)
18008e7c:	d9000515 	stw	r4,20(sp)
18008e80:	003cd606 	br	180081dc <__alt_data_end+0xf80081dc>
18008e84:	d8801317 	ldw	r2,76(sp)
18008e88:	d8800515 	stw	r2,20(sp)
18008e8c:	003c2a06 	br	18007f38 <__alt_data_end+0xf8007f38>
18008e90:	d9800317 	ldw	r6,12(sp)
18008e94:	00800084 	movi	r2,2
18008e98:	11801516 	blt	r2,r6,18008ef0 <_dtoa_r+0x1660>
18008e9c:	d9c00c17 	ldw	r7,48(sp)
18008ea0:	d9c00615 	stw	r7,24(sp)
18008ea4:	003df706 	br	18008684 <__alt_data_end+0xf8008684>
18008ea8:	193d3926 	beq	r3,r4,18008390 <__alt_data_end+0xf8008390>
18008eac:	00c00f04 	movi	r3,60
18008eb0:	1885c83a 	sub	r2,r3,r2
18008eb4:	003ddf06 	br	18008634 <__alt_data_end+0xf8008634>
18008eb8:	e009883a 	mov	r4,fp
18008ebc:	e0001115 	stw	zero,68(fp)
18008ec0:	000b883a 	mov	r5,zero
18008ec4:	800af480 	call	1800af48 <_Balloc>
18008ec8:	d8800715 	stw	r2,28(sp)
18008ecc:	d8c00717 	ldw	r3,28(sp)
18008ed0:	00bfffc4 	movi	r2,-1
18008ed4:	01000044 	movi	r4,1
18008ed8:	d8800c15 	stw	r2,48(sp)
18008edc:	e0c01015 	stw	r3,64(fp)
18008ee0:	d9000b15 	stw	r4,44(sp)
18008ee4:	d8800615 	stw	r2,24(sp)
18008ee8:	d8002215 	stw	zero,136(sp)
18008eec:	003c4106 	br	18007ff4 <__alt_data_end+0xf8007ff4>
18008ef0:	d8c00c17 	ldw	r3,48(sp)
18008ef4:	d8c00615 	stw	r3,24(sp)
18008ef8:	003e7006 	br	180088bc <__alt_data_end+0xf80088bc>
18008efc:	04400044 	movi	r17,1
18008f00:	003b2006 	br	18007b84 <__alt_data_end+0xf8007b84>
18008f04:	000b883a 	mov	r5,zero
18008f08:	003b3d06 	br	18007c00 <__alt_data_end+0xf8007c00>
18008f0c:	d8800c17 	ldw	r2,48(sp)
18008f10:	d8800615 	stw	r2,24(sp)
18008f14:	003e6906 	br	180088bc <__alt_data_end+0xf80088bc>

18008f18 <__sflush_r>:
18008f18:	2880030b 	ldhu	r2,12(r5)
18008f1c:	defffb04 	addi	sp,sp,-20
18008f20:	dcc00315 	stw	r19,12(sp)
18008f24:	dc400115 	stw	r17,4(sp)
18008f28:	dfc00415 	stw	ra,16(sp)
18008f2c:	dc800215 	stw	r18,8(sp)
18008f30:	dc000015 	stw	r16,0(sp)
18008f34:	10c0020c 	andi	r3,r2,8
18008f38:	2823883a 	mov	r17,r5
18008f3c:	2027883a 	mov	r19,r4
18008f40:	1800311e 	bne	r3,zero,18009008 <__sflush_r+0xf0>
18008f44:	28c00117 	ldw	r3,4(r5)
18008f48:	10820014 	ori	r2,r2,2048
18008f4c:	2880030d 	sth	r2,12(r5)
18008f50:	00c04b0e 	bge	zero,r3,18009080 <__sflush_r+0x168>
18008f54:	8a000a17 	ldw	r8,40(r17)
18008f58:	40002326 	beq	r8,zero,18008fe8 <__sflush_r+0xd0>
18008f5c:	9c000017 	ldw	r16,0(r19)
18008f60:	10c4000c 	andi	r3,r2,4096
18008f64:	98000015 	stw	zero,0(r19)
18008f68:	18004826 	beq	r3,zero,1800908c <__sflush_r+0x174>
18008f6c:	89801417 	ldw	r6,80(r17)
18008f70:	10c0010c 	andi	r3,r2,4
18008f74:	18000626 	beq	r3,zero,18008f90 <__sflush_r+0x78>
18008f78:	88c00117 	ldw	r3,4(r17)
18008f7c:	88800c17 	ldw	r2,48(r17)
18008f80:	30cdc83a 	sub	r6,r6,r3
18008f84:	10000226 	beq	r2,zero,18008f90 <__sflush_r+0x78>
18008f88:	88800f17 	ldw	r2,60(r17)
18008f8c:	308dc83a 	sub	r6,r6,r2
18008f90:	89400717 	ldw	r5,28(r17)
18008f94:	000f883a 	mov	r7,zero
18008f98:	9809883a 	mov	r4,r19
18008f9c:	403ee83a 	callr	r8
18008fa0:	00ffffc4 	movi	r3,-1
18008fa4:	10c04426 	beq	r2,r3,180090b8 <__sflush_r+0x1a0>
18008fa8:	88c0030b 	ldhu	r3,12(r17)
18008fac:	89000417 	ldw	r4,16(r17)
18008fb0:	88000115 	stw	zero,4(r17)
18008fb4:	197dffcc 	andi	r5,r3,63487
18008fb8:	8940030d 	sth	r5,12(r17)
18008fbc:	89000015 	stw	r4,0(r17)
18008fc0:	18c4000c 	andi	r3,r3,4096
18008fc4:	18002c1e 	bne	r3,zero,18009078 <__sflush_r+0x160>
18008fc8:	89400c17 	ldw	r5,48(r17)
18008fcc:	9c000015 	stw	r16,0(r19)
18008fd0:	28000526 	beq	r5,zero,18008fe8 <__sflush_r+0xd0>
18008fd4:	88801004 	addi	r2,r17,64
18008fd8:	28800226 	beq	r5,r2,18008fe4 <__sflush_r+0xcc>
18008fdc:	9809883a 	mov	r4,r19
18008fe0:	80096940 	call	18009694 <_free_r>
18008fe4:	88000c15 	stw	zero,48(r17)
18008fe8:	0005883a 	mov	r2,zero
18008fec:	dfc00417 	ldw	ra,16(sp)
18008ff0:	dcc00317 	ldw	r19,12(sp)
18008ff4:	dc800217 	ldw	r18,8(sp)
18008ff8:	dc400117 	ldw	r17,4(sp)
18008ffc:	dc000017 	ldw	r16,0(sp)
18009000:	dec00504 	addi	sp,sp,20
18009004:	f800283a 	ret
18009008:	2c800417 	ldw	r18,16(r5)
1800900c:	903ff626 	beq	r18,zero,18008fe8 <__alt_data_end+0xf8008fe8>
18009010:	2c000017 	ldw	r16,0(r5)
18009014:	108000cc 	andi	r2,r2,3
18009018:	2c800015 	stw	r18,0(r5)
1800901c:	84a1c83a 	sub	r16,r16,r18
18009020:	1000131e 	bne	r2,zero,18009070 <__sflush_r+0x158>
18009024:	28800517 	ldw	r2,20(r5)
18009028:	88800215 	stw	r2,8(r17)
1800902c:	04000316 	blt	zero,r16,1800903c <__sflush_r+0x124>
18009030:	003fed06 	br	18008fe8 <__alt_data_end+0xf8008fe8>
18009034:	90a5883a 	add	r18,r18,r2
18009038:	043feb0e 	bge	zero,r16,18008fe8 <__alt_data_end+0xf8008fe8>
1800903c:	88800917 	ldw	r2,36(r17)
18009040:	89400717 	ldw	r5,28(r17)
18009044:	800f883a 	mov	r7,r16
18009048:	900d883a 	mov	r6,r18
1800904c:	9809883a 	mov	r4,r19
18009050:	103ee83a 	callr	r2
18009054:	80a1c83a 	sub	r16,r16,r2
18009058:	00bff616 	blt	zero,r2,18009034 <__alt_data_end+0xf8009034>
1800905c:	88c0030b 	ldhu	r3,12(r17)
18009060:	00bfffc4 	movi	r2,-1
18009064:	18c01014 	ori	r3,r3,64
18009068:	88c0030d 	sth	r3,12(r17)
1800906c:	003fdf06 	br	18008fec <__alt_data_end+0xf8008fec>
18009070:	0005883a 	mov	r2,zero
18009074:	003fec06 	br	18009028 <__alt_data_end+0xf8009028>
18009078:	88801415 	stw	r2,80(r17)
1800907c:	003fd206 	br	18008fc8 <__alt_data_end+0xf8008fc8>
18009080:	28c00f17 	ldw	r3,60(r5)
18009084:	00ffb316 	blt	zero,r3,18008f54 <__alt_data_end+0xf8008f54>
18009088:	003fd706 	br	18008fe8 <__alt_data_end+0xf8008fe8>
1800908c:	89400717 	ldw	r5,28(r17)
18009090:	000d883a 	mov	r6,zero
18009094:	01c00044 	movi	r7,1
18009098:	9809883a 	mov	r4,r19
1800909c:	403ee83a 	callr	r8
180090a0:	100d883a 	mov	r6,r2
180090a4:	00bfffc4 	movi	r2,-1
180090a8:	30801426 	beq	r6,r2,180090fc <__sflush_r+0x1e4>
180090ac:	8880030b 	ldhu	r2,12(r17)
180090b0:	8a000a17 	ldw	r8,40(r17)
180090b4:	003fae06 	br	18008f70 <__alt_data_end+0xf8008f70>
180090b8:	98c00017 	ldw	r3,0(r19)
180090bc:	183fba26 	beq	r3,zero,18008fa8 <__alt_data_end+0xf8008fa8>
180090c0:	01000744 	movi	r4,29
180090c4:	19000626 	beq	r3,r4,180090e0 <__sflush_r+0x1c8>
180090c8:	01000584 	movi	r4,22
180090cc:	19000426 	beq	r3,r4,180090e0 <__sflush_r+0x1c8>
180090d0:	88c0030b 	ldhu	r3,12(r17)
180090d4:	18c01014 	ori	r3,r3,64
180090d8:	88c0030d 	sth	r3,12(r17)
180090dc:	003fc306 	br	18008fec <__alt_data_end+0xf8008fec>
180090e0:	8880030b 	ldhu	r2,12(r17)
180090e4:	88c00417 	ldw	r3,16(r17)
180090e8:	88000115 	stw	zero,4(r17)
180090ec:	10bdffcc 	andi	r2,r2,63487
180090f0:	8880030d 	sth	r2,12(r17)
180090f4:	88c00015 	stw	r3,0(r17)
180090f8:	003fb306 	br	18008fc8 <__alt_data_end+0xf8008fc8>
180090fc:	98800017 	ldw	r2,0(r19)
18009100:	103fea26 	beq	r2,zero,180090ac <__alt_data_end+0xf80090ac>
18009104:	00c00744 	movi	r3,29
18009108:	10c00226 	beq	r2,r3,18009114 <__sflush_r+0x1fc>
1800910c:	00c00584 	movi	r3,22
18009110:	10c0031e 	bne	r2,r3,18009120 <__sflush_r+0x208>
18009114:	9c000015 	stw	r16,0(r19)
18009118:	0005883a 	mov	r2,zero
1800911c:	003fb306 	br	18008fec <__alt_data_end+0xf8008fec>
18009120:	88c0030b 	ldhu	r3,12(r17)
18009124:	3005883a 	mov	r2,r6
18009128:	18c01014 	ori	r3,r3,64
1800912c:	88c0030d 	sth	r3,12(r17)
18009130:	003fae06 	br	18008fec <__alt_data_end+0xf8008fec>

18009134 <_fflush_r>:
18009134:	defffd04 	addi	sp,sp,-12
18009138:	dc000115 	stw	r16,4(sp)
1800913c:	dfc00215 	stw	ra,8(sp)
18009140:	2021883a 	mov	r16,r4
18009144:	20000226 	beq	r4,zero,18009150 <_fflush_r+0x1c>
18009148:	20800e17 	ldw	r2,56(r4)
1800914c:	10000c26 	beq	r2,zero,18009180 <_fflush_r+0x4c>
18009150:	2880030f 	ldh	r2,12(r5)
18009154:	1000051e 	bne	r2,zero,1800916c <_fflush_r+0x38>
18009158:	0005883a 	mov	r2,zero
1800915c:	dfc00217 	ldw	ra,8(sp)
18009160:	dc000117 	ldw	r16,4(sp)
18009164:	dec00304 	addi	sp,sp,12
18009168:	f800283a 	ret
1800916c:	8009883a 	mov	r4,r16
18009170:	dfc00217 	ldw	ra,8(sp)
18009174:	dc000117 	ldw	r16,4(sp)
18009178:	dec00304 	addi	sp,sp,12
1800917c:	8008f181 	jmpi	18008f18 <__sflush_r>
18009180:	d9400015 	stw	r5,0(sp)
18009184:	80095200 	call	18009520 <__sinit>
18009188:	d9400017 	ldw	r5,0(sp)
1800918c:	003ff006 	br	18009150 <__alt_data_end+0xf8009150>

18009190 <fflush>:
18009190:	20000526 	beq	r4,zero,180091a8 <fflush+0x18>
18009194:	008600b4 	movhi	r2,6146
18009198:	10a11f04 	addi	r2,r2,-31620
1800919c:	200b883a 	mov	r5,r4
180091a0:	11000017 	ldw	r4,0(r2)
180091a4:	80091341 	jmpi	18009134 <_fflush_r>
180091a8:	008600b4 	movhi	r2,6146
180091ac:	10a11e04 	addi	r2,r2,-31624
180091b0:	11000017 	ldw	r4,0(r2)
180091b4:	01460074 	movhi	r5,6145
180091b8:	29644d04 	addi	r5,r5,-28364
180091bc:	8009f301 	jmpi	18009f30 <_fwalk_reent>

180091c0 <__fp_unlock>:
180091c0:	0005883a 	mov	r2,zero
180091c4:	f800283a 	ret

180091c8 <_cleanup_r>:
180091c8:	01460074 	movhi	r5,6145
180091cc:	297d8f04 	addi	r5,r5,-2500
180091d0:	8009f301 	jmpi	18009f30 <_fwalk_reent>

180091d4 <__sinit.part.1>:
180091d4:	defff704 	addi	sp,sp,-36
180091d8:	00c60074 	movhi	r3,6145
180091dc:	dfc00815 	stw	ra,32(sp)
180091e0:	ddc00715 	stw	r23,28(sp)
180091e4:	dd800615 	stw	r22,24(sp)
180091e8:	dd400515 	stw	r21,20(sp)
180091ec:	dd000415 	stw	r20,16(sp)
180091f0:	dcc00315 	stw	r19,12(sp)
180091f4:	dc800215 	stw	r18,8(sp)
180091f8:	dc400115 	stw	r17,4(sp)
180091fc:	dc000015 	stw	r16,0(sp)
18009200:	18e47204 	addi	r3,r3,-28216
18009204:	24000117 	ldw	r16,4(r4)
18009208:	20c00f15 	stw	r3,60(r4)
1800920c:	2080bb04 	addi	r2,r4,748
18009210:	00c000c4 	movi	r3,3
18009214:	20c0b915 	stw	r3,740(r4)
18009218:	2080ba15 	stw	r2,744(r4)
1800921c:	2000b815 	stw	zero,736(r4)
18009220:	05c00204 	movi	r23,8
18009224:	00800104 	movi	r2,4
18009228:	2025883a 	mov	r18,r4
1800922c:	b80d883a 	mov	r6,r23
18009230:	81001704 	addi	r4,r16,92
18009234:	000b883a 	mov	r5,zero
18009238:	80000015 	stw	zero,0(r16)
1800923c:	80000115 	stw	zero,4(r16)
18009240:	80000215 	stw	zero,8(r16)
18009244:	8080030d 	sth	r2,12(r16)
18009248:	80001915 	stw	zero,100(r16)
1800924c:	8000038d 	sth	zero,14(r16)
18009250:	80000415 	stw	zero,16(r16)
18009254:	80000515 	stw	zero,20(r16)
18009258:	80000615 	stw	zero,24(r16)
1800925c:	800ae200 	call	1800ae20 <memset>
18009260:	05860074 	movhi	r22,6145
18009264:	94400217 	ldw	r17,8(r18)
18009268:	05460074 	movhi	r21,6145
1800926c:	05060074 	movhi	r20,6145
18009270:	04c60074 	movhi	r19,6145
18009274:	b5b18b04 	addi	r22,r22,-14804
18009278:	ad71a204 	addi	r21,r21,-14712
1800927c:	a531c104 	addi	r20,r20,-14588
18009280:	9cf1d804 	addi	r19,r19,-14496
18009284:	85800815 	stw	r22,32(r16)
18009288:	85400915 	stw	r21,36(r16)
1800928c:	85000a15 	stw	r20,40(r16)
18009290:	84c00b15 	stw	r19,44(r16)
18009294:	84000715 	stw	r16,28(r16)
18009298:	00800284 	movi	r2,10
1800929c:	8880030d 	sth	r2,12(r17)
180092a0:	00800044 	movi	r2,1
180092a4:	b80d883a 	mov	r6,r23
180092a8:	89001704 	addi	r4,r17,92
180092ac:	000b883a 	mov	r5,zero
180092b0:	88000015 	stw	zero,0(r17)
180092b4:	88000115 	stw	zero,4(r17)
180092b8:	88000215 	stw	zero,8(r17)
180092bc:	88001915 	stw	zero,100(r17)
180092c0:	8880038d 	sth	r2,14(r17)
180092c4:	88000415 	stw	zero,16(r17)
180092c8:	88000515 	stw	zero,20(r17)
180092cc:	88000615 	stw	zero,24(r17)
180092d0:	800ae200 	call	1800ae20 <memset>
180092d4:	94000317 	ldw	r16,12(r18)
180092d8:	00800484 	movi	r2,18
180092dc:	8c400715 	stw	r17,28(r17)
180092e0:	8d800815 	stw	r22,32(r17)
180092e4:	8d400915 	stw	r21,36(r17)
180092e8:	8d000a15 	stw	r20,40(r17)
180092ec:	8cc00b15 	stw	r19,44(r17)
180092f0:	8080030d 	sth	r2,12(r16)
180092f4:	00800084 	movi	r2,2
180092f8:	80000015 	stw	zero,0(r16)
180092fc:	80000115 	stw	zero,4(r16)
18009300:	80000215 	stw	zero,8(r16)
18009304:	80001915 	stw	zero,100(r16)
18009308:	8080038d 	sth	r2,14(r16)
1800930c:	80000415 	stw	zero,16(r16)
18009310:	80000515 	stw	zero,20(r16)
18009314:	80000615 	stw	zero,24(r16)
18009318:	b80d883a 	mov	r6,r23
1800931c:	000b883a 	mov	r5,zero
18009320:	81001704 	addi	r4,r16,92
18009324:	800ae200 	call	1800ae20 <memset>
18009328:	00800044 	movi	r2,1
1800932c:	84000715 	stw	r16,28(r16)
18009330:	85800815 	stw	r22,32(r16)
18009334:	85400915 	stw	r21,36(r16)
18009338:	85000a15 	stw	r20,40(r16)
1800933c:	84c00b15 	stw	r19,44(r16)
18009340:	90800e15 	stw	r2,56(r18)
18009344:	dfc00817 	ldw	ra,32(sp)
18009348:	ddc00717 	ldw	r23,28(sp)
1800934c:	dd800617 	ldw	r22,24(sp)
18009350:	dd400517 	ldw	r21,20(sp)
18009354:	dd000417 	ldw	r20,16(sp)
18009358:	dcc00317 	ldw	r19,12(sp)
1800935c:	dc800217 	ldw	r18,8(sp)
18009360:	dc400117 	ldw	r17,4(sp)
18009364:	dc000017 	ldw	r16,0(sp)
18009368:	dec00904 	addi	sp,sp,36
1800936c:	f800283a 	ret

18009370 <__fp_lock>:
18009370:	0005883a 	mov	r2,zero
18009374:	f800283a 	ret

18009378 <__sfmoreglue>:
18009378:	defffc04 	addi	sp,sp,-16
1800937c:	dc800215 	stw	r18,8(sp)
18009380:	2825883a 	mov	r18,r5
18009384:	dc000015 	stw	r16,0(sp)
18009388:	01401a04 	movi	r5,104
1800938c:	2021883a 	mov	r16,r4
18009390:	913fffc4 	addi	r4,r18,-1
18009394:	dfc00315 	stw	ra,12(sp)
18009398:	dc400115 	stw	r17,4(sp)
1800939c:	8002b640 	call	18002b64 <__mulsi3>
180093a0:	8009883a 	mov	r4,r16
180093a4:	11401d04 	addi	r5,r2,116
180093a8:	1023883a 	mov	r17,r2
180093ac:	800a28c0 	call	1800a28c <_malloc_r>
180093b0:	1021883a 	mov	r16,r2
180093b4:	10000726 	beq	r2,zero,180093d4 <__sfmoreglue+0x5c>
180093b8:	11000304 	addi	r4,r2,12
180093bc:	10000015 	stw	zero,0(r2)
180093c0:	14800115 	stw	r18,4(r2)
180093c4:	11000215 	stw	r4,8(r2)
180093c8:	89801a04 	addi	r6,r17,104
180093cc:	000b883a 	mov	r5,zero
180093d0:	800ae200 	call	1800ae20 <memset>
180093d4:	8005883a 	mov	r2,r16
180093d8:	dfc00317 	ldw	ra,12(sp)
180093dc:	dc800217 	ldw	r18,8(sp)
180093e0:	dc400117 	ldw	r17,4(sp)
180093e4:	dc000017 	ldw	r16,0(sp)
180093e8:	dec00404 	addi	sp,sp,16
180093ec:	f800283a 	ret

180093f0 <__sfp>:
180093f0:	defffb04 	addi	sp,sp,-20
180093f4:	dc000015 	stw	r16,0(sp)
180093f8:	040600b4 	movhi	r16,6146
180093fc:	84211e04 	addi	r16,r16,-31624
18009400:	dcc00315 	stw	r19,12(sp)
18009404:	2027883a 	mov	r19,r4
18009408:	81000017 	ldw	r4,0(r16)
1800940c:	dfc00415 	stw	ra,16(sp)
18009410:	dc800215 	stw	r18,8(sp)
18009414:	20800e17 	ldw	r2,56(r4)
18009418:	dc400115 	stw	r17,4(sp)
1800941c:	1000021e 	bne	r2,zero,18009428 <__sfp+0x38>
18009420:	80091d40 	call	180091d4 <__sinit.part.1>
18009424:	81000017 	ldw	r4,0(r16)
18009428:	2480b804 	addi	r18,r4,736
1800942c:	047fffc4 	movi	r17,-1
18009430:	91000117 	ldw	r4,4(r18)
18009434:	94000217 	ldw	r16,8(r18)
18009438:	213fffc4 	addi	r4,r4,-1
1800943c:	20000a16 	blt	r4,zero,18009468 <__sfp+0x78>
18009440:	8080030f 	ldh	r2,12(r16)
18009444:	10000c26 	beq	r2,zero,18009478 <__sfp+0x88>
18009448:	80c01d04 	addi	r3,r16,116
1800944c:	00000206 	br	18009458 <__sfp+0x68>
18009450:	18bfe60f 	ldh	r2,-104(r3)
18009454:	10000826 	beq	r2,zero,18009478 <__sfp+0x88>
18009458:	213fffc4 	addi	r4,r4,-1
1800945c:	1c3ffd04 	addi	r16,r3,-12
18009460:	18c01a04 	addi	r3,r3,104
18009464:	247ffa1e 	bne	r4,r17,18009450 <__alt_data_end+0xf8009450>
18009468:	90800017 	ldw	r2,0(r18)
1800946c:	10001d26 	beq	r2,zero,180094e4 <__sfp+0xf4>
18009470:	1025883a 	mov	r18,r2
18009474:	003fee06 	br	18009430 <__alt_data_end+0xf8009430>
18009478:	00bfffc4 	movi	r2,-1
1800947c:	8080038d 	sth	r2,14(r16)
18009480:	00800044 	movi	r2,1
18009484:	8080030d 	sth	r2,12(r16)
18009488:	80001915 	stw	zero,100(r16)
1800948c:	80000015 	stw	zero,0(r16)
18009490:	80000215 	stw	zero,8(r16)
18009494:	80000115 	stw	zero,4(r16)
18009498:	80000415 	stw	zero,16(r16)
1800949c:	80000515 	stw	zero,20(r16)
180094a0:	80000615 	stw	zero,24(r16)
180094a4:	01800204 	movi	r6,8
180094a8:	000b883a 	mov	r5,zero
180094ac:	81001704 	addi	r4,r16,92
180094b0:	800ae200 	call	1800ae20 <memset>
180094b4:	8005883a 	mov	r2,r16
180094b8:	80000c15 	stw	zero,48(r16)
180094bc:	80000d15 	stw	zero,52(r16)
180094c0:	80001115 	stw	zero,68(r16)
180094c4:	80001215 	stw	zero,72(r16)
180094c8:	dfc00417 	ldw	ra,16(sp)
180094cc:	dcc00317 	ldw	r19,12(sp)
180094d0:	dc800217 	ldw	r18,8(sp)
180094d4:	dc400117 	ldw	r17,4(sp)
180094d8:	dc000017 	ldw	r16,0(sp)
180094dc:	dec00504 	addi	sp,sp,20
180094e0:	f800283a 	ret
180094e4:	01400104 	movi	r5,4
180094e8:	9809883a 	mov	r4,r19
180094ec:	80093780 	call	18009378 <__sfmoreglue>
180094f0:	90800015 	stw	r2,0(r18)
180094f4:	103fde1e 	bne	r2,zero,18009470 <__alt_data_end+0xf8009470>
180094f8:	00800304 	movi	r2,12
180094fc:	98800015 	stw	r2,0(r19)
18009500:	0005883a 	mov	r2,zero
18009504:	003ff006 	br	180094c8 <__alt_data_end+0xf80094c8>

18009508 <_cleanup>:
18009508:	008600b4 	movhi	r2,6146
1800950c:	10a11e04 	addi	r2,r2,-31624
18009510:	11000017 	ldw	r4,0(r2)
18009514:	01460074 	movhi	r5,6145
18009518:	297d8f04 	addi	r5,r5,-2500
1800951c:	8009f301 	jmpi	18009f30 <_fwalk_reent>

18009520 <__sinit>:
18009520:	20800e17 	ldw	r2,56(r4)
18009524:	10000126 	beq	r2,zero,1800952c <__sinit+0xc>
18009528:	f800283a 	ret
1800952c:	80091d41 	jmpi	180091d4 <__sinit.part.1>

18009530 <__sfp_lock_acquire>:
18009530:	f800283a 	ret

18009534 <__sfp_lock_release>:
18009534:	f800283a 	ret

18009538 <__sinit_lock_acquire>:
18009538:	f800283a 	ret

1800953c <__sinit_lock_release>:
1800953c:	f800283a 	ret

18009540 <__fp_lock_all>:
18009540:	008600b4 	movhi	r2,6146
18009544:	10a11f04 	addi	r2,r2,-31620
18009548:	11000017 	ldw	r4,0(r2)
1800954c:	01460074 	movhi	r5,6145
18009550:	2964dc04 	addi	r5,r5,-27792
18009554:	8009e6c1 	jmpi	18009e6c <_fwalk>

18009558 <__fp_unlock_all>:
18009558:	008600b4 	movhi	r2,6146
1800955c:	10a11f04 	addi	r2,r2,-31620
18009560:	11000017 	ldw	r4,0(r2)
18009564:	01460074 	movhi	r5,6145
18009568:	29647004 	addi	r5,r5,-28224
1800956c:	8009e6c1 	jmpi	18009e6c <_fwalk>

18009570 <_malloc_trim_r>:
18009570:	defffb04 	addi	sp,sp,-20
18009574:	dcc00315 	stw	r19,12(sp)
18009578:	04c60074 	movhi	r19,6145
1800957c:	dc800215 	stw	r18,8(sp)
18009580:	dc400115 	stw	r17,4(sp)
18009584:	dc000015 	stw	r16,0(sp)
18009588:	dfc00415 	stw	ra,16(sp)
1800958c:	2821883a 	mov	r16,r5
18009590:	9cdb9804 	addi	r19,r19,28256
18009594:	2025883a 	mov	r18,r4
18009598:	80139040 	call	18013904 <__malloc_lock>
1800959c:	98800217 	ldw	r2,8(r19)
180095a0:	14400117 	ldw	r17,4(r2)
180095a4:	00bfff04 	movi	r2,-4
180095a8:	88a2703a 	and	r17,r17,r2
180095ac:	8c21c83a 	sub	r16,r17,r16
180095b0:	8403fbc4 	addi	r16,r16,4079
180095b4:	8020d33a 	srli	r16,r16,12
180095b8:	0083ffc4 	movi	r2,4095
180095bc:	843fffc4 	addi	r16,r16,-1
180095c0:	8020933a 	slli	r16,r16,12
180095c4:	1400060e 	bge	r2,r16,180095e0 <_malloc_trim_r+0x70>
180095c8:	000b883a 	mov	r5,zero
180095cc:	9009883a 	mov	r4,r18
180095d0:	800c5d80 	call	1800c5d8 <_sbrk_r>
180095d4:	98c00217 	ldw	r3,8(r19)
180095d8:	1c47883a 	add	r3,r3,r17
180095dc:	10c00a26 	beq	r2,r3,18009608 <_malloc_trim_r+0x98>
180095e0:	9009883a 	mov	r4,r18
180095e4:	80139280 	call	18013928 <__malloc_unlock>
180095e8:	0005883a 	mov	r2,zero
180095ec:	dfc00417 	ldw	ra,16(sp)
180095f0:	dcc00317 	ldw	r19,12(sp)
180095f4:	dc800217 	ldw	r18,8(sp)
180095f8:	dc400117 	ldw	r17,4(sp)
180095fc:	dc000017 	ldw	r16,0(sp)
18009600:	dec00504 	addi	sp,sp,20
18009604:	f800283a 	ret
18009608:	040bc83a 	sub	r5,zero,r16
1800960c:	9009883a 	mov	r4,r18
18009610:	800c5d80 	call	1800c5d8 <_sbrk_r>
18009614:	00ffffc4 	movi	r3,-1
18009618:	10c00d26 	beq	r2,r3,18009650 <_malloc_trim_r+0xe0>
1800961c:	00c600b4 	movhi	r3,6146
18009620:	18e8b204 	addi	r3,r3,-23864
18009624:	18800017 	ldw	r2,0(r3)
18009628:	99000217 	ldw	r4,8(r19)
1800962c:	8c23c83a 	sub	r17,r17,r16
18009630:	8c400054 	ori	r17,r17,1
18009634:	1421c83a 	sub	r16,r2,r16
18009638:	24400115 	stw	r17,4(r4)
1800963c:	9009883a 	mov	r4,r18
18009640:	1c000015 	stw	r16,0(r3)
18009644:	80139280 	call	18013928 <__malloc_unlock>
18009648:	00800044 	movi	r2,1
1800964c:	003fe706 	br	180095ec <__alt_data_end+0xf80095ec>
18009650:	000b883a 	mov	r5,zero
18009654:	9009883a 	mov	r4,r18
18009658:	800c5d80 	call	1800c5d8 <_sbrk_r>
1800965c:	99000217 	ldw	r4,8(r19)
18009660:	014003c4 	movi	r5,15
18009664:	1107c83a 	sub	r3,r2,r4
18009668:	28ffdd0e 	bge	r5,r3,180095e0 <__alt_data_end+0xf80095e0>
1800966c:	014600b4 	movhi	r5,6146
18009670:	29612104 	addi	r5,r5,-31612
18009674:	29400017 	ldw	r5,0(r5)
18009678:	18c00054 	ori	r3,r3,1
1800967c:	20c00115 	stw	r3,4(r4)
18009680:	00c600b4 	movhi	r3,6146
18009684:	1145c83a 	sub	r2,r2,r5
18009688:	18e8b204 	addi	r3,r3,-23864
1800968c:	18800015 	stw	r2,0(r3)
18009690:	003fd306 	br	180095e0 <__alt_data_end+0xf80095e0>

18009694 <_free_r>:
18009694:	28004126 	beq	r5,zero,1800979c <_free_r+0x108>
18009698:	defffd04 	addi	sp,sp,-12
1800969c:	dc400115 	stw	r17,4(sp)
180096a0:	dc000015 	stw	r16,0(sp)
180096a4:	2023883a 	mov	r17,r4
180096a8:	2821883a 	mov	r16,r5
180096ac:	dfc00215 	stw	ra,8(sp)
180096b0:	80139040 	call	18013904 <__malloc_lock>
180096b4:	81ffff17 	ldw	r7,-4(r16)
180096b8:	00bfff84 	movi	r2,-2
180096bc:	01060074 	movhi	r4,6145
180096c0:	81bffe04 	addi	r6,r16,-8
180096c4:	3884703a 	and	r2,r7,r2
180096c8:	211b9804 	addi	r4,r4,28256
180096cc:	308b883a 	add	r5,r6,r2
180096d0:	2a400117 	ldw	r9,4(r5)
180096d4:	22000217 	ldw	r8,8(r4)
180096d8:	00ffff04 	movi	r3,-4
180096dc:	48c6703a 	and	r3,r9,r3
180096e0:	2a005726 	beq	r5,r8,18009840 <_free_r+0x1ac>
180096e4:	28c00115 	stw	r3,4(r5)
180096e8:	39c0004c 	andi	r7,r7,1
180096ec:	3800091e 	bne	r7,zero,18009714 <_free_r+0x80>
180096f0:	823ffe17 	ldw	r8,-8(r16)
180096f4:	22400204 	addi	r9,r4,8
180096f8:	320dc83a 	sub	r6,r6,r8
180096fc:	31c00217 	ldw	r7,8(r6)
18009700:	1205883a 	add	r2,r2,r8
18009704:	3a406526 	beq	r7,r9,1800989c <_free_r+0x208>
18009708:	32000317 	ldw	r8,12(r6)
1800970c:	3a000315 	stw	r8,12(r7)
18009710:	41c00215 	stw	r7,8(r8)
18009714:	28cf883a 	add	r7,r5,r3
18009718:	39c00117 	ldw	r7,4(r7)
1800971c:	39c0004c 	andi	r7,r7,1
18009720:	38003a26 	beq	r7,zero,1800980c <_free_r+0x178>
18009724:	10c00054 	ori	r3,r2,1
18009728:	30c00115 	stw	r3,4(r6)
1800972c:	3087883a 	add	r3,r6,r2
18009730:	18800015 	stw	r2,0(r3)
18009734:	00c07fc4 	movi	r3,511
18009738:	18801936 	bltu	r3,r2,180097a0 <_free_r+0x10c>
1800973c:	1004d0fa 	srli	r2,r2,3
18009740:	01c00044 	movi	r7,1
18009744:	21400117 	ldw	r5,4(r4)
18009748:	10c00044 	addi	r3,r2,1
1800974c:	18c7883a 	add	r3,r3,r3
18009750:	1005d0ba 	srai	r2,r2,2
18009754:	18c7883a 	add	r3,r3,r3
18009758:	18c7883a 	add	r3,r3,r3
1800975c:	1907883a 	add	r3,r3,r4
18009760:	3884983a 	sll	r2,r7,r2
18009764:	19c00017 	ldw	r7,0(r3)
18009768:	1a3ffe04 	addi	r8,r3,-8
1800976c:	1144b03a 	or	r2,r2,r5
18009770:	32000315 	stw	r8,12(r6)
18009774:	31c00215 	stw	r7,8(r6)
18009778:	20800115 	stw	r2,4(r4)
1800977c:	19800015 	stw	r6,0(r3)
18009780:	39800315 	stw	r6,12(r7)
18009784:	8809883a 	mov	r4,r17
18009788:	dfc00217 	ldw	ra,8(sp)
1800978c:	dc400117 	ldw	r17,4(sp)
18009790:	dc000017 	ldw	r16,0(sp)
18009794:	dec00304 	addi	sp,sp,12
18009798:	80139281 	jmpi	18013928 <__malloc_unlock>
1800979c:	f800283a 	ret
180097a0:	100ad27a 	srli	r5,r2,9
180097a4:	00c00104 	movi	r3,4
180097a8:	19404a36 	bltu	r3,r5,180098d4 <_free_r+0x240>
180097ac:	100ad1ba 	srli	r5,r2,6
180097b0:	28c00e44 	addi	r3,r5,57
180097b4:	18c7883a 	add	r3,r3,r3
180097b8:	29400e04 	addi	r5,r5,56
180097bc:	18c7883a 	add	r3,r3,r3
180097c0:	18c7883a 	add	r3,r3,r3
180097c4:	1909883a 	add	r4,r3,r4
180097c8:	20c00017 	ldw	r3,0(r4)
180097cc:	01c60074 	movhi	r7,6145
180097d0:	213ffe04 	addi	r4,r4,-8
180097d4:	39db9804 	addi	r7,r7,28256
180097d8:	20c04426 	beq	r4,r3,180098ec <_free_r+0x258>
180097dc:	01ffff04 	movi	r7,-4
180097e0:	19400117 	ldw	r5,4(r3)
180097e4:	29ca703a 	and	r5,r5,r7
180097e8:	1140022e 	bgeu	r2,r5,180097f4 <_free_r+0x160>
180097ec:	18c00217 	ldw	r3,8(r3)
180097f0:	20fffb1e 	bne	r4,r3,180097e0 <__alt_data_end+0xf80097e0>
180097f4:	19000317 	ldw	r4,12(r3)
180097f8:	31000315 	stw	r4,12(r6)
180097fc:	30c00215 	stw	r3,8(r6)
18009800:	21800215 	stw	r6,8(r4)
18009804:	19800315 	stw	r6,12(r3)
18009808:	003fde06 	br	18009784 <__alt_data_end+0xf8009784>
1800980c:	29c00217 	ldw	r7,8(r5)
18009810:	10c5883a 	add	r2,r2,r3
18009814:	00c60074 	movhi	r3,6145
18009818:	18db9a04 	addi	r3,r3,28264
1800981c:	38c03b26 	beq	r7,r3,1800990c <_free_r+0x278>
18009820:	2a000317 	ldw	r8,12(r5)
18009824:	11400054 	ori	r5,r2,1
18009828:	3087883a 	add	r3,r6,r2
1800982c:	3a000315 	stw	r8,12(r7)
18009830:	41c00215 	stw	r7,8(r8)
18009834:	31400115 	stw	r5,4(r6)
18009838:	18800015 	stw	r2,0(r3)
1800983c:	003fbd06 	br	18009734 <__alt_data_end+0xf8009734>
18009840:	39c0004c 	andi	r7,r7,1
18009844:	10c5883a 	add	r2,r2,r3
18009848:	3800071e 	bne	r7,zero,18009868 <_free_r+0x1d4>
1800984c:	81fffe17 	ldw	r7,-8(r16)
18009850:	31cdc83a 	sub	r6,r6,r7
18009854:	30c00317 	ldw	r3,12(r6)
18009858:	31400217 	ldw	r5,8(r6)
1800985c:	11c5883a 	add	r2,r2,r7
18009860:	28c00315 	stw	r3,12(r5)
18009864:	19400215 	stw	r5,8(r3)
18009868:	10c00054 	ori	r3,r2,1
1800986c:	30c00115 	stw	r3,4(r6)
18009870:	00c600b4 	movhi	r3,6146
18009874:	18e12204 	addi	r3,r3,-31608
18009878:	18c00017 	ldw	r3,0(r3)
1800987c:	21800215 	stw	r6,8(r4)
18009880:	10ffc036 	bltu	r2,r3,18009784 <__alt_data_end+0xf8009784>
18009884:	008600b4 	movhi	r2,6146
18009888:	10a8a904 	addi	r2,r2,-23900
1800988c:	11400017 	ldw	r5,0(r2)
18009890:	8809883a 	mov	r4,r17
18009894:	80095700 	call	18009570 <_malloc_trim_r>
18009898:	003fba06 	br	18009784 <__alt_data_end+0xf8009784>
1800989c:	28c9883a 	add	r4,r5,r3
180098a0:	21000117 	ldw	r4,4(r4)
180098a4:	2100004c 	andi	r4,r4,1
180098a8:	2000391e 	bne	r4,zero,18009990 <_free_r+0x2fc>
180098ac:	29c00217 	ldw	r7,8(r5)
180098b0:	29000317 	ldw	r4,12(r5)
180098b4:	1885883a 	add	r2,r3,r2
180098b8:	10c00054 	ori	r3,r2,1
180098bc:	39000315 	stw	r4,12(r7)
180098c0:	21c00215 	stw	r7,8(r4)
180098c4:	30c00115 	stw	r3,4(r6)
180098c8:	308d883a 	add	r6,r6,r2
180098cc:	30800015 	stw	r2,0(r6)
180098d0:	003fac06 	br	18009784 <__alt_data_end+0xf8009784>
180098d4:	00c00504 	movi	r3,20
180098d8:	19401536 	bltu	r3,r5,18009930 <_free_r+0x29c>
180098dc:	28c01704 	addi	r3,r5,92
180098e0:	18c7883a 	add	r3,r3,r3
180098e4:	294016c4 	addi	r5,r5,91
180098e8:	003fb406 	br	180097bc <__alt_data_end+0xf80097bc>
180098ec:	280bd0ba 	srai	r5,r5,2
180098f0:	00c00044 	movi	r3,1
180098f4:	38800117 	ldw	r2,4(r7)
180098f8:	194a983a 	sll	r5,r3,r5
180098fc:	2007883a 	mov	r3,r4
18009900:	2884b03a 	or	r2,r5,r2
18009904:	38800115 	stw	r2,4(r7)
18009908:	003fbb06 	br	180097f8 <__alt_data_end+0xf80097f8>
1800990c:	21800515 	stw	r6,20(r4)
18009910:	21800415 	stw	r6,16(r4)
18009914:	10c00054 	ori	r3,r2,1
18009918:	31c00315 	stw	r7,12(r6)
1800991c:	31c00215 	stw	r7,8(r6)
18009920:	30c00115 	stw	r3,4(r6)
18009924:	308d883a 	add	r6,r6,r2
18009928:	30800015 	stw	r2,0(r6)
1800992c:	003f9506 	br	18009784 <__alt_data_end+0xf8009784>
18009930:	00c01504 	movi	r3,84
18009934:	19400536 	bltu	r3,r5,1800994c <_free_r+0x2b8>
18009938:	100ad33a 	srli	r5,r2,12
1800993c:	28c01bc4 	addi	r3,r5,111
18009940:	18c7883a 	add	r3,r3,r3
18009944:	29401b84 	addi	r5,r5,110
18009948:	003f9c06 	br	180097bc <__alt_data_end+0xf80097bc>
1800994c:	00c05504 	movi	r3,340
18009950:	19400536 	bltu	r3,r5,18009968 <_free_r+0x2d4>
18009954:	100ad3fa 	srli	r5,r2,15
18009958:	28c01e04 	addi	r3,r5,120
1800995c:	18c7883a 	add	r3,r3,r3
18009960:	29401dc4 	addi	r5,r5,119
18009964:	003f9506 	br	180097bc <__alt_data_end+0xf80097bc>
18009968:	00c15504 	movi	r3,1364
1800996c:	19400536 	bltu	r3,r5,18009984 <_free_r+0x2f0>
18009970:	100ad4ba 	srli	r5,r2,18
18009974:	28c01f44 	addi	r3,r5,125
18009978:	18c7883a 	add	r3,r3,r3
1800997c:	29401f04 	addi	r5,r5,124
18009980:	003f8e06 	br	180097bc <__alt_data_end+0xf80097bc>
18009984:	00c03f84 	movi	r3,254
18009988:	01401f84 	movi	r5,126
1800998c:	003f8b06 	br	180097bc <__alt_data_end+0xf80097bc>
18009990:	10c00054 	ori	r3,r2,1
18009994:	30c00115 	stw	r3,4(r6)
18009998:	308d883a 	add	r6,r6,r2
1800999c:	30800015 	stw	r2,0(r6)
180099a0:	003f7806 	br	18009784 <__alt_data_end+0xf8009784>

180099a4 <__sfvwrite_r>:
180099a4:	30800217 	ldw	r2,8(r6)
180099a8:	10006726 	beq	r2,zero,18009b48 <__sfvwrite_r+0x1a4>
180099ac:	28c0030b 	ldhu	r3,12(r5)
180099b0:	defff404 	addi	sp,sp,-48
180099b4:	dd400715 	stw	r21,28(sp)
180099b8:	dd000615 	stw	r20,24(sp)
180099bc:	dc000215 	stw	r16,8(sp)
180099c0:	dfc00b15 	stw	ra,44(sp)
180099c4:	df000a15 	stw	fp,40(sp)
180099c8:	ddc00915 	stw	r23,36(sp)
180099cc:	dd800815 	stw	r22,32(sp)
180099d0:	dcc00515 	stw	r19,20(sp)
180099d4:	dc800415 	stw	r18,16(sp)
180099d8:	dc400315 	stw	r17,12(sp)
180099dc:	1880020c 	andi	r2,r3,8
180099e0:	2821883a 	mov	r16,r5
180099e4:	202b883a 	mov	r21,r4
180099e8:	3029883a 	mov	r20,r6
180099ec:	10002726 	beq	r2,zero,18009a8c <__sfvwrite_r+0xe8>
180099f0:	28800417 	ldw	r2,16(r5)
180099f4:	10002526 	beq	r2,zero,18009a8c <__sfvwrite_r+0xe8>
180099f8:	1880008c 	andi	r2,r3,2
180099fc:	a4400017 	ldw	r17,0(r20)
18009a00:	10002a26 	beq	r2,zero,18009aac <__sfvwrite_r+0x108>
18009a04:	05a00034 	movhi	r22,32768
18009a08:	0027883a 	mov	r19,zero
18009a0c:	0025883a 	mov	r18,zero
18009a10:	b5bf0004 	addi	r22,r22,-1024
18009a14:	980d883a 	mov	r6,r19
18009a18:	a809883a 	mov	r4,r21
18009a1c:	90004626 	beq	r18,zero,18009b38 <__sfvwrite_r+0x194>
18009a20:	900f883a 	mov	r7,r18
18009a24:	b480022e 	bgeu	r22,r18,18009a30 <__sfvwrite_r+0x8c>
18009a28:	01e00034 	movhi	r7,32768
18009a2c:	39ff0004 	addi	r7,r7,-1024
18009a30:	80800917 	ldw	r2,36(r16)
18009a34:	81400717 	ldw	r5,28(r16)
18009a38:	103ee83a 	callr	r2
18009a3c:	00805a0e 	bge	zero,r2,18009ba8 <__sfvwrite_r+0x204>
18009a40:	a0c00217 	ldw	r3,8(r20)
18009a44:	98a7883a 	add	r19,r19,r2
18009a48:	90a5c83a 	sub	r18,r18,r2
18009a4c:	1885c83a 	sub	r2,r3,r2
18009a50:	a0800215 	stw	r2,8(r20)
18009a54:	103fef1e 	bne	r2,zero,18009a14 <__alt_data_end+0xf8009a14>
18009a58:	0005883a 	mov	r2,zero
18009a5c:	dfc00b17 	ldw	ra,44(sp)
18009a60:	df000a17 	ldw	fp,40(sp)
18009a64:	ddc00917 	ldw	r23,36(sp)
18009a68:	dd800817 	ldw	r22,32(sp)
18009a6c:	dd400717 	ldw	r21,28(sp)
18009a70:	dd000617 	ldw	r20,24(sp)
18009a74:	dcc00517 	ldw	r19,20(sp)
18009a78:	dc800417 	ldw	r18,16(sp)
18009a7c:	dc400317 	ldw	r17,12(sp)
18009a80:	dc000217 	ldw	r16,8(sp)
18009a84:	dec00c04 	addi	sp,sp,48
18009a88:	f800283a 	ret
18009a8c:	800b883a 	mov	r5,r16
18009a90:	a809883a 	mov	r4,r21
18009a94:	80075140 	call	18007514 <__swsetup_r>
18009a98:	1000ee1e 	bne	r2,zero,18009e54 <__sfvwrite_r+0x4b0>
18009a9c:	80c0030b 	ldhu	r3,12(r16)
18009aa0:	a4400017 	ldw	r17,0(r20)
18009aa4:	1880008c 	andi	r2,r3,2
18009aa8:	103fd61e 	bne	r2,zero,18009a04 <__alt_data_end+0xf8009a04>
18009aac:	1880004c 	andi	r2,r3,1
18009ab0:	1000421e 	bne	r2,zero,18009bbc <__sfvwrite_r+0x218>
18009ab4:	0039883a 	mov	fp,zero
18009ab8:	0025883a 	mov	r18,zero
18009abc:	90001a26 	beq	r18,zero,18009b28 <__sfvwrite_r+0x184>
18009ac0:	1880800c 	andi	r2,r3,512
18009ac4:	84c00217 	ldw	r19,8(r16)
18009ac8:	10002126 	beq	r2,zero,18009b50 <__sfvwrite_r+0x1ac>
18009acc:	982f883a 	mov	r23,r19
18009ad0:	94c09636 	bltu	r18,r19,18009d2c <__sfvwrite_r+0x388>
18009ad4:	1881200c 	andi	r2,r3,1152
18009ad8:	1000a11e 	bne	r2,zero,18009d60 <__sfvwrite_r+0x3bc>
18009adc:	81000017 	ldw	r4,0(r16)
18009ae0:	b80d883a 	mov	r6,r23
18009ae4:	e00b883a 	mov	r5,fp
18009ae8:	800acc40 	call	1800acc4 <memmove>
18009aec:	80c00217 	ldw	r3,8(r16)
18009af0:	81000017 	ldw	r4,0(r16)
18009af4:	9005883a 	mov	r2,r18
18009af8:	1ce7c83a 	sub	r19,r3,r19
18009afc:	25cf883a 	add	r7,r4,r23
18009b00:	84c00215 	stw	r19,8(r16)
18009b04:	81c00015 	stw	r7,0(r16)
18009b08:	a0c00217 	ldw	r3,8(r20)
18009b0c:	e0b9883a 	add	fp,fp,r2
18009b10:	90a5c83a 	sub	r18,r18,r2
18009b14:	18a7c83a 	sub	r19,r3,r2
18009b18:	a4c00215 	stw	r19,8(r20)
18009b1c:	983fce26 	beq	r19,zero,18009a58 <__alt_data_end+0xf8009a58>
18009b20:	80c0030b 	ldhu	r3,12(r16)
18009b24:	903fe61e 	bne	r18,zero,18009ac0 <__alt_data_end+0xf8009ac0>
18009b28:	8f000017 	ldw	fp,0(r17)
18009b2c:	8c800117 	ldw	r18,4(r17)
18009b30:	8c400204 	addi	r17,r17,8
18009b34:	003fe106 	br	18009abc <__alt_data_end+0xf8009abc>
18009b38:	8cc00017 	ldw	r19,0(r17)
18009b3c:	8c800117 	ldw	r18,4(r17)
18009b40:	8c400204 	addi	r17,r17,8
18009b44:	003fb306 	br	18009a14 <__alt_data_end+0xf8009a14>
18009b48:	0005883a 	mov	r2,zero
18009b4c:	f800283a 	ret
18009b50:	81000017 	ldw	r4,0(r16)
18009b54:	80800417 	ldw	r2,16(r16)
18009b58:	11005a36 	bltu	r2,r4,18009cc4 <__sfvwrite_r+0x320>
18009b5c:	85c00517 	ldw	r23,20(r16)
18009b60:	95c05836 	bltu	r18,r23,18009cc4 <__sfvwrite_r+0x320>
18009b64:	00a00034 	movhi	r2,32768
18009b68:	10bfffc4 	addi	r2,r2,-1
18009b6c:	9009883a 	mov	r4,r18
18009b70:	1480012e 	bgeu	r2,r18,18009b78 <__sfvwrite_r+0x1d4>
18009b74:	1009883a 	mov	r4,r2
18009b78:	b80b883a 	mov	r5,r23
18009b7c:	80029b00 	call	180029b0 <__divsi3>
18009b80:	b80b883a 	mov	r5,r23
18009b84:	1009883a 	mov	r4,r2
18009b88:	8002b640 	call	18002b64 <__mulsi3>
18009b8c:	81400717 	ldw	r5,28(r16)
18009b90:	80c00917 	ldw	r3,36(r16)
18009b94:	100f883a 	mov	r7,r2
18009b98:	e00d883a 	mov	r6,fp
18009b9c:	a809883a 	mov	r4,r21
18009ba0:	183ee83a 	callr	r3
18009ba4:	00bfd816 	blt	zero,r2,18009b08 <__alt_data_end+0xf8009b08>
18009ba8:	8080030b 	ldhu	r2,12(r16)
18009bac:	10801014 	ori	r2,r2,64
18009bb0:	8080030d 	sth	r2,12(r16)
18009bb4:	00bfffc4 	movi	r2,-1
18009bb8:	003fa806 	br	18009a5c <__alt_data_end+0xf8009a5c>
18009bbc:	0027883a 	mov	r19,zero
18009bc0:	0011883a 	mov	r8,zero
18009bc4:	0039883a 	mov	fp,zero
18009bc8:	0025883a 	mov	r18,zero
18009bcc:	90001f26 	beq	r18,zero,18009c4c <__sfvwrite_r+0x2a8>
18009bd0:	40005a26 	beq	r8,zero,18009d3c <__sfvwrite_r+0x398>
18009bd4:	982d883a 	mov	r22,r19
18009bd8:	94c0012e 	bgeu	r18,r19,18009be0 <__sfvwrite_r+0x23c>
18009bdc:	902d883a 	mov	r22,r18
18009be0:	81000017 	ldw	r4,0(r16)
18009be4:	80800417 	ldw	r2,16(r16)
18009be8:	b02f883a 	mov	r23,r22
18009bec:	81c00517 	ldw	r7,20(r16)
18009bf0:	1100032e 	bgeu	r2,r4,18009c00 <__sfvwrite_r+0x25c>
18009bf4:	80c00217 	ldw	r3,8(r16)
18009bf8:	38c7883a 	add	r3,r7,r3
18009bfc:	1d801816 	blt	r3,r22,18009c60 <__sfvwrite_r+0x2bc>
18009c00:	b1c03e16 	blt	r22,r7,18009cfc <__sfvwrite_r+0x358>
18009c04:	80800917 	ldw	r2,36(r16)
18009c08:	81400717 	ldw	r5,28(r16)
18009c0c:	e00d883a 	mov	r6,fp
18009c10:	da000115 	stw	r8,4(sp)
18009c14:	a809883a 	mov	r4,r21
18009c18:	103ee83a 	callr	r2
18009c1c:	102f883a 	mov	r23,r2
18009c20:	da000117 	ldw	r8,4(sp)
18009c24:	00bfe00e 	bge	zero,r2,18009ba8 <__alt_data_end+0xf8009ba8>
18009c28:	9de7c83a 	sub	r19,r19,r23
18009c2c:	98001f26 	beq	r19,zero,18009cac <__sfvwrite_r+0x308>
18009c30:	a0800217 	ldw	r2,8(r20)
18009c34:	e5f9883a 	add	fp,fp,r23
18009c38:	95e5c83a 	sub	r18,r18,r23
18009c3c:	15efc83a 	sub	r23,r2,r23
18009c40:	a5c00215 	stw	r23,8(r20)
18009c44:	b83f8426 	beq	r23,zero,18009a58 <__alt_data_end+0xf8009a58>
18009c48:	903fe11e 	bne	r18,zero,18009bd0 <__alt_data_end+0xf8009bd0>
18009c4c:	8f000017 	ldw	fp,0(r17)
18009c50:	8c800117 	ldw	r18,4(r17)
18009c54:	0011883a 	mov	r8,zero
18009c58:	8c400204 	addi	r17,r17,8
18009c5c:	003fdb06 	br	18009bcc <__alt_data_end+0xf8009bcc>
18009c60:	180d883a 	mov	r6,r3
18009c64:	e00b883a 	mov	r5,fp
18009c68:	da000115 	stw	r8,4(sp)
18009c6c:	d8c00015 	stw	r3,0(sp)
18009c70:	800acc40 	call	1800acc4 <memmove>
18009c74:	d8c00017 	ldw	r3,0(sp)
18009c78:	80800017 	ldw	r2,0(r16)
18009c7c:	800b883a 	mov	r5,r16
18009c80:	a809883a 	mov	r4,r21
18009c84:	10c5883a 	add	r2,r2,r3
18009c88:	80800015 	stw	r2,0(r16)
18009c8c:	d8c00015 	stw	r3,0(sp)
18009c90:	80091340 	call	18009134 <_fflush_r>
18009c94:	d8c00017 	ldw	r3,0(sp)
18009c98:	da000117 	ldw	r8,4(sp)
18009c9c:	103fc21e 	bne	r2,zero,18009ba8 <__alt_data_end+0xf8009ba8>
18009ca0:	182f883a 	mov	r23,r3
18009ca4:	9de7c83a 	sub	r19,r19,r23
18009ca8:	983fe11e 	bne	r19,zero,18009c30 <__alt_data_end+0xf8009c30>
18009cac:	800b883a 	mov	r5,r16
18009cb0:	a809883a 	mov	r4,r21
18009cb4:	80091340 	call	18009134 <_fflush_r>
18009cb8:	103fbb1e 	bne	r2,zero,18009ba8 <__alt_data_end+0xf8009ba8>
18009cbc:	0011883a 	mov	r8,zero
18009cc0:	003fdb06 	br	18009c30 <__alt_data_end+0xf8009c30>
18009cc4:	94c0012e 	bgeu	r18,r19,18009ccc <__sfvwrite_r+0x328>
18009cc8:	9027883a 	mov	r19,r18
18009ccc:	980d883a 	mov	r6,r19
18009cd0:	e00b883a 	mov	r5,fp
18009cd4:	800acc40 	call	1800acc4 <memmove>
18009cd8:	80800217 	ldw	r2,8(r16)
18009cdc:	80c00017 	ldw	r3,0(r16)
18009ce0:	14c5c83a 	sub	r2,r2,r19
18009ce4:	1cc7883a 	add	r3,r3,r19
18009ce8:	80800215 	stw	r2,8(r16)
18009cec:	80c00015 	stw	r3,0(r16)
18009cf0:	10004326 	beq	r2,zero,18009e00 <__sfvwrite_r+0x45c>
18009cf4:	9805883a 	mov	r2,r19
18009cf8:	003f8306 	br	18009b08 <__alt_data_end+0xf8009b08>
18009cfc:	b00d883a 	mov	r6,r22
18009d00:	e00b883a 	mov	r5,fp
18009d04:	da000115 	stw	r8,4(sp)
18009d08:	800acc40 	call	1800acc4 <memmove>
18009d0c:	80800217 	ldw	r2,8(r16)
18009d10:	80c00017 	ldw	r3,0(r16)
18009d14:	da000117 	ldw	r8,4(sp)
18009d18:	1585c83a 	sub	r2,r2,r22
18009d1c:	1dad883a 	add	r22,r3,r22
18009d20:	80800215 	stw	r2,8(r16)
18009d24:	85800015 	stw	r22,0(r16)
18009d28:	003fbf06 	br	18009c28 <__alt_data_end+0xf8009c28>
18009d2c:	81000017 	ldw	r4,0(r16)
18009d30:	9027883a 	mov	r19,r18
18009d34:	902f883a 	mov	r23,r18
18009d38:	003f6906 	br	18009ae0 <__alt_data_end+0xf8009ae0>
18009d3c:	900d883a 	mov	r6,r18
18009d40:	01400284 	movi	r5,10
18009d44:	e009883a 	mov	r4,fp
18009d48:	800aa980 	call	1800aa98 <memchr>
18009d4c:	10003e26 	beq	r2,zero,18009e48 <__sfvwrite_r+0x4a4>
18009d50:	10800044 	addi	r2,r2,1
18009d54:	1727c83a 	sub	r19,r2,fp
18009d58:	02000044 	movi	r8,1
18009d5c:	003f9d06 	br	18009bd4 <__alt_data_end+0xf8009bd4>
18009d60:	80800517 	ldw	r2,20(r16)
18009d64:	81400417 	ldw	r5,16(r16)
18009d68:	81c00017 	ldw	r7,0(r16)
18009d6c:	10a7883a 	add	r19,r2,r2
18009d70:	9885883a 	add	r2,r19,r2
18009d74:	1026d7fa 	srli	r19,r2,31
18009d78:	396dc83a 	sub	r22,r7,r5
18009d7c:	b1000044 	addi	r4,r22,1
18009d80:	9885883a 	add	r2,r19,r2
18009d84:	1027d07a 	srai	r19,r2,1
18009d88:	2485883a 	add	r2,r4,r18
18009d8c:	980d883a 	mov	r6,r19
18009d90:	9880022e 	bgeu	r19,r2,18009d9c <__sfvwrite_r+0x3f8>
18009d94:	1027883a 	mov	r19,r2
18009d98:	100d883a 	mov	r6,r2
18009d9c:	18c1000c 	andi	r3,r3,1024
18009da0:	18001c26 	beq	r3,zero,18009e14 <__sfvwrite_r+0x470>
18009da4:	300b883a 	mov	r5,r6
18009da8:	a809883a 	mov	r4,r21
18009dac:	800a28c0 	call	1800a28c <_malloc_r>
18009db0:	102f883a 	mov	r23,r2
18009db4:	10002926 	beq	r2,zero,18009e5c <__sfvwrite_r+0x4b8>
18009db8:	81400417 	ldw	r5,16(r16)
18009dbc:	b00d883a 	mov	r6,r22
18009dc0:	1009883a 	mov	r4,r2
18009dc4:	800ab7c0 	call	1800ab7c <memcpy>
18009dc8:	8080030b 	ldhu	r2,12(r16)
18009dcc:	00fedfc4 	movi	r3,-1153
18009dd0:	10c4703a 	and	r2,r2,r3
18009dd4:	10802014 	ori	r2,r2,128
18009dd8:	8080030d 	sth	r2,12(r16)
18009ddc:	bd89883a 	add	r4,r23,r22
18009de0:	9d8fc83a 	sub	r7,r19,r22
18009de4:	85c00415 	stw	r23,16(r16)
18009de8:	84c00515 	stw	r19,20(r16)
18009dec:	81000015 	stw	r4,0(r16)
18009df0:	9027883a 	mov	r19,r18
18009df4:	81c00215 	stw	r7,8(r16)
18009df8:	902f883a 	mov	r23,r18
18009dfc:	003f3806 	br	18009ae0 <__alt_data_end+0xf8009ae0>
18009e00:	800b883a 	mov	r5,r16
18009e04:	a809883a 	mov	r4,r21
18009e08:	80091340 	call	18009134 <_fflush_r>
18009e0c:	103fb926 	beq	r2,zero,18009cf4 <__alt_data_end+0xf8009cf4>
18009e10:	003f6506 	br	18009ba8 <__alt_data_end+0xf8009ba8>
18009e14:	a809883a 	mov	r4,r21
18009e18:	800c0000 	call	1800c000 <_realloc_r>
18009e1c:	102f883a 	mov	r23,r2
18009e20:	103fee1e 	bne	r2,zero,18009ddc <__alt_data_end+0xf8009ddc>
18009e24:	81400417 	ldw	r5,16(r16)
18009e28:	a809883a 	mov	r4,r21
18009e2c:	80096940 	call	18009694 <_free_r>
18009e30:	8080030b 	ldhu	r2,12(r16)
18009e34:	00ffdfc4 	movi	r3,-129
18009e38:	1884703a 	and	r2,r3,r2
18009e3c:	00c00304 	movi	r3,12
18009e40:	a8c00015 	stw	r3,0(r21)
18009e44:	003f5906 	br	18009bac <__alt_data_end+0xf8009bac>
18009e48:	94c00044 	addi	r19,r18,1
18009e4c:	02000044 	movi	r8,1
18009e50:	003f6006 	br	18009bd4 <__alt_data_end+0xf8009bd4>
18009e54:	00bfffc4 	movi	r2,-1
18009e58:	003f0006 	br	18009a5c <__alt_data_end+0xf8009a5c>
18009e5c:	00800304 	movi	r2,12
18009e60:	a8800015 	stw	r2,0(r21)
18009e64:	8080030b 	ldhu	r2,12(r16)
18009e68:	003f5006 	br	18009bac <__alt_data_end+0xf8009bac>

18009e6c <_fwalk>:
18009e6c:	defff704 	addi	sp,sp,-36
18009e70:	dd000415 	stw	r20,16(sp)
18009e74:	dfc00815 	stw	ra,32(sp)
18009e78:	ddc00715 	stw	r23,28(sp)
18009e7c:	dd800615 	stw	r22,24(sp)
18009e80:	dd400515 	stw	r21,20(sp)
18009e84:	dcc00315 	stw	r19,12(sp)
18009e88:	dc800215 	stw	r18,8(sp)
18009e8c:	dc400115 	stw	r17,4(sp)
18009e90:	dc000015 	stw	r16,0(sp)
18009e94:	2500b804 	addi	r20,r4,736
18009e98:	a0002326 	beq	r20,zero,18009f28 <_fwalk+0xbc>
18009e9c:	282b883a 	mov	r21,r5
18009ea0:	002f883a 	mov	r23,zero
18009ea4:	05800044 	movi	r22,1
18009ea8:	04ffffc4 	movi	r19,-1
18009eac:	a4400117 	ldw	r17,4(r20)
18009eb0:	a4800217 	ldw	r18,8(r20)
18009eb4:	8c7fffc4 	addi	r17,r17,-1
18009eb8:	88000d16 	blt	r17,zero,18009ef0 <_fwalk+0x84>
18009ebc:	94000304 	addi	r16,r18,12
18009ec0:	94800384 	addi	r18,r18,14
18009ec4:	8080000b 	ldhu	r2,0(r16)
18009ec8:	8c7fffc4 	addi	r17,r17,-1
18009ecc:	813ffd04 	addi	r4,r16,-12
18009ed0:	b080042e 	bgeu	r22,r2,18009ee4 <_fwalk+0x78>
18009ed4:	9080000f 	ldh	r2,0(r18)
18009ed8:	14c00226 	beq	r2,r19,18009ee4 <_fwalk+0x78>
18009edc:	a83ee83a 	callr	r21
18009ee0:	b8aeb03a 	or	r23,r23,r2
18009ee4:	84001a04 	addi	r16,r16,104
18009ee8:	94801a04 	addi	r18,r18,104
18009eec:	8cfff51e 	bne	r17,r19,18009ec4 <__alt_data_end+0xf8009ec4>
18009ef0:	a5000017 	ldw	r20,0(r20)
18009ef4:	a03fed1e 	bne	r20,zero,18009eac <__alt_data_end+0xf8009eac>
18009ef8:	b805883a 	mov	r2,r23
18009efc:	dfc00817 	ldw	ra,32(sp)
18009f00:	ddc00717 	ldw	r23,28(sp)
18009f04:	dd800617 	ldw	r22,24(sp)
18009f08:	dd400517 	ldw	r21,20(sp)
18009f0c:	dd000417 	ldw	r20,16(sp)
18009f10:	dcc00317 	ldw	r19,12(sp)
18009f14:	dc800217 	ldw	r18,8(sp)
18009f18:	dc400117 	ldw	r17,4(sp)
18009f1c:	dc000017 	ldw	r16,0(sp)
18009f20:	dec00904 	addi	sp,sp,36
18009f24:	f800283a 	ret
18009f28:	002f883a 	mov	r23,zero
18009f2c:	003ff206 	br	18009ef8 <__alt_data_end+0xf8009ef8>

18009f30 <_fwalk_reent>:
18009f30:	defff704 	addi	sp,sp,-36
18009f34:	dd000415 	stw	r20,16(sp)
18009f38:	dfc00815 	stw	ra,32(sp)
18009f3c:	ddc00715 	stw	r23,28(sp)
18009f40:	dd800615 	stw	r22,24(sp)
18009f44:	dd400515 	stw	r21,20(sp)
18009f48:	dcc00315 	stw	r19,12(sp)
18009f4c:	dc800215 	stw	r18,8(sp)
18009f50:	dc400115 	stw	r17,4(sp)
18009f54:	dc000015 	stw	r16,0(sp)
18009f58:	2500b804 	addi	r20,r4,736
18009f5c:	a0002326 	beq	r20,zero,18009fec <_fwalk_reent+0xbc>
18009f60:	282b883a 	mov	r21,r5
18009f64:	2027883a 	mov	r19,r4
18009f68:	002f883a 	mov	r23,zero
18009f6c:	05800044 	movi	r22,1
18009f70:	04bfffc4 	movi	r18,-1
18009f74:	a4400117 	ldw	r17,4(r20)
18009f78:	a4000217 	ldw	r16,8(r20)
18009f7c:	8c7fffc4 	addi	r17,r17,-1
18009f80:	88000c16 	blt	r17,zero,18009fb4 <_fwalk_reent+0x84>
18009f84:	84000304 	addi	r16,r16,12
18009f88:	8080000b 	ldhu	r2,0(r16)
18009f8c:	8c7fffc4 	addi	r17,r17,-1
18009f90:	817ffd04 	addi	r5,r16,-12
18009f94:	b080052e 	bgeu	r22,r2,18009fac <_fwalk_reent+0x7c>
18009f98:	8080008f 	ldh	r2,2(r16)
18009f9c:	9809883a 	mov	r4,r19
18009fa0:	14800226 	beq	r2,r18,18009fac <_fwalk_reent+0x7c>
18009fa4:	a83ee83a 	callr	r21
18009fa8:	b8aeb03a 	or	r23,r23,r2
18009fac:	84001a04 	addi	r16,r16,104
18009fb0:	8cbff51e 	bne	r17,r18,18009f88 <__alt_data_end+0xf8009f88>
18009fb4:	a5000017 	ldw	r20,0(r20)
18009fb8:	a03fee1e 	bne	r20,zero,18009f74 <__alt_data_end+0xf8009f74>
18009fbc:	b805883a 	mov	r2,r23
18009fc0:	dfc00817 	ldw	ra,32(sp)
18009fc4:	ddc00717 	ldw	r23,28(sp)
18009fc8:	dd800617 	ldw	r22,24(sp)
18009fcc:	dd400517 	ldw	r21,20(sp)
18009fd0:	dd000417 	ldw	r20,16(sp)
18009fd4:	dcc00317 	ldw	r19,12(sp)
18009fd8:	dc800217 	ldw	r18,8(sp)
18009fdc:	dc400117 	ldw	r17,4(sp)
18009fe0:	dc000017 	ldw	r16,0(sp)
18009fe4:	dec00904 	addi	sp,sp,36
18009fe8:	f800283a 	ret
18009fec:	002f883a 	mov	r23,zero
18009ff0:	003ff206 	br	18009fbc <__alt_data_end+0xf8009fbc>

18009ff4 <_setlocale_r>:
18009ff4:	30001b26 	beq	r6,zero,1800a064 <_setlocale_r+0x70>
18009ff8:	01460074 	movhi	r5,6145
18009ffc:	defffe04 	addi	sp,sp,-8
1800a000:	29591004 	addi	r5,r5,25664
1800a004:	3009883a 	mov	r4,r6
1800a008:	dc000015 	stw	r16,0(sp)
1800a00c:	dfc00115 	stw	ra,4(sp)
1800a010:	3021883a 	mov	r16,r6
1800a014:	800c7680 	call	1800c768 <strcmp>
1800a018:	1000061e 	bne	r2,zero,1800a034 <_setlocale_r+0x40>
1800a01c:	00860074 	movhi	r2,6145
1800a020:	10990f04 	addi	r2,r2,25660
1800a024:	dfc00117 	ldw	ra,4(sp)
1800a028:	dc000017 	ldw	r16,0(sp)
1800a02c:	dec00204 	addi	sp,sp,8
1800a030:	f800283a 	ret
1800a034:	01460074 	movhi	r5,6145
1800a038:	29590f04 	addi	r5,r5,25660
1800a03c:	8009883a 	mov	r4,r16
1800a040:	800c7680 	call	1800c768 <strcmp>
1800a044:	103ff526 	beq	r2,zero,1800a01c <__alt_data_end+0xf800a01c>
1800a048:	01460074 	movhi	r5,6145
1800a04c:	2958f204 	addi	r5,r5,25544
1800a050:	8009883a 	mov	r4,r16
1800a054:	800c7680 	call	1800c768 <strcmp>
1800a058:	103ff026 	beq	r2,zero,1800a01c <__alt_data_end+0xf800a01c>
1800a05c:	0005883a 	mov	r2,zero
1800a060:	003ff006 	br	1800a024 <__alt_data_end+0xf800a024>
1800a064:	00860074 	movhi	r2,6145
1800a068:	10990f04 	addi	r2,r2,25660
1800a06c:	f800283a 	ret

1800a070 <__locale_charset>:
1800a070:	00860074 	movhi	r2,6145
1800a074:	109b8204 	addi	r2,r2,28168
1800a078:	f800283a 	ret

1800a07c <__locale_mb_cur_max>:
1800a07c:	008600b4 	movhi	r2,6146
1800a080:	10a12004 	addi	r2,r2,-31616
1800a084:	10800017 	ldw	r2,0(r2)
1800a088:	f800283a 	ret

1800a08c <__locale_msgcharset>:
1800a08c:	00860074 	movhi	r2,6145
1800a090:	109b7a04 	addi	r2,r2,28136
1800a094:	f800283a 	ret

1800a098 <__locale_cjk_lang>:
1800a098:	0005883a 	mov	r2,zero
1800a09c:	f800283a 	ret

1800a0a0 <_localeconv_r>:
1800a0a0:	00860074 	movhi	r2,6145
1800a0a4:	109b8a04 	addi	r2,r2,28200
1800a0a8:	f800283a 	ret

1800a0ac <setlocale>:
1800a0ac:	008600b4 	movhi	r2,6146
1800a0b0:	10a11f04 	addi	r2,r2,-31620
1800a0b4:	280d883a 	mov	r6,r5
1800a0b8:	200b883a 	mov	r5,r4
1800a0bc:	11000017 	ldw	r4,0(r2)
1800a0c0:	8009ff41 	jmpi	18009ff4 <_setlocale_r>

1800a0c4 <localeconv>:
1800a0c4:	00860074 	movhi	r2,6145
1800a0c8:	109b8a04 	addi	r2,r2,28200
1800a0cc:	f800283a 	ret

1800a0d0 <__smakebuf_r>:
1800a0d0:	2880030b 	ldhu	r2,12(r5)
1800a0d4:	10c0008c 	andi	r3,r2,2
1800a0d8:	1800411e 	bne	r3,zero,1800a1e0 <__smakebuf_r+0x110>
1800a0dc:	deffec04 	addi	sp,sp,-80
1800a0e0:	dc000f15 	stw	r16,60(sp)
1800a0e4:	2821883a 	mov	r16,r5
1800a0e8:	2940038f 	ldh	r5,14(r5)
1800a0ec:	dc401015 	stw	r17,64(sp)
1800a0f0:	dfc01315 	stw	ra,76(sp)
1800a0f4:	dcc01215 	stw	r19,72(sp)
1800a0f8:	dc801115 	stw	r18,68(sp)
1800a0fc:	2023883a 	mov	r17,r4
1800a100:	28001c16 	blt	r5,zero,1800a174 <__smakebuf_r+0xa4>
1800a104:	d80d883a 	mov	r6,sp
1800a108:	800f9480 	call	1800f948 <_fstat_r>
1800a10c:	10001816 	blt	r2,zero,1800a170 <__smakebuf_r+0xa0>
1800a110:	d8800117 	ldw	r2,4(sp)
1800a114:	00e00014 	movui	r3,32768
1800a118:	10bc000c 	andi	r2,r2,61440
1800a11c:	14c80020 	cmpeqi	r19,r2,8192
1800a120:	10c03726 	beq	r2,r3,1800a200 <__smakebuf_r+0x130>
1800a124:	80c0030b 	ldhu	r3,12(r16)
1800a128:	18c20014 	ori	r3,r3,2048
1800a12c:	80c0030d 	sth	r3,12(r16)
1800a130:	00c80004 	movi	r3,8192
1800a134:	10c0521e 	bne	r2,r3,1800a280 <__smakebuf_r+0x1b0>
1800a138:	8140038f 	ldh	r5,14(r16)
1800a13c:	8809883a 	mov	r4,r17
1800a140:	800f9a40 	call	1800f9a4 <_isatty_r>
1800a144:	10004c26 	beq	r2,zero,1800a278 <__smakebuf_r+0x1a8>
1800a148:	8080030b 	ldhu	r2,12(r16)
1800a14c:	80c010c4 	addi	r3,r16,67
1800a150:	80c00015 	stw	r3,0(r16)
1800a154:	10800054 	ori	r2,r2,1
1800a158:	8080030d 	sth	r2,12(r16)
1800a15c:	00800044 	movi	r2,1
1800a160:	80c00415 	stw	r3,16(r16)
1800a164:	80800515 	stw	r2,20(r16)
1800a168:	04810004 	movi	r18,1024
1800a16c:	00000706 	br	1800a18c <__smakebuf_r+0xbc>
1800a170:	8080030b 	ldhu	r2,12(r16)
1800a174:	10c0200c 	andi	r3,r2,128
1800a178:	18001f1e 	bne	r3,zero,1800a1f8 <__smakebuf_r+0x128>
1800a17c:	04810004 	movi	r18,1024
1800a180:	10820014 	ori	r2,r2,2048
1800a184:	8080030d 	sth	r2,12(r16)
1800a188:	0027883a 	mov	r19,zero
1800a18c:	900b883a 	mov	r5,r18
1800a190:	8809883a 	mov	r4,r17
1800a194:	800a28c0 	call	1800a28c <_malloc_r>
1800a198:	10002c26 	beq	r2,zero,1800a24c <__smakebuf_r+0x17c>
1800a19c:	80c0030b 	ldhu	r3,12(r16)
1800a1a0:	01060074 	movhi	r4,6145
1800a1a4:	21247204 	addi	r4,r4,-28216
1800a1a8:	89000f15 	stw	r4,60(r17)
1800a1ac:	18c02014 	ori	r3,r3,128
1800a1b0:	80c0030d 	sth	r3,12(r16)
1800a1b4:	80800015 	stw	r2,0(r16)
1800a1b8:	80800415 	stw	r2,16(r16)
1800a1bc:	84800515 	stw	r18,20(r16)
1800a1c0:	98001a1e 	bne	r19,zero,1800a22c <__smakebuf_r+0x15c>
1800a1c4:	dfc01317 	ldw	ra,76(sp)
1800a1c8:	dcc01217 	ldw	r19,72(sp)
1800a1cc:	dc801117 	ldw	r18,68(sp)
1800a1d0:	dc401017 	ldw	r17,64(sp)
1800a1d4:	dc000f17 	ldw	r16,60(sp)
1800a1d8:	dec01404 	addi	sp,sp,80
1800a1dc:	f800283a 	ret
1800a1e0:	288010c4 	addi	r2,r5,67
1800a1e4:	28800015 	stw	r2,0(r5)
1800a1e8:	28800415 	stw	r2,16(r5)
1800a1ec:	00800044 	movi	r2,1
1800a1f0:	28800515 	stw	r2,20(r5)
1800a1f4:	f800283a 	ret
1800a1f8:	04801004 	movi	r18,64
1800a1fc:	003fe006 	br	1800a180 <__alt_data_end+0xf800a180>
1800a200:	81000a17 	ldw	r4,40(r16)
1800a204:	00c60074 	movhi	r3,6145
1800a208:	18f1c104 	addi	r3,r3,-14588
1800a20c:	20ffc51e 	bne	r4,r3,1800a124 <__alt_data_end+0xf800a124>
1800a210:	8080030b 	ldhu	r2,12(r16)
1800a214:	04810004 	movi	r18,1024
1800a218:	84801315 	stw	r18,76(r16)
1800a21c:	1484b03a 	or	r2,r2,r18
1800a220:	8080030d 	sth	r2,12(r16)
1800a224:	0027883a 	mov	r19,zero
1800a228:	003fd806 	br	1800a18c <__alt_data_end+0xf800a18c>
1800a22c:	8140038f 	ldh	r5,14(r16)
1800a230:	8809883a 	mov	r4,r17
1800a234:	800f9a40 	call	1800f9a4 <_isatty_r>
1800a238:	103fe226 	beq	r2,zero,1800a1c4 <__alt_data_end+0xf800a1c4>
1800a23c:	8080030b 	ldhu	r2,12(r16)
1800a240:	10800054 	ori	r2,r2,1
1800a244:	8080030d 	sth	r2,12(r16)
1800a248:	003fde06 	br	1800a1c4 <__alt_data_end+0xf800a1c4>
1800a24c:	8080030b 	ldhu	r2,12(r16)
1800a250:	10c0800c 	andi	r3,r2,512
1800a254:	183fdb1e 	bne	r3,zero,1800a1c4 <__alt_data_end+0xf800a1c4>
1800a258:	10800094 	ori	r2,r2,2
1800a25c:	80c010c4 	addi	r3,r16,67
1800a260:	8080030d 	sth	r2,12(r16)
1800a264:	00800044 	movi	r2,1
1800a268:	80c00015 	stw	r3,0(r16)
1800a26c:	80c00415 	stw	r3,16(r16)
1800a270:	80800515 	stw	r2,20(r16)
1800a274:	003fd306 	br	1800a1c4 <__alt_data_end+0xf800a1c4>
1800a278:	04810004 	movi	r18,1024
1800a27c:	003fc306 	br	1800a18c <__alt_data_end+0xf800a18c>
1800a280:	0027883a 	mov	r19,zero
1800a284:	04810004 	movi	r18,1024
1800a288:	003fc006 	br	1800a18c <__alt_data_end+0xf800a18c>

1800a28c <_malloc_r>:
1800a28c:	defff504 	addi	sp,sp,-44
1800a290:	dc800315 	stw	r18,12(sp)
1800a294:	dfc00a15 	stw	ra,40(sp)
1800a298:	df000915 	stw	fp,36(sp)
1800a29c:	ddc00815 	stw	r23,32(sp)
1800a2a0:	dd800715 	stw	r22,28(sp)
1800a2a4:	dd400615 	stw	r21,24(sp)
1800a2a8:	dd000515 	stw	r20,20(sp)
1800a2ac:	dcc00415 	stw	r19,16(sp)
1800a2b0:	dc400215 	stw	r17,8(sp)
1800a2b4:	dc000115 	stw	r16,4(sp)
1800a2b8:	288002c4 	addi	r2,r5,11
1800a2bc:	00c00584 	movi	r3,22
1800a2c0:	2025883a 	mov	r18,r4
1800a2c4:	18807f2e 	bgeu	r3,r2,1800a4c4 <_malloc_r+0x238>
1800a2c8:	047ffe04 	movi	r17,-8
1800a2cc:	1462703a 	and	r17,r2,r17
1800a2d0:	8800a316 	blt	r17,zero,1800a560 <_malloc_r+0x2d4>
1800a2d4:	8940a236 	bltu	r17,r5,1800a560 <_malloc_r+0x2d4>
1800a2d8:	80139040 	call	18013904 <__malloc_lock>
1800a2dc:	00807dc4 	movi	r2,503
1800a2e0:	1441e92e 	bgeu	r2,r17,1800aa88 <_malloc_r+0x7fc>
1800a2e4:	8804d27a 	srli	r2,r17,9
1800a2e8:	1000a126 	beq	r2,zero,1800a570 <_malloc_r+0x2e4>
1800a2ec:	00c00104 	movi	r3,4
1800a2f0:	18811e36 	bltu	r3,r2,1800a76c <_malloc_r+0x4e0>
1800a2f4:	8804d1ba 	srli	r2,r17,6
1800a2f8:	12000e44 	addi	r8,r2,57
1800a2fc:	11c00e04 	addi	r7,r2,56
1800a300:	4209883a 	add	r4,r8,r8
1800a304:	04c60074 	movhi	r19,6145
1800a308:	2109883a 	add	r4,r4,r4
1800a30c:	9cdb9804 	addi	r19,r19,28256
1800a310:	2109883a 	add	r4,r4,r4
1800a314:	9909883a 	add	r4,r19,r4
1800a318:	24000117 	ldw	r16,4(r4)
1800a31c:	213ffe04 	addi	r4,r4,-8
1800a320:	24009726 	beq	r4,r16,1800a580 <_malloc_r+0x2f4>
1800a324:	80800117 	ldw	r2,4(r16)
1800a328:	01bfff04 	movi	r6,-4
1800a32c:	014003c4 	movi	r5,15
1800a330:	1184703a 	and	r2,r2,r6
1800a334:	1447c83a 	sub	r3,r2,r17
1800a338:	28c00716 	blt	r5,r3,1800a358 <_malloc_r+0xcc>
1800a33c:	1800920e 	bge	r3,zero,1800a588 <_malloc_r+0x2fc>
1800a340:	84000317 	ldw	r16,12(r16)
1800a344:	24008e26 	beq	r4,r16,1800a580 <_malloc_r+0x2f4>
1800a348:	80800117 	ldw	r2,4(r16)
1800a34c:	1184703a 	and	r2,r2,r6
1800a350:	1447c83a 	sub	r3,r2,r17
1800a354:	28fff90e 	bge	r5,r3,1800a33c <__alt_data_end+0xf800a33c>
1800a358:	3809883a 	mov	r4,r7
1800a35c:	01860074 	movhi	r6,6145
1800a360:	9c000417 	ldw	r16,16(r19)
1800a364:	319b9804 	addi	r6,r6,28256
1800a368:	32000204 	addi	r8,r6,8
1800a36c:	82013426 	beq	r16,r8,1800a840 <_malloc_r+0x5b4>
1800a370:	80c00117 	ldw	r3,4(r16)
1800a374:	00bfff04 	movi	r2,-4
1800a378:	188e703a 	and	r7,r3,r2
1800a37c:	3c45c83a 	sub	r2,r7,r17
1800a380:	00c003c4 	movi	r3,15
1800a384:	18811f16 	blt	r3,r2,1800a804 <_malloc_r+0x578>
1800a388:	32000515 	stw	r8,20(r6)
1800a38c:	32000415 	stw	r8,16(r6)
1800a390:	10007f0e 	bge	r2,zero,1800a590 <_malloc_r+0x304>
1800a394:	00807fc4 	movi	r2,511
1800a398:	11c0fd36 	bltu	r2,r7,1800a790 <_malloc_r+0x504>
1800a39c:	3806d0fa 	srli	r3,r7,3
1800a3a0:	01c00044 	movi	r7,1
1800a3a4:	30800117 	ldw	r2,4(r6)
1800a3a8:	19400044 	addi	r5,r3,1
1800a3ac:	294b883a 	add	r5,r5,r5
1800a3b0:	1807d0ba 	srai	r3,r3,2
1800a3b4:	294b883a 	add	r5,r5,r5
1800a3b8:	294b883a 	add	r5,r5,r5
1800a3bc:	298b883a 	add	r5,r5,r6
1800a3c0:	38c6983a 	sll	r3,r7,r3
1800a3c4:	29c00017 	ldw	r7,0(r5)
1800a3c8:	2a7ffe04 	addi	r9,r5,-8
1800a3cc:	1886b03a 	or	r3,r3,r2
1800a3d0:	82400315 	stw	r9,12(r16)
1800a3d4:	81c00215 	stw	r7,8(r16)
1800a3d8:	30c00115 	stw	r3,4(r6)
1800a3dc:	2c000015 	stw	r16,0(r5)
1800a3e0:	3c000315 	stw	r16,12(r7)
1800a3e4:	2005d0ba 	srai	r2,r4,2
1800a3e8:	01400044 	movi	r5,1
1800a3ec:	288a983a 	sll	r5,r5,r2
1800a3f0:	19406f36 	bltu	r3,r5,1800a5b0 <_malloc_r+0x324>
1800a3f4:	28c4703a 	and	r2,r5,r3
1800a3f8:	10000a1e 	bne	r2,zero,1800a424 <_malloc_r+0x198>
1800a3fc:	00bfff04 	movi	r2,-4
1800a400:	294b883a 	add	r5,r5,r5
1800a404:	2088703a 	and	r4,r4,r2
1800a408:	28c4703a 	and	r2,r5,r3
1800a40c:	21000104 	addi	r4,r4,4
1800a410:	1000041e 	bne	r2,zero,1800a424 <_malloc_r+0x198>
1800a414:	294b883a 	add	r5,r5,r5
1800a418:	28c4703a 	and	r2,r5,r3
1800a41c:	21000104 	addi	r4,r4,4
1800a420:	103ffc26 	beq	r2,zero,1800a414 <__alt_data_end+0xf800a414>
1800a424:	02bfff04 	movi	r10,-4
1800a428:	024003c4 	movi	r9,15
1800a42c:	21800044 	addi	r6,r4,1
1800a430:	318d883a 	add	r6,r6,r6
1800a434:	318d883a 	add	r6,r6,r6
1800a438:	318d883a 	add	r6,r6,r6
1800a43c:	998d883a 	add	r6,r19,r6
1800a440:	333ffe04 	addi	r12,r6,-8
1800a444:	2017883a 	mov	r11,r4
1800a448:	31800104 	addi	r6,r6,4
1800a44c:	34000017 	ldw	r16,0(r6)
1800a450:	31fffd04 	addi	r7,r6,-12
1800a454:	81c0041e 	bne	r16,r7,1800a468 <_malloc_r+0x1dc>
1800a458:	0000fb06 	br	1800a848 <_malloc_r+0x5bc>
1800a45c:	1801030e 	bge	r3,zero,1800a86c <_malloc_r+0x5e0>
1800a460:	84000317 	ldw	r16,12(r16)
1800a464:	81c0f826 	beq	r16,r7,1800a848 <_malloc_r+0x5bc>
1800a468:	80800117 	ldw	r2,4(r16)
1800a46c:	1284703a 	and	r2,r2,r10
1800a470:	1447c83a 	sub	r3,r2,r17
1800a474:	48fff90e 	bge	r9,r3,1800a45c <__alt_data_end+0xf800a45c>
1800a478:	80800317 	ldw	r2,12(r16)
1800a47c:	81000217 	ldw	r4,8(r16)
1800a480:	89400054 	ori	r5,r17,1
1800a484:	81400115 	stw	r5,4(r16)
1800a488:	20800315 	stw	r2,12(r4)
1800a48c:	11000215 	stw	r4,8(r2)
1800a490:	8463883a 	add	r17,r16,r17
1800a494:	9c400515 	stw	r17,20(r19)
1800a498:	9c400415 	stw	r17,16(r19)
1800a49c:	18800054 	ori	r2,r3,1
1800a4a0:	88800115 	stw	r2,4(r17)
1800a4a4:	8a000315 	stw	r8,12(r17)
1800a4a8:	8a000215 	stw	r8,8(r17)
1800a4ac:	88e3883a 	add	r17,r17,r3
1800a4b0:	88c00015 	stw	r3,0(r17)
1800a4b4:	9009883a 	mov	r4,r18
1800a4b8:	80139280 	call	18013928 <__malloc_unlock>
1800a4bc:	80800204 	addi	r2,r16,8
1800a4c0:	00001b06 	br	1800a530 <_malloc_r+0x2a4>
1800a4c4:	04400404 	movi	r17,16
1800a4c8:	89402536 	bltu	r17,r5,1800a560 <_malloc_r+0x2d4>
1800a4cc:	80139040 	call	18013904 <__malloc_lock>
1800a4d0:	00800184 	movi	r2,6
1800a4d4:	01000084 	movi	r4,2
1800a4d8:	04c60074 	movhi	r19,6145
1800a4dc:	1085883a 	add	r2,r2,r2
1800a4e0:	9cdb9804 	addi	r19,r19,28256
1800a4e4:	1085883a 	add	r2,r2,r2
1800a4e8:	9885883a 	add	r2,r19,r2
1800a4ec:	14000117 	ldw	r16,4(r2)
1800a4f0:	10fffe04 	addi	r3,r2,-8
1800a4f4:	80c0d926 	beq	r16,r3,1800a85c <_malloc_r+0x5d0>
1800a4f8:	80c00117 	ldw	r3,4(r16)
1800a4fc:	81000317 	ldw	r4,12(r16)
1800a500:	00bfff04 	movi	r2,-4
1800a504:	1884703a 	and	r2,r3,r2
1800a508:	81400217 	ldw	r5,8(r16)
1800a50c:	8085883a 	add	r2,r16,r2
1800a510:	10c00117 	ldw	r3,4(r2)
1800a514:	29000315 	stw	r4,12(r5)
1800a518:	21400215 	stw	r5,8(r4)
1800a51c:	18c00054 	ori	r3,r3,1
1800a520:	10c00115 	stw	r3,4(r2)
1800a524:	9009883a 	mov	r4,r18
1800a528:	80139280 	call	18013928 <__malloc_unlock>
1800a52c:	80800204 	addi	r2,r16,8
1800a530:	dfc00a17 	ldw	ra,40(sp)
1800a534:	df000917 	ldw	fp,36(sp)
1800a538:	ddc00817 	ldw	r23,32(sp)
1800a53c:	dd800717 	ldw	r22,28(sp)
1800a540:	dd400617 	ldw	r21,24(sp)
1800a544:	dd000517 	ldw	r20,20(sp)
1800a548:	dcc00417 	ldw	r19,16(sp)
1800a54c:	dc800317 	ldw	r18,12(sp)
1800a550:	dc400217 	ldw	r17,8(sp)
1800a554:	dc000117 	ldw	r16,4(sp)
1800a558:	dec00b04 	addi	sp,sp,44
1800a55c:	f800283a 	ret
1800a560:	00800304 	movi	r2,12
1800a564:	90800015 	stw	r2,0(r18)
1800a568:	0005883a 	mov	r2,zero
1800a56c:	003ff006 	br	1800a530 <__alt_data_end+0xf800a530>
1800a570:	01002004 	movi	r4,128
1800a574:	02001004 	movi	r8,64
1800a578:	01c00fc4 	movi	r7,63
1800a57c:	003f6106 	br	1800a304 <__alt_data_end+0xf800a304>
1800a580:	4009883a 	mov	r4,r8
1800a584:	003f7506 	br	1800a35c <__alt_data_end+0xf800a35c>
1800a588:	81000317 	ldw	r4,12(r16)
1800a58c:	003fde06 	br	1800a508 <__alt_data_end+0xf800a508>
1800a590:	81c5883a 	add	r2,r16,r7
1800a594:	11400117 	ldw	r5,4(r2)
1800a598:	9009883a 	mov	r4,r18
1800a59c:	29400054 	ori	r5,r5,1
1800a5a0:	11400115 	stw	r5,4(r2)
1800a5a4:	80139280 	call	18013928 <__malloc_unlock>
1800a5a8:	80800204 	addi	r2,r16,8
1800a5ac:	003fe006 	br	1800a530 <__alt_data_end+0xf800a530>
1800a5b0:	9c000217 	ldw	r16,8(r19)
1800a5b4:	00bfff04 	movi	r2,-4
1800a5b8:	85800117 	ldw	r22,4(r16)
1800a5bc:	b0ac703a 	and	r22,r22,r2
1800a5c0:	b4400336 	bltu	r22,r17,1800a5d0 <_malloc_r+0x344>
1800a5c4:	b445c83a 	sub	r2,r22,r17
1800a5c8:	00c003c4 	movi	r3,15
1800a5cc:	18805d16 	blt	r3,r2,1800a744 <_malloc_r+0x4b8>
1800a5d0:	05c600b4 	movhi	r23,6146
1800a5d4:	008600b4 	movhi	r2,6146
1800a5d8:	10a8a904 	addi	r2,r2,-23900
1800a5dc:	bde12104 	addi	r23,r23,-31612
1800a5e0:	15400017 	ldw	r21,0(r2)
1800a5e4:	b8c00017 	ldw	r3,0(r23)
1800a5e8:	00bfffc4 	movi	r2,-1
1800a5ec:	858d883a 	add	r6,r16,r22
1800a5f0:	8d6b883a 	add	r21,r17,r21
1800a5f4:	1880ea26 	beq	r3,r2,1800a9a0 <_malloc_r+0x714>
1800a5f8:	ad4403c4 	addi	r21,r21,4111
1800a5fc:	00bc0004 	movi	r2,-4096
1800a600:	a8aa703a 	and	r21,r21,r2
1800a604:	a80b883a 	mov	r5,r21
1800a608:	9009883a 	mov	r4,r18
1800a60c:	d9800015 	stw	r6,0(sp)
1800a610:	800c5d80 	call	1800c5d8 <_sbrk_r>
1800a614:	1029883a 	mov	r20,r2
1800a618:	00bfffc4 	movi	r2,-1
1800a61c:	d9800017 	ldw	r6,0(sp)
1800a620:	a080e826 	beq	r20,r2,1800a9c4 <_malloc_r+0x738>
1800a624:	a180a636 	bltu	r20,r6,1800a8c0 <_malloc_r+0x634>
1800a628:	070600b4 	movhi	fp,6146
1800a62c:	e728b204 	addi	fp,fp,-23864
1800a630:	e0800017 	ldw	r2,0(fp)
1800a634:	a887883a 	add	r3,r21,r2
1800a638:	e0c00015 	stw	r3,0(fp)
1800a63c:	3500e626 	beq	r6,r20,1800a9d8 <_malloc_r+0x74c>
1800a640:	b9000017 	ldw	r4,0(r23)
1800a644:	00bfffc4 	movi	r2,-1
1800a648:	2080ee26 	beq	r4,r2,1800aa04 <_malloc_r+0x778>
1800a64c:	a185c83a 	sub	r2,r20,r6
1800a650:	10c5883a 	add	r2,r2,r3
1800a654:	e0800015 	stw	r2,0(fp)
1800a658:	a0c001cc 	andi	r3,r20,7
1800a65c:	1800bc26 	beq	r3,zero,1800a950 <_malloc_r+0x6c4>
1800a660:	a0e9c83a 	sub	r20,r20,r3
1800a664:	00840204 	movi	r2,4104
1800a668:	a5000204 	addi	r20,r20,8
1800a66c:	10c7c83a 	sub	r3,r2,r3
1800a670:	a545883a 	add	r2,r20,r21
1800a674:	1083ffcc 	andi	r2,r2,4095
1800a678:	18abc83a 	sub	r21,r3,r2
1800a67c:	a80b883a 	mov	r5,r21
1800a680:	9009883a 	mov	r4,r18
1800a684:	800c5d80 	call	1800c5d8 <_sbrk_r>
1800a688:	00ffffc4 	movi	r3,-1
1800a68c:	10c0e126 	beq	r2,r3,1800aa14 <_malloc_r+0x788>
1800a690:	1505c83a 	sub	r2,r2,r20
1800a694:	1545883a 	add	r2,r2,r21
1800a698:	10800054 	ori	r2,r2,1
1800a69c:	e0c00017 	ldw	r3,0(fp)
1800a6a0:	9d000215 	stw	r20,8(r19)
1800a6a4:	a0800115 	stw	r2,4(r20)
1800a6a8:	a8c7883a 	add	r3,r21,r3
1800a6ac:	e0c00015 	stw	r3,0(fp)
1800a6b0:	84c00e26 	beq	r16,r19,1800a6ec <_malloc_r+0x460>
1800a6b4:	018003c4 	movi	r6,15
1800a6b8:	3580a72e 	bgeu	r6,r22,1800a958 <_malloc_r+0x6cc>
1800a6bc:	81400117 	ldw	r5,4(r16)
1800a6c0:	013ffe04 	movi	r4,-8
1800a6c4:	b0bffd04 	addi	r2,r22,-12
1800a6c8:	1104703a 	and	r2,r2,r4
1800a6cc:	2900004c 	andi	r4,r5,1
1800a6d0:	2088b03a 	or	r4,r4,r2
1800a6d4:	81000115 	stw	r4,4(r16)
1800a6d8:	01400144 	movi	r5,5
1800a6dc:	8089883a 	add	r4,r16,r2
1800a6e0:	21400115 	stw	r5,4(r4)
1800a6e4:	21400215 	stw	r5,8(r4)
1800a6e8:	3080cd36 	bltu	r6,r2,1800aa20 <_malloc_r+0x794>
1800a6ec:	008600b4 	movhi	r2,6146
1800a6f0:	10a8a804 	addi	r2,r2,-23904
1800a6f4:	11000017 	ldw	r4,0(r2)
1800a6f8:	20c0012e 	bgeu	r4,r3,1800a700 <_malloc_r+0x474>
1800a6fc:	10c00015 	stw	r3,0(r2)
1800a700:	008600b4 	movhi	r2,6146
1800a704:	10a8a704 	addi	r2,r2,-23908
1800a708:	11000017 	ldw	r4,0(r2)
1800a70c:	9c000217 	ldw	r16,8(r19)
1800a710:	20c0012e 	bgeu	r4,r3,1800a718 <_malloc_r+0x48c>
1800a714:	10c00015 	stw	r3,0(r2)
1800a718:	80c00117 	ldw	r3,4(r16)
1800a71c:	00bfff04 	movi	r2,-4
1800a720:	1886703a 	and	r3,r3,r2
1800a724:	1c45c83a 	sub	r2,r3,r17
1800a728:	1c400236 	bltu	r3,r17,1800a734 <_malloc_r+0x4a8>
1800a72c:	00c003c4 	movi	r3,15
1800a730:	18800416 	blt	r3,r2,1800a744 <_malloc_r+0x4b8>
1800a734:	9009883a 	mov	r4,r18
1800a738:	80139280 	call	18013928 <__malloc_unlock>
1800a73c:	0005883a 	mov	r2,zero
1800a740:	003f7b06 	br	1800a530 <__alt_data_end+0xf800a530>
1800a744:	88c00054 	ori	r3,r17,1
1800a748:	80c00115 	stw	r3,4(r16)
1800a74c:	8463883a 	add	r17,r16,r17
1800a750:	10800054 	ori	r2,r2,1
1800a754:	9c400215 	stw	r17,8(r19)
1800a758:	88800115 	stw	r2,4(r17)
1800a75c:	9009883a 	mov	r4,r18
1800a760:	80139280 	call	18013928 <__malloc_unlock>
1800a764:	80800204 	addi	r2,r16,8
1800a768:	003f7106 	br	1800a530 <__alt_data_end+0xf800a530>
1800a76c:	00c00504 	movi	r3,20
1800a770:	18804a2e 	bgeu	r3,r2,1800a89c <_malloc_r+0x610>
1800a774:	00c01504 	movi	r3,84
1800a778:	18806e36 	bltu	r3,r2,1800a934 <_malloc_r+0x6a8>
1800a77c:	8804d33a 	srli	r2,r17,12
1800a780:	12001bc4 	addi	r8,r2,111
1800a784:	11c01b84 	addi	r7,r2,110
1800a788:	4209883a 	add	r4,r8,r8
1800a78c:	003edd06 	br	1800a304 <__alt_data_end+0xf800a304>
1800a790:	3804d27a 	srli	r2,r7,9
1800a794:	00c00104 	movi	r3,4
1800a798:	1880442e 	bgeu	r3,r2,1800a8ac <_malloc_r+0x620>
1800a79c:	00c00504 	movi	r3,20
1800a7a0:	18808136 	bltu	r3,r2,1800a9a8 <_malloc_r+0x71c>
1800a7a4:	11401704 	addi	r5,r2,92
1800a7a8:	10c016c4 	addi	r3,r2,91
1800a7ac:	294b883a 	add	r5,r5,r5
1800a7b0:	294b883a 	add	r5,r5,r5
1800a7b4:	294b883a 	add	r5,r5,r5
1800a7b8:	994b883a 	add	r5,r19,r5
1800a7bc:	28800017 	ldw	r2,0(r5)
1800a7c0:	01860074 	movhi	r6,6145
1800a7c4:	297ffe04 	addi	r5,r5,-8
1800a7c8:	319b9804 	addi	r6,r6,28256
1800a7cc:	28806526 	beq	r5,r2,1800a964 <_malloc_r+0x6d8>
1800a7d0:	01bfff04 	movi	r6,-4
1800a7d4:	10c00117 	ldw	r3,4(r2)
1800a7d8:	1986703a 	and	r3,r3,r6
1800a7dc:	38c0022e 	bgeu	r7,r3,1800a7e8 <_malloc_r+0x55c>
1800a7e0:	10800217 	ldw	r2,8(r2)
1800a7e4:	28bffb1e 	bne	r5,r2,1800a7d4 <__alt_data_end+0xf800a7d4>
1800a7e8:	11400317 	ldw	r5,12(r2)
1800a7ec:	98c00117 	ldw	r3,4(r19)
1800a7f0:	81400315 	stw	r5,12(r16)
1800a7f4:	80800215 	stw	r2,8(r16)
1800a7f8:	2c000215 	stw	r16,8(r5)
1800a7fc:	14000315 	stw	r16,12(r2)
1800a800:	003ef806 	br	1800a3e4 <__alt_data_end+0xf800a3e4>
1800a804:	88c00054 	ori	r3,r17,1
1800a808:	80c00115 	stw	r3,4(r16)
1800a80c:	8463883a 	add	r17,r16,r17
1800a810:	34400515 	stw	r17,20(r6)
1800a814:	34400415 	stw	r17,16(r6)
1800a818:	10c00054 	ori	r3,r2,1
1800a81c:	8a000315 	stw	r8,12(r17)
1800a820:	8a000215 	stw	r8,8(r17)
1800a824:	88c00115 	stw	r3,4(r17)
1800a828:	88a3883a 	add	r17,r17,r2
1800a82c:	88800015 	stw	r2,0(r17)
1800a830:	9009883a 	mov	r4,r18
1800a834:	80139280 	call	18013928 <__malloc_unlock>
1800a838:	80800204 	addi	r2,r16,8
1800a83c:	003f3c06 	br	1800a530 <__alt_data_end+0xf800a530>
1800a840:	30c00117 	ldw	r3,4(r6)
1800a844:	003ee706 	br	1800a3e4 <__alt_data_end+0xf800a3e4>
1800a848:	5ac00044 	addi	r11,r11,1
1800a84c:	588000cc 	andi	r2,r11,3
1800a850:	31800204 	addi	r6,r6,8
1800a854:	103efd1e 	bne	r2,zero,1800a44c <__alt_data_end+0xf800a44c>
1800a858:	00002406 	br	1800a8ec <_malloc_r+0x660>
1800a85c:	14000317 	ldw	r16,12(r2)
1800a860:	143f251e 	bne	r2,r16,1800a4f8 <__alt_data_end+0xf800a4f8>
1800a864:	21000084 	addi	r4,r4,2
1800a868:	003ebc06 	br	1800a35c <__alt_data_end+0xf800a35c>
1800a86c:	8085883a 	add	r2,r16,r2
1800a870:	10c00117 	ldw	r3,4(r2)
1800a874:	81000317 	ldw	r4,12(r16)
1800a878:	81400217 	ldw	r5,8(r16)
1800a87c:	18c00054 	ori	r3,r3,1
1800a880:	10c00115 	stw	r3,4(r2)
1800a884:	29000315 	stw	r4,12(r5)
1800a888:	21400215 	stw	r5,8(r4)
1800a88c:	9009883a 	mov	r4,r18
1800a890:	80139280 	call	18013928 <__malloc_unlock>
1800a894:	80800204 	addi	r2,r16,8
1800a898:	003f2506 	br	1800a530 <__alt_data_end+0xf800a530>
1800a89c:	12001704 	addi	r8,r2,92
1800a8a0:	11c016c4 	addi	r7,r2,91
1800a8a4:	4209883a 	add	r4,r8,r8
1800a8a8:	003e9606 	br	1800a304 <__alt_data_end+0xf800a304>
1800a8ac:	3804d1ba 	srli	r2,r7,6
1800a8b0:	11400e44 	addi	r5,r2,57
1800a8b4:	10c00e04 	addi	r3,r2,56
1800a8b8:	294b883a 	add	r5,r5,r5
1800a8bc:	003fbc06 	br	1800a7b0 <__alt_data_end+0xf800a7b0>
1800a8c0:	84ff5926 	beq	r16,r19,1800a628 <__alt_data_end+0xf800a628>
1800a8c4:	00860074 	movhi	r2,6145
1800a8c8:	109b9804 	addi	r2,r2,28256
1800a8cc:	14000217 	ldw	r16,8(r2)
1800a8d0:	00bfff04 	movi	r2,-4
1800a8d4:	80c00117 	ldw	r3,4(r16)
1800a8d8:	1886703a 	and	r3,r3,r2
1800a8dc:	003f9106 	br	1800a724 <__alt_data_end+0xf800a724>
1800a8e0:	60800217 	ldw	r2,8(r12)
1800a8e4:	213fffc4 	addi	r4,r4,-1
1800a8e8:	1300651e 	bne	r2,r12,1800aa80 <_malloc_r+0x7f4>
1800a8ec:	208000cc 	andi	r2,r4,3
1800a8f0:	633ffe04 	addi	r12,r12,-8
1800a8f4:	103ffa1e 	bne	r2,zero,1800a8e0 <__alt_data_end+0xf800a8e0>
1800a8f8:	98800117 	ldw	r2,4(r19)
1800a8fc:	0146303a 	nor	r3,zero,r5
1800a900:	1884703a 	and	r2,r3,r2
1800a904:	98800115 	stw	r2,4(r19)
1800a908:	294b883a 	add	r5,r5,r5
1800a90c:	117f2836 	bltu	r2,r5,1800a5b0 <__alt_data_end+0xf800a5b0>
1800a910:	283f2726 	beq	r5,zero,1800a5b0 <__alt_data_end+0xf800a5b0>
1800a914:	2886703a 	and	r3,r5,r2
1800a918:	5809883a 	mov	r4,r11
1800a91c:	183ec31e 	bne	r3,zero,1800a42c <__alt_data_end+0xf800a42c>
1800a920:	294b883a 	add	r5,r5,r5
1800a924:	2886703a 	and	r3,r5,r2
1800a928:	21000104 	addi	r4,r4,4
1800a92c:	183ffc26 	beq	r3,zero,1800a920 <__alt_data_end+0xf800a920>
1800a930:	003ebe06 	br	1800a42c <__alt_data_end+0xf800a42c>
1800a934:	00c05504 	movi	r3,340
1800a938:	18801236 	bltu	r3,r2,1800a984 <_malloc_r+0x6f8>
1800a93c:	8804d3fa 	srli	r2,r17,15
1800a940:	12001e04 	addi	r8,r2,120
1800a944:	11c01dc4 	addi	r7,r2,119
1800a948:	4209883a 	add	r4,r8,r8
1800a94c:	003e6d06 	br	1800a304 <__alt_data_end+0xf800a304>
1800a950:	00c40004 	movi	r3,4096
1800a954:	003f4606 	br	1800a670 <__alt_data_end+0xf800a670>
1800a958:	00800044 	movi	r2,1
1800a95c:	a0800115 	stw	r2,4(r20)
1800a960:	003f7406 	br	1800a734 <__alt_data_end+0xf800a734>
1800a964:	1805d0ba 	srai	r2,r3,2
1800a968:	01c00044 	movi	r7,1
1800a96c:	30c00117 	ldw	r3,4(r6)
1800a970:	388e983a 	sll	r7,r7,r2
1800a974:	2805883a 	mov	r2,r5
1800a978:	38c6b03a 	or	r3,r7,r3
1800a97c:	30c00115 	stw	r3,4(r6)
1800a980:	003f9b06 	br	1800a7f0 <__alt_data_end+0xf800a7f0>
1800a984:	00c15504 	movi	r3,1364
1800a988:	18801a36 	bltu	r3,r2,1800a9f4 <_malloc_r+0x768>
1800a98c:	8804d4ba 	srli	r2,r17,18
1800a990:	12001f44 	addi	r8,r2,125
1800a994:	11c01f04 	addi	r7,r2,124
1800a998:	4209883a 	add	r4,r8,r8
1800a99c:	003e5906 	br	1800a304 <__alt_data_end+0xf800a304>
1800a9a0:	ad400404 	addi	r21,r21,16
1800a9a4:	003f1706 	br	1800a604 <__alt_data_end+0xf800a604>
1800a9a8:	00c01504 	movi	r3,84
1800a9ac:	18802336 	bltu	r3,r2,1800aa3c <_malloc_r+0x7b0>
1800a9b0:	3804d33a 	srli	r2,r7,12
1800a9b4:	11401bc4 	addi	r5,r2,111
1800a9b8:	10c01b84 	addi	r3,r2,110
1800a9bc:	294b883a 	add	r5,r5,r5
1800a9c0:	003f7b06 	br	1800a7b0 <__alt_data_end+0xf800a7b0>
1800a9c4:	9c000217 	ldw	r16,8(r19)
1800a9c8:	00bfff04 	movi	r2,-4
1800a9cc:	80c00117 	ldw	r3,4(r16)
1800a9d0:	1886703a 	and	r3,r3,r2
1800a9d4:	003f5306 	br	1800a724 <__alt_data_end+0xf800a724>
1800a9d8:	3083ffcc 	andi	r2,r6,4095
1800a9dc:	103f181e 	bne	r2,zero,1800a640 <__alt_data_end+0xf800a640>
1800a9e0:	99000217 	ldw	r4,8(r19)
1800a9e4:	b545883a 	add	r2,r22,r21
1800a9e8:	10800054 	ori	r2,r2,1
1800a9ec:	20800115 	stw	r2,4(r4)
1800a9f0:	003f3e06 	br	1800a6ec <__alt_data_end+0xf800a6ec>
1800a9f4:	01003f84 	movi	r4,254
1800a9f8:	02001fc4 	movi	r8,127
1800a9fc:	01c01f84 	movi	r7,126
1800aa00:	003e4006 	br	1800a304 <__alt_data_end+0xf800a304>
1800aa04:	008600b4 	movhi	r2,6146
1800aa08:	10a12104 	addi	r2,r2,-31612
1800aa0c:	15000015 	stw	r20,0(r2)
1800aa10:	003f1106 	br	1800a658 <__alt_data_end+0xf800a658>
1800aa14:	00800044 	movi	r2,1
1800aa18:	002b883a 	mov	r21,zero
1800aa1c:	003f1f06 	br	1800a69c <__alt_data_end+0xf800a69c>
1800aa20:	81400204 	addi	r5,r16,8
1800aa24:	9009883a 	mov	r4,r18
1800aa28:	80096940 	call	18009694 <_free_r>
1800aa2c:	008600b4 	movhi	r2,6146
1800aa30:	10a8b204 	addi	r2,r2,-23864
1800aa34:	10c00017 	ldw	r3,0(r2)
1800aa38:	003f2c06 	br	1800a6ec <__alt_data_end+0xf800a6ec>
1800aa3c:	00c05504 	movi	r3,340
1800aa40:	18800536 	bltu	r3,r2,1800aa58 <_malloc_r+0x7cc>
1800aa44:	3804d3fa 	srli	r2,r7,15
1800aa48:	11401e04 	addi	r5,r2,120
1800aa4c:	10c01dc4 	addi	r3,r2,119
1800aa50:	294b883a 	add	r5,r5,r5
1800aa54:	003f5606 	br	1800a7b0 <__alt_data_end+0xf800a7b0>
1800aa58:	00c15504 	movi	r3,1364
1800aa5c:	18800536 	bltu	r3,r2,1800aa74 <_malloc_r+0x7e8>
1800aa60:	3804d4ba 	srli	r2,r7,18
1800aa64:	11401f44 	addi	r5,r2,125
1800aa68:	10c01f04 	addi	r3,r2,124
1800aa6c:	294b883a 	add	r5,r5,r5
1800aa70:	003f4f06 	br	1800a7b0 <__alt_data_end+0xf800a7b0>
1800aa74:	01403f84 	movi	r5,254
1800aa78:	00c01f84 	movi	r3,126
1800aa7c:	003f4c06 	br	1800a7b0 <__alt_data_end+0xf800a7b0>
1800aa80:	98800117 	ldw	r2,4(r19)
1800aa84:	003fa006 	br	1800a908 <__alt_data_end+0xf800a908>
1800aa88:	8808d0fa 	srli	r4,r17,3
1800aa8c:	20800044 	addi	r2,r4,1
1800aa90:	1085883a 	add	r2,r2,r2
1800aa94:	003e9006 	br	1800a4d8 <__alt_data_end+0xf800a4d8>

1800aa98 <memchr>:
1800aa98:	208000cc 	andi	r2,r4,3
1800aa9c:	280f883a 	mov	r7,r5
1800aaa0:	10003426 	beq	r2,zero,1800ab74 <memchr+0xdc>
1800aaa4:	30bfffc4 	addi	r2,r6,-1
1800aaa8:	30001a26 	beq	r6,zero,1800ab14 <memchr+0x7c>
1800aaac:	20c00003 	ldbu	r3,0(r4)
1800aab0:	29803fcc 	andi	r6,r5,255
1800aab4:	30c0051e 	bne	r6,r3,1800aacc <memchr+0x34>
1800aab8:	00001806 	br	1800ab1c <memchr+0x84>
1800aabc:	10001526 	beq	r2,zero,1800ab14 <memchr+0x7c>
1800aac0:	20c00003 	ldbu	r3,0(r4)
1800aac4:	10bfffc4 	addi	r2,r2,-1
1800aac8:	30c01426 	beq	r6,r3,1800ab1c <memchr+0x84>
1800aacc:	21000044 	addi	r4,r4,1
1800aad0:	20c000cc 	andi	r3,r4,3
1800aad4:	183ff91e 	bne	r3,zero,1800aabc <__alt_data_end+0xf800aabc>
1800aad8:	020000c4 	movi	r8,3
1800aadc:	40801136 	bltu	r8,r2,1800ab24 <memchr+0x8c>
1800aae0:	10000c26 	beq	r2,zero,1800ab14 <memchr+0x7c>
1800aae4:	20c00003 	ldbu	r3,0(r4)
1800aae8:	29403fcc 	andi	r5,r5,255
1800aaec:	28c00b26 	beq	r5,r3,1800ab1c <memchr+0x84>
1800aaf0:	20c00044 	addi	r3,r4,1
1800aaf4:	39803fcc 	andi	r6,r7,255
1800aaf8:	2089883a 	add	r4,r4,r2
1800aafc:	00000306 	br	1800ab0c <memchr+0x74>
1800ab00:	18c00044 	addi	r3,r3,1
1800ab04:	197fffc3 	ldbu	r5,-1(r3)
1800ab08:	31400526 	beq	r6,r5,1800ab20 <memchr+0x88>
1800ab0c:	1805883a 	mov	r2,r3
1800ab10:	20fffb1e 	bne	r4,r3,1800ab00 <__alt_data_end+0xf800ab00>
1800ab14:	0005883a 	mov	r2,zero
1800ab18:	f800283a 	ret
1800ab1c:	2005883a 	mov	r2,r4
1800ab20:	f800283a 	ret
1800ab24:	28c03fcc 	andi	r3,r5,255
1800ab28:	1812923a 	slli	r9,r3,8
1800ab2c:	02ffbff4 	movhi	r11,65279
1800ab30:	02a02074 	movhi	r10,32897
1800ab34:	48d2b03a 	or	r9,r9,r3
1800ab38:	4806943a 	slli	r3,r9,16
1800ab3c:	5affbfc4 	addi	r11,r11,-257
1800ab40:	52a02004 	addi	r10,r10,-32640
1800ab44:	48d2b03a 	or	r9,r9,r3
1800ab48:	20c00017 	ldw	r3,0(r4)
1800ab4c:	48c6f03a 	xor	r3,r9,r3
1800ab50:	1acd883a 	add	r6,r3,r11
1800ab54:	00c6303a 	nor	r3,zero,r3
1800ab58:	30c6703a 	and	r3,r6,r3
1800ab5c:	1a86703a 	and	r3,r3,r10
1800ab60:	183fe01e 	bne	r3,zero,1800aae4 <__alt_data_end+0xf800aae4>
1800ab64:	10bfff04 	addi	r2,r2,-4
1800ab68:	21000104 	addi	r4,r4,4
1800ab6c:	40bff636 	bltu	r8,r2,1800ab48 <__alt_data_end+0xf800ab48>
1800ab70:	003fdb06 	br	1800aae0 <__alt_data_end+0xf800aae0>
1800ab74:	3005883a 	mov	r2,r6
1800ab78:	003fd706 	br	1800aad8 <__alt_data_end+0xf800aad8>

1800ab7c <memcpy>:
1800ab7c:	defffd04 	addi	sp,sp,-12
1800ab80:	dfc00215 	stw	ra,8(sp)
1800ab84:	dc400115 	stw	r17,4(sp)
1800ab88:	dc000015 	stw	r16,0(sp)
1800ab8c:	00c003c4 	movi	r3,15
1800ab90:	2005883a 	mov	r2,r4
1800ab94:	1980452e 	bgeu	r3,r6,1800acac <memcpy+0x130>
1800ab98:	2906b03a 	or	r3,r5,r4
1800ab9c:	18c000cc 	andi	r3,r3,3
1800aba0:	1800441e 	bne	r3,zero,1800acb4 <memcpy+0x138>
1800aba4:	347ffc04 	addi	r17,r6,-16
1800aba8:	8822d13a 	srli	r17,r17,4
1800abac:	28c00104 	addi	r3,r5,4
1800abb0:	23400104 	addi	r13,r4,4
1800abb4:	8820913a 	slli	r16,r17,4
1800abb8:	2b000204 	addi	r12,r5,8
1800abbc:	22c00204 	addi	r11,r4,8
1800abc0:	84000504 	addi	r16,r16,20
1800abc4:	2a800304 	addi	r10,r5,12
1800abc8:	22400304 	addi	r9,r4,12
1800abcc:	2c21883a 	add	r16,r5,r16
1800abd0:	2811883a 	mov	r8,r5
1800abd4:	200f883a 	mov	r7,r4
1800abd8:	41000017 	ldw	r4,0(r8)
1800abdc:	1fc00017 	ldw	ra,0(r3)
1800abe0:	63c00017 	ldw	r15,0(r12)
1800abe4:	39000015 	stw	r4,0(r7)
1800abe8:	53800017 	ldw	r14,0(r10)
1800abec:	6fc00015 	stw	ra,0(r13)
1800abf0:	5bc00015 	stw	r15,0(r11)
1800abf4:	4b800015 	stw	r14,0(r9)
1800abf8:	18c00404 	addi	r3,r3,16
1800abfc:	39c00404 	addi	r7,r7,16
1800ac00:	42000404 	addi	r8,r8,16
1800ac04:	6b400404 	addi	r13,r13,16
1800ac08:	63000404 	addi	r12,r12,16
1800ac0c:	5ac00404 	addi	r11,r11,16
1800ac10:	52800404 	addi	r10,r10,16
1800ac14:	4a400404 	addi	r9,r9,16
1800ac18:	1c3fef1e 	bne	r3,r16,1800abd8 <__alt_data_end+0xf800abd8>
1800ac1c:	89c00044 	addi	r7,r17,1
1800ac20:	380e913a 	slli	r7,r7,4
1800ac24:	310003cc 	andi	r4,r6,15
1800ac28:	02c000c4 	movi	r11,3
1800ac2c:	11c7883a 	add	r3,r2,r7
1800ac30:	29cb883a 	add	r5,r5,r7
1800ac34:	5900212e 	bgeu	r11,r4,1800acbc <memcpy+0x140>
1800ac38:	1813883a 	mov	r9,r3
1800ac3c:	2811883a 	mov	r8,r5
1800ac40:	200f883a 	mov	r7,r4
1800ac44:	42800017 	ldw	r10,0(r8)
1800ac48:	4a400104 	addi	r9,r9,4
1800ac4c:	39ffff04 	addi	r7,r7,-4
1800ac50:	4abfff15 	stw	r10,-4(r9)
1800ac54:	42000104 	addi	r8,r8,4
1800ac58:	59fffa36 	bltu	r11,r7,1800ac44 <__alt_data_end+0xf800ac44>
1800ac5c:	213fff04 	addi	r4,r4,-4
1800ac60:	2008d0ba 	srli	r4,r4,2
1800ac64:	318000cc 	andi	r6,r6,3
1800ac68:	21000044 	addi	r4,r4,1
1800ac6c:	2109883a 	add	r4,r4,r4
1800ac70:	2109883a 	add	r4,r4,r4
1800ac74:	1907883a 	add	r3,r3,r4
1800ac78:	290b883a 	add	r5,r5,r4
1800ac7c:	30000626 	beq	r6,zero,1800ac98 <memcpy+0x11c>
1800ac80:	198d883a 	add	r6,r3,r6
1800ac84:	29c00003 	ldbu	r7,0(r5)
1800ac88:	18c00044 	addi	r3,r3,1
1800ac8c:	29400044 	addi	r5,r5,1
1800ac90:	19ffffc5 	stb	r7,-1(r3)
1800ac94:	19bffb1e 	bne	r3,r6,1800ac84 <__alt_data_end+0xf800ac84>
1800ac98:	dfc00217 	ldw	ra,8(sp)
1800ac9c:	dc400117 	ldw	r17,4(sp)
1800aca0:	dc000017 	ldw	r16,0(sp)
1800aca4:	dec00304 	addi	sp,sp,12
1800aca8:	f800283a 	ret
1800acac:	2007883a 	mov	r3,r4
1800acb0:	003ff206 	br	1800ac7c <__alt_data_end+0xf800ac7c>
1800acb4:	2007883a 	mov	r3,r4
1800acb8:	003ff106 	br	1800ac80 <__alt_data_end+0xf800ac80>
1800acbc:	200d883a 	mov	r6,r4
1800acc0:	003fee06 	br	1800ac7c <__alt_data_end+0xf800ac7c>

1800acc4 <memmove>:
1800acc4:	2005883a 	mov	r2,r4
1800acc8:	29000b2e 	bgeu	r5,r4,1800acf8 <memmove+0x34>
1800accc:	298f883a 	add	r7,r5,r6
1800acd0:	21c0092e 	bgeu	r4,r7,1800acf8 <memmove+0x34>
1800acd4:	2187883a 	add	r3,r4,r6
1800acd8:	198bc83a 	sub	r5,r3,r6
1800acdc:	30004826 	beq	r6,zero,1800ae00 <memmove+0x13c>
1800ace0:	39ffffc4 	addi	r7,r7,-1
1800ace4:	39000003 	ldbu	r4,0(r7)
1800ace8:	18ffffc4 	addi	r3,r3,-1
1800acec:	19000005 	stb	r4,0(r3)
1800acf0:	28fffb1e 	bne	r5,r3,1800ace0 <__alt_data_end+0xf800ace0>
1800acf4:	f800283a 	ret
1800acf8:	00c003c4 	movi	r3,15
1800acfc:	1980412e 	bgeu	r3,r6,1800ae04 <memmove+0x140>
1800ad00:	2886b03a 	or	r3,r5,r2
1800ad04:	18c000cc 	andi	r3,r3,3
1800ad08:	1800401e 	bne	r3,zero,1800ae0c <memmove+0x148>
1800ad0c:	33fffc04 	addi	r15,r6,-16
1800ad10:	781ed13a 	srli	r15,r15,4
1800ad14:	28c00104 	addi	r3,r5,4
1800ad18:	13400104 	addi	r13,r2,4
1800ad1c:	781c913a 	slli	r14,r15,4
1800ad20:	2b000204 	addi	r12,r5,8
1800ad24:	12c00204 	addi	r11,r2,8
1800ad28:	73800504 	addi	r14,r14,20
1800ad2c:	2a800304 	addi	r10,r5,12
1800ad30:	12400304 	addi	r9,r2,12
1800ad34:	2b9d883a 	add	r14,r5,r14
1800ad38:	2811883a 	mov	r8,r5
1800ad3c:	100f883a 	mov	r7,r2
1800ad40:	41000017 	ldw	r4,0(r8)
1800ad44:	39c00404 	addi	r7,r7,16
1800ad48:	18c00404 	addi	r3,r3,16
1800ad4c:	393ffc15 	stw	r4,-16(r7)
1800ad50:	193ffc17 	ldw	r4,-16(r3)
1800ad54:	6b400404 	addi	r13,r13,16
1800ad58:	5ac00404 	addi	r11,r11,16
1800ad5c:	693ffc15 	stw	r4,-16(r13)
1800ad60:	61000017 	ldw	r4,0(r12)
1800ad64:	4a400404 	addi	r9,r9,16
1800ad68:	42000404 	addi	r8,r8,16
1800ad6c:	593ffc15 	stw	r4,-16(r11)
1800ad70:	51000017 	ldw	r4,0(r10)
1800ad74:	63000404 	addi	r12,r12,16
1800ad78:	52800404 	addi	r10,r10,16
1800ad7c:	493ffc15 	stw	r4,-16(r9)
1800ad80:	1bbfef1e 	bne	r3,r14,1800ad40 <__alt_data_end+0xf800ad40>
1800ad84:	79000044 	addi	r4,r15,1
1800ad88:	2008913a 	slli	r4,r4,4
1800ad8c:	328003cc 	andi	r10,r6,15
1800ad90:	02c000c4 	movi	r11,3
1800ad94:	1107883a 	add	r3,r2,r4
1800ad98:	290b883a 	add	r5,r5,r4
1800ad9c:	5a801e2e 	bgeu	r11,r10,1800ae18 <memmove+0x154>
1800ada0:	1813883a 	mov	r9,r3
1800ada4:	2811883a 	mov	r8,r5
1800ada8:	500f883a 	mov	r7,r10
1800adac:	41000017 	ldw	r4,0(r8)
1800adb0:	4a400104 	addi	r9,r9,4
1800adb4:	39ffff04 	addi	r7,r7,-4
1800adb8:	493fff15 	stw	r4,-4(r9)
1800adbc:	42000104 	addi	r8,r8,4
1800adc0:	59fffa36 	bltu	r11,r7,1800adac <__alt_data_end+0xf800adac>
1800adc4:	513fff04 	addi	r4,r10,-4
1800adc8:	2008d0ba 	srli	r4,r4,2
1800adcc:	318000cc 	andi	r6,r6,3
1800add0:	21000044 	addi	r4,r4,1
1800add4:	2109883a 	add	r4,r4,r4
1800add8:	2109883a 	add	r4,r4,r4
1800addc:	1907883a 	add	r3,r3,r4
1800ade0:	290b883a 	add	r5,r5,r4
1800ade4:	30000b26 	beq	r6,zero,1800ae14 <memmove+0x150>
1800ade8:	198d883a 	add	r6,r3,r6
1800adec:	29c00003 	ldbu	r7,0(r5)
1800adf0:	18c00044 	addi	r3,r3,1
1800adf4:	29400044 	addi	r5,r5,1
1800adf8:	19ffffc5 	stb	r7,-1(r3)
1800adfc:	19bffb1e 	bne	r3,r6,1800adec <__alt_data_end+0xf800adec>
1800ae00:	f800283a 	ret
1800ae04:	1007883a 	mov	r3,r2
1800ae08:	003ff606 	br	1800ade4 <__alt_data_end+0xf800ade4>
1800ae0c:	1007883a 	mov	r3,r2
1800ae10:	003ff506 	br	1800ade8 <__alt_data_end+0xf800ade8>
1800ae14:	f800283a 	ret
1800ae18:	500d883a 	mov	r6,r10
1800ae1c:	003ff106 	br	1800ade4 <__alt_data_end+0xf800ade4>

1800ae20 <memset>:
1800ae20:	20c000cc 	andi	r3,r4,3
1800ae24:	2005883a 	mov	r2,r4
1800ae28:	18004426 	beq	r3,zero,1800af3c <memset+0x11c>
1800ae2c:	31ffffc4 	addi	r7,r6,-1
1800ae30:	30004026 	beq	r6,zero,1800af34 <memset+0x114>
1800ae34:	2813883a 	mov	r9,r5
1800ae38:	200d883a 	mov	r6,r4
1800ae3c:	2007883a 	mov	r3,r4
1800ae40:	00000406 	br	1800ae54 <memset+0x34>
1800ae44:	3a3fffc4 	addi	r8,r7,-1
1800ae48:	31800044 	addi	r6,r6,1
1800ae4c:	38003926 	beq	r7,zero,1800af34 <memset+0x114>
1800ae50:	400f883a 	mov	r7,r8
1800ae54:	18c00044 	addi	r3,r3,1
1800ae58:	32400005 	stb	r9,0(r6)
1800ae5c:	1a0000cc 	andi	r8,r3,3
1800ae60:	403ff81e 	bne	r8,zero,1800ae44 <__alt_data_end+0xf800ae44>
1800ae64:	010000c4 	movi	r4,3
1800ae68:	21c02d2e 	bgeu	r4,r7,1800af20 <memset+0x100>
1800ae6c:	29003fcc 	andi	r4,r5,255
1800ae70:	200c923a 	slli	r6,r4,8
1800ae74:	3108b03a 	or	r4,r6,r4
1800ae78:	200c943a 	slli	r6,r4,16
1800ae7c:	218cb03a 	or	r6,r4,r6
1800ae80:	010003c4 	movi	r4,15
1800ae84:	21c0182e 	bgeu	r4,r7,1800aee8 <memset+0xc8>
1800ae88:	3b3ffc04 	addi	r12,r7,-16
1800ae8c:	6018d13a 	srli	r12,r12,4
1800ae90:	1a000104 	addi	r8,r3,4
1800ae94:	1ac00204 	addi	r11,r3,8
1800ae98:	6008913a 	slli	r4,r12,4
1800ae9c:	1a800304 	addi	r10,r3,12
1800aea0:	1813883a 	mov	r9,r3
1800aea4:	21000504 	addi	r4,r4,20
1800aea8:	1909883a 	add	r4,r3,r4
1800aeac:	49800015 	stw	r6,0(r9)
1800aeb0:	41800015 	stw	r6,0(r8)
1800aeb4:	59800015 	stw	r6,0(r11)
1800aeb8:	51800015 	stw	r6,0(r10)
1800aebc:	42000404 	addi	r8,r8,16
1800aec0:	4a400404 	addi	r9,r9,16
1800aec4:	5ac00404 	addi	r11,r11,16
1800aec8:	52800404 	addi	r10,r10,16
1800aecc:	413ff71e 	bne	r8,r4,1800aeac <__alt_data_end+0xf800aeac>
1800aed0:	63000044 	addi	r12,r12,1
1800aed4:	6018913a 	slli	r12,r12,4
1800aed8:	39c003cc 	andi	r7,r7,15
1800aedc:	010000c4 	movi	r4,3
1800aee0:	1b07883a 	add	r3,r3,r12
1800aee4:	21c00e2e 	bgeu	r4,r7,1800af20 <memset+0x100>
1800aee8:	1813883a 	mov	r9,r3
1800aeec:	3811883a 	mov	r8,r7
1800aef0:	010000c4 	movi	r4,3
1800aef4:	49800015 	stw	r6,0(r9)
1800aef8:	423fff04 	addi	r8,r8,-4
1800aefc:	4a400104 	addi	r9,r9,4
1800af00:	223ffc36 	bltu	r4,r8,1800aef4 <__alt_data_end+0xf800aef4>
1800af04:	393fff04 	addi	r4,r7,-4
1800af08:	2008d0ba 	srli	r4,r4,2
1800af0c:	39c000cc 	andi	r7,r7,3
1800af10:	21000044 	addi	r4,r4,1
1800af14:	2109883a 	add	r4,r4,r4
1800af18:	2109883a 	add	r4,r4,r4
1800af1c:	1907883a 	add	r3,r3,r4
1800af20:	38000526 	beq	r7,zero,1800af38 <memset+0x118>
1800af24:	19cf883a 	add	r7,r3,r7
1800af28:	19400005 	stb	r5,0(r3)
1800af2c:	18c00044 	addi	r3,r3,1
1800af30:	38fffd1e 	bne	r7,r3,1800af28 <__alt_data_end+0xf800af28>
1800af34:	f800283a 	ret
1800af38:	f800283a 	ret
1800af3c:	2007883a 	mov	r3,r4
1800af40:	300f883a 	mov	r7,r6
1800af44:	003fc706 	br	1800ae64 <__alt_data_end+0xf800ae64>

1800af48 <_Balloc>:
1800af48:	20801317 	ldw	r2,76(r4)
1800af4c:	defffc04 	addi	sp,sp,-16
1800af50:	dc400115 	stw	r17,4(sp)
1800af54:	dc000015 	stw	r16,0(sp)
1800af58:	dfc00315 	stw	ra,12(sp)
1800af5c:	dc800215 	stw	r18,8(sp)
1800af60:	2023883a 	mov	r17,r4
1800af64:	2821883a 	mov	r16,r5
1800af68:	10000f26 	beq	r2,zero,1800afa8 <_Balloc+0x60>
1800af6c:	8407883a 	add	r3,r16,r16
1800af70:	18c7883a 	add	r3,r3,r3
1800af74:	10c7883a 	add	r3,r2,r3
1800af78:	18800017 	ldw	r2,0(r3)
1800af7c:	10001126 	beq	r2,zero,1800afc4 <_Balloc+0x7c>
1800af80:	11000017 	ldw	r4,0(r2)
1800af84:	19000015 	stw	r4,0(r3)
1800af88:	10000415 	stw	zero,16(r2)
1800af8c:	10000315 	stw	zero,12(r2)
1800af90:	dfc00317 	ldw	ra,12(sp)
1800af94:	dc800217 	ldw	r18,8(sp)
1800af98:	dc400117 	ldw	r17,4(sp)
1800af9c:	dc000017 	ldw	r16,0(sp)
1800afa0:	dec00404 	addi	sp,sp,16
1800afa4:	f800283a 	ret
1800afa8:	01800844 	movi	r6,33
1800afac:	01400104 	movi	r5,4
1800afb0:	800f5600 	call	1800f560 <_calloc_r>
1800afb4:	88801315 	stw	r2,76(r17)
1800afb8:	103fec1e 	bne	r2,zero,1800af6c <__alt_data_end+0xf800af6c>
1800afbc:	0005883a 	mov	r2,zero
1800afc0:	003ff306 	br	1800af90 <__alt_data_end+0xf800af90>
1800afc4:	01400044 	movi	r5,1
1800afc8:	2c24983a 	sll	r18,r5,r16
1800afcc:	8809883a 	mov	r4,r17
1800afd0:	91800144 	addi	r6,r18,5
1800afd4:	318d883a 	add	r6,r6,r6
1800afd8:	318d883a 	add	r6,r6,r6
1800afdc:	800f5600 	call	1800f560 <_calloc_r>
1800afe0:	103ff626 	beq	r2,zero,1800afbc <__alt_data_end+0xf800afbc>
1800afe4:	14000115 	stw	r16,4(r2)
1800afe8:	14800215 	stw	r18,8(r2)
1800afec:	003fe606 	br	1800af88 <__alt_data_end+0xf800af88>

1800aff0 <_Bfree>:
1800aff0:	28000826 	beq	r5,zero,1800b014 <_Bfree+0x24>
1800aff4:	28c00117 	ldw	r3,4(r5)
1800aff8:	20801317 	ldw	r2,76(r4)
1800affc:	18c7883a 	add	r3,r3,r3
1800b000:	18c7883a 	add	r3,r3,r3
1800b004:	10c5883a 	add	r2,r2,r3
1800b008:	10c00017 	ldw	r3,0(r2)
1800b00c:	28c00015 	stw	r3,0(r5)
1800b010:	11400015 	stw	r5,0(r2)
1800b014:	f800283a 	ret

1800b018 <__multadd>:
1800b018:	defff704 	addi	sp,sp,-36
1800b01c:	dc800215 	stw	r18,8(sp)
1800b020:	2c800417 	ldw	r18,16(r5)
1800b024:	dd800615 	stw	r22,24(sp)
1800b028:	dd400515 	stw	r21,20(sp)
1800b02c:	dd000415 	stw	r20,16(sp)
1800b030:	dcc00315 	stw	r19,12(sp)
1800b034:	dc400115 	stw	r17,4(sp)
1800b038:	dc000015 	stw	r16,0(sp)
1800b03c:	dfc00815 	stw	ra,32(sp)
1800b040:	ddc00715 	stw	r23,28(sp)
1800b044:	2827883a 	mov	r19,r5
1800b048:	2029883a 	mov	r20,r4
1800b04c:	3023883a 	mov	r17,r6
1800b050:	3821883a 	mov	r16,r7
1800b054:	2d400504 	addi	r21,r5,20
1800b058:	002d883a 	mov	r22,zero
1800b05c:	adc00017 	ldw	r23,0(r21)
1800b060:	880b883a 	mov	r5,r17
1800b064:	ad400104 	addi	r21,r21,4
1800b068:	b93fffcc 	andi	r4,r23,65535
1800b06c:	8002b640 	call	18002b64 <__mulsi3>
1800b070:	b808d43a 	srli	r4,r23,16
1800b074:	880b883a 	mov	r5,r17
1800b078:	1421883a 	add	r16,r2,r16
1800b07c:	8002b640 	call	18002b64 <__mulsi3>
1800b080:	800ed43a 	srli	r7,r16,16
1800b084:	80ffffcc 	andi	r3,r16,65535
1800b088:	b5800044 	addi	r22,r22,1
1800b08c:	11c5883a 	add	r2,r2,r7
1800b090:	100e943a 	slli	r7,r2,16
1800b094:	1020d43a 	srli	r16,r2,16
1800b098:	38c7883a 	add	r3,r7,r3
1800b09c:	a8ffff15 	stw	r3,-4(r21)
1800b0a0:	b4bfee16 	blt	r22,r18,1800b05c <__alt_data_end+0xf800b05c>
1800b0a4:	80000926 	beq	r16,zero,1800b0cc <__multadd+0xb4>
1800b0a8:	98800217 	ldw	r2,8(r19)
1800b0ac:	9080130e 	bge	r18,r2,1800b0fc <__multadd+0xe4>
1800b0b0:	90800144 	addi	r2,r18,5
1800b0b4:	1085883a 	add	r2,r2,r2
1800b0b8:	1085883a 	add	r2,r2,r2
1800b0bc:	9885883a 	add	r2,r19,r2
1800b0c0:	14000015 	stw	r16,0(r2)
1800b0c4:	94800044 	addi	r18,r18,1
1800b0c8:	9c800415 	stw	r18,16(r19)
1800b0cc:	9805883a 	mov	r2,r19
1800b0d0:	dfc00817 	ldw	ra,32(sp)
1800b0d4:	ddc00717 	ldw	r23,28(sp)
1800b0d8:	dd800617 	ldw	r22,24(sp)
1800b0dc:	dd400517 	ldw	r21,20(sp)
1800b0e0:	dd000417 	ldw	r20,16(sp)
1800b0e4:	dcc00317 	ldw	r19,12(sp)
1800b0e8:	dc800217 	ldw	r18,8(sp)
1800b0ec:	dc400117 	ldw	r17,4(sp)
1800b0f0:	dc000017 	ldw	r16,0(sp)
1800b0f4:	dec00904 	addi	sp,sp,36
1800b0f8:	f800283a 	ret
1800b0fc:	99400117 	ldw	r5,4(r19)
1800b100:	a009883a 	mov	r4,r20
1800b104:	29400044 	addi	r5,r5,1
1800b108:	800af480 	call	1800af48 <_Balloc>
1800b10c:	99800417 	ldw	r6,16(r19)
1800b110:	99400304 	addi	r5,r19,12
1800b114:	11000304 	addi	r4,r2,12
1800b118:	31800084 	addi	r6,r6,2
1800b11c:	318d883a 	add	r6,r6,r6
1800b120:	318d883a 	add	r6,r6,r6
1800b124:	1023883a 	mov	r17,r2
1800b128:	800ab7c0 	call	1800ab7c <memcpy>
1800b12c:	98000a26 	beq	r19,zero,1800b158 <__multadd+0x140>
1800b130:	98c00117 	ldw	r3,4(r19)
1800b134:	a0801317 	ldw	r2,76(r20)
1800b138:	18c7883a 	add	r3,r3,r3
1800b13c:	18c7883a 	add	r3,r3,r3
1800b140:	10c5883a 	add	r2,r2,r3
1800b144:	10c00017 	ldw	r3,0(r2)
1800b148:	98c00015 	stw	r3,0(r19)
1800b14c:	14c00015 	stw	r19,0(r2)
1800b150:	8827883a 	mov	r19,r17
1800b154:	003fd606 	br	1800b0b0 <__alt_data_end+0xf800b0b0>
1800b158:	8827883a 	mov	r19,r17
1800b15c:	003fd406 	br	1800b0b0 <__alt_data_end+0xf800b0b0>

1800b160 <__s2b>:
1800b160:	defff904 	addi	sp,sp,-28
1800b164:	dc400115 	stw	r17,4(sp)
1800b168:	dc000015 	stw	r16,0(sp)
1800b16c:	2023883a 	mov	r17,r4
1800b170:	2821883a 	mov	r16,r5
1800b174:	39000204 	addi	r4,r7,8
1800b178:	01400244 	movi	r5,9
1800b17c:	dcc00315 	stw	r19,12(sp)
1800b180:	dc800215 	stw	r18,8(sp)
1800b184:	dfc00615 	stw	ra,24(sp)
1800b188:	dd400515 	stw	r21,20(sp)
1800b18c:	dd000415 	stw	r20,16(sp)
1800b190:	3825883a 	mov	r18,r7
1800b194:	3027883a 	mov	r19,r6
1800b198:	80029b00 	call	180029b0 <__divsi3>
1800b19c:	00c00044 	movi	r3,1
1800b1a0:	000b883a 	mov	r5,zero
1800b1a4:	1880030e 	bge	r3,r2,1800b1b4 <__s2b+0x54>
1800b1a8:	18c7883a 	add	r3,r3,r3
1800b1ac:	29400044 	addi	r5,r5,1
1800b1b0:	18bffd16 	blt	r3,r2,1800b1a8 <__alt_data_end+0xf800b1a8>
1800b1b4:	8809883a 	mov	r4,r17
1800b1b8:	800af480 	call	1800af48 <_Balloc>
1800b1bc:	d8c00717 	ldw	r3,28(sp)
1800b1c0:	10c00515 	stw	r3,20(r2)
1800b1c4:	00c00044 	movi	r3,1
1800b1c8:	10c00415 	stw	r3,16(r2)
1800b1cc:	00c00244 	movi	r3,9
1800b1d0:	1cc0210e 	bge	r3,r19,1800b258 <__s2b+0xf8>
1800b1d4:	80eb883a 	add	r21,r16,r3
1800b1d8:	a829883a 	mov	r20,r21
1800b1dc:	84e1883a 	add	r16,r16,r19
1800b1e0:	a1c00007 	ldb	r7,0(r20)
1800b1e4:	01800284 	movi	r6,10
1800b1e8:	a5000044 	addi	r20,r20,1
1800b1ec:	100b883a 	mov	r5,r2
1800b1f0:	39fff404 	addi	r7,r7,-48
1800b1f4:	8809883a 	mov	r4,r17
1800b1f8:	800b0180 	call	1800b018 <__multadd>
1800b1fc:	a43ff81e 	bne	r20,r16,1800b1e0 <__alt_data_end+0xf800b1e0>
1800b200:	ace1883a 	add	r16,r21,r19
1800b204:	843ffe04 	addi	r16,r16,-8
1800b208:	9c800a0e 	bge	r19,r18,1800b234 <__s2b+0xd4>
1800b20c:	94e5c83a 	sub	r18,r18,r19
1800b210:	84a5883a 	add	r18,r16,r18
1800b214:	81c00007 	ldb	r7,0(r16)
1800b218:	01800284 	movi	r6,10
1800b21c:	84000044 	addi	r16,r16,1
1800b220:	100b883a 	mov	r5,r2
1800b224:	39fff404 	addi	r7,r7,-48
1800b228:	8809883a 	mov	r4,r17
1800b22c:	800b0180 	call	1800b018 <__multadd>
1800b230:	84bff81e 	bne	r16,r18,1800b214 <__alt_data_end+0xf800b214>
1800b234:	dfc00617 	ldw	ra,24(sp)
1800b238:	dd400517 	ldw	r21,20(sp)
1800b23c:	dd000417 	ldw	r20,16(sp)
1800b240:	dcc00317 	ldw	r19,12(sp)
1800b244:	dc800217 	ldw	r18,8(sp)
1800b248:	dc400117 	ldw	r17,4(sp)
1800b24c:	dc000017 	ldw	r16,0(sp)
1800b250:	dec00704 	addi	sp,sp,28
1800b254:	f800283a 	ret
1800b258:	84000284 	addi	r16,r16,10
1800b25c:	1827883a 	mov	r19,r3
1800b260:	003fe906 	br	1800b208 <__alt_data_end+0xf800b208>

1800b264 <__hi0bits>:
1800b264:	20bfffec 	andhi	r2,r4,65535
1800b268:	1000141e 	bne	r2,zero,1800b2bc <__hi0bits+0x58>
1800b26c:	2008943a 	slli	r4,r4,16
1800b270:	00800404 	movi	r2,16
1800b274:	20ffc02c 	andhi	r3,r4,65280
1800b278:	1800021e 	bne	r3,zero,1800b284 <__hi0bits+0x20>
1800b27c:	2008923a 	slli	r4,r4,8
1800b280:	10800204 	addi	r2,r2,8
1800b284:	20fc002c 	andhi	r3,r4,61440
1800b288:	1800021e 	bne	r3,zero,1800b294 <__hi0bits+0x30>
1800b28c:	2008913a 	slli	r4,r4,4
1800b290:	10800104 	addi	r2,r2,4
1800b294:	20f0002c 	andhi	r3,r4,49152
1800b298:	1800031e 	bne	r3,zero,1800b2a8 <__hi0bits+0x44>
1800b29c:	2109883a 	add	r4,r4,r4
1800b2a0:	10800084 	addi	r2,r2,2
1800b2a4:	2109883a 	add	r4,r4,r4
1800b2a8:	20000316 	blt	r4,zero,1800b2b8 <__hi0bits+0x54>
1800b2ac:	2110002c 	andhi	r4,r4,16384
1800b2b0:	2000041e 	bne	r4,zero,1800b2c4 <__hi0bits+0x60>
1800b2b4:	00800804 	movi	r2,32
1800b2b8:	f800283a 	ret
1800b2bc:	0005883a 	mov	r2,zero
1800b2c0:	003fec06 	br	1800b274 <__alt_data_end+0xf800b274>
1800b2c4:	10800044 	addi	r2,r2,1
1800b2c8:	f800283a 	ret

1800b2cc <__lo0bits>:
1800b2cc:	20c00017 	ldw	r3,0(r4)
1800b2d0:	188001cc 	andi	r2,r3,7
1800b2d4:	10000826 	beq	r2,zero,1800b2f8 <__lo0bits+0x2c>
1800b2d8:	1880004c 	andi	r2,r3,1
1800b2dc:	1000211e 	bne	r2,zero,1800b364 <__lo0bits+0x98>
1800b2e0:	1880008c 	andi	r2,r3,2
1800b2e4:	1000211e 	bne	r2,zero,1800b36c <__lo0bits+0xa0>
1800b2e8:	1806d0ba 	srli	r3,r3,2
1800b2ec:	00800084 	movi	r2,2
1800b2f0:	20c00015 	stw	r3,0(r4)
1800b2f4:	f800283a 	ret
1800b2f8:	18bfffcc 	andi	r2,r3,65535
1800b2fc:	10001326 	beq	r2,zero,1800b34c <__lo0bits+0x80>
1800b300:	0005883a 	mov	r2,zero
1800b304:	19403fcc 	andi	r5,r3,255
1800b308:	2800021e 	bne	r5,zero,1800b314 <__lo0bits+0x48>
1800b30c:	1806d23a 	srli	r3,r3,8
1800b310:	10800204 	addi	r2,r2,8
1800b314:	194003cc 	andi	r5,r3,15
1800b318:	2800021e 	bne	r5,zero,1800b324 <__lo0bits+0x58>
1800b31c:	1806d13a 	srli	r3,r3,4
1800b320:	10800104 	addi	r2,r2,4
1800b324:	194000cc 	andi	r5,r3,3
1800b328:	2800021e 	bne	r5,zero,1800b334 <__lo0bits+0x68>
1800b32c:	1806d0ba 	srli	r3,r3,2
1800b330:	10800084 	addi	r2,r2,2
1800b334:	1940004c 	andi	r5,r3,1
1800b338:	2800081e 	bne	r5,zero,1800b35c <__lo0bits+0x90>
1800b33c:	1806d07a 	srli	r3,r3,1
1800b340:	1800051e 	bne	r3,zero,1800b358 <__lo0bits+0x8c>
1800b344:	00800804 	movi	r2,32
1800b348:	f800283a 	ret
1800b34c:	1806d43a 	srli	r3,r3,16
1800b350:	00800404 	movi	r2,16
1800b354:	003feb06 	br	1800b304 <__alt_data_end+0xf800b304>
1800b358:	10800044 	addi	r2,r2,1
1800b35c:	20c00015 	stw	r3,0(r4)
1800b360:	f800283a 	ret
1800b364:	0005883a 	mov	r2,zero
1800b368:	f800283a 	ret
1800b36c:	1806d07a 	srli	r3,r3,1
1800b370:	00800044 	movi	r2,1
1800b374:	20c00015 	stw	r3,0(r4)
1800b378:	f800283a 	ret

1800b37c <__i2b>:
1800b37c:	defffd04 	addi	sp,sp,-12
1800b380:	dc000015 	stw	r16,0(sp)
1800b384:	04000044 	movi	r16,1
1800b388:	dc400115 	stw	r17,4(sp)
1800b38c:	2823883a 	mov	r17,r5
1800b390:	800b883a 	mov	r5,r16
1800b394:	dfc00215 	stw	ra,8(sp)
1800b398:	800af480 	call	1800af48 <_Balloc>
1800b39c:	14400515 	stw	r17,20(r2)
1800b3a0:	14000415 	stw	r16,16(r2)
1800b3a4:	dfc00217 	ldw	ra,8(sp)
1800b3a8:	dc400117 	ldw	r17,4(sp)
1800b3ac:	dc000017 	ldw	r16,0(sp)
1800b3b0:	dec00304 	addi	sp,sp,12
1800b3b4:	f800283a 	ret

1800b3b8 <__multiply>:
1800b3b8:	deffef04 	addi	sp,sp,-68
1800b3bc:	dc400815 	stw	r17,32(sp)
1800b3c0:	dc000715 	stw	r16,28(sp)
1800b3c4:	34400417 	ldw	r17,16(r6)
1800b3c8:	2c000417 	ldw	r16,16(r5)
1800b3cc:	dd800d15 	stw	r22,52(sp)
1800b3d0:	dc800915 	stw	r18,36(sp)
1800b3d4:	dfc01015 	stw	ra,64(sp)
1800b3d8:	df000f15 	stw	fp,60(sp)
1800b3dc:	ddc00e15 	stw	r23,56(sp)
1800b3e0:	dd400c15 	stw	r21,48(sp)
1800b3e4:	dd000b15 	stw	r20,44(sp)
1800b3e8:	dcc00a15 	stw	r19,40(sp)
1800b3ec:	2825883a 	mov	r18,r5
1800b3f0:	302d883a 	mov	r22,r6
1800b3f4:	8440050e 	bge	r16,r17,1800b40c <__multiply+0x54>
1800b3f8:	8007883a 	mov	r3,r16
1800b3fc:	3025883a 	mov	r18,r6
1800b400:	8821883a 	mov	r16,r17
1800b404:	282d883a 	mov	r22,r5
1800b408:	1823883a 	mov	r17,r3
1800b40c:	90800217 	ldw	r2,8(r18)
1800b410:	8447883a 	add	r3,r16,r17
1800b414:	d8c00215 	stw	r3,8(sp)
1800b418:	91400117 	ldw	r5,4(r18)
1800b41c:	10c0010e 	bge	r2,r3,1800b424 <__multiply+0x6c>
1800b420:	29400044 	addi	r5,r5,1
1800b424:	800af480 	call	1800af48 <_Balloc>
1800b428:	d8c00217 	ldw	r3,8(sp)
1800b42c:	d8800615 	stw	r2,24(sp)
1800b430:	18eb883a 	add	r21,r3,r3
1800b434:	ad6b883a 	add	r21,r21,r21
1800b438:	10c00504 	addi	r3,r2,20
1800b43c:	1d6b883a 	add	r21,r3,r21
1800b440:	d8c00115 	stw	r3,4(sp)
1800b444:	dd400315 	stw	r21,12(sp)
1800b448:	1805883a 	mov	r2,r3
1800b44c:	1d40042e 	bgeu	r3,r21,1800b460 <__multiply+0xa8>
1800b450:	d8c00317 	ldw	r3,12(sp)
1800b454:	10000015 	stw	zero,0(r2)
1800b458:	10800104 	addi	r2,r2,4
1800b45c:	10fffc36 	bltu	r2,r3,1800b450 <__alt_data_end+0xf800b450>
1800b460:	8c63883a 	add	r17,r17,r17
1800b464:	b5800504 	addi	r22,r22,20
1800b468:	8c63883a 	add	r17,r17,r17
1800b46c:	94800504 	addi	r18,r18,20
1800b470:	8421883a 	add	r16,r16,r16
1800b474:	b463883a 	add	r17,r22,r17
1800b478:	8421883a 	add	r16,r16,r16
1800b47c:	dd800015 	stw	r22,0(sp)
1800b480:	dc800415 	stw	r18,16(sp)
1800b484:	dc400515 	stw	r17,20(sp)
1800b488:	9429883a 	add	r20,r18,r16
1800b48c:	b4404f2e 	bgeu	r22,r17,1800b5cc <__multiply+0x214>
1800b490:	d8c00017 	ldw	r3,0(sp)
1800b494:	1c800017 	ldw	r18,0(r3)
1800b498:	947fffcc 	andi	r17,r18,65535
1800b49c:	88001e26 	beq	r17,zero,1800b518 <__multiply+0x160>
1800b4a0:	dd800117 	ldw	r22,4(sp)
1800b4a4:	dd400417 	ldw	r21,16(sp)
1800b4a8:	0027883a 	mov	r19,zero
1800b4ac:	ac800017 	ldw	r18,0(r21)
1800b4b0:	b4000017 	ldw	r16,0(r22)
1800b4b4:	880b883a 	mov	r5,r17
1800b4b8:	913fffcc 	andi	r4,r18,65535
1800b4bc:	8002b640 	call	18002b64 <__mulsi3>
1800b4c0:	9008d43a 	srli	r4,r18,16
1800b4c4:	84bfffcc 	andi	r18,r16,65535
1800b4c8:	1485883a 	add	r2,r2,r18
1800b4cc:	14e5883a 	add	r18,r2,r19
1800b4d0:	8020d43a 	srli	r16,r16,16
1800b4d4:	9026d43a 	srli	r19,r18,16
1800b4d8:	880b883a 	mov	r5,r17
1800b4dc:	8002b640 	call	18002b64 <__mulsi3>
1800b4e0:	1405883a 	add	r2,r2,r16
1800b4e4:	14e1883a 	add	r16,r2,r19
1800b4e8:	90ffffcc 	andi	r3,r18,65535
1800b4ec:	8024943a 	slli	r18,r16,16
1800b4f0:	ad400104 	addi	r21,r21,4
1800b4f4:	b005883a 	mov	r2,r22
1800b4f8:	90c6b03a 	or	r3,r18,r3
1800b4fc:	b0c00015 	stw	r3,0(r22)
1800b500:	8026d43a 	srli	r19,r16,16
1800b504:	b5800104 	addi	r22,r22,4
1800b508:	ad3fe836 	bltu	r21,r20,1800b4ac <__alt_data_end+0xf800b4ac>
1800b50c:	d8c00017 	ldw	r3,0(sp)
1800b510:	14c00115 	stw	r19,4(r2)
1800b514:	1c800017 	ldw	r18,0(r3)
1800b518:	9024d43a 	srli	r18,r18,16
1800b51c:	90002226 	beq	r18,zero,1800b5a8 <__multiply+0x1f0>
1800b520:	d8c00117 	ldw	r3,4(sp)
1800b524:	dd800417 	ldw	r22,16(sp)
1800b528:	002f883a 	mov	r23,zero
1800b52c:	1f000017 	ldw	fp,0(r3)
1800b530:	1823883a 	mov	r17,r3
1800b534:	182b883a 	mov	r21,r3
1800b538:	e021883a 	mov	r16,fp
1800b53c:	00000106 	br	1800b544 <__multiply+0x18c>
1800b540:	982b883a 	mov	r21,r19
1800b544:	b100000b 	ldhu	r4,0(r22)
1800b548:	8020d43a 	srli	r16,r16,16
1800b54c:	900b883a 	mov	r5,r18
1800b550:	8002b640 	call	18002b64 <__mulsi3>
1800b554:	1405883a 	add	r2,r2,r16
1800b558:	15ef883a 	add	r23,r2,r23
1800b55c:	b804943a 	slli	r2,r23,16
1800b560:	e0ffffcc 	andi	r3,fp,65535
1800b564:	8c400104 	addi	r17,r17,4
1800b568:	10c6b03a 	or	r3,r2,r3
1800b56c:	88ffff15 	stw	r3,-4(r17)
1800b570:	b5800104 	addi	r22,r22,4
1800b574:	b13fff17 	ldw	r4,-4(r22)
1800b578:	acc00104 	addi	r19,r21,4
1800b57c:	900b883a 	mov	r5,r18
1800b580:	2008d43a 	srli	r4,r4,16
1800b584:	9c000017 	ldw	r16,0(r19)
1800b588:	8002b640 	call	18002b64 <__mulsi3>
1800b58c:	b806d43a 	srli	r3,r23,16
1800b590:	813fffcc 	andi	r4,r16,65535
1800b594:	1105883a 	add	r2,r2,r4
1800b598:	10f9883a 	add	fp,r2,r3
1800b59c:	e02ed43a 	srli	r23,fp,16
1800b5a0:	b53fe736 	bltu	r22,r20,1800b540 <__alt_data_end+0xf800b540>
1800b5a4:	af000115 	stw	fp,4(r21)
1800b5a8:	d8c00017 	ldw	r3,0(sp)
1800b5ac:	d9000517 	ldw	r4,20(sp)
1800b5b0:	18c00104 	addi	r3,r3,4
1800b5b4:	d8c00015 	stw	r3,0(sp)
1800b5b8:	d8c00117 	ldw	r3,4(sp)
1800b5bc:	18c00104 	addi	r3,r3,4
1800b5c0:	d8c00115 	stw	r3,4(sp)
1800b5c4:	d8c00017 	ldw	r3,0(sp)
1800b5c8:	193fb136 	bltu	r3,r4,1800b490 <__alt_data_end+0xf800b490>
1800b5cc:	d8c00217 	ldw	r3,8(sp)
1800b5d0:	00c00c0e 	bge	zero,r3,1800b604 <__multiply+0x24c>
1800b5d4:	d8c00317 	ldw	r3,12(sp)
1800b5d8:	18bfff17 	ldw	r2,-4(r3)
1800b5dc:	1d7fff04 	addi	r21,r3,-4
1800b5e0:	10000326 	beq	r2,zero,1800b5f0 <__multiply+0x238>
1800b5e4:	00000706 	br	1800b604 <__multiply+0x24c>
1800b5e8:	a8800017 	ldw	r2,0(r21)
1800b5ec:	1000051e 	bne	r2,zero,1800b604 <__multiply+0x24c>
1800b5f0:	d8c00217 	ldw	r3,8(sp)
1800b5f4:	ad7fff04 	addi	r21,r21,-4
1800b5f8:	18ffffc4 	addi	r3,r3,-1
1800b5fc:	d8c00215 	stw	r3,8(sp)
1800b600:	183ff91e 	bne	r3,zero,1800b5e8 <__alt_data_end+0xf800b5e8>
1800b604:	d8c00617 	ldw	r3,24(sp)
1800b608:	d9000217 	ldw	r4,8(sp)
1800b60c:	1805883a 	mov	r2,r3
1800b610:	19000415 	stw	r4,16(r3)
1800b614:	dfc01017 	ldw	ra,64(sp)
1800b618:	df000f17 	ldw	fp,60(sp)
1800b61c:	ddc00e17 	ldw	r23,56(sp)
1800b620:	dd800d17 	ldw	r22,52(sp)
1800b624:	dd400c17 	ldw	r21,48(sp)
1800b628:	dd000b17 	ldw	r20,44(sp)
1800b62c:	dcc00a17 	ldw	r19,40(sp)
1800b630:	dc800917 	ldw	r18,36(sp)
1800b634:	dc400817 	ldw	r17,32(sp)
1800b638:	dc000717 	ldw	r16,28(sp)
1800b63c:	dec01104 	addi	sp,sp,68
1800b640:	f800283a 	ret

1800b644 <__pow5mult>:
1800b644:	defffa04 	addi	sp,sp,-24
1800b648:	dcc00315 	stw	r19,12(sp)
1800b64c:	dc000015 	stw	r16,0(sp)
1800b650:	dfc00515 	stw	ra,20(sp)
1800b654:	dd000415 	stw	r20,16(sp)
1800b658:	dc800215 	stw	r18,8(sp)
1800b65c:	dc400115 	stw	r17,4(sp)
1800b660:	308000cc 	andi	r2,r6,3
1800b664:	3021883a 	mov	r16,r6
1800b668:	2027883a 	mov	r19,r4
1800b66c:	10002f1e 	bne	r2,zero,1800b72c <__pow5mult+0xe8>
1800b670:	2825883a 	mov	r18,r5
1800b674:	8021d0ba 	srai	r16,r16,2
1800b678:	80001a26 	beq	r16,zero,1800b6e4 <__pow5mult+0xa0>
1800b67c:	9c401217 	ldw	r17,72(r19)
1800b680:	8800061e 	bne	r17,zero,1800b69c <__pow5mult+0x58>
1800b684:	00003406 	br	1800b758 <__pow5mult+0x114>
1800b688:	8021d07a 	srai	r16,r16,1
1800b68c:	80001526 	beq	r16,zero,1800b6e4 <__pow5mult+0xa0>
1800b690:	88800017 	ldw	r2,0(r17)
1800b694:	10001c26 	beq	r2,zero,1800b708 <__pow5mult+0xc4>
1800b698:	1023883a 	mov	r17,r2
1800b69c:	8080004c 	andi	r2,r16,1
1800b6a0:	103ff926 	beq	r2,zero,1800b688 <__alt_data_end+0xf800b688>
1800b6a4:	880d883a 	mov	r6,r17
1800b6a8:	900b883a 	mov	r5,r18
1800b6ac:	9809883a 	mov	r4,r19
1800b6b0:	800b3b80 	call	1800b3b8 <__multiply>
1800b6b4:	90001b26 	beq	r18,zero,1800b724 <__pow5mult+0xe0>
1800b6b8:	91000117 	ldw	r4,4(r18)
1800b6bc:	98c01317 	ldw	r3,76(r19)
1800b6c0:	8021d07a 	srai	r16,r16,1
1800b6c4:	2109883a 	add	r4,r4,r4
1800b6c8:	2109883a 	add	r4,r4,r4
1800b6cc:	1907883a 	add	r3,r3,r4
1800b6d0:	19000017 	ldw	r4,0(r3)
1800b6d4:	91000015 	stw	r4,0(r18)
1800b6d8:	1c800015 	stw	r18,0(r3)
1800b6dc:	1025883a 	mov	r18,r2
1800b6e0:	803feb1e 	bne	r16,zero,1800b690 <__alt_data_end+0xf800b690>
1800b6e4:	9005883a 	mov	r2,r18
1800b6e8:	dfc00517 	ldw	ra,20(sp)
1800b6ec:	dd000417 	ldw	r20,16(sp)
1800b6f0:	dcc00317 	ldw	r19,12(sp)
1800b6f4:	dc800217 	ldw	r18,8(sp)
1800b6f8:	dc400117 	ldw	r17,4(sp)
1800b6fc:	dc000017 	ldw	r16,0(sp)
1800b700:	dec00604 	addi	sp,sp,24
1800b704:	f800283a 	ret
1800b708:	880d883a 	mov	r6,r17
1800b70c:	880b883a 	mov	r5,r17
1800b710:	9809883a 	mov	r4,r19
1800b714:	800b3b80 	call	1800b3b8 <__multiply>
1800b718:	88800015 	stw	r2,0(r17)
1800b71c:	10000015 	stw	zero,0(r2)
1800b720:	003fdd06 	br	1800b698 <__alt_data_end+0xf800b698>
1800b724:	1025883a 	mov	r18,r2
1800b728:	003fd706 	br	1800b688 <__alt_data_end+0xf800b688>
1800b72c:	10bfffc4 	addi	r2,r2,-1
1800b730:	1085883a 	add	r2,r2,r2
1800b734:	00c60074 	movhi	r3,6145
1800b738:	18d91304 	addi	r3,r3,25676
1800b73c:	1085883a 	add	r2,r2,r2
1800b740:	1885883a 	add	r2,r3,r2
1800b744:	11800017 	ldw	r6,0(r2)
1800b748:	000f883a 	mov	r7,zero
1800b74c:	800b0180 	call	1800b018 <__multadd>
1800b750:	1025883a 	mov	r18,r2
1800b754:	003fc706 	br	1800b674 <__alt_data_end+0xf800b674>
1800b758:	05000044 	movi	r20,1
1800b75c:	a00b883a 	mov	r5,r20
1800b760:	9809883a 	mov	r4,r19
1800b764:	800af480 	call	1800af48 <_Balloc>
1800b768:	1023883a 	mov	r17,r2
1800b76c:	00809c44 	movi	r2,625
1800b770:	88800515 	stw	r2,20(r17)
1800b774:	8d000415 	stw	r20,16(r17)
1800b778:	9c401215 	stw	r17,72(r19)
1800b77c:	88000015 	stw	zero,0(r17)
1800b780:	003fc606 	br	1800b69c <__alt_data_end+0xf800b69c>

1800b784 <__lshift>:
1800b784:	defff904 	addi	sp,sp,-28
1800b788:	dd400515 	stw	r21,20(sp)
1800b78c:	dcc00315 	stw	r19,12(sp)
1800b790:	302bd17a 	srai	r21,r6,5
1800b794:	2cc00417 	ldw	r19,16(r5)
1800b798:	28800217 	ldw	r2,8(r5)
1800b79c:	dd000415 	stw	r20,16(sp)
1800b7a0:	ace7883a 	add	r19,r21,r19
1800b7a4:	dc800215 	stw	r18,8(sp)
1800b7a8:	dc400115 	stw	r17,4(sp)
1800b7ac:	dc000015 	stw	r16,0(sp)
1800b7b0:	dfc00615 	stw	ra,24(sp)
1800b7b4:	9c000044 	addi	r16,r19,1
1800b7b8:	2823883a 	mov	r17,r5
1800b7bc:	3029883a 	mov	r20,r6
1800b7c0:	2025883a 	mov	r18,r4
1800b7c4:	29400117 	ldw	r5,4(r5)
1800b7c8:	1400030e 	bge	r2,r16,1800b7d8 <__lshift+0x54>
1800b7cc:	1085883a 	add	r2,r2,r2
1800b7d0:	29400044 	addi	r5,r5,1
1800b7d4:	143ffd16 	blt	r2,r16,1800b7cc <__alt_data_end+0xf800b7cc>
1800b7d8:	9009883a 	mov	r4,r18
1800b7dc:	800af480 	call	1800af48 <_Balloc>
1800b7e0:	10c00504 	addi	r3,r2,20
1800b7e4:	0540070e 	bge	zero,r21,1800b804 <__lshift+0x80>
1800b7e8:	ad6b883a 	add	r21,r21,r21
1800b7ec:	ad6b883a 	add	r21,r21,r21
1800b7f0:	1809883a 	mov	r4,r3
1800b7f4:	1d47883a 	add	r3,r3,r21
1800b7f8:	20000015 	stw	zero,0(r4)
1800b7fc:	21000104 	addi	r4,r4,4
1800b800:	193ffd1e 	bne	r3,r4,1800b7f8 <__alt_data_end+0xf800b7f8>
1800b804:	8a000417 	ldw	r8,16(r17)
1800b808:	89000504 	addi	r4,r17,20
1800b80c:	a18007cc 	andi	r6,r20,31
1800b810:	4211883a 	add	r8,r8,r8
1800b814:	4211883a 	add	r8,r8,r8
1800b818:	2211883a 	add	r8,r4,r8
1800b81c:	30002326 	beq	r6,zero,1800b8ac <__lshift+0x128>
1800b820:	02400804 	movi	r9,32
1800b824:	4993c83a 	sub	r9,r9,r6
1800b828:	000b883a 	mov	r5,zero
1800b82c:	21c00017 	ldw	r7,0(r4)
1800b830:	1815883a 	mov	r10,r3
1800b834:	18c00104 	addi	r3,r3,4
1800b838:	398e983a 	sll	r7,r7,r6
1800b83c:	21000104 	addi	r4,r4,4
1800b840:	394ab03a 	or	r5,r7,r5
1800b844:	197fff15 	stw	r5,-4(r3)
1800b848:	217fff17 	ldw	r5,-4(r4)
1800b84c:	2a4ad83a 	srl	r5,r5,r9
1800b850:	223ff636 	bltu	r4,r8,1800b82c <__alt_data_end+0xf800b82c>
1800b854:	51400115 	stw	r5,4(r10)
1800b858:	28001a1e 	bne	r5,zero,1800b8c4 <__lshift+0x140>
1800b85c:	843fffc4 	addi	r16,r16,-1
1800b860:	14000415 	stw	r16,16(r2)
1800b864:	88000826 	beq	r17,zero,1800b888 <__lshift+0x104>
1800b868:	89000117 	ldw	r4,4(r17)
1800b86c:	90c01317 	ldw	r3,76(r18)
1800b870:	2109883a 	add	r4,r4,r4
1800b874:	2109883a 	add	r4,r4,r4
1800b878:	1907883a 	add	r3,r3,r4
1800b87c:	19000017 	ldw	r4,0(r3)
1800b880:	89000015 	stw	r4,0(r17)
1800b884:	1c400015 	stw	r17,0(r3)
1800b888:	dfc00617 	ldw	ra,24(sp)
1800b88c:	dd400517 	ldw	r21,20(sp)
1800b890:	dd000417 	ldw	r20,16(sp)
1800b894:	dcc00317 	ldw	r19,12(sp)
1800b898:	dc800217 	ldw	r18,8(sp)
1800b89c:	dc400117 	ldw	r17,4(sp)
1800b8a0:	dc000017 	ldw	r16,0(sp)
1800b8a4:	dec00704 	addi	sp,sp,28
1800b8a8:	f800283a 	ret
1800b8ac:	21400017 	ldw	r5,0(r4)
1800b8b0:	18c00104 	addi	r3,r3,4
1800b8b4:	21000104 	addi	r4,r4,4
1800b8b8:	197fff15 	stw	r5,-4(r3)
1800b8bc:	223ffb36 	bltu	r4,r8,1800b8ac <__alt_data_end+0xf800b8ac>
1800b8c0:	003fe606 	br	1800b85c <__alt_data_end+0xf800b85c>
1800b8c4:	9c000084 	addi	r16,r19,2
1800b8c8:	003fe406 	br	1800b85c <__alt_data_end+0xf800b85c>

1800b8cc <__mcmp>:
1800b8cc:	20800417 	ldw	r2,16(r4)
1800b8d0:	28c00417 	ldw	r3,16(r5)
1800b8d4:	10c5c83a 	sub	r2,r2,r3
1800b8d8:	1000111e 	bne	r2,zero,1800b920 <__mcmp+0x54>
1800b8dc:	18c7883a 	add	r3,r3,r3
1800b8e0:	18c7883a 	add	r3,r3,r3
1800b8e4:	21000504 	addi	r4,r4,20
1800b8e8:	29400504 	addi	r5,r5,20
1800b8ec:	20c5883a 	add	r2,r4,r3
1800b8f0:	28cb883a 	add	r5,r5,r3
1800b8f4:	00000106 	br	1800b8fc <__mcmp+0x30>
1800b8f8:	20800a2e 	bgeu	r4,r2,1800b924 <__mcmp+0x58>
1800b8fc:	10bfff04 	addi	r2,r2,-4
1800b900:	297fff04 	addi	r5,r5,-4
1800b904:	11800017 	ldw	r6,0(r2)
1800b908:	28c00017 	ldw	r3,0(r5)
1800b90c:	30fffa26 	beq	r6,r3,1800b8f8 <__alt_data_end+0xf800b8f8>
1800b910:	30c00236 	bltu	r6,r3,1800b91c <__mcmp+0x50>
1800b914:	00800044 	movi	r2,1
1800b918:	f800283a 	ret
1800b91c:	00bfffc4 	movi	r2,-1
1800b920:	f800283a 	ret
1800b924:	0005883a 	mov	r2,zero
1800b928:	f800283a 	ret

1800b92c <__mdiff>:
1800b92c:	28c00417 	ldw	r3,16(r5)
1800b930:	30800417 	ldw	r2,16(r6)
1800b934:	defffa04 	addi	sp,sp,-24
1800b938:	dcc00315 	stw	r19,12(sp)
1800b93c:	dc800215 	stw	r18,8(sp)
1800b940:	dfc00515 	stw	ra,20(sp)
1800b944:	dd000415 	stw	r20,16(sp)
1800b948:	dc400115 	stw	r17,4(sp)
1800b94c:	dc000015 	stw	r16,0(sp)
1800b950:	1887c83a 	sub	r3,r3,r2
1800b954:	2825883a 	mov	r18,r5
1800b958:	3027883a 	mov	r19,r6
1800b95c:	1800141e 	bne	r3,zero,1800b9b0 <__mdiff+0x84>
1800b960:	1085883a 	add	r2,r2,r2
1800b964:	1085883a 	add	r2,r2,r2
1800b968:	2a000504 	addi	r8,r5,20
1800b96c:	34000504 	addi	r16,r6,20
1800b970:	4087883a 	add	r3,r8,r2
1800b974:	8085883a 	add	r2,r16,r2
1800b978:	00000106 	br	1800b980 <__mdiff+0x54>
1800b97c:	40c0592e 	bgeu	r8,r3,1800bae4 <__mdiff+0x1b8>
1800b980:	18ffff04 	addi	r3,r3,-4
1800b984:	10bfff04 	addi	r2,r2,-4
1800b988:	19c00017 	ldw	r7,0(r3)
1800b98c:	11400017 	ldw	r5,0(r2)
1800b990:	397ffa26 	beq	r7,r5,1800b97c <__alt_data_end+0xf800b97c>
1800b994:	3940592e 	bgeu	r7,r5,1800bafc <__mdiff+0x1d0>
1800b998:	9005883a 	mov	r2,r18
1800b99c:	4023883a 	mov	r17,r8
1800b9a0:	9825883a 	mov	r18,r19
1800b9a4:	05000044 	movi	r20,1
1800b9a8:	1027883a 	mov	r19,r2
1800b9ac:	00000406 	br	1800b9c0 <__mdiff+0x94>
1800b9b0:	18005616 	blt	r3,zero,1800bb0c <__mdiff+0x1e0>
1800b9b4:	34400504 	addi	r17,r6,20
1800b9b8:	2c000504 	addi	r16,r5,20
1800b9bc:	0029883a 	mov	r20,zero
1800b9c0:	91400117 	ldw	r5,4(r18)
1800b9c4:	800af480 	call	1800af48 <_Balloc>
1800b9c8:	92400417 	ldw	r9,16(r18)
1800b9cc:	9b000417 	ldw	r12,16(r19)
1800b9d0:	12c00504 	addi	r11,r2,20
1800b9d4:	4a51883a 	add	r8,r9,r9
1800b9d8:	6319883a 	add	r12,r12,r12
1800b9dc:	4211883a 	add	r8,r8,r8
1800b9e0:	6319883a 	add	r12,r12,r12
1800b9e4:	15000315 	stw	r20,12(r2)
1800b9e8:	8211883a 	add	r8,r16,r8
1800b9ec:	8b19883a 	add	r12,r17,r12
1800b9f0:	0007883a 	mov	r3,zero
1800b9f4:	81400017 	ldw	r5,0(r16)
1800b9f8:	89c00017 	ldw	r7,0(r17)
1800b9fc:	59800104 	addi	r6,r11,4
1800ba00:	293fffcc 	andi	r4,r5,65535
1800ba04:	20c7883a 	add	r3,r4,r3
1800ba08:	393fffcc 	andi	r4,r7,65535
1800ba0c:	1909c83a 	sub	r4,r3,r4
1800ba10:	280ad43a 	srli	r5,r5,16
1800ba14:	380ed43a 	srli	r7,r7,16
1800ba18:	2007d43a 	srai	r3,r4,16
1800ba1c:	213fffcc 	andi	r4,r4,65535
1800ba20:	29cbc83a 	sub	r5,r5,r7
1800ba24:	28c7883a 	add	r3,r5,r3
1800ba28:	180a943a 	slli	r5,r3,16
1800ba2c:	8c400104 	addi	r17,r17,4
1800ba30:	84000104 	addi	r16,r16,4
1800ba34:	2908b03a 	or	r4,r5,r4
1800ba38:	59000015 	stw	r4,0(r11)
1800ba3c:	1807d43a 	srai	r3,r3,16
1800ba40:	3015883a 	mov	r10,r6
1800ba44:	3017883a 	mov	r11,r6
1800ba48:	8b3fea36 	bltu	r17,r12,1800b9f4 <__alt_data_end+0xf800b9f4>
1800ba4c:	8200162e 	bgeu	r16,r8,1800baa8 <__mdiff+0x17c>
1800ba50:	8017883a 	mov	r11,r16
1800ba54:	59400017 	ldw	r5,0(r11)
1800ba58:	31800104 	addi	r6,r6,4
1800ba5c:	5ac00104 	addi	r11,r11,4
1800ba60:	293fffcc 	andi	r4,r5,65535
1800ba64:	20c7883a 	add	r3,r4,r3
1800ba68:	280ed43a 	srli	r7,r5,16
1800ba6c:	180bd43a 	srai	r5,r3,16
1800ba70:	193fffcc 	andi	r4,r3,65535
1800ba74:	3947883a 	add	r3,r7,r5
1800ba78:	180a943a 	slli	r5,r3,16
1800ba7c:	1807d43a 	srai	r3,r3,16
1800ba80:	2908b03a 	or	r4,r5,r4
1800ba84:	313fff15 	stw	r4,-4(r6)
1800ba88:	5a3ff236 	bltu	r11,r8,1800ba54 <__alt_data_end+0xf800ba54>
1800ba8c:	0406303a 	nor	r3,zero,r16
1800ba90:	1a07883a 	add	r3,r3,r8
1800ba94:	1806d0ba 	srli	r3,r3,2
1800ba98:	18c00044 	addi	r3,r3,1
1800ba9c:	18c7883a 	add	r3,r3,r3
1800baa0:	18c7883a 	add	r3,r3,r3
1800baa4:	50d5883a 	add	r10,r10,r3
1800baa8:	50ffff04 	addi	r3,r10,-4
1800baac:	2000041e 	bne	r4,zero,1800bac0 <__mdiff+0x194>
1800bab0:	18ffff04 	addi	r3,r3,-4
1800bab4:	19000017 	ldw	r4,0(r3)
1800bab8:	4a7fffc4 	addi	r9,r9,-1
1800babc:	203ffc26 	beq	r4,zero,1800bab0 <__alt_data_end+0xf800bab0>
1800bac0:	12400415 	stw	r9,16(r2)
1800bac4:	dfc00517 	ldw	ra,20(sp)
1800bac8:	dd000417 	ldw	r20,16(sp)
1800bacc:	dcc00317 	ldw	r19,12(sp)
1800bad0:	dc800217 	ldw	r18,8(sp)
1800bad4:	dc400117 	ldw	r17,4(sp)
1800bad8:	dc000017 	ldw	r16,0(sp)
1800badc:	dec00604 	addi	sp,sp,24
1800bae0:	f800283a 	ret
1800bae4:	000b883a 	mov	r5,zero
1800bae8:	800af480 	call	1800af48 <_Balloc>
1800baec:	00c00044 	movi	r3,1
1800baf0:	10c00415 	stw	r3,16(r2)
1800baf4:	10000515 	stw	zero,20(r2)
1800baf8:	003ff206 	br	1800bac4 <__alt_data_end+0xf800bac4>
1800bafc:	8023883a 	mov	r17,r16
1800bb00:	0029883a 	mov	r20,zero
1800bb04:	4021883a 	mov	r16,r8
1800bb08:	003fad06 	br	1800b9c0 <__alt_data_end+0xf800b9c0>
1800bb0c:	9005883a 	mov	r2,r18
1800bb10:	94400504 	addi	r17,r18,20
1800bb14:	9c000504 	addi	r16,r19,20
1800bb18:	9825883a 	mov	r18,r19
1800bb1c:	05000044 	movi	r20,1
1800bb20:	1027883a 	mov	r19,r2
1800bb24:	003fa606 	br	1800b9c0 <__alt_data_end+0xf800b9c0>

1800bb28 <__ulp>:
1800bb28:	295ffc2c 	andhi	r5,r5,32752
1800bb2c:	00bf3034 	movhi	r2,64704
1800bb30:	2887883a 	add	r3,r5,r2
1800bb34:	00c0020e 	bge	zero,r3,1800bb40 <__ulp+0x18>
1800bb38:	0005883a 	mov	r2,zero
1800bb3c:	f800283a 	ret
1800bb40:	00c7c83a 	sub	r3,zero,r3
1800bb44:	1807d53a 	srai	r3,r3,20
1800bb48:	008004c4 	movi	r2,19
1800bb4c:	10c00b0e 	bge	r2,r3,1800bb7c <__ulp+0x54>
1800bb50:	18bffb04 	addi	r2,r3,-20
1800bb54:	01000784 	movi	r4,30
1800bb58:	0007883a 	mov	r3,zero
1800bb5c:	20800516 	blt	r4,r2,1800bb74 <__ulp+0x4c>
1800bb60:	010007c4 	movi	r4,31
1800bb64:	2089c83a 	sub	r4,r4,r2
1800bb68:	00800044 	movi	r2,1
1800bb6c:	1104983a 	sll	r2,r2,r4
1800bb70:	f800283a 	ret
1800bb74:	00800044 	movi	r2,1
1800bb78:	f800283a 	ret
1800bb7c:	01400234 	movhi	r5,8
1800bb80:	28c7d83a 	sra	r3,r5,r3
1800bb84:	0005883a 	mov	r2,zero
1800bb88:	f800283a 	ret

1800bb8c <__b2d>:
1800bb8c:	defffa04 	addi	sp,sp,-24
1800bb90:	dc000015 	stw	r16,0(sp)
1800bb94:	24000417 	ldw	r16,16(r4)
1800bb98:	dc400115 	stw	r17,4(sp)
1800bb9c:	24400504 	addi	r17,r4,20
1800bba0:	8421883a 	add	r16,r16,r16
1800bba4:	8421883a 	add	r16,r16,r16
1800bba8:	8c21883a 	add	r16,r17,r16
1800bbac:	dc800215 	stw	r18,8(sp)
1800bbb0:	84bfff17 	ldw	r18,-4(r16)
1800bbb4:	dd000415 	stw	r20,16(sp)
1800bbb8:	dcc00315 	stw	r19,12(sp)
1800bbbc:	9009883a 	mov	r4,r18
1800bbc0:	2829883a 	mov	r20,r5
1800bbc4:	dfc00515 	stw	ra,20(sp)
1800bbc8:	800b2640 	call	1800b264 <__hi0bits>
1800bbcc:	00c00804 	movi	r3,32
1800bbd0:	1889c83a 	sub	r4,r3,r2
1800bbd4:	a1000015 	stw	r4,0(r20)
1800bbd8:	01000284 	movi	r4,10
1800bbdc:	84ffff04 	addi	r19,r16,-4
1800bbe0:	20801216 	blt	r4,r2,1800bc2c <__b2d+0xa0>
1800bbe4:	018002c4 	movi	r6,11
1800bbe8:	308dc83a 	sub	r6,r6,r2
1800bbec:	9186d83a 	srl	r3,r18,r6
1800bbf0:	18cffc34 	orhi	r3,r3,16368
1800bbf4:	8cc0212e 	bgeu	r17,r19,1800bc7c <__b2d+0xf0>
1800bbf8:	813ffe17 	ldw	r4,-8(r16)
1800bbfc:	218cd83a 	srl	r6,r4,r6
1800bc00:	10800544 	addi	r2,r2,21
1800bc04:	9084983a 	sll	r2,r18,r2
1800bc08:	1184b03a 	or	r2,r2,r6
1800bc0c:	dfc00517 	ldw	ra,20(sp)
1800bc10:	dd000417 	ldw	r20,16(sp)
1800bc14:	dcc00317 	ldw	r19,12(sp)
1800bc18:	dc800217 	ldw	r18,8(sp)
1800bc1c:	dc400117 	ldw	r17,4(sp)
1800bc20:	dc000017 	ldw	r16,0(sp)
1800bc24:	dec00604 	addi	sp,sp,24
1800bc28:	f800283a 	ret
1800bc2c:	8cc00f2e 	bgeu	r17,r19,1800bc6c <__b2d+0xe0>
1800bc30:	117ffd44 	addi	r5,r2,-11
1800bc34:	80bffe17 	ldw	r2,-8(r16)
1800bc38:	28000e26 	beq	r5,zero,1800bc74 <__b2d+0xe8>
1800bc3c:	1949c83a 	sub	r4,r3,r5
1800bc40:	9164983a 	sll	r18,r18,r5
1800bc44:	1106d83a 	srl	r3,r2,r4
1800bc48:	81bffe04 	addi	r6,r16,-8
1800bc4c:	948ffc34 	orhi	r18,r18,16368
1800bc50:	90c6b03a 	or	r3,r18,r3
1800bc54:	89800e2e 	bgeu	r17,r6,1800bc90 <__b2d+0x104>
1800bc58:	81bffd17 	ldw	r6,-12(r16)
1800bc5c:	1144983a 	sll	r2,r2,r5
1800bc60:	310ad83a 	srl	r5,r6,r4
1800bc64:	2884b03a 	or	r2,r5,r2
1800bc68:	003fe806 	br	1800bc0c <__alt_data_end+0xf800bc0c>
1800bc6c:	10bffd44 	addi	r2,r2,-11
1800bc70:	1000041e 	bne	r2,zero,1800bc84 <__b2d+0xf8>
1800bc74:	90cffc34 	orhi	r3,r18,16368
1800bc78:	003fe406 	br	1800bc0c <__alt_data_end+0xf800bc0c>
1800bc7c:	000d883a 	mov	r6,zero
1800bc80:	003fdf06 	br	1800bc00 <__alt_data_end+0xf800bc00>
1800bc84:	90a4983a 	sll	r18,r18,r2
1800bc88:	0005883a 	mov	r2,zero
1800bc8c:	003ff906 	br	1800bc74 <__alt_data_end+0xf800bc74>
1800bc90:	1144983a 	sll	r2,r2,r5
1800bc94:	003fdd06 	br	1800bc0c <__alt_data_end+0xf800bc0c>

1800bc98 <__d2b>:
1800bc98:	defff804 	addi	sp,sp,-32
1800bc9c:	dc000215 	stw	r16,8(sp)
1800bca0:	3021883a 	mov	r16,r6
1800bca4:	dc400315 	stw	r17,12(sp)
1800bca8:	8022907a 	slli	r17,r16,1
1800bcac:	dd000615 	stw	r20,24(sp)
1800bcb0:	2829883a 	mov	r20,r5
1800bcb4:	01400044 	movi	r5,1
1800bcb8:	dcc00515 	stw	r19,20(sp)
1800bcbc:	dc800415 	stw	r18,16(sp)
1800bcc0:	dfc00715 	stw	ra,28(sp)
1800bcc4:	3825883a 	mov	r18,r7
1800bcc8:	8822d57a 	srli	r17,r17,21
1800bccc:	800af480 	call	1800af48 <_Balloc>
1800bcd0:	1027883a 	mov	r19,r2
1800bcd4:	00800434 	movhi	r2,16
1800bcd8:	10bfffc4 	addi	r2,r2,-1
1800bcdc:	808c703a 	and	r6,r16,r2
1800bce0:	88000126 	beq	r17,zero,1800bce8 <__d2b+0x50>
1800bce4:	31800434 	orhi	r6,r6,16
1800bce8:	d9800015 	stw	r6,0(sp)
1800bcec:	a0002426 	beq	r20,zero,1800bd80 <__d2b+0xe8>
1800bcf0:	d9000104 	addi	r4,sp,4
1800bcf4:	dd000115 	stw	r20,4(sp)
1800bcf8:	800b2cc0 	call	1800b2cc <__lo0bits>
1800bcfc:	d8c00017 	ldw	r3,0(sp)
1800bd00:	10002f1e 	bne	r2,zero,1800bdc0 <__d2b+0x128>
1800bd04:	d9000117 	ldw	r4,4(sp)
1800bd08:	99000515 	stw	r4,20(r19)
1800bd0c:	1821003a 	cmpeq	r16,r3,zero
1800bd10:	01000084 	movi	r4,2
1800bd14:	2421c83a 	sub	r16,r4,r16
1800bd18:	98c00615 	stw	r3,24(r19)
1800bd1c:	9c000415 	stw	r16,16(r19)
1800bd20:	88001f1e 	bne	r17,zero,1800bda0 <__d2b+0x108>
1800bd24:	10bef384 	addi	r2,r2,-1074
1800bd28:	90800015 	stw	r2,0(r18)
1800bd2c:	00900034 	movhi	r2,16384
1800bd30:	10bfffc4 	addi	r2,r2,-1
1800bd34:	8085883a 	add	r2,r16,r2
1800bd38:	1085883a 	add	r2,r2,r2
1800bd3c:	1085883a 	add	r2,r2,r2
1800bd40:	9885883a 	add	r2,r19,r2
1800bd44:	11000517 	ldw	r4,20(r2)
1800bd48:	8020917a 	slli	r16,r16,5
1800bd4c:	800b2640 	call	1800b264 <__hi0bits>
1800bd50:	d8c00817 	ldw	r3,32(sp)
1800bd54:	8085c83a 	sub	r2,r16,r2
1800bd58:	18800015 	stw	r2,0(r3)
1800bd5c:	9805883a 	mov	r2,r19
1800bd60:	dfc00717 	ldw	ra,28(sp)
1800bd64:	dd000617 	ldw	r20,24(sp)
1800bd68:	dcc00517 	ldw	r19,20(sp)
1800bd6c:	dc800417 	ldw	r18,16(sp)
1800bd70:	dc400317 	ldw	r17,12(sp)
1800bd74:	dc000217 	ldw	r16,8(sp)
1800bd78:	dec00804 	addi	sp,sp,32
1800bd7c:	f800283a 	ret
1800bd80:	d809883a 	mov	r4,sp
1800bd84:	800b2cc0 	call	1800b2cc <__lo0bits>
1800bd88:	d8c00017 	ldw	r3,0(sp)
1800bd8c:	04000044 	movi	r16,1
1800bd90:	9c000415 	stw	r16,16(r19)
1800bd94:	98c00515 	stw	r3,20(r19)
1800bd98:	10800804 	addi	r2,r2,32
1800bd9c:	883fe126 	beq	r17,zero,1800bd24 <__alt_data_end+0xf800bd24>
1800bda0:	00c00d44 	movi	r3,53
1800bda4:	8c7ef344 	addi	r17,r17,-1075
1800bda8:	88a3883a 	add	r17,r17,r2
1800bdac:	1885c83a 	sub	r2,r3,r2
1800bdb0:	d8c00817 	ldw	r3,32(sp)
1800bdb4:	94400015 	stw	r17,0(r18)
1800bdb8:	18800015 	stw	r2,0(r3)
1800bdbc:	003fe706 	br	1800bd5c <__alt_data_end+0xf800bd5c>
1800bdc0:	01000804 	movi	r4,32
1800bdc4:	2089c83a 	sub	r4,r4,r2
1800bdc8:	1908983a 	sll	r4,r3,r4
1800bdcc:	d9400117 	ldw	r5,4(sp)
1800bdd0:	1886d83a 	srl	r3,r3,r2
1800bdd4:	2148b03a 	or	r4,r4,r5
1800bdd8:	99000515 	stw	r4,20(r19)
1800bddc:	d8c00015 	stw	r3,0(sp)
1800bde0:	003fca06 	br	1800bd0c <__alt_data_end+0xf800bd0c>

1800bde4 <__ratio>:
1800bde4:	defff904 	addi	sp,sp,-28
1800bde8:	dc400315 	stw	r17,12(sp)
1800bdec:	2823883a 	mov	r17,r5
1800bdf0:	d9400104 	addi	r5,sp,4
1800bdf4:	dfc00615 	stw	ra,24(sp)
1800bdf8:	dcc00515 	stw	r19,20(sp)
1800bdfc:	dc800415 	stw	r18,16(sp)
1800be00:	2027883a 	mov	r19,r4
1800be04:	dc000215 	stw	r16,8(sp)
1800be08:	800bb8c0 	call	1800bb8c <__b2d>
1800be0c:	d80b883a 	mov	r5,sp
1800be10:	8809883a 	mov	r4,r17
1800be14:	1025883a 	mov	r18,r2
1800be18:	1821883a 	mov	r16,r3
1800be1c:	800bb8c0 	call	1800bb8c <__b2d>
1800be20:	8a000417 	ldw	r8,16(r17)
1800be24:	99000417 	ldw	r4,16(r19)
1800be28:	d9400117 	ldw	r5,4(sp)
1800be2c:	2209c83a 	sub	r4,r4,r8
1800be30:	2010917a 	slli	r8,r4,5
1800be34:	d9000017 	ldw	r4,0(sp)
1800be38:	2909c83a 	sub	r4,r5,r4
1800be3c:	4109883a 	add	r4,r8,r4
1800be40:	01000e0e 	bge	zero,r4,1800be7c <__ratio+0x98>
1800be44:	2008953a 	slli	r4,r4,20
1800be48:	2421883a 	add	r16,r4,r16
1800be4c:	100d883a 	mov	r6,r2
1800be50:	180f883a 	mov	r7,r3
1800be54:	9009883a 	mov	r4,r18
1800be58:	800b883a 	mov	r5,r16
1800be5c:	80113700 	call	18011370 <__divdf3>
1800be60:	dfc00617 	ldw	ra,24(sp)
1800be64:	dcc00517 	ldw	r19,20(sp)
1800be68:	dc800417 	ldw	r18,16(sp)
1800be6c:	dc400317 	ldw	r17,12(sp)
1800be70:	dc000217 	ldw	r16,8(sp)
1800be74:	dec00704 	addi	sp,sp,28
1800be78:	f800283a 	ret
1800be7c:	2008953a 	slli	r4,r4,20
1800be80:	1907c83a 	sub	r3,r3,r4
1800be84:	003ff106 	br	1800be4c <__alt_data_end+0xf800be4c>

1800be88 <_mprec_log10>:
1800be88:	defffe04 	addi	sp,sp,-8
1800be8c:	dc000015 	stw	r16,0(sp)
1800be90:	dfc00115 	stw	ra,4(sp)
1800be94:	008005c4 	movi	r2,23
1800be98:	2021883a 	mov	r16,r4
1800be9c:	11000d0e 	bge	r2,r4,1800bed4 <_mprec_log10+0x4c>
1800bea0:	0005883a 	mov	r2,zero
1800bea4:	00cffc34 	movhi	r3,16368
1800bea8:	843fffc4 	addi	r16,r16,-1
1800beac:	000d883a 	mov	r6,zero
1800beb0:	01d00934 	movhi	r7,16420
1800beb4:	1009883a 	mov	r4,r2
1800beb8:	180b883a 	mov	r5,r3
1800bebc:	8011f980 	call	18011f98 <__muldf3>
1800bec0:	803ff91e 	bne	r16,zero,1800bea8 <__alt_data_end+0xf800bea8>
1800bec4:	dfc00117 	ldw	ra,4(sp)
1800bec8:	dc000017 	ldw	r16,0(sp)
1800becc:	dec00204 	addi	sp,sp,8
1800bed0:	f800283a 	ret
1800bed4:	202090fa 	slli	r16,r4,3
1800bed8:	00860074 	movhi	r2,6145
1800bedc:	10992a04 	addi	r2,r2,25768
1800bee0:	1421883a 	add	r16,r2,r16
1800bee4:	80800017 	ldw	r2,0(r16)
1800bee8:	80c00117 	ldw	r3,4(r16)
1800beec:	dfc00117 	ldw	ra,4(sp)
1800bef0:	dc000017 	ldw	r16,0(sp)
1800bef4:	dec00204 	addi	sp,sp,8
1800bef8:	f800283a 	ret

1800befc <__copybits>:
1800befc:	297fffc4 	addi	r5,r5,-1
1800bf00:	280fd17a 	srai	r7,r5,5
1800bf04:	30c00417 	ldw	r3,16(r6)
1800bf08:	30800504 	addi	r2,r6,20
1800bf0c:	39c00044 	addi	r7,r7,1
1800bf10:	18c7883a 	add	r3,r3,r3
1800bf14:	39cf883a 	add	r7,r7,r7
1800bf18:	18c7883a 	add	r3,r3,r3
1800bf1c:	39cf883a 	add	r7,r7,r7
1800bf20:	10c7883a 	add	r3,r2,r3
1800bf24:	21cf883a 	add	r7,r4,r7
1800bf28:	10c00d2e 	bgeu	r2,r3,1800bf60 <__copybits+0x64>
1800bf2c:	200b883a 	mov	r5,r4
1800bf30:	12000017 	ldw	r8,0(r2)
1800bf34:	29400104 	addi	r5,r5,4
1800bf38:	10800104 	addi	r2,r2,4
1800bf3c:	2a3fff15 	stw	r8,-4(r5)
1800bf40:	10fffb36 	bltu	r2,r3,1800bf30 <__alt_data_end+0xf800bf30>
1800bf44:	1985c83a 	sub	r2,r3,r6
1800bf48:	10bffac4 	addi	r2,r2,-21
1800bf4c:	1004d0ba 	srli	r2,r2,2
1800bf50:	10800044 	addi	r2,r2,1
1800bf54:	1085883a 	add	r2,r2,r2
1800bf58:	1085883a 	add	r2,r2,r2
1800bf5c:	2089883a 	add	r4,r4,r2
1800bf60:	21c0032e 	bgeu	r4,r7,1800bf70 <__copybits+0x74>
1800bf64:	20000015 	stw	zero,0(r4)
1800bf68:	21000104 	addi	r4,r4,4
1800bf6c:	21fffd36 	bltu	r4,r7,1800bf64 <__alt_data_end+0xf800bf64>
1800bf70:	f800283a 	ret

1800bf74 <__any_on>:
1800bf74:	20c00417 	ldw	r3,16(r4)
1800bf78:	2805d17a 	srai	r2,r5,5
1800bf7c:	21000504 	addi	r4,r4,20
1800bf80:	18800d0e 	bge	r3,r2,1800bfb8 <__any_on+0x44>
1800bf84:	18c7883a 	add	r3,r3,r3
1800bf88:	18c7883a 	add	r3,r3,r3
1800bf8c:	20c7883a 	add	r3,r4,r3
1800bf90:	20c0192e 	bgeu	r4,r3,1800bff8 <__any_on+0x84>
1800bf94:	18bfff17 	ldw	r2,-4(r3)
1800bf98:	18ffff04 	addi	r3,r3,-4
1800bf9c:	1000041e 	bne	r2,zero,1800bfb0 <__any_on+0x3c>
1800bfa0:	20c0142e 	bgeu	r4,r3,1800bff4 <__any_on+0x80>
1800bfa4:	18ffff04 	addi	r3,r3,-4
1800bfa8:	19400017 	ldw	r5,0(r3)
1800bfac:	283ffc26 	beq	r5,zero,1800bfa0 <__alt_data_end+0xf800bfa0>
1800bfb0:	00800044 	movi	r2,1
1800bfb4:	f800283a 	ret
1800bfb8:	10c00a0e 	bge	r2,r3,1800bfe4 <__any_on+0x70>
1800bfbc:	1085883a 	add	r2,r2,r2
1800bfc0:	1085883a 	add	r2,r2,r2
1800bfc4:	294007cc 	andi	r5,r5,31
1800bfc8:	2087883a 	add	r3,r4,r2
1800bfcc:	283ff026 	beq	r5,zero,1800bf90 <__alt_data_end+0xf800bf90>
1800bfd0:	19800017 	ldw	r6,0(r3)
1800bfd4:	3144d83a 	srl	r2,r6,r5
1800bfd8:	114a983a 	sll	r5,r2,r5
1800bfdc:	317ff41e 	bne	r6,r5,1800bfb0 <__alt_data_end+0xf800bfb0>
1800bfe0:	003feb06 	br	1800bf90 <__alt_data_end+0xf800bf90>
1800bfe4:	1085883a 	add	r2,r2,r2
1800bfe8:	1085883a 	add	r2,r2,r2
1800bfec:	2087883a 	add	r3,r4,r2
1800bff0:	003fe706 	br	1800bf90 <__alt_data_end+0xf800bf90>
1800bff4:	f800283a 	ret
1800bff8:	0005883a 	mov	r2,zero
1800bffc:	f800283a 	ret

1800c000 <_realloc_r>:
1800c000:	defff604 	addi	sp,sp,-40
1800c004:	dc800215 	stw	r18,8(sp)
1800c008:	dfc00915 	stw	ra,36(sp)
1800c00c:	df000815 	stw	fp,32(sp)
1800c010:	ddc00715 	stw	r23,28(sp)
1800c014:	dd800615 	stw	r22,24(sp)
1800c018:	dd400515 	stw	r21,20(sp)
1800c01c:	dd000415 	stw	r20,16(sp)
1800c020:	dcc00315 	stw	r19,12(sp)
1800c024:	dc400115 	stw	r17,4(sp)
1800c028:	dc000015 	stw	r16,0(sp)
1800c02c:	3025883a 	mov	r18,r6
1800c030:	2800b726 	beq	r5,zero,1800c310 <_realloc_r+0x310>
1800c034:	282b883a 	mov	r21,r5
1800c038:	2029883a 	mov	r20,r4
1800c03c:	80139040 	call	18013904 <__malloc_lock>
1800c040:	a8bfff17 	ldw	r2,-4(r21)
1800c044:	043fff04 	movi	r16,-4
1800c048:	90c002c4 	addi	r3,r18,11
1800c04c:	01000584 	movi	r4,22
1800c050:	acfffe04 	addi	r19,r21,-8
1800c054:	1420703a 	and	r16,r2,r16
1800c058:	20c0332e 	bgeu	r4,r3,1800c128 <_realloc_r+0x128>
1800c05c:	047ffe04 	movi	r17,-8
1800c060:	1c62703a 	and	r17,r3,r17
1800c064:	8807883a 	mov	r3,r17
1800c068:	88005816 	blt	r17,zero,1800c1cc <_realloc_r+0x1cc>
1800c06c:	8c805736 	bltu	r17,r18,1800c1cc <_realloc_r+0x1cc>
1800c070:	80c0300e 	bge	r16,r3,1800c134 <_realloc_r+0x134>
1800c074:	07060074 	movhi	fp,6145
1800c078:	e71b9804 	addi	fp,fp,28256
1800c07c:	e1c00217 	ldw	r7,8(fp)
1800c080:	9c09883a 	add	r4,r19,r16
1800c084:	22000117 	ldw	r8,4(r4)
1800c088:	21c06326 	beq	r4,r7,1800c218 <_realloc_r+0x218>
1800c08c:	017fff84 	movi	r5,-2
1800c090:	414a703a 	and	r5,r8,r5
1800c094:	214b883a 	add	r5,r4,r5
1800c098:	29800117 	ldw	r6,4(r5)
1800c09c:	3180004c 	andi	r6,r6,1
1800c0a0:	30003f26 	beq	r6,zero,1800c1a0 <_realloc_r+0x1a0>
1800c0a4:	1080004c 	andi	r2,r2,1
1800c0a8:	10008326 	beq	r2,zero,1800c2b8 <_realloc_r+0x2b8>
1800c0ac:	900b883a 	mov	r5,r18
1800c0b0:	a009883a 	mov	r4,r20
1800c0b4:	800a28c0 	call	1800a28c <_malloc_r>
1800c0b8:	1025883a 	mov	r18,r2
1800c0bc:	10011e26 	beq	r2,zero,1800c538 <_realloc_r+0x538>
1800c0c0:	a93fff17 	ldw	r4,-4(r21)
1800c0c4:	10fffe04 	addi	r3,r2,-8
1800c0c8:	00bfff84 	movi	r2,-2
1800c0cc:	2084703a 	and	r2,r4,r2
1800c0d0:	9885883a 	add	r2,r19,r2
1800c0d4:	1880ee26 	beq	r3,r2,1800c490 <_realloc_r+0x490>
1800c0d8:	81bfff04 	addi	r6,r16,-4
1800c0dc:	00800904 	movi	r2,36
1800c0e0:	1180b836 	bltu	r2,r6,1800c3c4 <_realloc_r+0x3c4>
1800c0e4:	00c004c4 	movi	r3,19
1800c0e8:	19809636 	bltu	r3,r6,1800c344 <_realloc_r+0x344>
1800c0ec:	9005883a 	mov	r2,r18
1800c0f0:	a807883a 	mov	r3,r21
1800c0f4:	19000017 	ldw	r4,0(r3)
1800c0f8:	11000015 	stw	r4,0(r2)
1800c0fc:	19000117 	ldw	r4,4(r3)
1800c100:	11000115 	stw	r4,4(r2)
1800c104:	18c00217 	ldw	r3,8(r3)
1800c108:	10c00215 	stw	r3,8(r2)
1800c10c:	a80b883a 	mov	r5,r21
1800c110:	a009883a 	mov	r4,r20
1800c114:	80096940 	call	18009694 <_free_r>
1800c118:	a009883a 	mov	r4,r20
1800c11c:	80139280 	call	18013928 <__malloc_unlock>
1800c120:	9005883a 	mov	r2,r18
1800c124:	00001206 	br	1800c170 <_realloc_r+0x170>
1800c128:	00c00404 	movi	r3,16
1800c12c:	1823883a 	mov	r17,r3
1800c130:	003fce06 	br	1800c06c <__alt_data_end+0xf800c06c>
1800c134:	a825883a 	mov	r18,r21
1800c138:	8445c83a 	sub	r2,r16,r17
1800c13c:	00c003c4 	movi	r3,15
1800c140:	18802636 	bltu	r3,r2,1800c1dc <_realloc_r+0x1dc>
1800c144:	99800117 	ldw	r6,4(r19)
1800c148:	9c07883a 	add	r3,r19,r16
1800c14c:	3180004c 	andi	r6,r6,1
1800c150:	3420b03a 	or	r16,r6,r16
1800c154:	9c000115 	stw	r16,4(r19)
1800c158:	18800117 	ldw	r2,4(r3)
1800c15c:	10800054 	ori	r2,r2,1
1800c160:	18800115 	stw	r2,4(r3)
1800c164:	a009883a 	mov	r4,r20
1800c168:	80139280 	call	18013928 <__malloc_unlock>
1800c16c:	9005883a 	mov	r2,r18
1800c170:	dfc00917 	ldw	ra,36(sp)
1800c174:	df000817 	ldw	fp,32(sp)
1800c178:	ddc00717 	ldw	r23,28(sp)
1800c17c:	dd800617 	ldw	r22,24(sp)
1800c180:	dd400517 	ldw	r21,20(sp)
1800c184:	dd000417 	ldw	r20,16(sp)
1800c188:	dcc00317 	ldw	r19,12(sp)
1800c18c:	dc800217 	ldw	r18,8(sp)
1800c190:	dc400117 	ldw	r17,4(sp)
1800c194:	dc000017 	ldw	r16,0(sp)
1800c198:	dec00a04 	addi	sp,sp,40
1800c19c:	f800283a 	ret
1800c1a0:	017fff04 	movi	r5,-4
1800c1a4:	414a703a 	and	r5,r8,r5
1800c1a8:	814d883a 	add	r6,r16,r5
1800c1ac:	30c01f16 	blt	r6,r3,1800c22c <_realloc_r+0x22c>
1800c1b0:	20800317 	ldw	r2,12(r4)
1800c1b4:	20c00217 	ldw	r3,8(r4)
1800c1b8:	a825883a 	mov	r18,r21
1800c1bc:	3021883a 	mov	r16,r6
1800c1c0:	18800315 	stw	r2,12(r3)
1800c1c4:	10c00215 	stw	r3,8(r2)
1800c1c8:	003fdb06 	br	1800c138 <__alt_data_end+0xf800c138>
1800c1cc:	00800304 	movi	r2,12
1800c1d0:	a0800015 	stw	r2,0(r20)
1800c1d4:	0005883a 	mov	r2,zero
1800c1d8:	003fe506 	br	1800c170 <__alt_data_end+0xf800c170>
1800c1dc:	98c00117 	ldw	r3,4(r19)
1800c1e0:	9c4b883a 	add	r5,r19,r17
1800c1e4:	11000054 	ori	r4,r2,1
1800c1e8:	18c0004c 	andi	r3,r3,1
1800c1ec:	1c62b03a 	or	r17,r3,r17
1800c1f0:	9c400115 	stw	r17,4(r19)
1800c1f4:	29000115 	stw	r4,4(r5)
1800c1f8:	2885883a 	add	r2,r5,r2
1800c1fc:	10c00117 	ldw	r3,4(r2)
1800c200:	29400204 	addi	r5,r5,8
1800c204:	a009883a 	mov	r4,r20
1800c208:	18c00054 	ori	r3,r3,1
1800c20c:	10c00115 	stw	r3,4(r2)
1800c210:	80096940 	call	18009694 <_free_r>
1800c214:	003fd306 	br	1800c164 <__alt_data_end+0xf800c164>
1800c218:	017fff04 	movi	r5,-4
1800c21c:	414a703a 	and	r5,r8,r5
1800c220:	89800404 	addi	r6,r17,16
1800c224:	8151883a 	add	r8,r16,r5
1800c228:	4180590e 	bge	r8,r6,1800c390 <_realloc_r+0x390>
1800c22c:	1080004c 	andi	r2,r2,1
1800c230:	103f9e1e 	bne	r2,zero,1800c0ac <__alt_data_end+0xf800c0ac>
1800c234:	adbffe17 	ldw	r22,-8(r21)
1800c238:	00bfff04 	movi	r2,-4
1800c23c:	9dadc83a 	sub	r22,r19,r22
1800c240:	b1800117 	ldw	r6,4(r22)
1800c244:	3084703a 	and	r2,r6,r2
1800c248:	20002026 	beq	r4,zero,1800c2cc <_realloc_r+0x2cc>
1800c24c:	80af883a 	add	r23,r16,r2
1800c250:	b96f883a 	add	r23,r23,r5
1800c254:	21c05f26 	beq	r4,r7,1800c3d4 <_realloc_r+0x3d4>
1800c258:	b8c01c16 	blt	r23,r3,1800c2cc <_realloc_r+0x2cc>
1800c25c:	20800317 	ldw	r2,12(r4)
1800c260:	20c00217 	ldw	r3,8(r4)
1800c264:	81bfff04 	addi	r6,r16,-4
1800c268:	01000904 	movi	r4,36
1800c26c:	18800315 	stw	r2,12(r3)
1800c270:	10c00215 	stw	r3,8(r2)
1800c274:	b0c00217 	ldw	r3,8(r22)
1800c278:	b0800317 	ldw	r2,12(r22)
1800c27c:	b4800204 	addi	r18,r22,8
1800c280:	18800315 	stw	r2,12(r3)
1800c284:	10c00215 	stw	r3,8(r2)
1800c288:	21801b36 	bltu	r4,r6,1800c2f8 <_realloc_r+0x2f8>
1800c28c:	008004c4 	movi	r2,19
1800c290:	1180352e 	bgeu	r2,r6,1800c368 <_realloc_r+0x368>
1800c294:	a8800017 	ldw	r2,0(r21)
1800c298:	b0800215 	stw	r2,8(r22)
1800c29c:	a8800117 	ldw	r2,4(r21)
1800c2a0:	b0800315 	stw	r2,12(r22)
1800c2a4:	008006c4 	movi	r2,27
1800c2a8:	11807f36 	bltu	r2,r6,1800c4a8 <_realloc_r+0x4a8>
1800c2ac:	b0800404 	addi	r2,r22,16
1800c2b0:	ad400204 	addi	r21,r21,8
1800c2b4:	00002d06 	br	1800c36c <_realloc_r+0x36c>
1800c2b8:	adbffe17 	ldw	r22,-8(r21)
1800c2bc:	00bfff04 	movi	r2,-4
1800c2c0:	9dadc83a 	sub	r22,r19,r22
1800c2c4:	b1000117 	ldw	r4,4(r22)
1800c2c8:	2084703a 	and	r2,r4,r2
1800c2cc:	b03f7726 	beq	r22,zero,1800c0ac <__alt_data_end+0xf800c0ac>
1800c2d0:	80af883a 	add	r23,r16,r2
1800c2d4:	b8ff7516 	blt	r23,r3,1800c0ac <__alt_data_end+0xf800c0ac>
1800c2d8:	b0800317 	ldw	r2,12(r22)
1800c2dc:	b0c00217 	ldw	r3,8(r22)
1800c2e0:	81bfff04 	addi	r6,r16,-4
1800c2e4:	01000904 	movi	r4,36
1800c2e8:	18800315 	stw	r2,12(r3)
1800c2ec:	10c00215 	stw	r3,8(r2)
1800c2f0:	b4800204 	addi	r18,r22,8
1800c2f4:	21bfe52e 	bgeu	r4,r6,1800c28c <__alt_data_end+0xf800c28c>
1800c2f8:	a80b883a 	mov	r5,r21
1800c2fc:	9009883a 	mov	r4,r18
1800c300:	800acc40 	call	1800acc4 <memmove>
1800c304:	b821883a 	mov	r16,r23
1800c308:	b027883a 	mov	r19,r22
1800c30c:	003f8a06 	br	1800c138 <__alt_data_end+0xf800c138>
1800c310:	300b883a 	mov	r5,r6
1800c314:	dfc00917 	ldw	ra,36(sp)
1800c318:	df000817 	ldw	fp,32(sp)
1800c31c:	ddc00717 	ldw	r23,28(sp)
1800c320:	dd800617 	ldw	r22,24(sp)
1800c324:	dd400517 	ldw	r21,20(sp)
1800c328:	dd000417 	ldw	r20,16(sp)
1800c32c:	dcc00317 	ldw	r19,12(sp)
1800c330:	dc800217 	ldw	r18,8(sp)
1800c334:	dc400117 	ldw	r17,4(sp)
1800c338:	dc000017 	ldw	r16,0(sp)
1800c33c:	dec00a04 	addi	sp,sp,40
1800c340:	800a28c1 	jmpi	1800a28c <_malloc_r>
1800c344:	a8c00017 	ldw	r3,0(r21)
1800c348:	90c00015 	stw	r3,0(r18)
1800c34c:	a8c00117 	ldw	r3,4(r21)
1800c350:	90c00115 	stw	r3,4(r18)
1800c354:	00c006c4 	movi	r3,27
1800c358:	19804536 	bltu	r3,r6,1800c470 <_realloc_r+0x470>
1800c35c:	90800204 	addi	r2,r18,8
1800c360:	a8c00204 	addi	r3,r21,8
1800c364:	003f6306 	br	1800c0f4 <__alt_data_end+0xf800c0f4>
1800c368:	9005883a 	mov	r2,r18
1800c36c:	a8c00017 	ldw	r3,0(r21)
1800c370:	b821883a 	mov	r16,r23
1800c374:	b027883a 	mov	r19,r22
1800c378:	10c00015 	stw	r3,0(r2)
1800c37c:	a8c00117 	ldw	r3,4(r21)
1800c380:	10c00115 	stw	r3,4(r2)
1800c384:	a8c00217 	ldw	r3,8(r21)
1800c388:	10c00215 	stw	r3,8(r2)
1800c38c:	003f6a06 	br	1800c138 <__alt_data_end+0xf800c138>
1800c390:	9c67883a 	add	r19,r19,r17
1800c394:	4445c83a 	sub	r2,r8,r17
1800c398:	e4c00215 	stw	r19,8(fp)
1800c39c:	10800054 	ori	r2,r2,1
1800c3a0:	98800115 	stw	r2,4(r19)
1800c3a4:	a8bfff17 	ldw	r2,-4(r21)
1800c3a8:	a009883a 	mov	r4,r20
1800c3ac:	1080004c 	andi	r2,r2,1
1800c3b0:	1462b03a 	or	r17,r2,r17
1800c3b4:	ac7fff15 	stw	r17,-4(r21)
1800c3b8:	80139280 	call	18013928 <__malloc_unlock>
1800c3bc:	a805883a 	mov	r2,r21
1800c3c0:	003f6b06 	br	1800c170 <__alt_data_end+0xf800c170>
1800c3c4:	a80b883a 	mov	r5,r21
1800c3c8:	9009883a 	mov	r4,r18
1800c3cc:	800acc40 	call	1800acc4 <memmove>
1800c3d0:	003f4e06 	br	1800c10c <__alt_data_end+0xf800c10c>
1800c3d4:	89000404 	addi	r4,r17,16
1800c3d8:	b93fbc16 	blt	r23,r4,1800c2cc <__alt_data_end+0xf800c2cc>
1800c3dc:	b0800317 	ldw	r2,12(r22)
1800c3e0:	b0c00217 	ldw	r3,8(r22)
1800c3e4:	81bfff04 	addi	r6,r16,-4
1800c3e8:	01000904 	movi	r4,36
1800c3ec:	18800315 	stw	r2,12(r3)
1800c3f0:	10c00215 	stw	r3,8(r2)
1800c3f4:	b4800204 	addi	r18,r22,8
1800c3f8:	21804336 	bltu	r4,r6,1800c508 <_realloc_r+0x508>
1800c3fc:	008004c4 	movi	r2,19
1800c400:	11803f2e 	bgeu	r2,r6,1800c500 <_realloc_r+0x500>
1800c404:	a8800017 	ldw	r2,0(r21)
1800c408:	b0800215 	stw	r2,8(r22)
1800c40c:	a8800117 	ldw	r2,4(r21)
1800c410:	b0800315 	stw	r2,12(r22)
1800c414:	008006c4 	movi	r2,27
1800c418:	11803f36 	bltu	r2,r6,1800c518 <_realloc_r+0x518>
1800c41c:	b0800404 	addi	r2,r22,16
1800c420:	ad400204 	addi	r21,r21,8
1800c424:	a8c00017 	ldw	r3,0(r21)
1800c428:	10c00015 	stw	r3,0(r2)
1800c42c:	a8c00117 	ldw	r3,4(r21)
1800c430:	10c00115 	stw	r3,4(r2)
1800c434:	a8c00217 	ldw	r3,8(r21)
1800c438:	10c00215 	stw	r3,8(r2)
1800c43c:	b447883a 	add	r3,r22,r17
1800c440:	bc45c83a 	sub	r2,r23,r17
1800c444:	e0c00215 	stw	r3,8(fp)
1800c448:	10800054 	ori	r2,r2,1
1800c44c:	18800115 	stw	r2,4(r3)
1800c450:	b0800117 	ldw	r2,4(r22)
1800c454:	a009883a 	mov	r4,r20
1800c458:	1080004c 	andi	r2,r2,1
1800c45c:	1462b03a 	or	r17,r2,r17
1800c460:	b4400115 	stw	r17,4(r22)
1800c464:	80139280 	call	18013928 <__malloc_unlock>
1800c468:	9005883a 	mov	r2,r18
1800c46c:	003f4006 	br	1800c170 <__alt_data_end+0xf800c170>
1800c470:	a8c00217 	ldw	r3,8(r21)
1800c474:	90c00215 	stw	r3,8(r18)
1800c478:	a8c00317 	ldw	r3,12(r21)
1800c47c:	90c00315 	stw	r3,12(r18)
1800c480:	30801126 	beq	r6,r2,1800c4c8 <_realloc_r+0x4c8>
1800c484:	90800404 	addi	r2,r18,16
1800c488:	a8c00404 	addi	r3,r21,16
1800c48c:	003f1906 	br	1800c0f4 <__alt_data_end+0xf800c0f4>
1800c490:	90ffff17 	ldw	r3,-4(r18)
1800c494:	00bfff04 	movi	r2,-4
1800c498:	a825883a 	mov	r18,r21
1800c49c:	1884703a 	and	r2,r3,r2
1800c4a0:	80a1883a 	add	r16,r16,r2
1800c4a4:	003f2406 	br	1800c138 <__alt_data_end+0xf800c138>
1800c4a8:	a8800217 	ldw	r2,8(r21)
1800c4ac:	b0800415 	stw	r2,16(r22)
1800c4b0:	a8800317 	ldw	r2,12(r21)
1800c4b4:	b0800515 	stw	r2,20(r22)
1800c4b8:	31000a26 	beq	r6,r4,1800c4e4 <_realloc_r+0x4e4>
1800c4bc:	b0800604 	addi	r2,r22,24
1800c4c0:	ad400404 	addi	r21,r21,16
1800c4c4:	003fa906 	br	1800c36c <__alt_data_end+0xf800c36c>
1800c4c8:	a9000417 	ldw	r4,16(r21)
1800c4cc:	90800604 	addi	r2,r18,24
1800c4d0:	a8c00604 	addi	r3,r21,24
1800c4d4:	91000415 	stw	r4,16(r18)
1800c4d8:	a9000517 	ldw	r4,20(r21)
1800c4dc:	91000515 	stw	r4,20(r18)
1800c4e0:	003f0406 	br	1800c0f4 <__alt_data_end+0xf800c0f4>
1800c4e4:	a8c00417 	ldw	r3,16(r21)
1800c4e8:	ad400604 	addi	r21,r21,24
1800c4ec:	b0800804 	addi	r2,r22,32
1800c4f0:	b0c00615 	stw	r3,24(r22)
1800c4f4:	a8ffff17 	ldw	r3,-4(r21)
1800c4f8:	b0c00715 	stw	r3,28(r22)
1800c4fc:	003f9b06 	br	1800c36c <__alt_data_end+0xf800c36c>
1800c500:	9005883a 	mov	r2,r18
1800c504:	003fc706 	br	1800c424 <__alt_data_end+0xf800c424>
1800c508:	a80b883a 	mov	r5,r21
1800c50c:	9009883a 	mov	r4,r18
1800c510:	800acc40 	call	1800acc4 <memmove>
1800c514:	003fc906 	br	1800c43c <__alt_data_end+0xf800c43c>
1800c518:	a8800217 	ldw	r2,8(r21)
1800c51c:	b0800415 	stw	r2,16(r22)
1800c520:	a8800317 	ldw	r2,12(r21)
1800c524:	b0800515 	stw	r2,20(r22)
1800c528:	31000726 	beq	r6,r4,1800c548 <_realloc_r+0x548>
1800c52c:	b0800604 	addi	r2,r22,24
1800c530:	ad400404 	addi	r21,r21,16
1800c534:	003fbb06 	br	1800c424 <__alt_data_end+0xf800c424>
1800c538:	a009883a 	mov	r4,r20
1800c53c:	80139280 	call	18013928 <__malloc_unlock>
1800c540:	0005883a 	mov	r2,zero
1800c544:	003f0a06 	br	1800c170 <__alt_data_end+0xf800c170>
1800c548:	a8c00417 	ldw	r3,16(r21)
1800c54c:	ad400604 	addi	r21,r21,24
1800c550:	b0800804 	addi	r2,r22,32
1800c554:	b0c00615 	stw	r3,24(r22)
1800c558:	a8ffff17 	ldw	r3,-4(r21)
1800c55c:	b0c00715 	stw	r3,28(r22)
1800c560:	003fb006 	br	1800c424 <__alt_data_end+0xf800c424>

1800c564 <__fpclassifyd>:
1800c564:	00a00034 	movhi	r2,32768
1800c568:	10bfffc4 	addi	r2,r2,-1
1800c56c:	2884703a 	and	r2,r5,r2
1800c570:	10000726 	beq	r2,zero,1800c590 <__fpclassifyd+0x2c>
1800c574:	00fffc34 	movhi	r3,65520
1800c578:	019ff834 	movhi	r6,32736
1800c57c:	28c7883a 	add	r3,r5,r3
1800c580:	31bfffc4 	addi	r6,r6,-1
1800c584:	30c00536 	bltu	r6,r3,1800c59c <__fpclassifyd+0x38>
1800c588:	00800104 	movi	r2,4
1800c58c:	f800283a 	ret
1800c590:	2000021e 	bne	r4,zero,1800c59c <__fpclassifyd+0x38>
1800c594:	00800084 	movi	r2,2
1800c598:	f800283a 	ret
1800c59c:	00dffc34 	movhi	r3,32752
1800c5a0:	019ff834 	movhi	r6,32736
1800c5a4:	28cb883a 	add	r5,r5,r3
1800c5a8:	31bfffc4 	addi	r6,r6,-1
1800c5ac:	317ff62e 	bgeu	r6,r5,1800c588 <__alt_data_end+0xf800c588>
1800c5b0:	01400434 	movhi	r5,16
1800c5b4:	297fffc4 	addi	r5,r5,-1
1800c5b8:	28800236 	bltu	r5,r2,1800c5c4 <__fpclassifyd+0x60>
1800c5bc:	008000c4 	movi	r2,3
1800c5c0:	f800283a 	ret
1800c5c4:	10c00226 	beq	r2,r3,1800c5d0 <__fpclassifyd+0x6c>
1800c5c8:	0005883a 	mov	r2,zero
1800c5cc:	f800283a 	ret
1800c5d0:	2005003a 	cmpeq	r2,r4,zero
1800c5d4:	f800283a 	ret

1800c5d8 <_sbrk_r>:
1800c5d8:	defffd04 	addi	sp,sp,-12
1800c5dc:	dc000015 	stw	r16,0(sp)
1800c5e0:	040600b4 	movhi	r16,6146
1800c5e4:	dc400115 	stw	r17,4(sp)
1800c5e8:	8428aa04 	addi	r16,r16,-23896
1800c5ec:	2023883a 	mov	r17,r4
1800c5f0:	2809883a 	mov	r4,r5
1800c5f4:	dfc00215 	stw	ra,8(sp)
1800c5f8:	80000015 	stw	zero,0(r16)
1800c5fc:	8013b100 	call	18013b10 <sbrk>
1800c600:	00ffffc4 	movi	r3,-1
1800c604:	10c00526 	beq	r2,r3,1800c61c <_sbrk_r+0x44>
1800c608:	dfc00217 	ldw	ra,8(sp)
1800c60c:	dc400117 	ldw	r17,4(sp)
1800c610:	dc000017 	ldw	r16,0(sp)
1800c614:	dec00304 	addi	sp,sp,12
1800c618:	f800283a 	ret
1800c61c:	80c00017 	ldw	r3,0(r16)
1800c620:	183ff926 	beq	r3,zero,1800c608 <__alt_data_end+0xf800c608>
1800c624:	88c00015 	stw	r3,0(r17)
1800c628:	003ff706 	br	1800c608 <__alt_data_end+0xf800c608>

1800c62c <__sread>:
1800c62c:	defffe04 	addi	sp,sp,-8
1800c630:	dc000015 	stw	r16,0(sp)
1800c634:	2821883a 	mov	r16,r5
1800c638:	2940038f 	ldh	r5,14(r5)
1800c63c:	dfc00115 	stw	ra,4(sp)
1800c640:	800fa580 	call	1800fa58 <_read_r>
1800c644:	10000716 	blt	r2,zero,1800c664 <__sread+0x38>
1800c648:	80c01417 	ldw	r3,80(r16)
1800c64c:	1887883a 	add	r3,r3,r2
1800c650:	80c01415 	stw	r3,80(r16)
1800c654:	dfc00117 	ldw	ra,4(sp)
1800c658:	dc000017 	ldw	r16,0(sp)
1800c65c:	dec00204 	addi	sp,sp,8
1800c660:	f800283a 	ret
1800c664:	80c0030b 	ldhu	r3,12(r16)
1800c668:	18fbffcc 	andi	r3,r3,61439
1800c66c:	80c0030d 	sth	r3,12(r16)
1800c670:	dfc00117 	ldw	ra,4(sp)
1800c674:	dc000017 	ldw	r16,0(sp)
1800c678:	dec00204 	addi	sp,sp,8
1800c67c:	f800283a 	ret

1800c680 <__seofread>:
1800c680:	0005883a 	mov	r2,zero
1800c684:	f800283a 	ret

1800c688 <__swrite>:
1800c688:	2880030b 	ldhu	r2,12(r5)
1800c68c:	defffb04 	addi	sp,sp,-20
1800c690:	dcc00315 	stw	r19,12(sp)
1800c694:	dc800215 	stw	r18,8(sp)
1800c698:	dc400115 	stw	r17,4(sp)
1800c69c:	dc000015 	stw	r16,0(sp)
1800c6a0:	dfc00415 	stw	ra,16(sp)
1800c6a4:	10c0400c 	andi	r3,r2,256
1800c6a8:	2821883a 	mov	r16,r5
1800c6ac:	2023883a 	mov	r17,r4
1800c6b0:	3025883a 	mov	r18,r6
1800c6b4:	3827883a 	mov	r19,r7
1800c6b8:	18000526 	beq	r3,zero,1800c6d0 <__swrite+0x48>
1800c6bc:	2940038f 	ldh	r5,14(r5)
1800c6c0:	01c00084 	movi	r7,2
1800c6c4:	000d883a 	mov	r6,zero
1800c6c8:	800f9f80 	call	1800f9f8 <_lseek_r>
1800c6cc:	8080030b 	ldhu	r2,12(r16)
1800c6d0:	8140038f 	ldh	r5,14(r16)
1800c6d4:	10bbffcc 	andi	r2,r2,61439
1800c6d8:	980f883a 	mov	r7,r19
1800c6dc:	900d883a 	mov	r6,r18
1800c6e0:	8809883a 	mov	r4,r17
1800c6e4:	8080030d 	sth	r2,12(r16)
1800c6e8:	dfc00417 	ldw	ra,16(sp)
1800c6ec:	dcc00317 	ldw	r19,12(sp)
1800c6f0:	dc800217 	ldw	r18,8(sp)
1800c6f4:	dc400117 	ldw	r17,4(sp)
1800c6f8:	dc000017 	ldw	r16,0(sp)
1800c6fc:	dec00504 	addi	sp,sp,20
1800c700:	800f4ac1 	jmpi	1800f4ac <_write_r>

1800c704 <__sseek>:
1800c704:	defffe04 	addi	sp,sp,-8
1800c708:	dc000015 	stw	r16,0(sp)
1800c70c:	2821883a 	mov	r16,r5
1800c710:	2940038f 	ldh	r5,14(r5)
1800c714:	dfc00115 	stw	ra,4(sp)
1800c718:	800f9f80 	call	1800f9f8 <_lseek_r>
1800c71c:	00ffffc4 	movi	r3,-1
1800c720:	10c00826 	beq	r2,r3,1800c744 <__sseek+0x40>
1800c724:	80c0030b 	ldhu	r3,12(r16)
1800c728:	80801415 	stw	r2,80(r16)
1800c72c:	18c40014 	ori	r3,r3,4096
1800c730:	80c0030d 	sth	r3,12(r16)
1800c734:	dfc00117 	ldw	ra,4(sp)
1800c738:	dc000017 	ldw	r16,0(sp)
1800c73c:	dec00204 	addi	sp,sp,8
1800c740:	f800283a 	ret
1800c744:	80c0030b 	ldhu	r3,12(r16)
1800c748:	18fbffcc 	andi	r3,r3,61439
1800c74c:	80c0030d 	sth	r3,12(r16)
1800c750:	dfc00117 	ldw	ra,4(sp)
1800c754:	dc000017 	ldw	r16,0(sp)
1800c758:	dec00204 	addi	sp,sp,8
1800c75c:	f800283a 	ret

1800c760 <__sclose>:
1800c760:	2940038f 	ldh	r5,14(r5)
1800c764:	800f50c1 	jmpi	1800f50c <_close_r>

1800c768 <strcmp>:
1800c768:	2144b03a 	or	r2,r4,r5
1800c76c:	108000cc 	andi	r2,r2,3
1800c770:	1000171e 	bne	r2,zero,1800c7d0 <strcmp+0x68>
1800c774:	20800017 	ldw	r2,0(r4)
1800c778:	28c00017 	ldw	r3,0(r5)
1800c77c:	10c0141e 	bne	r2,r3,1800c7d0 <strcmp+0x68>
1800c780:	027fbff4 	movhi	r9,65279
1800c784:	4a7fbfc4 	addi	r9,r9,-257
1800c788:	0086303a 	nor	r3,zero,r2
1800c78c:	02202074 	movhi	r8,32897
1800c790:	1245883a 	add	r2,r2,r9
1800c794:	42202004 	addi	r8,r8,-32640
1800c798:	10c4703a 	and	r2,r2,r3
1800c79c:	1204703a 	and	r2,r2,r8
1800c7a0:	10000226 	beq	r2,zero,1800c7ac <strcmp+0x44>
1800c7a4:	00002306 	br	1800c834 <strcmp+0xcc>
1800c7a8:	1000221e 	bne	r2,zero,1800c834 <strcmp+0xcc>
1800c7ac:	21000104 	addi	r4,r4,4
1800c7b0:	20c00017 	ldw	r3,0(r4)
1800c7b4:	29400104 	addi	r5,r5,4
1800c7b8:	29800017 	ldw	r6,0(r5)
1800c7bc:	1a4f883a 	add	r7,r3,r9
1800c7c0:	00c4303a 	nor	r2,zero,r3
1800c7c4:	3884703a 	and	r2,r7,r2
1800c7c8:	1204703a 	and	r2,r2,r8
1800c7cc:	19bff626 	beq	r3,r6,1800c7a8 <__alt_data_end+0xf800c7a8>
1800c7d0:	20800003 	ldbu	r2,0(r4)
1800c7d4:	10c03fcc 	andi	r3,r2,255
1800c7d8:	18c0201c 	xori	r3,r3,128
1800c7dc:	18ffe004 	addi	r3,r3,-128
1800c7e0:	18000c26 	beq	r3,zero,1800c814 <strcmp+0xac>
1800c7e4:	29800007 	ldb	r6,0(r5)
1800c7e8:	19800326 	beq	r3,r6,1800c7f8 <strcmp+0x90>
1800c7ec:	00001306 	br	1800c83c <strcmp+0xd4>
1800c7f0:	29800007 	ldb	r6,0(r5)
1800c7f4:	11800b1e 	bne	r2,r6,1800c824 <strcmp+0xbc>
1800c7f8:	21000044 	addi	r4,r4,1
1800c7fc:	20c00003 	ldbu	r3,0(r4)
1800c800:	29400044 	addi	r5,r5,1
1800c804:	18803fcc 	andi	r2,r3,255
1800c808:	1080201c 	xori	r2,r2,128
1800c80c:	10bfe004 	addi	r2,r2,-128
1800c810:	103ff71e 	bne	r2,zero,1800c7f0 <__alt_data_end+0xf800c7f0>
1800c814:	0007883a 	mov	r3,zero
1800c818:	28800003 	ldbu	r2,0(r5)
1800c81c:	1885c83a 	sub	r2,r3,r2
1800c820:	f800283a 	ret
1800c824:	28800003 	ldbu	r2,0(r5)
1800c828:	18c03fcc 	andi	r3,r3,255
1800c82c:	1885c83a 	sub	r2,r3,r2
1800c830:	f800283a 	ret
1800c834:	0005883a 	mov	r2,zero
1800c838:	f800283a 	ret
1800c83c:	10c03fcc 	andi	r3,r2,255
1800c840:	003ff506 	br	1800c818 <__alt_data_end+0xf800c818>

1800c844 <__ssprint_r>:
1800c844:	30800217 	ldw	r2,8(r6)
1800c848:	defff604 	addi	sp,sp,-40
1800c84c:	dc800215 	stw	r18,8(sp)
1800c850:	dfc00915 	stw	ra,36(sp)
1800c854:	df000815 	stw	fp,32(sp)
1800c858:	ddc00715 	stw	r23,28(sp)
1800c85c:	dd800615 	stw	r22,24(sp)
1800c860:	dd400515 	stw	r21,20(sp)
1800c864:	dd000415 	stw	r20,16(sp)
1800c868:	dcc00315 	stw	r19,12(sp)
1800c86c:	dc400115 	stw	r17,4(sp)
1800c870:	dc000015 	stw	r16,0(sp)
1800c874:	3025883a 	mov	r18,r6
1800c878:	10005826 	beq	r2,zero,1800c9dc <__ssprint_r+0x198>
1800c87c:	2027883a 	mov	r19,r4
1800c880:	35c00017 	ldw	r23,0(r6)
1800c884:	29000017 	ldw	r4,0(r5)
1800c888:	28800217 	ldw	r2,8(r5)
1800c88c:	2823883a 	mov	r17,r5
1800c890:	0039883a 	mov	fp,zero
1800c894:	0021883a 	mov	r16,zero
1800c898:	80003926 	beq	r16,zero,1800c980 <__ssprint_r+0x13c>
1800c89c:	102b883a 	mov	r21,r2
1800c8a0:	102d883a 	mov	r22,r2
1800c8a4:	80803a36 	bltu	r16,r2,1800c990 <__ssprint_r+0x14c>
1800c8a8:	88c0030b 	ldhu	r3,12(r17)
1800c8ac:	1881200c 	andi	r2,r3,1152
1800c8b0:	10002626 	beq	r2,zero,1800c94c <__ssprint_r+0x108>
1800c8b4:	88800517 	ldw	r2,20(r17)
1800c8b8:	89400417 	ldw	r5,16(r17)
1800c8bc:	81800044 	addi	r6,r16,1
1800c8c0:	108f883a 	add	r7,r2,r2
1800c8c4:	3885883a 	add	r2,r7,r2
1800c8c8:	100ed7fa 	srli	r7,r2,31
1800c8cc:	216dc83a 	sub	r22,r4,r5
1800c8d0:	3589883a 	add	r4,r6,r22
1800c8d4:	3885883a 	add	r2,r7,r2
1800c8d8:	102bd07a 	srai	r21,r2,1
1800c8dc:	a80d883a 	mov	r6,r21
1800c8e0:	a900022e 	bgeu	r21,r4,1800c8ec <__ssprint_r+0xa8>
1800c8e4:	202b883a 	mov	r21,r4
1800c8e8:	200d883a 	mov	r6,r4
1800c8ec:	18c1000c 	andi	r3,r3,1024
1800c8f0:	18002a26 	beq	r3,zero,1800c99c <__ssprint_r+0x158>
1800c8f4:	300b883a 	mov	r5,r6
1800c8f8:	9809883a 	mov	r4,r19
1800c8fc:	800a28c0 	call	1800a28c <_malloc_r>
1800c900:	1029883a 	mov	r20,r2
1800c904:	10002c26 	beq	r2,zero,1800c9b8 <__ssprint_r+0x174>
1800c908:	89400417 	ldw	r5,16(r17)
1800c90c:	b00d883a 	mov	r6,r22
1800c910:	1009883a 	mov	r4,r2
1800c914:	800ab7c0 	call	1800ab7c <memcpy>
1800c918:	8880030b 	ldhu	r2,12(r17)
1800c91c:	00fedfc4 	movi	r3,-1153
1800c920:	10c4703a 	and	r2,r2,r3
1800c924:	10802014 	ori	r2,r2,128
1800c928:	8880030d 	sth	r2,12(r17)
1800c92c:	a589883a 	add	r4,r20,r22
1800c930:	adadc83a 	sub	r22,r21,r22
1800c934:	8d400515 	stw	r21,20(r17)
1800c938:	8d800215 	stw	r22,8(r17)
1800c93c:	8d000415 	stw	r20,16(r17)
1800c940:	89000015 	stw	r4,0(r17)
1800c944:	802b883a 	mov	r21,r16
1800c948:	802d883a 	mov	r22,r16
1800c94c:	b00d883a 	mov	r6,r22
1800c950:	e00b883a 	mov	r5,fp
1800c954:	800acc40 	call	1800acc4 <memmove>
1800c958:	88800217 	ldw	r2,8(r17)
1800c95c:	89000017 	ldw	r4,0(r17)
1800c960:	90c00217 	ldw	r3,8(r18)
1800c964:	1545c83a 	sub	r2,r2,r21
1800c968:	2589883a 	add	r4,r4,r22
1800c96c:	88800215 	stw	r2,8(r17)
1800c970:	89000015 	stw	r4,0(r17)
1800c974:	1c21c83a 	sub	r16,r3,r16
1800c978:	94000215 	stw	r16,8(r18)
1800c97c:	80001726 	beq	r16,zero,1800c9dc <__ssprint_r+0x198>
1800c980:	bf000017 	ldw	fp,0(r23)
1800c984:	bc000117 	ldw	r16,4(r23)
1800c988:	bdc00204 	addi	r23,r23,8
1800c98c:	003fc206 	br	1800c898 <__alt_data_end+0xf800c898>
1800c990:	802b883a 	mov	r21,r16
1800c994:	802d883a 	mov	r22,r16
1800c998:	003fec06 	br	1800c94c <__alt_data_end+0xf800c94c>
1800c99c:	9809883a 	mov	r4,r19
1800c9a0:	800c0000 	call	1800c000 <_realloc_r>
1800c9a4:	1029883a 	mov	r20,r2
1800c9a8:	103fe01e 	bne	r2,zero,1800c92c <__alt_data_end+0xf800c92c>
1800c9ac:	89400417 	ldw	r5,16(r17)
1800c9b0:	9809883a 	mov	r4,r19
1800c9b4:	80096940 	call	18009694 <_free_r>
1800c9b8:	88c0030b 	ldhu	r3,12(r17)
1800c9bc:	00800304 	movi	r2,12
1800c9c0:	98800015 	stw	r2,0(r19)
1800c9c4:	18c01014 	ori	r3,r3,64
1800c9c8:	88c0030d 	sth	r3,12(r17)
1800c9cc:	00bfffc4 	movi	r2,-1
1800c9d0:	90000215 	stw	zero,8(r18)
1800c9d4:	90000115 	stw	zero,4(r18)
1800c9d8:	00000206 	br	1800c9e4 <__ssprint_r+0x1a0>
1800c9dc:	90000115 	stw	zero,4(r18)
1800c9e0:	0005883a 	mov	r2,zero
1800c9e4:	dfc00917 	ldw	ra,36(sp)
1800c9e8:	df000817 	ldw	fp,32(sp)
1800c9ec:	ddc00717 	ldw	r23,28(sp)
1800c9f0:	dd800617 	ldw	r22,24(sp)
1800c9f4:	dd400517 	ldw	r21,20(sp)
1800c9f8:	dd000417 	ldw	r20,16(sp)
1800c9fc:	dcc00317 	ldw	r19,12(sp)
1800ca00:	dc800217 	ldw	r18,8(sp)
1800ca04:	dc400117 	ldw	r17,4(sp)
1800ca08:	dc000017 	ldw	r16,0(sp)
1800ca0c:	dec00a04 	addi	sp,sp,40
1800ca10:	f800283a 	ret

1800ca14 <___svfiprintf_internal_r>:
1800ca14:	2880030b 	ldhu	r2,12(r5)
1800ca18:	deffc804 	addi	sp,sp,-224
1800ca1c:	dcc03115 	stw	r19,196(sp)
1800ca20:	dfc03715 	stw	ra,220(sp)
1800ca24:	df003615 	stw	fp,216(sp)
1800ca28:	ddc03515 	stw	r23,212(sp)
1800ca2c:	dd803415 	stw	r22,208(sp)
1800ca30:	dd403315 	stw	r21,204(sp)
1800ca34:	dd003215 	stw	r20,200(sp)
1800ca38:	dc803015 	stw	r18,192(sp)
1800ca3c:	dc402f15 	stw	r17,188(sp)
1800ca40:	dc002e15 	stw	r16,184(sp)
1800ca44:	d9402315 	stw	r5,140(sp)
1800ca48:	d9002715 	stw	r4,156(sp)
1800ca4c:	1080200c 	andi	r2,r2,128
1800ca50:	d9c02415 	stw	r7,144(sp)
1800ca54:	3027883a 	mov	r19,r6
1800ca58:	10000226 	beq	r2,zero,1800ca64 <___svfiprintf_internal_r+0x50>
1800ca5c:	28800417 	ldw	r2,16(r5)
1800ca60:	10046d26 	beq	r2,zero,1800dc18 <___svfiprintf_internal_r+0x1204>
1800ca64:	d8801a04 	addi	r2,sp,104
1800ca68:	d8c019c4 	addi	r3,sp,103
1800ca6c:	05860074 	movhi	r22,6145
1800ca70:	10c9c83a 	sub	r4,r2,r3
1800ca74:	b5995c04 	addi	r22,r22,25968
1800ca78:	d8801e15 	stw	r2,120(sp)
1800ca7c:	d8c01f15 	stw	r3,124(sp)
1800ca80:	dec01a15 	stw	sp,104(sp)
1800ca84:	d8001c15 	stw	zero,112(sp)
1800ca88:	d8001b15 	stw	zero,108(sp)
1800ca8c:	d811883a 	mov	r8,sp
1800ca90:	d8002915 	stw	zero,164(sp)
1800ca94:	d8002615 	stw	zero,152(sp)
1800ca98:	d9002c15 	stw	r4,176(sp)
1800ca9c:	98800007 	ldb	r2,0(r19)
1800caa0:	10031426 	beq	r2,zero,1800d6f4 <___svfiprintf_internal_r+0xce0>
1800caa4:	00c00944 	movi	r3,37
1800caa8:	9825883a 	mov	r18,r19
1800caac:	10c0021e 	bne	r2,r3,1800cab8 <___svfiprintf_internal_r+0xa4>
1800cab0:	00001406 	br	1800cb04 <___svfiprintf_internal_r+0xf0>
1800cab4:	10c00326 	beq	r2,r3,1800cac4 <___svfiprintf_internal_r+0xb0>
1800cab8:	94800044 	addi	r18,r18,1
1800cabc:	90800007 	ldb	r2,0(r18)
1800cac0:	103ffc1e 	bne	r2,zero,1800cab4 <__alt_data_end+0xf800cab4>
1800cac4:	94e1c83a 	sub	r16,r18,r19
1800cac8:	80000e26 	beq	r16,zero,1800cb04 <___svfiprintf_internal_r+0xf0>
1800cacc:	d8c01c17 	ldw	r3,112(sp)
1800cad0:	d8801b17 	ldw	r2,108(sp)
1800cad4:	44c00015 	stw	r19,0(r8)
1800cad8:	1c07883a 	add	r3,r3,r16
1800cadc:	10800044 	addi	r2,r2,1
1800cae0:	d8c01c15 	stw	r3,112(sp)
1800cae4:	44000115 	stw	r16,4(r8)
1800cae8:	d8801b15 	stw	r2,108(sp)
1800caec:	00c001c4 	movi	r3,7
1800caf0:	18835c16 	blt	r3,r2,1800d864 <___svfiprintf_internal_r+0xe50>
1800caf4:	42000204 	addi	r8,r8,8
1800caf8:	d9402617 	ldw	r5,152(sp)
1800cafc:	2c0b883a 	add	r5,r5,r16
1800cb00:	d9402615 	stw	r5,152(sp)
1800cb04:	90800007 	ldb	r2,0(r18)
1800cb08:	1002fc26 	beq	r2,zero,1800d6fc <___svfiprintf_internal_r+0xce8>
1800cb0c:	0023883a 	mov	r17,zero
1800cb10:	00bfffc4 	movi	r2,-1
1800cb14:	0021883a 	mov	r16,zero
1800cb18:	94c00044 	addi	r19,r18,1
1800cb1c:	90c00047 	ldb	r3,1(r18)
1800cb20:	dc402105 	stb	r17,132(sp)
1800cb24:	d8001d85 	stb	zero,118(sp)
1800cb28:	002b883a 	mov	r21,zero
1800cb2c:	d8802015 	stw	r2,128(sp)
1800cb30:	d8002515 	stw	zero,148(sp)
1800cb34:	04801604 	movi	r18,88
1800cb38:	05000244 	movi	r20,9
1800cb3c:	402f883a 	mov	r23,r8
1800cb40:	8023883a 	mov	r17,r16
1800cb44:	9cc00044 	addi	r19,r19,1
1800cb48:	18bff804 	addi	r2,r3,-32
1800cb4c:	9081fb36 	bltu	r18,r2,1800d33c <___svfiprintf_internal_r+0x928>
1800cb50:	100490ba 	slli	r2,r2,2
1800cb54:	01060074 	movhi	r4,6145
1800cb58:	2132da04 	addi	r4,r4,-13464
1800cb5c:	1105883a 	add	r2,r2,r4
1800cb60:	10800017 	ldw	r2,0(r2)
1800cb64:	1000683a 	jmp	r2
1800cb68:	1800cd68 	cmpgeui	zero,r3,821
1800cb6c:	1800d33c 	xorhi	zero,r3,844
1800cb70:	1800d33c 	xorhi	zero,r3,844
1800cb74:	1800cd5c 	xori	zero,r3,821
1800cb78:	1800d33c 	xorhi	zero,r3,844
1800cb7c:	1800d33c 	xorhi	zero,r3,844
1800cb80:	1800d33c 	xorhi	zero,r3,844
1800cb84:	1800d33c 	xorhi	zero,r3,844
1800cb88:	1800d33c 	xorhi	zero,r3,844
1800cb8c:	1800d33c 	xorhi	zero,r3,844
1800cb90:	1800cccc 	andi	zero,r3,819
1800cb94:	1800cec8 	cmpgei	zero,r3,827
1800cb98:	1800d33c 	xorhi	zero,r3,844
1800cb9c:	1800ccf4 	orhi	zero,r3,819
1800cba0:	1800d378 	rdprs	zero,r3,845
1800cba4:	1800d33c 	xorhi	zero,r3,844
1800cba8:	1800d36c 	andhi	zero,r3,845
1800cbac:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbb0:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbb4:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbb8:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbbc:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbc0:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbc4:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbc8:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbcc:	1800d300 	call	11800d30 <__alt_mem_onchip_memory2_0+0x11800d30>
1800cbd0:	1800d33c 	xorhi	zero,r3,844
1800cbd4:	1800d33c 	xorhi	zero,r3,844
1800cbd8:	1800d33c 	xorhi	zero,r3,844
1800cbdc:	1800d33c 	xorhi	zero,r3,844
1800cbe0:	1800d33c 	xorhi	zero,r3,844
1800cbe4:	1800d33c 	xorhi	zero,r3,844
1800cbe8:	1800d33c 	xorhi	zero,r3,844
1800cbec:	1800d33c 	xorhi	zero,r3,844
1800cbf0:	1800d33c 	xorhi	zero,r3,844
1800cbf4:	1800d33c 	xorhi	zero,r3,844
1800cbf8:	1800d284 	addi	zero,r3,842
1800cbfc:	1800d33c 	xorhi	zero,r3,844
1800cc00:	1800d33c 	xorhi	zero,r3,844
1800cc04:	1800d33c 	xorhi	zero,r3,844
1800cc08:	1800d33c 	xorhi	zero,r3,844
1800cc0c:	1800d33c 	xorhi	zero,r3,844
1800cc10:	1800d33c 	xorhi	zero,r3,844
1800cc14:	1800d33c 	xorhi	zero,r3,844
1800cc18:	1800d33c 	xorhi	zero,r3,844
1800cc1c:	1800d33c 	xorhi	zero,r3,844
1800cc20:	1800d33c 	xorhi	zero,r3,844
1800cc24:	1800d434 	orhi	zero,r3,848
1800cc28:	1800d33c 	xorhi	zero,r3,844
1800cc2c:	1800d33c 	xorhi	zero,r3,844
1800cc30:	1800d33c 	xorhi	zero,r3,844
1800cc34:	1800d33c 	xorhi	zero,r3,844
1800cc38:	1800d33c 	xorhi	zero,r3,844
1800cc3c:	1800d3c0 	call	11800d3c <__alt_mem_onchip_memory2_0+0x11800d3c>
1800cc40:	1800d33c 	xorhi	zero,r3,844
1800cc44:	1800d33c 	xorhi	zero,r3,844
1800cc48:	1800d0c0 	call	11800d0c <__alt_mem_onchip_memory2_0+0x11800d0c>
1800cc4c:	1800d33c 	xorhi	zero,r3,844
1800cc50:	1800d33c 	xorhi	zero,r3,844
1800cc54:	1800d33c 	xorhi	zero,r3,844
1800cc58:	1800d33c 	xorhi	zero,r3,844
1800cc5c:	1800d33c 	xorhi	zero,r3,844
1800cc60:	1800d33c 	xorhi	zero,r3,844
1800cc64:	1800d33c 	xorhi	zero,r3,844
1800cc68:	1800d33c 	xorhi	zero,r3,844
1800cc6c:	1800d33c 	xorhi	zero,r3,844
1800cc70:	1800d33c 	xorhi	zero,r3,844
1800cc74:	1800cf8c 	andi	zero,r3,830
1800cc78:	1800d170 	cmpltui	zero,r3,837
1800cc7c:	1800d33c 	xorhi	zero,r3,844
1800cc80:	1800d33c 	xorhi	zero,r3,844
1800cc84:	1800d33c 	xorhi	zero,r3,844
1800cc88:	1800d164 	muli	zero,r3,837
1800cc8c:	1800d170 	cmpltui	zero,r3,837
1800cc90:	1800d33c 	xorhi	zero,r3,844
1800cc94:	1800d33c 	xorhi	zero,r3,844
1800cc98:	1800d150 	cmplti	zero,r3,837
1800cc9c:	1800d33c 	xorhi	zero,r3,844
1800cca0:	1800d110 	cmplti	zero,r3,836
1800cca4:	1800cedc 	xori	zero,r3,827
1800cca8:	1800cd00 	call	11800cd0 <__alt_mem_onchip_memory2_0+0x11800cd0>
1800ccac:	1800d278 	rdprs	zero,r3,841
1800ccb0:	1800d33c 	xorhi	zero,r3,844
1800ccb4:	1800d224 	muli	zero,r3,840
1800ccb8:	1800d33c 	xorhi	zero,r3,844
1800ccbc:	1800ce40 	call	11800ce4 <__alt_mem_onchip_memory2_0+0x11800ce4>
1800ccc0:	1800d33c 	xorhi	zero,r3,844
1800ccc4:	1800d33c 	xorhi	zero,r3,844
1800ccc8:	1800cd8c 	andi	zero,r3,822
1800cccc:	d9002417 	ldw	r4,144(sp)
1800ccd0:	d9402417 	ldw	r5,144(sp)
1800ccd4:	21000017 	ldw	r4,0(r4)
1800ccd8:	28800104 	addi	r2,r5,4
1800ccdc:	d9002515 	stw	r4,148(sp)
1800cce0:	20032b0e 	bge	r4,zero,1800d990 <___svfiprintf_internal_r+0xf7c>
1800cce4:	d8c02517 	ldw	r3,148(sp)
1800cce8:	d8802415 	stw	r2,144(sp)
1800ccec:	00c7c83a 	sub	r3,zero,r3
1800ccf0:	d8c02515 	stw	r3,148(sp)
1800ccf4:	8c400114 	ori	r17,r17,4
1800ccf8:	98c00007 	ldb	r3,0(r19)
1800ccfc:	003f9106 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800cd00:	00800c04 	movi	r2,48
1800cd04:	d9402417 	ldw	r5,144(sp)
1800cd08:	d9002017 	ldw	r4,128(sp)
1800cd0c:	d8801d05 	stb	r2,116(sp)
1800cd10:	00801e04 	movi	r2,120
1800cd14:	d8801d45 	stb	r2,117(sp)
1800cd18:	d8001d85 	stb	zero,118(sp)
1800cd1c:	b811883a 	mov	r8,r23
1800cd20:	28c00104 	addi	r3,r5,4
1800cd24:	2c800017 	ldw	r18,0(r5)
1800cd28:	0029883a 	mov	r20,zero
1800cd2c:	88800094 	ori	r2,r17,2
1800cd30:	20036316 	blt	r4,zero,1800dac0 <___svfiprintf_internal_r+0x10ac>
1800cd34:	00bfdfc4 	movi	r2,-129
1800cd38:	88a0703a 	and	r16,r17,r2
1800cd3c:	d8c02415 	stw	r3,144(sp)
1800cd40:	84000094 	ori	r16,r16,2
1800cd44:	90031c26 	beq	r18,zero,1800d9b8 <___svfiprintf_internal_r+0xfa4>
1800cd48:	01460074 	movhi	r5,6145
1800cd4c:	2958f304 	addi	r5,r5,25548
1800cd50:	002b883a 	mov	r21,zero
1800cd54:	d9402915 	stw	r5,164(sp)
1800cd58:	00002906 	br	1800ce00 <___svfiprintf_internal_r+0x3ec>
1800cd5c:	8c400054 	ori	r17,r17,1
1800cd60:	98c00007 	ldb	r3,0(r19)
1800cd64:	003f7706 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800cd68:	a8803fcc 	andi	r2,r21,255
1800cd6c:	1080201c 	xori	r2,r2,128
1800cd70:	10bfe004 	addi	r2,r2,-128
1800cd74:	10032a1e 	bne	r2,zero,1800da20 <___svfiprintf_internal_r+0x100c>
1800cd78:	00c00044 	movi	r3,1
1800cd7c:	d8c02105 	stb	r3,132(sp)
1800cd80:	05400804 	movi	r21,32
1800cd84:	98c00007 	ldb	r3,0(r19)
1800cd88:	003f6e06 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800cd8c:	8821883a 	mov	r16,r17
1800cd90:	dc402103 	ldbu	r17,132(sp)
1800cd94:	b811883a 	mov	r8,r23
1800cd98:	8c403fcc 	andi	r17,r17,255
1800cd9c:	8803f01e 	bne	r17,zero,1800dd60 <___svfiprintf_internal_r+0x134c>
1800cda0:	00860074 	movhi	r2,6145
1800cda4:	1098f304 	addi	r2,r2,25548
1800cda8:	d8802915 	stw	r2,164(sp)
1800cdac:	8080080c 	andi	r2,r16,32
1800cdb0:	1000cd26 	beq	r2,zero,1800d0e8 <___svfiprintf_internal_r+0x6d4>
1800cdb4:	d9002417 	ldw	r4,144(sp)
1800cdb8:	24800017 	ldw	r18,0(r4)
1800cdbc:	25000117 	ldw	r20,4(r4)
1800cdc0:	21000204 	addi	r4,r4,8
1800cdc4:	d9002415 	stw	r4,144(sp)
1800cdc8:	8080004c 	andi	r2,r16,1
1800cdcc:	1002c726 	beq	r2,zero,1800d8ec <___svfiprintf_internal_r+0xed8>
1800cdd0:	9504b03a 	or	r2,r18,r20
1800cdd4:	1003061e 	bne	r2,zero,1800d9f0 <___svfiprintf_internal_r+0xfdc>
1800cdd8:	d9002017 	ldw	r4,128(sp)
1800cddc:	d8001d85 	stb	zero,118(sp)
1800cde0:	20033e16 	blt	r4,zero,1800dadc <___svfiprintf_internal_r+0x10c8>
1800cde4:	00bfdfc4 	movi	r2,-129
1800cde8:	80a0703a 	and	r16,r16,r2
1800cdec:	d9402017 	ldw	r5,128(sp)
1800cdf0:	002b883a 	mov	r21,zero
1800cdf4:	28002826 	beq	r5,zero,1800ce98 <___svfiprintf_internal_r+0x484>
1800cdf8:	0025883a 	mov	r18,zero
1800cdfc:	0029883a 	mov	r20,zero
1800ce00:	d9002917 	ldw	r4,164(sp)
1800ce04:	dc401a04 	addi	r17,sp,104
1800ce08:	908003cc 	andi	r2,r18,15
1800ce0c:	a006973a 	slli	r3,r20,28
1800ce10:	2085883a 	add	r2,r4,r2
1800ce14:	9024d13a 	srli	r18,r18,4
1800ce18:	10800003 	ldbu	r2,0(r2)
1800ce1c:	a028d13a 	srli	r20,r20,4
1800ce20:	8c7fffc4 	addi	r17,r17,-1
1800ce24:	1ca4b03a 	or	r18,r3,r18
1800ce28:	88800005 	stb	r2,0(r17)
1800ce2c:	9504b03a 	or	r2,r18,r20
1800ce30:	103ff51e 	bne	r2,zero,1800ce08 <__alt_data_end+0xf800ce08>
1800ce34:	d8801e17 	ldw	r2,120(sp)
1800ce38:	1469c83a 	sub	r20,r2,r17
1800ce3c:	00001906 	br	1800cea4 <___svfiprintf_internal_r+0x490>
1800ce40:	8821883a 	mov	r16,r17
1800ce44:	dc402103 	ldbu	r17,132(sp)
1800ce48:	b811883a 	mov	r8,r23
1800ce4c:	8c403fcc 	andi	r17,r17,255
1800ce50:	8803d01e 	bne	r17,zero,1800dd94 <___svfiprintf_internal_r+0x1380>
1800ce54:	8080080c 	andi	r2,r16,32
1800ce58:	10016126 	beq	r2,zero,1800d3e0 <___svfiprintf_internal_r+0x9cc>
1800ce5c:	d9002417 	ldw	r4,144(sp)
1800ce60:	d9402017 	ldw	r5,128(sp)
1800ce64:	d8001d85 	stb	zero,118(sp)
1800ce68:	20c00204 	addi	r3,r4,8
1800ce6c:	24800017 	ldw	r18,0(r4)
1800ce70:	25000117 	ldw	r20,4(r4)
1800ce74:	28030f16 	blt	r5,zero,1800dab4 <___svfiprintf_internal_r+0x10a0>
1800ce78:	013fdfc4 	movi	r4,-129
1800ce7c:	9504b03a 	or	r2,r18,r20
1800ce80:	d8c02415 	stw	r3,144(sp)
1800ce84:	8120703a 	and	r16,r16,r4
1800ce88:	002b883a 	mov	r21,zero
1800ce8c:	1000cd1e 	bne	r2,zero,1800d1c4 <___svfiprintf_internal_r+0x7b0>
1800ce90:	d8c02017 	ldw	r3,128(sp)
1800ce94:	1803141e 	bne	r3,zero,1800dae8 <___svfiprintf_internal_r+0x10d4>
1800ce98:	d8002015 	stw	zero,128(sp)
1800ce9c:	0029883a 	mov	r20,zero
1800cea0:	dc401a04 	addi	r17,sp,104
1800cea4:	dc802017 	ldw	r18,128(sp)
1800cea8:	9500010e 	bge	r18,r20,1800ceb0 <___svfiprintf_internal_r+0x49c>
1800ceac:	a025883a 	mov	r18,r20
1800ceb0:	ad403fcc 	andi	r21,r21,255
1800ceb4:	ad40201c 	xori	r21,r21,128
1800ceb8:	ad7fe004 	addi	r21,r21,-128
1800cebc:	a8003f26 	beq	r21,zero,1800cfbc <___svfiprintf_internal_r+0x5a8>
1800cec0:	94800044 	addi	r18,r18,1
1800cec4:	00003d06 	br	1800cfbc <___svfiprintf_internal_r+0x5a8>
1800cec8:	00c00044 	movi	r3,1
1800cecc:	d8c02105 	stb	r3,132(sp)
1800ced0:	05400ac4 	movi	r21,43
1800ced4:	98c00007 	ldb	r3,0(r19)
1800ced8:	003f1a06 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800cedc:	8821883a 	mov	r16,r17
1800cee0:	dc402103 	ldbu	r17,132(sp)
1800cee4:	b811883a 	mov	r8,r23
1800cee8:	8c403fcc 	andi	r17,r17,255
1800ceec:	8803a71e 	bne	r17,zero,1800dd8c <___svfiprintf_internal_r+0x1378>
1800cef0:	8080080c 	andi	r2,r16,32
1800cef4:	10015726 	beq	r2,zero,1800d454 <___svfiprintf_internal_r+0xa40>
1800cef8:	d8c02417 	ldw	r3,144(sp)
1800cefc:	d9002017 	ldw	r4,128(sp)
1800cf00:	d8001d85 	stb	zero,118(sp)
1800cf04:	18800204 	addi	r2,r3,8
1800cf08:	1c800017 	ldw	r18,0(r3)
1800cf0c:	1d000117 	ldw	r20,4(r3)
1800cf10:	2002db16 	blt	r4,zero,1800da80 <___svfiprintf_internal_r+0x106c>
1800cf14:	013fdfc4 	movi	r4,-129
1800cf18:	9506b03a 	or	r3,r18,r20
1800cf1c:	d8802415 	stw	r2,144(sp)
1800cf20:	8120703a 	and	r16,r16,r4
1800cf24:	18015826 	beq	r3,zero,1800d488 <___svfiprintf_internal_r+0xa74>
1800cf28:	002b883a 	mov	r21,zero
1800cf2c:	dc401a04 	addi	r17,sp,104
1800cf30:	9006d0fa 	srli	r3,r18,3
1800cf34:	a008977a 	slli	r4,r20,29
1800cf38:	a028d0fa 	srli	r20,r20,3
1800cf3c:	948001cc 	andi	r18,r18,7
1800cf40:	90800c04 	addi	r2,r18,48
1800cf44:	8c7fffc4 	addi	r17,r17,-1
1800cf48:	20e4b03a 	or	r18,r4,r3
1800cf4c:	88800005 	stb	r2,0(r17)
1800cf50:	9506b03a 	or	r3,r18,r20
1800cf54:	183ff61e 	bne	r3,zero,1800cf30 <__alt_data_end+0xf800cf30>
1800cf58:	80c0004c 	andi	r3,r16,1
1800cf5c:	18028926 	beq	r3,zero,1800d984 <___svfiprintf_internal_r+0xf70>
1800cf60:	10803fcc 	andi	r2,r2,255
1800cf64:	1080201c 	xori	r2,r2,128
1800cf68:	10bfe004 	addi	r2,r2,-128
1800cf6c:	00c00c04 	movi	r3,48
1800cf70:	10ffb026 	beq	r2,r3,1800ce34 <__alt_data_end+0xf800ce34>
1800cf74:	88ffffc5 	stb	r3,-1(r17)
1800cf78:	d8c01e17 	ldw	r3,120(sp)
1800cf7c:	88bfffc4 	addi	r2,r17,-1
1800cf80:	1023883a 	mov	r17,r2
1800cf84:	18a9c83a 	sub	r20,r3,r2
1800cf88:	003fc606 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800cf8c:	d8c02417 	ldw	r3,144(sp)
1800cf90:	04800044 	movi	r18,1
1800cf94:	8821883a 	mov	r16,r17
1800cf98:	18800017 	ldw	r2,0(r3)
1800cf9c:	18c00104 	addi	r3,r3,4
1800cfa0:	b811883a 	mov	r8,r23
1800cfa4:	d8001d85 	stb	zero,118(sp)
1800cfa8:	d8801005 	stb	r2,64(sp)
1800cfac:	d8c02415 	stw	r3,144(sp)
1800cfb0:	9029883a 	mov	r20,r18
1800cfb4:	dc401004 	addi	r17,sp,64
1800cfb8:	d8002015 	stw	zero,128(sp)
1800cfbc:	80c0008c 	andi	r3,r16,2
1800cfc0:	d8c02115 	stw	r3,132(sp)
1800cfc4:	18000126 	beq	r3,zero,1800cfcc <___svfiprintf_internal_r+0x5b8>
1800cfc8:	94800084 	addi	r18,r18,2
1800cfcc:	80c0210c 	andi	r3,r16,132
1800cfd0:	d8c02215 	stw	r3,136(sp)
1800cfd4:	1801321e 	bne	r3,zero,1800d4a0 <___svfiprintf_internal_r+0xa8c>
1800cfd8:	d9002517 	ldw	r4,148(sp)
1800cfdc:	24b9c83a 	sub	fp,r4,r18
1800cfe0:	07012f0e 	bge	zero,fp,1800d4a0 <___svfiprintf_internal_r+0xa8c>
1800cfe4:	02400404 	movi	r9,16
1800cfe8:	d8c01c17 	ldw	r3,112(sp)
1800cfec:	d8801b17 	ldw	r2,108(sp)
1800cff0:	4f03250e 	bge	r9,fp,1800dc88 <___svfiprintf_internal_r+0x1274>
1800cff4:	01060074 	movhi	r4,6145
1800cff8:	21196004 	addi	r4,r4,25984
1800cffc:	dc002a15 	stw	r16,168(sp)
1800d000:	dc402b15 	stw	r17,172(sp)
1800d004:	d9002815 	stw	r4,160(sp)
1800d008:	e023883a 	mov	r17,fp
1800d00c:	482f883a 	mov	r23,r9
1800d010:	9839883a 	mov	fp,r19
1800d014:	054001c4 	movi	r21,7
1800d018:	9027883a 	mov	r19,r18
1800d01c:	dc002717 	ldw	r16,156(sp)
1800d020:	dc802317 	ldw	r18,140(sp)
1800d024:	00000306 	br	1800d034 <___svfiprintf_internal_r+0x620>
1800d028:	8c7ffc04 	addi	r17,r17,-16
1800d02c:	42000204 	addi	r8,r8,8
1800d030:	bc40130e 	bge	r23,r17,1800d080 <___svfiprintf_internal_r+0x66c>
1800d034:	01460074 	movhi	r5,6145
1800d038:	18c00404 	addi	r3,r3,16
1800d03c:	10800044 	addi	r2,r2,1
1800d040:	29596004 	addi	r5,r5,25984
1800d044:	41400015 	stw	r5,0(r8)
1800d048:	45c00115 	stw	r23,4(r8)
1800d04c:	d8c01c15 	stw	r3,112(sp)
1800d050:	d8801b15 	stw	r2,108(sp)
1800d054:	a8bff40e 	bge	r21,r2,1800d028 <__alt_data_end+0xf800d028>
1800d058:	d9801a04 	addi	r6,sp,104
1800d05c:	900b883a 	mov	r5,r18
1800d060:	8009883a 	mov	r4,r16
1800d064:	800c8440 	call	1800c844 <__ssprint_r>
1800d068:	1001aa1e 	bne	r2,zero,1800d714 <___svfiprintf_internal_r+0xd00>
1800d06c:	8c7ffc04 	addi	r17,r17,-16
1800d070:	d8c01c17 	ldw	r3,112(sp)
1800d074:	d8801b17 	ldw	r2,108(sp)
1800d078:	d811883a 	mov	r8,sp
1800d07c:	bc7fed16 	blt	r23,r17,1800d034 <__alt_data_end+0xf800d034>
1800d080:	9825883a 	mov	r18,r19
1800d084:	dc002a17 	ldw	r16,168(sp)
1800d088:	e027883a 	mov	r19,fp
1800d08c:	8839883a 	mov	fp,r17
1800d090:	dc402b17 	ldw	r17,172(sp)
1800d094:	d9002817 	ldw	r4,160(sp)
1800d098:	e0c7883a 	add	r3,fp,r3
1800d09c:	10800044 	addi	r2,r2,1
1800d0a0:	41000015 	stw	r4,0(r8)
1800d0a4:	47000115 	stw	fp,4(r8)
1800d0a8:	d8c01c15 	stw	r3,112(sp)
1800d0ac:	d8801b15 	stw	r2,108(sp)
1800d0b0:	010001c4 	movi	r4,7
1800d0b4:	20821616 	blt	r4,r2,1800d910 <___svfiprintf_internal_r+0xefc>
1800d0b8:	42000204 	addi	r8,r8,8
1800d0bc:	0000fa06 	br	1800d4a8 <___svfiprintf_internal_r+0xa94>
1800d0c0:	8821883a 	mov	r16,r17
1800d0c4:	dc402103 	ldbu	r17,132(sp)
1800d0c8:	b811883a 	mov	r8,r23
1800d0cc:	8c403fcc 	andi	r17,r17,255
1800d0d0:	8803361e 	bne	r17,zero,1800ddac <___svfiprintf_internal_r+0x1398>
1800d0d4:	01460074 	movhi	r5,6145
1800d0d8:	2958ee04 	addi	r5,r5,25528
1800d0dc:	d9402915 	stw	r5,164(sp)
1800d0e0:	8080080c 	andi	r2,r16,32
1800d0e4:	103f331e 	bne	r2,zero,1800cdb4 <__alt_data_end+0xf800cdb4>
1800d0e8:	8080040c 	andi	r2,r16,16
1800d0ec:	1002551e 	bne	r2,zero,1800da44 <___svfiprintf_internal_r+0x1030>
1800d0f0:	8080100c 	andi	r2,r16,64
1800d0f4:	1002a626 	beq	r2,zero,1800db90 <___svfiprintf_internal_r+0x117c>
1800d0f8:	d8802417 	ldw	r2,144(sp)
1800d0fc:	0029883a 	mov	r20,zero
1800d100:	1480000b 	ldhu	r18,0(r2)
1800d104:	10800104 	addi	r2,r2,4
1800d108:	d8802415 	stw	r2,144(sp)
1800d10c:	003f2e06 	br	1800cdc8 <__alt_data_end+0xf800cdc8>
1800d110:	8821883a 	mov	r16,r17
1800d114:	dc402103 	ldbu	r17,132(sp)
1800d118:	b811883a 	mov	r8,r23
1800d11c:	8c403fcc 	andi	r17,r17,255
1800d120:	88030b1e 	bne	r17,zero,1800dd50 <___svfiprintf_internal_r+0x133c>
1800d124:	8080080c 	andi	r2,r16,32
1800d128:	1002271e 	bne	r2,zero,1800d9c8 <___svfiprintf_internal_r+0xfb4>
1800d12c:	8080040c 	andi	r2,r16,16
1800d130:	10028e26 	beq	r2,zero,1800db6c <___svfiprintf_internal_r+0x1158>
1800d134:	d8c02417 	ldw	r3,144(sp)
1800d138:	d9002617 	ldw	r4,152(sp)
1800d13c:	18800017 	ldw	r2,0(r3)
1800d140:	18c00104 	addi	r3,r3,4
1800d144:	d8c02415 	stw	r3,144(sp)
1800d148:	11000015 	stw	r4,0(r2)
1800d14c:	003e5306 	br	1800ca9c <__alt_data_end+0xf800ca9c>
1800d150:	98c00007 	ldb	r3,0(r19)
1800d154:	01401b04 	movi	r5,108
1800d158:	19424f26 	beq	r3,r5,1800da98 <___svfiprintf_internal_r+0x1084>
1800d15c:	8c400414 	ori	r17,r17,16
1800d160:	003e7806 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800d164:	8c401014 	ori	r17,r17,64
1800d168:	98c00007 	ldb	r3,0(r19)
1800d16c:	003e7506 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800d170:	8821883a 	mov	r16,r17
1800d174:	dc402103 	ldbu	r17,132(sp)
1800d178:	b811883a 	mov	r8,r23
1800d17c:	8c403fcc 	andi	r17,r17,255
1800d180:	8802fe1e 	bne	r17,zero,1800dd7c <___svfiprintf_internal_r+0x1368>
1800d184:	8080080c 	andi	r2,r16,32
1800d188:	10004626 	beq	r2,zero,1800d2a4 <___svfiprintf_internal_r+0x890>
1800d18c:	d9002417 	ldw	r4,144(sp)
1800d190:	20800117 	ldw	r2,4(r4)
1800d194:	24800017 	ldw	r18,0(r4)
1800d198:	21000204 	addi	r4,r4,8
1800d19c:	d9002415 	stw	r4,144(sp)
1800d1a0:	1029883a 	mov	r20,r2
1800d1a4:	10004a16 	blt	r2,zero,1800d2d0 <___svfiprintf_internal_r+0x8bc>
1800d1a8:	d9002017 	ldw	r4,128(sp)
1800d1ac:	dd401d83 	ldbu	r21,118(sp)
1800d1b0:	2001eb16 	blt	r4,zero,1800d960 <___svfiprintf_internal_r+0xf4c>
1800d1b4:	00ffdfc4 	movi	r3,-129
1800d1b8:	9504b03a 	or	r2,r18,r20
1800d1bc:	80e0703a 	and	r16,r16,r3
1800d1c0:	103f3326 	beq	r2,zero,1800ce90 <__alt_data_end+0xf800ce90>
1800d1c4:	a0009426 	beq	r20,zero,1800d418 <___svfiprintf_internal_r+0xa04>
1800d1c8:	dc401a04 	addi	r17,sp,104
1800d1cc:	402f883a 	mov	r23,r8
1800d1d0:	9009883a 	mov	r4,r18
1800d1d4:	a00b883a 	mov	r5,r20
1800d1d8:	01800284 	movi	r6,10
1800d1dc:	000f883a 	mov	r7,zero
1800d1e0:	80105000 	call	18010500 <__umoddi3>
1800d1e4:	10800c04 	addi	r2,r2,48
1800d1e8:	8c7fffc4 	addi	r17,r17,-1
1800d1ec:	9009883a 	mov	r4,r18
1800d1f0:	a00b883a 	mov	r5,r20
1800d1f4:	88800005 	stb	r2,0(r17)
1800d1f8:	01800284 	movi	r6,10
1800d1fc:	000f883a 	mov	r7,zero
1800d200:	800ff040 	call	1800ff04 <__udivdi3>
1800d204:	1025883a 	mov	r18,r2
1800d208:	10c4b03a 	or	r2,r2,r3
1800d20c:	1829883a 	mov	r20,r3
1800d210:	103fef1e 	bne	r2,zero,1800d1d0 <__alt_data_end+0xf800d1d0>
1800d214:	d9001e17 	ldw	r4,120(sp)
1800d218:	b811883a 	mov	r8,r23
1800d21c:	2469c83a 	sub	r20,r4,r17
1800d220:	003f2006 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800d224:	d8802417 	ldw	r2,144(sp)
1800d228:	8821883a 	mov	r16,r17
1800d22c:	d8001d85 	stb	zero,118(sp)
1800d230:	14400017 	ldw	r17,0(r2)
1800d234:	b811883a 	mov	r8,r23
1800d238:	15c00104 	addi	r23,r2,4
1800d23c:	88026c26 	beq	r17,zero,1800dbf0 <___svfiprintf_internal_r+0x11dc>
1800d240:	d8c02017 	ldw	r3,128(sp)
1800d244:	18025f16 	blt	r3,zero,1800dbc4 <___svfiprintf_internal_r+0x11b0>
1800d248:	180d883a 	mov	r6,r3
1800d24c:	000b883a 	mov	r5,zero
1800d250:	8809883a 	mov	r4,r17
1800d254:	da002d15 	stw	r8,180(sp)
1800d258:	800aa980 	call	1800aa98 <memchr>
1800d25c:	da002d17 	ldw	r8,180(sp)
1800d260:	1002a526 	beq	r2,zero,1800dcf8 <___svfiprintf_internal_r+0x12e4>
1800d264:	1469c83a 	sub	r20,r2,r17
1800d268:	dd401d83 	ldbu	r21,118(sp)
1800d26c:	ddc02415 	stw	r23,144(sp)
1800d270:	d8002015 	stw	zero,128(sp)
1800d274:	003f0b06 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800d278:	8c400814 	ori	r17,r17,32
1800d27c:	98c00007 	ldb	r3,0(r19)
1800d280:	003e3006 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800d284:	8821883a 	mov	r16,r17
1800d288:	dc402103 	ldbu	r17,132(sp)
1800d28c:	b811883a 	mov	r8,r23
1800d290:	8c403fcc 	andi	r17,r17,255
1800d294:	8802b01e 	bne	r17,zero,1800dd58 <___svfiprintf_internal_r+0x1344>
1800d298:	84000414 	ori	r16,r16,16
1800d29c:	8080080c 	andi	r2,r16,32
1800d2a0:	103fba1e 	bne	r2,zero,1800d18c <__alt_data_end+0xf800d18c>
1800d2a4:	8080040c 	andi	r2,r16,16
1800d2a8:	1001df1e 	bne	r2,zero,1800da28 <___svfiprintf_internal_r+0x1014>
1800d2ac:	8080100c 	andi	r2,r16,64
1800d2b0:	10023d26 	beq	r2,zero,1800dba8 <___svfiprintf_internal_r+0x1194>
1800d2b4:	d8802417 	ldw	r2,144(sp)
1800d2b8:	1480000f 	ldh	r18,0(r2)
1800d2bc:	10800104 	addi	r2,r2,4
1800d2c0:	d8802415 	stw	r2,144(sp)
1800d2c4:	9029d7fa 	srai	r20,r18,31
1800d2c8:	a005883a 	mov	r2,r20
1800d2cc:	103fb60e 	bge	r2,zero,1800d1a8 <__alt_data_end+0xf800d1a8>
1800d2d0:	d9402017 	ldw	r5,128(sp)
1800d2d4:	04a5c83a 	sub	r18,zero,r18
1800d2d8:	05400b44 	movi	r21,45
1800d2dc:	9004c03a 	cmpne	r2,r18,zero
1800d2e0:	0529c83a 	sub	r20,zero,r20
1800d2e4:	dd401d85 	stb	r21,118(sp)
1800d2e8:	a0a9c83a 	sub	r20,r20,r2
1800d2ec:	28026c16 	blt	r5,zero,1800dca0 <___svfiprintf_internal_r+0x128c>
1800d2f0:	00bfdfc4 	movi	r2,-129
1800d2f4:	80a0703a 	and	r16,r16,r2
1800d2f8:	a03fb31e 	bne	r20,zero,1800d1c8 <__alt_data_end+0xf800d1c8>
1800d2fc:	00004606 	br	1800d418 <___svfiprintf_internal_r+0xa04>
1800d300:	9839883a 	mov	fp,r19
1800d304:	d8002515 	stw	zero,148(sp)
1800d308:	1c3ff404 	addi	r16,r3,-48
1800d30c:	0009883a 	mov	r4,zero
1800d310:	01400284 	movi	r5,10
1800d314:	8002b640 	call	18002b64 <__mulsi3>
1800d318:	e0c00007 	ldb	r3,0(fp)
1800d31c:	8089883a 	add	r4,r16,r2
1800d320:	9cc00044 	addi	r19,r19,1
1800d324:	1c3ff404 	addi	r16,r3,-48
1800d328:	9839883a 	mov	fp,r19
1800d32c:	a43ff82e 	bgeu	r20,r16,1800d310 <__alt_data_end+0xf800d310>
1800d330:	d9002515 	stw	r4,148(sp)
1800d334:	18bff804 	addi	r2,r3,-32
1800d338:	90be052e 	bgeu	r18,r2,1800cb50 <__alt_data_end+0xf800cb50>
1800d33c:	8821883a 	mov	r16,r17
1800d340:	dc402103 	ldbu	r17,132(sp)
1800d344:	b811883a 	mov	r8,r23
1800d348:	8c403fcc 	andi	r17,r17,255
1800d34c:	88028d1e 	bne	r17,zero,1800dd84 <___svfiprintf_internal_r+0x1370>
1800d350:	1800ea26 	beq	r3,zero,1800d6fc <___svfiprintf_internal_r+0xce8>
1800d354:	04800044 	movi	r18,1
1800d358:	d8c01005 	stb	r3,64(sp)
1800d35c:	d8001d85 	stb	zero,118(sp)
1800d360:	9029883a 	mov	r20,r18
1800d364:	dc401004 	addi	r17,sp,64
1800d368:	003f1306 	br	1800cfb8 <__alt_data_end+0xf800cfb8>
1800d36c:	8c402014 	ori	r17,r17,128
1800d370:	98c00007 	ldb	r3,0(r19)
1800d374:	003df306 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800d378:	98c00007 	ldb	r3,0(r19)
1800d37c:	01000a84 	movi	r4,42
1800d380:	9f000044 	addi	fp,r19,1
1800d384:	19026326 	beq	r3,r4,1800dd14 <___svfiprintf_internal_r+0x1300>
1800d388:	1c3ff404 	addi	r16,r3,-48
1800d38c:	0009883a 	mov	r4,zero
1800d390:	a4025636 	bltu	r20,r16,1800dcec <___svfiprintf_internal_r+0x12d8>
1800d394:	01400284 	movi	r5,10
1800d398:	8002b640 	call	18002b64 <__mulsi3>
1800d39c:	e0c00007 	ldb	r3,0(fp)
1800d3a0:	1409883a 	add	r4,r2,r16
1800d3a4:	e4c00044 	addi	r19,fp,1
1800d3a8:	1c3ff404 	addi	r16,r3,-48
1800d3ac:	9839883a 	mov	fp,r19
1800d3b0:	a43ff82e 	bgeu	r20,r16,1800d394 <__alt_data_end+0xf800d394>
1800d3b4:	20020c16 	blt	r4,zero,1800dbe8 <___svfiprintf_internal_r+0x11d4>
1800d3b8:	d9002015 	stw	r4,128(sp)
1800d3bc:	003de206 	br	1800cb48 <__alt_data_end+0xf800cb48>
1800d3c0:	8821883a 	mov	r16,r17
1800d3c4:	dc402103 	ldbu	r17,132(sp)
1800d3c8:	b811883a 	mov	r8,r23
1800d3cc:	8c403fcc 	andi	r17,r17,255
1800d3d0:	8802721e 	bne	r17,zero,1800dd9c <___svfiprintf_internal_r+0x1388>
1800d3d4:	84000414 	ori	r16,r16,16
1800d3d8:	8080080c 	andi	r2,r16,32
1800d3dc:	103e9f1e 	bne	r2,zero,1800ce5c <__alt_data_end+0xf800ce5c>
1800d3e0:	8080040c 	andi	r2,r16,16
1800d3e4:	10015326 	beq	r2,zero,1800d934 <___svfiprintf_internal_r+0xf20>
1800d3e8:	d8c02417 	ldw	r3,144(sp)
1800d3ec:	d9002017 	ldw	r4,128(sp)
1800d3f0:	d8001d85 	stb	zero,118(sp)
1800d3f4:	18800104 	addi	r2,r3,4
1800d3f8:	1c800017 	ldw	r18,0(r3)
1800d3fc:	0029883a 	mov	r20,zero
1800d400:	20015516 	blt	r4,zero,1800d958 <___svfiprintf_internal_r+0xf44>
1800d404:	00ffdfc4 	movi	r3,-129
1800d408:	d8802415 	stw	r2,144(sp)
1800d40c:	80e0703a 	and	r16,r16,r3
1800d410:	002b883a 	mov	r21,zero
1800d414:	903e9e26 	beq	r18,zero,1800ce90 <__alt_data_end+0xf800ce90>
1800d418:	00800244 	movi	r2,9
1800d41c:	14bf6a36 	bltu	r2,r18,1800d1c8 <__alt_data_end+0xf800d1c8>
1800d420:	94800c04 	addi	r18,r18,48
1800d424:	dc8019c5 	stb	r18,103(sp)
1800d428:	dd002c17 	ldw	r20,176(sp)
1800d42c:	dc4019c4 	addi	r17,sp,103
1800d430:	003e9c06 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800d434:	8821883a 	mov	r16,r17
1800d438:	dc402103 	ldbu	r17,132(sp)
1800d43c:	b811883a 	mov	r8,r23
1800d440:	8c403fcc 	andi	r17,r17,255
1800d444:	8802571e 	bne	r17,zero,1800dda4 <___svfiprintf_internal_r+0x1390>
1800d448:	84000414 	ori	r16,r16,16
1800d44c:	8080080c 	andi	r2,r16,32
1800d450:	103ea91e 	bne	r2,zero,1800cef8 <__alt_data_end+0xf800cef8>
1800d454:	8080040c 	andi	r2,r16,16
1800d458:	10018026 	beq	r2,zero,1800da5c <___svfiprintf_internal_r+0x1048>
1800d45c:	d9402417 	ldw	r5,144(sp)
1800d460:	d8c02017 	ldw	r3,128(sp)
1800d464:	d8001d85 	stb	zero,118(sp)
1800d468:	28800104 	addi	r2,r5,4
1800d46c:	2c800017 	ldw	r18,0(r5)
1800d470:	0029883a 	mov	r20,zero
1800d474:	18018216 	blt	r3,zero,1800da80 <___svfiprintf_internal_r+0x106c>
1800d478:	00ffdfc4 	movi	r3,-129
1800d47c:	d8802415 	stw	r2,144(sp)
1800d480:	80e0703a 	and	r16,r16,r3
1800d484:	903ea81e 	bne	r18,zero,1800cf28 <__alt_data_end+0xf800cf28>
1800d488:	d8802017 	ldw	r2,128(sp)
1800d48c:	002b883a 	mov	r21,zero
1800d490:	1001f226 	beq	r2,zero,1800dc5c <___svfiprintf_internal_r+0x1248>
1800d494:	0025883a 	mov	r18,zero
1800d498:	0029883a 	mov	r20,zero
1800d49c:	003ea306 	br	1800cf2c <__alt_data_end+0xf800cf2c>
1800d4a0:	d8c01c17 	ldw	r3,112(sp)
1800d4a4:	d8801b17 	ldw	r2,108(sp)
1800d4a8:	d9001d87 	ldb	r4,118(sp)
1800d4ac:	20000b26 	beq	r4,zero,1800d4dc <___svfiprintf_internal_r+0xac8>
1800d4b0:	d9001d84 	addi	r4,sp,118
1800d4b4:	18c00044 	addi	r3,r3,1
1800d4b8:	10800044 	addi	r2,r2,1
1800d4bc:	41000015 	stw	r4,0(r8)
1800d4c0:	01000044 	movi	r4,1
1800d4c4:	41000115 	stw	r4,4(r8)
1800d4c8:	d8c01c15 	stw	r3,112(sp)
1800d4cc:	d8801b15 	stw	r2,108(sp)
1800d4d0:	010001c4 	movi	r4,7
1800d4d4:	2080f316 	blt	r4,r2,1800d8a4 <___svfiprintf_internal_r+0xe90>
1800d4d8:	42000204 	addi	r8,r8,8
1800d4dc:	d9402117 	ldw	r5,132(sp)
1800d4e0:	28000b26 	beq	r5,zero,1800d510 <___svfiprintf_internal_r+0xafc>
1800d4e4:	d9001d04 	addi	r4,sp,116
1800d4e8:	18c00084 	addi	r3,r3,2
1800d4ec:	10800044 	addi	r2,r2,1
1800d4f0:	41000015 	stw	r4,0(r8)
1800d4f4:	01000084 	movi	r4,2
1800d4f8:	41000115 	stw	r4,4(r8)
1800d4fc:	d8c01c15 	stw	r3,112(sp)
1800d500:	d8801b15 	stw	r2,108(sp)
1800d504:	010001c4 	movi	r4,7
1800d508:	2080ef16 	blt	r4,r2,1800d8c8 <___svfiprintf_internal_r+0xeb4>
1800d50c:	42000204 	addi	r8,r8,8
1800d510:	d9402217 	ldw	r5,136(sp)
1800d514:	01002004 	movi	r4,128
1800d518:	29008f26 	beq	r5,r4,1800d758 <___svfiprintf_internal_r+0xd44>
1800d51c:	d9002017 	ldw	r4,128(sp)
1800d520:	252fc83a 	sub	r23,r4,r20
1800d524:	05c0310e 	bge	zero,r23,1800d5ec <___svfiprintf_internal_r+0xbd8>
1800d528:	07000404 	movi	fp,16
1800d52c:	e5c17d0e 	bge	fp,r23,1800db24 <___svfiprintf_internal_r+0x1110>
1800d530:	01060074 	movhi	r4,6145
1800d534:	21195c04 	addi	r4,r4,25968
1800d538:	dc002015 	stw	r16,128(sp)
1800d53c:	dc402215 	stw	r17,136(sp)
1800d540:	d9002115 	stw	r4,132(sp)
1800d544:	b823883a 	mov	r17,r23
1800d548:	054001c4 	movi	r21,7
1800d54c:	982f883a 	mov	r23,r19
1800d550:	dc002717 	ldw	r16,156(sp)
1800d554:	9027883a 	mov	r19,r18
1800d558:	dc802317 	ldw	r18,140(sp)
1800d55c:	00000306 	br	1800d56c <___svfiprintf_internal_r+0xb58>
1800d560:	8c7ffc04 	addi	r17,r17,-16
1800d564:	42000204 	addi	r8,r8,8
1800d568:	e440110e 	bge	fp,r17,1800d5b0 <___svfiprintf_internal_r+0xb9c>
1800d56c:	18c00404 	addi	r3,r3,16
1800d570:	10800044 	addi	r2,r2,1
1800d574:	45800015 	stw	r22,0(r8)
1800d578:	47000115 	stw	fp,4(r8)
1800d57c:	d8c01c15 	stw	r3,112(sp)
1800d580:	d8801b15 	stw	r2,108(sp)
1800d584:	a8bff60e 	bge	r21,r2,1800d560 <__alt_data_end+0xf800d560>
1800d588:	d9801a04 	addi	r6,sp,104
1800d58c:	900b883a 	mov	r5,r18
1800d590:	8009883a 	mov	r4,r16
1800d594:	800c8440 	call	1800c844 <__ssprint_r>
1800d598:	10005e1e 	bne	r2,zero,1800d714 <___svfiprintf_internal_r+0xd00>
1800d59c:	8c7ffc04 	addi	r17,r17,-16
1800d5a0:	d8c01c17 	ldw	r3,112(sp)
1800d5a4:	d8801b17 	ldw	r2,108(sp)
1800d5a8:	d811883a 	mov	r8,sp
1800d5ac:	e47fef16 	blt	fp,r17,1800d56c <__alt_data_end+0xf800d56c>
1800d5b0:	9825883a 	mov	r18,r19
1800d5b4:	dc002017 	ldw	r16,128(sp)
1800d5b8:	b827883a 	mov	r19,r23
1800d5bc:	882f883a 	mov	r23,r17
1800d5c0:	dc402217 	ldw	r17,136(sp)
1800d5c4:	d9402117 	ldw	r5,132(sp)
1800d5c8:	1dc7883a 	add	r3,r3,r23
1800d5cc:	10800044 	addi	r2,r2,1
1800d5d0:	41400015 	stw	r5,0(r8)
1800d5d4:	45c00115 	stw	r23,4(r8)
1800d5d8:	d8c01c15 	stw	r3,112(sp)
1800d5dc:	d8801b15 	stw	r2,108(sp)
1800d5e0:	010001c4 	movi	r4,7
1800d5e4:	2080a616 	blt	r4,r2,1800d880 <___svfiprintf_internal_r+0xe6c>
1800d5e8:	42000204 	addi	r8,r8,8
1800d5ec:	a0c7883a 	add	r3,r20,r3
1800d5f0:	10800044 	addi	r2,r2,1
1800d5f4:	44400015 	stw	r17,0(r8)
1800d5f8:	45000115 	stw	r20,4(r8)
1800d5fc:	d8c01c15 	stw	r3,112(sp)
1800d600:	d8801b15 	stw	r2,108(sp)
1800d604:	010001c4 	movi	r4,7
1800d608:	20808816 	blt	r4,r2,1800d82c <___svfiprintf_internal_r+0xe18>
1800d60c:	42000204 	addi	r8,r8,8
1800d610:	8400010c 	andi	r16,r16,4
1800d614:	80002c26 	beq	r16,zero,1800d6c8 <___svfiprintf_internal_r+0xcb4>
1800d618:	d8802517 	ldw	r2,148(sp)
1800d61c:	14a1c83a 	sub	r16,r2,r18
1800d620:	0400290e 	bge	zero,r16,1800d6c8 <___svfiprintf_internal_r+0xcb4>
1800d624:	04400404 	movi	r17,16
1800d628:	d8801b17 	ldw	r2,108(sp)
1800d62c:	8c01a70e 	bge	r17,r16,1800dccc <___svfiprintf_internal_r+0x12b8>
1800d630:	01460074 	movhi	r5,6145
1800d634:	29596004 	addi	r5,r5,25984
1800d638:	d9402815 	stw	r5,160(sp)
1800d63c:	050001c4 	movi	r20,7
1800d640:	dd402717 	ldw	r21,156(sp)
1800d644:	ddc02317 	ldw	r23,140(sp)
1800d648:	00000306 	br	1800d658 <___svfiprintf_internal_r+0xc44>
1800d64c:	843ffc04 	addi	r16,r16,-16
1800d650:	42000204 	addi	r8,r8,8
1800d654:	8c00130e 	bge	r17,r16,1800d6a4 <___svfiprintf_internal_r+0xc90>
1800d658:	01060074 	movhi	r4,6145
1800d65c:	18c00404 	addi	r3,r3,16
1800d660:	10800044 	addi	r2,r2,1
1800d664:	21196004 	addi	r4,r4,25984
1800d668:	41000015 	stw	r4,0(r8)
1800d66c:	44400115 	stw	r17,4(r8)
1800d670:	d8c01c15 	stw	r3,112(sp)
1800d674:	d8801b15 	stw	r2,108(sp)
1800d678:	a0bff40e 	bge	r20,r2,1800d64c <__alt_data_end+0xf800d64c>
1800d67c:	d9801a04 	addi	r6,sp,104
1800d680:	b80b883a 	mov	r5,r23
1800d684:	a809883a 	mov	r4,r21
1800d688:	800c8440 	call	1800c844 <__ssprint_r>
1800d68c:	1000211e 	bne	r2,zero,1800d714 <___svfiprintf_internal_r+0xd00>
1800d690:	843ffc04 	addi	r16,r16,-16
1800d694:	d8c01c17 	ldw	r3,112(sp)
1800d698:	d8801b17 	ldw	r2,108(sp)
1800d69c:	d811883a 	mov	r8,sp
1800d6a0:	8c3fed16 	blt	r17,r16,1800d658 <__alt_data_end+0xf800d658>
1800d6a4:	d9402817 	ldw	r5,160(sp)
1800d6a8:	1c07883a 	add	r3,r3,r16
1800d6ac:	10800044 	addi	r2,r2,1
1800d6b0:	41400015 	stw	r5,0(r8)
1800d6b4:	44000115 	stw	r16,4(r8)
1800d6b8:	d8c01c15 	stw	r3,112(sp)
1800d6bc:	d8801b15 	stw	r2,108(sp)
1800d6c0:	010001c4 	movi	r4,7
1800d6c4:	2080b516 	blt	r4,r2,1800d99c <___svfiprintf_internal_r+0xf88>
1800d6c8:	d8802517 	ldw	r2,148(sp)
1800d6cc:	1480010e 	bge	r2,r18,1800d6d4 <___svfiprintf_internal_r+0xcc0>
1800d6d0:	9005883a 	mov	r2,r18
1800d6d4:	d9002617 	ldw	r4,152(sp)
1800d6d8:	2089883a 	add	r4,r4,r2
1800d6dc:	d9002615 	stw	r4,152(sp)
1800d6e0:	18005a1e 	bne	r3,zero,1800d84c <___svfiprintf_internal_r+0xe38>
1800d6e4:	98800007 	ldb	r2,0(r19)
1800d6e8:	d8001b15 	stw	zero,108(sp)
1800d6ec:	d811883a 	mov	r8,sp
1800d6f0:	103cec1e 	bne	r2,zero,1800caa4 <__alt_data_end+0xf800caa4>
1800d6f4:	9825883a 	mov	r18,r19
1800d6f8:	003d0206 	br	1800cb04 <__alt_data_end+0xf800cb04>
1800d6fc:	d8801c17 	ldw	r2,112(sp)
1800d700:	10000426 	beq	r2,zero,1800d714 <___svfiprintf_internal_r+0xd00>
1800d704:	d9402317 	ldw	r5,140(sp)
1800d708:	d9002717 	ldw	r4,156(sp)
1800d70c:	d9801a04 	addi	r6,sp,104
1800d710:	800c8440 	call	1800c844 <__ssprint_r>
1800d714:	d9402317 	ldw	r5,140(sp)
1800d718:	d8802617 	ldw	r2,152(sp)
1800d71c:	28c0030b 	ldhu	r3,12(r5)
1800d720:	18c0100c 	andi	r3,r3,64
1800d724:	18015c1e 	bne	r3,zero,1800dc98 <___svfiprintf_internal_r+0x1284>
1800d728:	dfc03717 	ldw	ra,220(sp)
1800d72c:	df003617 	ldw	fp,216(sp)
1800d730:	ddc03517 	ldw	r23,212(sp)
1800d734:	dd803417 	ldw	r22,208(sp)
1800d738:	dd403317 	ldw	r21,204(sp)
1800d73c:	dd003217 	ldw	r20,200(sp)
1800d740:	dcc03117 	ldw	r19,196(sp)
1800d744:	dc803017 	ldw	r18,192(sp)
1800d748:	dc402f17 	ldw	r17,188(sp)
1800d74c:	dc002e17 	ldw	r16,184(sp)
1800d750:	dec03804 	addi	sp,sp,224
1800d754:	f800283a 	ret
1800d758:	d9002517 	ldw	r4,148(sp)
1800d75c:	24afc83a 	sub	r23,r4,r18
1800d760:	05ff6e0e 	bge	zero,r23,1800d51c <__alt_data_end+0xf800d51c>
1800d764:	07000404 	movi	fp,16
1800d768:	e5c15c0e 	bge	fp,r23,1800dcdc <___svfiprintf_internal_r+0x12c8>
1800d76c:	01060074 	movhi	r4,6145
1800d770:	21195c04 	addi	r4,r4,25968
1800d774:	dc002215 	stw	r16,136(sp)
1800d778:	dc402815 	stw	r17,160(sp)
1800d77c:	d9002115 	stw	r4,132(sp)
1800d780:	b823883a 	mov	r17,r23
1800d784:	054001c4 	movi	r21,7
1800d788:	982f883a 	mov	r23,r19
1800d78c:	dc002717 	ldw	r16,156(sp)
1800d790:	9027883a 	mov	r19,r18
1800d794:	dc802317 	ldw	r18,140(sp)
1800d798:	00000306 	br	1800d7a8 <___svfiprintf_internal_r+0xd94>
1800d79c:	8c7ffc04 	addi	r17,r17,-16
1800d7a0:	42000204 	addi	r8,r8,8
1800d7a4:	e440110e 	bge	fp,r17,1800d7ec <___svfiprintf_internal_r+0xdd8>
1800d7a8:	18c00404 	addi	r3,r3,16
1800d7ac:	10800044 	addi	r2,r2,1
1800d7b0:	45800015 	stw	r22,0(r8)
1800d7b4:	47000115 	stw	fp,4(r8)
1800d7b8:	d8c01c15 	stw	r3,112(sp)
1800d7bc:	d8801b15 	stw	r2,108(sp)
1800d7c0:	a8bff60e 	bge	r21,r2,1800d79c <__alt_data_end+0xf800d79c>
1800d7c4:	d9801a04 	addi	r6,sp,104
1800d7c8:	900b883a 	mov	r5,r18
1800d7cc:	8009883a 	mov	r4,r16
1800d7d0:	800c8440 	call	1800c844 <__ssprint_r>
1800d7d4:	103fcf1e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d7d8:	8c7ffc04 	addi	r17,r17,-16
1800d7dc:	d8c01c17 	ldw	r3,112(sp)
1800d7e0:	d8801b17 	ldw	r2,108(sp)
1800d7e4:	d811883a 	mov	r8,sp
1800d7e8:	e47fef16 	blt	fp,r17,1800d7a8 <__alt_data_end+0xf800d7a8>
1800d7ec:	9825883a 	mov	r18,r19
1800d7f0:	dc002217 	ldw	r16,136(sp)
1800d7f4:	b827883a 	mov	r19,r23
1800d7f8:	882f883a 	mov	r23,r17
1800d7fc:	dc402817 	ldw	r17,160(sp)
1800d800:	d9402117 	ldw	r5,132(sp)
1800d804:	1dc7883a 	add	r3,r3,r23
1800d808:	10800044 	addi	r2,r2,1
1800d80c:	41400015 	stw	r5,0(r8)
1800d810:	45c00115 	stw	r23,4(r8)
1800d814:	d8c01c15 	stw	r3,112(sp)
1800d818:	d8801b15 	stw	r2,108(sp)
1800d81c:	010001c4 	movi	r4,7
1800d820:	2080b716 	blt	r4,r2,1800db00 <___svfiprintf_internal_r+0x10ec>
1800d824:	42000204 	addi	r8,r8,8
1800d828:	003f3c06 	br	1800d51c <__alt_data_end+0xf800d51c>
1800d82c:	d9402317 	ldw	r5,140(sp)
1800d830:	d9002717 	ldw	r4,156(sp)
1800d834:	d9801a04 	addi	r6,sp,104
1800d838:	800c8440 	call	1800c844 <__ssprint_r>
1800d83c:	103fb51e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d840:	d8c01c17 	ldw	r3,112(sp)
1800d844:	d811883a 	mov	r8,sp
1800d848:	003f7106 	br	1800d610 <__alt_data_end+0xf800d610>
1800d84c:	d9402317 	ldw	r5,140(sp)
1800d850:	d9002717 	ldw	r4,156(sp)
1800d854:	d9801a04 	addi	r6,sp,104
1800d858:	800c8440 	call	1800c844 <__ssprint_r>
1800d85c:	103fa126 	beq	r2,zero,1800d6e4 <__alt_data_end+0xf800d6e4>
1800d860:	003fac06 	br	1800d714 <__alt_data_end+0xf800d714>
1800d864:	d9402317 	ldw	r5,140(sp)
1800d868:	d9002717 	ldw	r4,156(sp)
1800d86c:	d9801a04 	addi	r6,sp,104
1800d870:	800c8440 	call	1800c844 <__ssprint_r>
1800d874:	103fa71e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d878:	d811883a 	mov	r8,sp
1800d87c:	003c9e06 	br	1800caf8 <__alt_data_end+0xf800caf8>
1800d880:	d9402317 	ldw	r5,140(sp)
1800d884:	d9002717 	ldw	r4,156(sp)
1800d888:	d9801a04 	addi	r6,sp,104
1800d88c:	800c8440 	call	1800c844 <__ssprint_r>
1800d890:	103fa01e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d894:	d8c01c17 	ldw	r3,112(sp)
1800d898:	d8801b17 	ldw	r2,108(sp)
1800d89c:	d811883a 	mov	r8,sp
1800d8a0:	003f5206 	br	1800d5ec <__alt_data_end+0xf800d5ec>
1800d8a4:	d9402317 	ldw	r5,140(sp)
1800d8a8:	d9002717 	ldw	r4,156(sp)
1800d8ac:	d9801a04 	addi	r6,sp,104
1800d8b0:	800c8440 	call	1800c844 <__ssprint_r>
1800d8b4:	103f971e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d8b8:	d8c01c17 	ldw	r3,112(sp)
1800d8bc:	d8801b17 	ldw	r2,108(sp)
1800d8c0:	d811883a 	mov	r8,sp
1800d8c4:	003f0506 	br	1800d4dc <__alt_data_end+0xf800d4dc>
1800d8c8:	d9402317 	ldw	r5,140(sp)
1800d8cc:	d9002717 	ldw	r4,156(sp)
1800d8d0:	d9801a04 	addi	r6,sp,104
1800d8d4:	800c8440 	call	1800c844 <__ssprint_r>
1800d8d8:	103f8e1e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d8dc:	d8c01c17 	ldw	r3,112(sp)
1800d8e0:	d8801b17 	ldw	r2,108(sp)
1800d8e4:	d811883a 	mov	r8,sp
1800d8e8:	003f0906 	br	1800d510 <__alt_data_end+0xf800d510>
1800d8ec:	d9402017 	ldw	r5,128(sp)
1800d8f0:	d8001d85 	stb	zero,118(sp)
1800d8f4:	28007716 	blt	r5,zero,1800dad4 <___svfiprintf_internal_r+0x10c0>
1800d8f8:	00ffdfc4 	movi	r3,-129
1800d8fc:	9504b03a 	or	r2,r18,r20
1800d900:	80e0703a 	and	r16,r16,r3
1800d904:	103d3926 	beq	r2,zero,1800cdec <__alt_data_end+0xf800cdec>
1800d908:	002b883a 	mov	r21,zero
1800d90c:	003d3c06 	br	1800ce00 <__alt_data_end+0xf800ce00>
1800d910:	d9402317 	ldw	r5,140(sp)
1800d914:	d9002717 	ldw	r4,156(sp)
1800d918:	d9801a04 	addi	r6,sp,104
1800d91c:	800c8440 	call	1800c844 <__ssprint_r>
1800d920:	103f7c1e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d924:	d8c01c17 	ldw	r3,112(sp)
1800d928:	d8801b17 	ldw	r2,108(sp)
1800d92c:	d811883a 	mov	r8,sp
1800d930:	003edd06 	br	1800d4a8 <__alt_data_end+0xf800d4a8>
1800d934:	8080100c 	andi	r2,r16,64
1800d938:	d8001d85 	stb	zero,118(sp)
1800d93c:	10008426 	beq	r2,zero,1800db50 <___svfiprintf_internal_r+0x113c>
1800d940:	d9402417 	ldw	r5,144(sp)
1800d944:	d8c02017 	ldw	r3,128(sp)
1800d948:	0029883a 	mov	r20,zero
1800d94c:	28800104 	addi	r2,r5,4
1800d950:	2c80000b 	ldhu	r18,0(r5)
1800d954:	183eab0e 	bge	r3,zero,1800d404 <__alt_data_end+0xf800d404>
1800d958:	d8802415 	stw	r2,144(sp)
1800d95c:	002b883a 	mov	r21,zero
1800d960:	9504b03a 	or	r2,r18,r20
1800d964:	103e171e 	bne	r2,zero,1800d1c4 <__alt_data_end+0xf800d1c4>
1800d968:	00800044 	movi	r2,1
1800d96c:	10803fcc 	andi	r2,r2,255
1800d970:	00c00044 	movi	r3,1
1800d974:	10c05c26 	beq	r2,r3,1800dae8 <___svfiprintf_internal_r+0x10d4>
1800d978:	00c00084 	movi	r3,2
1800d97c:	10fd1e26 	beq	r2,r3,1800cdf8 <__alt_data_end+0xf800cdf8>
1800d980:	003ec406 	br	1800d494 <__alt_data_end+0xf800d494>
1800d984:	d9401e17 	ldw	r5,120(sp)
1800d988:	2c69c83a 	sub	r20,r5,r17
1800d98c:	003d4506 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800d990:	d8802415 	stw	r2,144(sp)
1800d994:	98c00007 	ldb	r3,0(r19)
1800d998:	003c6a06 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800d99c:	d9402317 	ldw	r5,140(sp)
1800d9a0:	d9002717 	ldw	r4,156(sp)
1800d9a4:	d9801a04 	addi	r6,sp,104
1800d9a8:	800c8440 	call	1800c844 <__ssprint_r>
1800d9ac:	103f591e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800d9b0:	d8c01c17 	ldw	r3,112(sp)
1800d9b4:	003f4406 	br	1800d6c8 <__alt_data_end+0xf800d6c8>
1800d9b8:	01460074 	movhi	r5,6145
1800d9bc:	2958f304 	addi	r5,r5,25548
1800d9c0:	d9402915 	stw	r5,164(sp)
1800d9c4:	003d0906 	br	1800cdec <__alt_data_end+0xf800cdec>
1800d9c8:	d8c02417 	ldw	r3,144(sp)
1800d9cc:	d9002617 	ldw	r4,152(sp)
1800d9d0:	d9402417 	ldw	r5,144(sp)
1800d9d4:	18800017 	ldw	r2,0(r3)
1800d9d8:	2007d7fa 	srai	r3,r4,31
1800d9dc:	29400104 	addi	r5,r5,4
1800d9e0:	d9402415 	stw	r5,144(sp)
1800d9e4:	11000015 	stw	r4,0(r2)
1800d9e8:	10c00115 	stw	r3,4(r2)
1800d9ec:	003c2b06 	br	1800ca9c <__alt_data_end+0xf800ca9c>
1800d9f0:	d8c01d45 	stb	r3,117(sp)
1800d9f4:	d8c02017 	ldw	r3,128(sp)
1800d9f8:	00800c04 	movi	r2,48
1800d9fc:	d8801d05 	stb	r2,116(sp)
1800da00:	d8001d85 	stb	zero,118(sp)
1800da04:	80800094 	ori	r2,r16,2
1800da08:	1800ac16 	blt	r3,zero,1800dcbc <___svfiprintf_internal_r+0x12a8>
1800da0c:	00bfdfc4 	movi	r2,-129
1800da10:	80a0703a 	and	r16,r16,r2
1800da14:	84000094 	ori	r16,r16,2
1800da18:	002b883a 	mov	r21,zero
1800da1c:	003cf806 	br	1800ce00 <__alt_data_end+0xf800ce00>
1800da20:	98c00007 	ldb	r3,0(r19)
1800da24:	003c4706 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800da28:	d9402417 	ldw	r5,144(sp)
1800da2c:	2c800017 	ldw	r18,0(r5)
1800da30:	29400104 	addi	r5,r5,4
1800da34:	d9402415 	stw	r5,144(sp)
1800da38:	9029d7fa 	srai	r20,r18,31
1800da3c:	a005883a 	mov	r2,r20
1800da40:	003dd806 	br	1800d1a4 <__alt_data_end+0xf800d1a4>
1800da44:	d9402417 	ldw	r5,144(sp)
1800da48:	0029883a 	mov	r20,zero
1800da4c:	2c800017 	ldw	r18,0(r5)
1800da50:	29400104 	addi	r5,r5,4
1800da54:	d9402415 	stw	r5,144(sp)
1800da58:	003cdb06 	br	1800cdc8 <__alt_data_end+0xf800cdc8>
1800da5c:	8080100c 	andi	r2,r16,64
1800da60:	d8001d85 	stb	zero,118(sp)
1800da64:	10003326 	beq	r2,zero,1800db34 <___svfiprintf_internal_r+0x1120>
1800da68:	d9002417 	ldw	r4,144(sp)
1800da6c:	d9402017 	ldw	r5,128(sp)
1800da70:	0029883a 	mov	r20,zero
1800da74:	20800104 	addi	r2,r4,4
1800da78:	2480000b 	ldhu	r18,0(r4)
1800da7c:	283e7e0e 	bge	r5,zero,1800d478 <__alt_data_end+0xf800d478>
1800da80:	9506b03a 	or	r3,r18,r20
1800da84:	d8802415 	stw	r2,144(sp)
1800da88:	183d271e 	bne	r3,zero,1800cf28 <__alt_data_end+0xf800cf28>
1800da8c:	002b883a 	mov	r21,zero
1800da90:	0005883a 	mov	r2,zero
1800da94:	003fb506 	br	1800d96c <__alt_data_end+0xf800d96c>
1800da98:	98c00043 	ldbu	r3,1(r19)
1800da9c:	8c400814 	ori	r17,r17,32
1800daa0:	9cc00044 	addi	r19,r19,1
1800daa4:	18c03fcc 	andi	r3,r3,255
1800daa8:	18c0201c 	xori	r3,r3,128
1800daac:	18ffe004 	addi	r3,r3,-128
1800dab0:	003c2406 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800dab4:	d8c02415 	stw	r3,144(sp)
1800dab8:	002b883a 	mov	r21,zero
1800dabc:	003fa806 	br	1800d960 <__alt_data_end+0xf800d960>
1800dac0:	01060074 	movhi	r4,6145
1800dac4:	2118f304 	addi	r4,r4,25548
1800dac8:	d9002915 	stw	r4,164(sp)
1800dacc:	d8c02415 	stw	r3,144(sp)
1800dad0:	1021883a 	mov	r16,r2
1800dad4:	9504b03a 	or	r2,r18,r20
1800dad8:	103f8b1e 	bne	r2,zero,1800d908 <__alt_data_end+0xf800d908>
1800dadc:	002b883a 	mov	r21,zero
1800dae0:	00800084 	movi	r2,2
1800dae4:	003fa106 	br	1800d96c <__alt_data_end+0xf800d96c>
1800dae8:	0025883a 	mov	r18,zero
1800daec:	94800c04 	addi	r18,r18,48
1800daf0:	dc8019c5 	stb	r18,103(sp)
1800daf4:	dd002c17 	ldw	r20,176(sp)
1800daf8:	dc4019c4 	addi	r17,sp,103
1800dafc:	003ce906 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800db00:	d9402317 	ldw	r5,140(sp)
1800db04:	d9002717 	ldw	r4,156(sp)
1800db08:	d9801a04 	addi	r6,sp,104
1800db0c:	800c8440 	call	1800c844 <__ssprint_r>
1800db10:	103f001e 	bne	r2,zero,1800d714 <__alt_data_end+0xf800d714>
1800db14:	d8c01c17 	ldw	r3,112(sp)
1800db18:	d8801b17 	ldw	r2,108(sp)
1800db1c:	d811883a 	mov	r8,sp
1800db20:	003e7e06 	br	1800d51c <__alt_data_end+0xf800d51c>
1800db24:	01460074 	movhi	r5,6145
1800db28:	29595c04 	addi	r5,r5,25968
1800db2c:	d9402115 	stw	r5,132(sp)
1800db30:	003ea406 	br	1800d5c4 <__alt_data_end+0xf800d5c4>
1800db34:	d8c02417 	ldw	r3,144(sp)
1800db38:	d9002017 	ldw	r4,128(sp)
1800db3c:	0029883a 	mov	r20,zero
1800db40:	18800104 	addi	r2,r3,4
1800db44:	1c800017 	ldw	r18,0(r3)
1800db48:	203e4b0e 	bge	r4,zero,1800d478 <__alt_data_end+0xf800d478>
1800db4c:	003fcc06 	br	1800da80 <__alt_data_end+0xf800da80>
1800db50:	d9002417 	ldw	r4,144(sp)
1800db54:	d9402017 	ldw	r5,128(sp)
1800db58:	0029883a 	mov	r20,zero
1800db5c:	20800104 	addi	r2,r4,4
1800db60:	24800017 	ldw	r18,0(r4)
1800db64:	283e270e 	bge	r5,zero,1800d404 <__alt_data_end+0xf800d404>
1800db68:	003f7b06 	br	1800d958 <__alt_data_end+0xf800d958>
1800db6c:	8400100c 	andi	r16,r16,64
1800db70:	80003326 	beq	r16,zero,1800dc40 <___svfiprintf_internal_r+0x122c>
1800db74:	d9402417 	ldw	r5,144(sp)
1800db78:	d8c02617 	ldw	r3,152(sp)
1800db7c:	28800017 	ldw	r2,0(r5)
1800db80:	29400104 	addi	r5,r5,4
1800db84:	d9402415 	stw	r5,144(sp)
1800db88:	10c0000d 	sth	r3,0(r2)
1800db8c:	003bc306 	br	1800ca9c <__alt_data_end+0xf800ca9c>
1800db90:	d9002417 	ldw	r4,144(sp)
1800db94:	0029883a 	mov	r20,zero
1800db98:	24800017 	ldw	r18,0(r4)
1800db9c:	21000104 	addi	r4,r4,4
1800dba0:	d9002415 	stw	r4,144(sp)
1800dba4:	003c8806 	br	1800cdc8 <__alt_data_end+0xf800cdc8>
1800dba8:	d8c02417 	ldw	r3,144(sp)
1800dbac:	1c800017 	ldw	r18,0(r3)
1800dbb0:	18c00104 	addi	r3,r3,4
1800dbb4:	d8c02415 	stw	r3,144(sp)
1800dbb8:	9029d7fa 	srai	r20,r18,31
1800dbbc:	a005883a 	mov	r2,r20
1800dbc0:	003d7806 	br	1800d1a4 <__alt_data_end+0xf800d1a4>
1800dbc4:	8809883a 	mov	r4,r17
1800dbc8:	da002d15 	stw	r8,180(sp)
1800dbcc:	8002e0c0 	call	18002e0c <strlen>
1800dbd0:	1029883a 	mov	r20,r2
1800dbd4:	dd401d83 	ldbu	r21,118(sp)
1800dbd8:	ddc02415 	stw	r23,144(sp)
1800dbdc:	d8002015 	stw	zero,128(sp)
1800dbe0:	da002d17 	ldw	r8,180(sp)
1800dbe4:	003caf06 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800dbe8:	013fffc4 	movi	r4,-1
1800dbec:	003df206 	br	1800d3b8 <__alt_data_end+0xf800d3b8>
1800dbf0:	dd002017 	ldw	r20,128(sp)
1800dbf4:	00800184 	movi	r2,6
1800dbf8:	1500012e 	bgeu	r2,r20,1800dc00 <___svfiprintf_internal_r+0x11ec>
1800dbfc:	1029883a 	mov	r20,r2
1800dc00:	a025883a 	mov	r18,r20
1800dc04:	a0004116 	blt	r20,zero,1800dd0c <___svfiprintf_internal_r+0x12f8>
1800dc08:	04460074 	movhi	r17,6145
1800dc0c:	ddc02415 	stw	r23,144(sp)
1800dc10:	8c58f804 	addi	r17,r17,25568
1800dc14:	003ce806 	br	1800cfb8 <__alt_data_end+0xf800cfb8>
1800dc18:	04001004 	movi	r16,64
1800dc1c:	800b883a 	mov	r5,r16
1800dc20:	800a28c0 	call	1800a28c <_malloc_r>
1800dc24:	d8c02317 	ldw	r3,140(sp)
1800dc28:	18800015 	stw	r2,0(r3)
1800dc2c:	18800415 	stw	r2,16(r3)
1800dc30:	10004d26 	beq	r2,zero,1800dd68 <___svfiprintf_internal_r+0x1354>
1800dc34:	d9402317 	ldw	r5,140(sp)
1800dc38:	2c000515 	stw	r16,20(r5)
1800dc3c:	003b8906 	br	1800ca64 <__alt_data_end+0xf800ca64>
1800dc40:	d9002417 	ldw	r4,144(sp)
1800dc44:	d9402617 	ldw	r5,152(sp)
1800dc48:	20800017 	ldw	r2,0(r4)
1800dc4c:	21000104 	addi	r4,r4,4
1800dc50:	d9002415 	stw	r4,144(sp)
1800dc54:	11400015 	stw	r5,0(r2)
1800dc58:	003b9006 	br	1800ca9c <__alt_data_end+0xf800ca9c>
1800dc5c:	8080004c 	andi	r2,r16,1
1800dc60:	002b883a 	mov	r21,zero
1800dc64:	10000526 	beq	r2,zero,1800dc7c <___svfiprintf_internal_r+0x1268>
1800dc68:	00800c04 	movi	r2,48
1800dc6c:	d88019c5 	stb	r2,103(sp)
1800dc70:	dd002c17 	ldw	r20,176(sp)
1800dc74:	dc4019c4 	addi	r17,sp,103
1800dc78:	003c8a06 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800dc7c:	0029883a 	mov	r20,zero
1800dc80:	dc401a04 	addi	r17,sp,104
1800dc84:	003c8706 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800dc88:	01460074 	movhi	r5,6145
1800dc8c:	29596004 	addi	r5,r5,25984
1800dc90:	d9402815 	stw	r5,160(sp)
1800dc94:	003cff06 	br	1800d094 <__alt_data_end+0xf800d094>
1800dc98:	00bfffc4 	movi	r2,-1
1800dc9c:	003ea206 	br	1800d728 <__alt_data_end+0xf800d728>
1800dca0:	00800044 	movi	r2,1
1800dca4:	10803fcc 	andi	r2,r2,255
1800dca8:	00c00044 	movi	r3,1
1800dcac:	10fd4526 	beq	r2,r3,1800d1c4 <__alt_data_end+0xf800d1c4>
1800dcb0:	00c00084 	movi	r3,2
1800dcb4:	10fc5226 	beq	r2,r3,1800ce00 <__alt_data_end+0xf800ce00>
1800dcb8:	003c9c06 	br	1800cf2c <__alt_data_end+0xf800cf2c>
1800dcbc:	1021883a 	mov	r16,r2
1800dcc0:	002b883a 	mov	r21,zero
1800dcc4:	00800084 	movi	r2,2
1800dcc8:	003ff606 	br	1800dca4 <__alt_data_end+0xf800dca4>
1800dccc:	01060074 	movhi	r4,6145
1800dcd0:	21196004 	addi	r4,r4,25984
1800dcd4:	d9002815 	stw	r4,160(sp)
1800dcd8:	003e7206 	br	1800d6a4 <__alt_data_end+0xf800d6a4>
1800dcdc:	01460074 	movhi	r5,6145
1800dce0:	29595c04 	addi	r5,r5,25968
1800dce4:	d9402115 	stw	r5,132(sp)
1800dce8:	003ec506 	br	1800d800 <__alt_data_end+0xf800d800>
1800dcec:	e027883a 	mov	r19,fp
1800dcf0:	d8002015 	stw	zero,128(sp)
1800dcf4:	003b9406 	br	1800cb48 <__alt_data_end+0xf800cb48>
1800dcf8:	dd002017 	ldw	r20,128(sp)
1800dcfc:	dd401d83 	ldbu	r21,118(sp)
1800dd00:	ddc02415 	stw	r23,144(sp)
1800dd04:	d8002015 	stw	zero,128(sp)
1800dd08:	003c6606 	br	1800cea4 <__alt_data_end+0xf800cea4>
1800dd0c:	0025883a 	mov	r18,zero
1800dd10:	003fbd06 	br	1800dc08 <__alt_data_end+0xf800dc08>
1800dd14:	d9402417 	ldw	r5,144(sp)
1800dd18:	d8c02417 	ldw	r3,144(sp)
1800dd1c:	29400017 	ldw	r5,0(r5)
1800dd20:	19000104 	addi	r4,r3,4
1800dd24:	d9002415 	stw	r4,144(sp)
1800dd28:	d9402015 	stw	r5,128(sp)
1800dd2c:	98c00043 	ldbu	r3,1(r19)
1800dd30:	e027883a 	mov	r19,fp
1800dd34:	283f5b0e 	bge	r5,zero,1800daa4 <__alt_data_end+0xf800daa4>
1800dd38:	18c03fcc 	andi	r3,r3,255
1800dd3c:	013fffc4 	movi	r4,-1
1800dd40:	18c0201c 	xori	r3,r3,128
1800dd44:	d9002015 	stw	r4,128(sp)
1800dd48:	18ffe004 	addi	r3,r3,-128
1800dd4c:	003b7d06 	br	1800cb44 <__alt_data_end+0xf800cb44>
1800dd50:	dd401d85 	stb	r21,118(sp)
1800dd54:	003cf306 	br	1800d124 <__alt_data_end+0xf800d124>
1800dd58:	dd401d85 	stb	r21,118(sp)
1800dd5c:	003d4e06 	br	1800d298 <__alt_data_end+0xf800d298>
1800dd60:	dd401d85 	stb	r21,118(sp)
1800dd64:	003c0e06 	br	1800cda0 <__alt_data_end+0xf800cda0>
1800dd68:	d9002717 	ldw	r4,156(sp)
1800dd6c:	00800304 	movi	r2,12
1800dd70:	20800015 	stw	r2,0(r4)
1800dd74:	00bfffc4 	movi	r2,-1
1800dd78:	003e6b06 	br	1800d728 <__alt_data_end+0xf800d728>
1800dd7c:	dd401d85 	stb	r21,118(sp)
1800dd80:	003d0006 	br	1800d184 <__alt_data_end+0xf800d184>
1800dd84:	dd401d85 	stb	r21,118(sp)
1800dd88:	003d7106 	br	1800d350 <__alt_data_end+0xf800d350>
1800dd8c:	dd401d85 	stb	r21,118(sp)
1800dd90:	003c5706 	br	1800cef0 <__alt_data_end+0xf800cef0>
1800dd94:	dd401d85 	stb	r21,118(sp)
1800dd98:	003c2e06 	br	1800ce54 <__alt_data_end+0xf800ce54>
1800dd9c:	dd401d85 	stb	r21,118(sp)
1800dda0:	003d8c06 	br	1800d3d4 <__alt_data_end+0xf800d3d4>
1800dda4:	dd401d85 	stb	r21,118(sp)
1800dda8:	003da706 	br	1800d448 <__alt_data_end+0xf800d448>
1800ddac:	dd401d85 	stb	r21,118(sp)
1800ddb0:	003cc806 	br	1800d0d4 <__alt_data_end+0xf800d0d4>

1800ddb4 <__sprint_r.part.0>:
1800ddb4:	28801917 	ldw	r2,100(r5)
1800ddb8:	defff604 	addi	sp,sp,-40
1800ddbc:	dd400515 	stw	r21,20(sp)
1800ddc0:	dfc00915 	stw	ra,36(sp)
1800ddc4:	df000815 	stw	fp,32(sp)
1800ddc8:	ddc00715 	stw	r23,28(sp)
1800ddcc:	dd800615 	stw	r22,24(sp)
1800ddd0:	dd000415 	stw	r20,16(sp)
1800ddd4:	dcc00315 	stw	r19,12(sp)
1800ddd8:	dc800215 	stw	r18,8(sp)
1800dddc:	dc400115 	stw	r17,4(sp)
1800dde0:	dc000015 	stw	r16,0(sp)
1800dde4:	1088000c 	andi	r2,r2,8192
1800dde8:	302b883a 	mov	r21,r6
1800ddec:	10002e26 	beq	r2,zero,1800dea8 <__sprint_r.part.0+0xf4>
1800ddf0:	30800217 	ldw	r2,8(r6)
1800ddf4:	35800017 	ldw	r22,0(r6)
1800ddf8:	10002926 	beq	r2,zero,1800dea0 <__sprint_r.part.0+0xec>
1800ddfc:	2827883a 	mov	r19,r5
1800de00:	2029883a 	mov	r20,r4
1800de04:	b5c00104 	addi	r23,r22,4
1800de08:	04bfffc4 	movi	r18,-1
1800de0c:	bc400017 	ldw	r17,0(r23)
1800de10:	b4000017 	ldw	r16,0(r22)
1800de14:	0039883a 	mov	fp,zero
1800de18:	8822d0ba 	srli	r17,r17,2
1800de1c:	8800031e 	bne	r17,zero,1800de2c <__sprint_r.part.0+0x78>
1800de20:	00001806 	br	1800de84 <__sprint_r.part.0+0xd0>
1800de24:	84000104 	addi	r16,r16,4
1800de28:	8f001526 	beq	r17,fp,1800de80 <__sprint_r.part.0+0xcc>
1800de2c:	81400017 	ldw	r5,0(r16)
1800de30:	980d883a 	mov	r6,r19
1800de34:	a009883a 	mov	r4,r20
1800de38:	800f8a40 	call	1800f8a4 <_fputwc_r>
1800de3c:	e7000044 	addi	fp,fp,1
1800de40:	14bff81e 	bne	r2,r18,1800de24 <__alt_data_end+0xf800de24>
1800de44:	9005883a 	mov	r2,r18
1800de48:	a8000215 	stw	zero,8(r21)
1800de4c:	a8000115 	stw	zero,4(r21)
1800de50:	dfc00917 	ldw	ra,36(sp)
1800de54:	df000817 	ldw	fp,32(sp)
1800de58:	ddc00717 	ldw	r23,28(sp)
1800de5c:	dd800617 	ldw	r22,24(sp)
1800de60:	dd400517 	ldw	r21,20(sp)
1800de64:	dd000417 	ldw	r20,16(sp)
1800de68:	dcc00317 	ldw	r19,12(sp)
1800de6c:	dc800217 	ldw	r18,8(sp)
1800de70:	dc400117 	ldw	r17,4(sp)
1800de74:	dc000017 	ldw	r16,0(sp)
1800de78:	dec00a04 	addi	sp,sp,40
1800de7c:	f800283a 	ret
1800de80:	a8800217 	ldw	r2,8(r21)
1800de84:	8c63883a 	add	r17,r17,r17
1800de88:	8c63883a 	add	r17,r17,r17
1800de8c:	1445c83a 	sub	r2,r2,r17
1800de90:	a8800215 	stw	r2,8(r21)
1800de94:	b5800204 	addi	r22,r22,8
1800de98:	bdc00204 	addi	r23,r23,8
1800de9c:	103fdb1e 	bne	r2,zero,1800de0c <__alt_data_end+0xf800de0c>
1800dea0:	0005883a 	mov	r2,zero
1800dea4:	003fe806 	br	1800de48 <__alt_data_end+0xf800de48>
1800dea8:	80099a40 	call	180099a4 <__sfvwrite_r>
1800deac:	003fe606 	br	1800de48 <__alt_data_end+0xf800de48>

1800deb0 <__sprint_r>:
1800deb0:	30c00217 	ldw	r3,8(r6)
1800deb4:	18000126 	beq	r3,zero,1800debc <__sprint_r+0xc>
1800deb8:	800ddb41 	jmpi	1800ddb4 <__sprint_r.part.0>
1800debc:	30000115 	stw	zero,4(r6)
1800dec0:	0005883a 	mov	r2,zero
1800dec4:	f800283a 	ret

1800dec8 <___vfiprintf_internal_r>:
1800dec8:	deffca04 	addi	sp,sp,-216
1800decc:	dd403115 	stw	r21,196(sp)
1800ded0:	dfc03515 	stw	ra,212(sp)
1800ded4:	df003415 	stw	fp,208(sp)
1800ded8:	ddc03315 	stw	r23,204(sp)
1800dedc:	dd803215 	stw	r22,200(sp)
1800dee0:	dd003015 	stw	r20,192(sp)
1800dee4:	dcc02f15 	stw	r19,188(sp)
1800dee8:	dc802e15 	stw	r18,184(sp)
1800deec:	dc402d15 	stw	r17,180(sp)
1800def0:	dc002c15 	stw	r16,176(sp)
1800def4:	d9002115 	stw	r4,132(sp)
1800def8:	d9402015 	stw	r5,128(sp)
1800defc:	d9c02215 	stw	r7,136(sp)
1800df00:	302b883a 	mov	r21,r6
1800df04:	20000226 	beq	r4,zero,1800df10 <___vfiprintf_internal_r+0x48>
1800df08:	20800e17 	ldw	r2,56(r4)
1800df0c:	1000cf26 	beq	r2,zero,1800e24c <___vfiprintf_internal_r+0x384>
1800df10:	d8c02017 	ldw	r3,128(sp)
1800df14:	1880030b 	ldhu	r2,12(r3)
1800df18:	10c8000c 	andi	r3,r2,8192
1800df1c:	1800071e 	bne	r3,zero,1800df3c <___vfiprintf_internal_r+0x74>
1800df20:	d9402017 	ldw	r5,128(sp)
1800df24:	00f7ffc4 	movi	r3,-8193
1800df28:	10880014 	ori	r2,r2,8192
1800df2c:	29001917 	ldw	r4,100(r5)
1800df30:	2880030d 	sth	r2,12(r5)
1800df34:	20c6703a 	and	r3,r4,r3
1800df38:	28c01915 	stw	r3,100(r5)
1800df3c:	10c0020c 	andi	r3,r2,8
1800df40:	1800a526 	beq	r3,zero,1800e1d8 <___vfiprintf_internal_r+0x310>
1800df44:	d9002017 	ldw	r4,128(sp)
1800df48:	20c00417 	ldw	r3,16(r4)
1800df4c:	1800a226 	beq	r3,zero,1800e1d8 <___vfiprintf_internal_r+0x310>
1800df50:	1080068c 	andi	r2,r2,26
1800df54:	00c00284 	movi	r3,10
1800df58:	10c0a826 	beq	r2,r3,1800e1fc <___vfiprintf_internal_r+0x334>
1800df5c:	d9001a04 	addi	r4,sp,104
1800df60:	d94019c4 	addi	r5,sp,103
1800df64:	04860074 	movhi	r18,6145
1800df68:	2145c83a 	sub	r2,r4,r5
1800df6c:	94996404 	addi	r18,r18,26000
1800df70:	d9001e15 	stw	r4,120(sp)
1800df74:	d9401f15 	stw	r5,124(sp)
1800df78:	dec01a15 	stw	sp,104(sp)
1800df7c:	d8001c15 	stw	zero,112(sp)
1800df80:	d8001b15 	stw	zero,108(sp)
1800df84:	d811883a 	mov	r8,sp
1800df88:	d8002615 	stw	zero,152(sp)
1800df8c:	d8002415 	stw	zero,144(sp)
1800df90:	d8802815 	stw	r2,160(sp)
1800df94:	a82d883a 	mov	r22,r21
1800df98:	b0800007 	ldb	r2,0(r22)
1800df9c:	10040d26 	beq	r2,zero,1800efd4 <___vfiprintf_internal_r+0x110c>
1800dfa0:	00c00944 	movi	r3,37
1800dfa4:	b029883a 	mov	r20,r22
1800dfa8:	10c0021e 	bne	r2,r3,1800dfb4 <___vfiprintf_internal_r+0xec>
1800dfac:	00001606 	br	1800e008 <___vfiprintf_internal_r+0x140>
1800dfb0:	10c00326 	beq	r2,r3,1800dfc0 <___vfiprintf_internal_r+0xf8>
1800dfb4:	a5000044 	addi	r20,r20,1
1800dfb8:	a0800007 	ldb	r2,0(r20)
1800dfbc:	103ffc1e 	bne	r2,zero,1800dfb0 <__alt_data_end+0xf800dfb0>
1800dfc0:	a5a1c83a 	sub	r16,r20,r22
1800dfc4:	80001026 	beq	r16,zero,1800e008 <___vfiprintf_internal_r+0x140>
1800dfc8:	d8c01c17 	ldw	r3,112(sp)
1800dfcc:	d8801b17 	ldw	r2,108(sp)
1800dfd0:	45800015 	stw	r22,0(r8)
1800dfd4:	80c7883a 	add	r3,r16,r3
1800dfd8:	10800044 	addi	r2,r2,1
1800dfdc:	44000115 	stw	r16,4(r8)
1800dfe0:	d8c01c15 	stw	r3,112(sp)
1800dfe4:	d8801b15 	stw	r2,108(sp)
1800dfe8:	010001c4 	movi	r4,7
1800dfec:	2080750e 	bge	r4,r2,1800e1c4 <___vfiprintf_internal_r+0x2fc>
1800dff0:	1803951e 	bne	r3,zero,1800ee48 <___vfiprintf_internal_r+0xf80>
1800dff4:	d8c02417 	ldw	r3,144(sp)
1800dff8:	d8001b15 	stw	zero,108(sp)
1800dffc:	d811883a 	mov	r8,sp
1800e000:	1c07883a 	add	r3,r3,r16
1800e004:	d8c02415 	stw	r3,144(sp)
1800e008:	a0800007 	ldb	r2,0(r20)
1800e00c:	1002e026 	beq	r2,zero,1800eb90 <___vfiprintf_internal_r+0xcc8>
1800e010:	a5800044 	addi	r22,r20,1
1800e014:	a0c00047 	ldb	r3,1(r20)
1800e018:	d8001d85 	stb	zero,118(sp)
1800e01c:	0027883a 	mov	r19,zero
1800e020:	d8002305 	stb	zero,140(sp)
1800e024:	043fffc4 	movi	r16,-1
1800e028:	d8002515 	stw	zero,148(sp)
1800e02c:	0023883a 	mov	r17,zero
1800e030:	05001604 	movi	r20,88
1800e034:	05400244 	movi	r21,9
1800e038:	402f883a 	mov	r23,r8
1800e03c:	b5800044 	addi	r22,r22,1
1800e040:	18bff804 	addi	r2,r3,-32
1800e044:	a0827736 	bltu	r20,r2,1800ea24 <___vfiprintf_internal_r+0xb5c>
1800e048:	100490ba 	slli	r2,r2,2
1800e04c:	01060074 	movhi	r4,6145
1800e050:	21381804 	addi	r4,r4,-8096
1800e054:	1105883a 	add	r2,r2,r4
1800e058:	10800017 	ldw	r2,0(r2)
1800e05c:	1000683a 	jmp	r2
1800e060:	1800e724 	muli	zero,r3,924
1800e064:	1800ea24 	muli	zero,r3,936
1800e068:	1800ea24 	muli	zero,r3,936
1800e06c:	1800e740 	call	11800e74 <__alt_mem_onchip_memory2_0+0x11800e74>
1800e070:	1800ea24 	muli	zero,r3,936
1800e074:	1800ea24 	muli	zero,r3,936
1800e078:	1800ea24 	muli	zero,r3,936
1800e07c:	1800ea24 	muli	zero,r3,936
1800e080:	1800ea24 	muli	zero,r3,936
1800e084:	1800ea24 	muli	zero,r3,936
1800e088:	1800e948 	cmpgei	zero,r3,933
1800e08c:	1800e96c 	andhi	zero,r3,933
1800e090:	1800ea24 	muli	zero,r3,936
1800e094:	1800e264 	muli	zero,r3,905
1800e098:	1800e980 	call	11800e98 <__alt_mem_onchip_memory2_0+0x11800e98>
1800e09c:	1800ea24 	muli	zero,r3,936
1800e0a0:	1800e74c 	andi	zero,r3,925
1800e0a4:	1800e758 	cmpnei	zero,r3,925
1800e0a8:	1800e758 	cmpnei	zero,r3,925
1800e0ac:	1800e758 	cmpnei	zero,r3,925
1800e0b0:	1800e758 	cmpnei	zero,r3,925
1800e0b4:	1800e758 	cmpnei	zero,r3,925
1800e0b8:	1800e758 	cmpnei	zero,r3,925
1800e0bc:	1800e758 	cmpnei	zero,r3,925
1800e0c0:	1800e758 	cmpnei	zero,r3,925
1800e0c4:	1800e758 	cmpnei	zero,r3,925
1800e0c8:	1800ea24 	muli	zero,r3,936
1800e0cc:	1800ea24 	muli	zero,r3,936
1800e0d0:	1800ea24 	muli	zero,r3,936
1800e0d4:	1800ea24 	muli	zero,r3,936
1800e0d8:	1800ea24 	muli	zero,r3,936
1800e0dc:	1800ea24 	muli	zero,r3,936
1800e0e0:	1800ea24 	muli	zero,r3,936
1800e0e4:	1800ea24 	muli	zero,r3,936
1800e0e8:	1800ea24 	muli	zero,r3,936
1800e0ec:	1800ea24 	muli	zero,r3,936
1800e0f0:	1800e798 	cmpnei	zero,r3,926
1800e0f4:	1800ea24 	muli	zero,r3,936
1800e0f8:	1800ea24 	muli	zero,r3,936
1800e0fc:	1800ea24 	muli	zero,r3,936
1800e100:	1800ea24 	muli	zero,r3,936
1800e104:	1800ea24 	muli	zero,r3,936
1800e108:	1800ea24 	muli	zero,r3,936
1800e10c:	1800ea24 	muli	zero,r3,936
1800e110:	1800ea24 	muli	zero,r3,936
1800e114:	1800ea24 	muli	zero,r3,936
1800e118:	1800ea24 	muli	zero,r3,936
1800e11c:	1800e7d4 	ori	zero,r3,927
1800e120:	1800ea24 	muli	zero,r3,936
1800e124:	1800ea24 	muli	zero,r3,936
1800e128:	1800ea24 	muli	zero,r3,936
1800e12c:	1800ea24 	muli	zero,r3,936
1800e130:	1800ea24 	muli	zero,r3,936
1800e134:	1800e830 	cmpltui	zero,r3,928
1800e138:	1800ea24 	muli	zero,r3,936
1800e13c:	1800ea24 	muli	zero,r3,936
1800e140:	1800e8a4 	muli	zero,r3,930
1800e144:	1800ea24 	muli	zero,r3,936
1800e148:	1800ea24 	muli	zero,r3,936
1800e14c:	1800ea24 	muli	zero,r3,936
1800e150:	1800ea24 	muli	zero,r3,936
1800e154:	1800ea24 	muli	zero,r3,936
1800e158:	1800ea24 	muli	zero,r3,936
1800e15c:	1800ea24 	muli	zero,r3,936
1800e160:	1800ea24 	muli	zero,r3,936
1800e164:	1800ea24 	muli	zero,r3,936
1800e168:	1800ea24 	muli	zero,r3,936
1800e16c:	1800e64c 	andi	zero,r3,921
1800e170:	1800e67c 	xorhi	zero,r3,921
1800e174:	1800ea24 	muli	zero,r3,936
1800e178:	1800ea24 	muli	zero,r3,936
1800e17c:	1800ea24 	muli	zero,r3,936
1800e180:	1800e9cc 	andi	zero,r3,935
1800e184:	1800e67c 	xorhi	zero,r3,921
1800e188:	1800ea24 	muli	zero,r3,936
1800e18c:	1800ea24 	muli	zero,r3,936
1800e190:	1800e524 	muli	zero,r3,916
1800e194:	1800ea24 	muli	zero,r3,936
1800e198:	1800e538 	rdprs	zero,r3,916
1800e19c:	1800e570 	cmpltui	zero,r3,917
1800e1a0:	1800e270 	cmpltui	zero,r3,905
1800e1a4:	1800e518 	cmpnei	zero,r3,916
1800e1a8:	1800ea24 	muli	zero,r3,936
1800e1ac:	1800e8e4 	muli	zero,r3,931
1800e1b0:	1800ea24 	muli	zero,r3,936
1800e1b4:	1800e930 	cmpltui	zero,r3,932
1800e1b8:	1800ea24 	muli	zero,r3,936
1800e1bc:	1800ea24 	muli	zero,r3,936
1800e1c0:	1800e5f4 	orhi	zero,r3,919
1800e1c4:	42000204 	addi	r8,r8,8
1800e1c8:	d8c02417 	ldw	r3,144(sp)
1800e1cc:	1c07883a 	add	r3,r3,r16
1800e1d0:	d8c02415 	stw	r3,144(sp)
1800e1d4:	003f8c06 	br	1800e008 <__alt_data_end+0xf800e008>
1800e1d8:	d9402017 	ldw	r5,128(sp)
1800e1dc:	d9002117 	ldw	r4,132(sp)
1800e1e0:	80075140 	call	18007514 <__swsetup_r>
1800e1e4:	1003c11e 	bne	r2,zero,1800f0ec <___vfiprintf_internal_r+0x1224>
1800e1e8:	d9402017 	ldw	r5,128(sp)
1800e1ec:	00c00284 	movi	r3,10
1800e1f0:	2880030b 	ldhu	r2,12(r5)
1800e1f4:	1080068c 	andi	r2,r2,26
1800e1f8:	10ff581e 	bne	r2,r3,1800df5c <__alt_data_end+0xf800df5c>
1800e1fc:	d8c02017 	ldw	r3,128(sp)
1800e200:	1880038f 	ldh	r2,14(r3)
1800e204:	103f5516 	blt	r2,zero,1800df5c <__alt_data_end+0xf800df5c>
1800e208:	d9c02217 	ldw	r7,136(sp)
1800e20c:	d9002117 	ldw	r4,132(sp)
1800e210:	a80d883a 	mov	r6,r21
1800e214:	180b883a 	mov	r5,r3
1800e218:	800f3f00 	call	1800f3f0 <__sbprintf>
1800e21c:	dfc03517 	ldw	ra,212(sp)
1800e220:	df003417 	ldw	fp,208(sp)
1800e224:	ddc03317 	ldw	r23,204(sp)
1800e228:	dd803217 	ldw	r22,200(sp)
1800e22c:	dd403117 	ldw	r21,196(sp)
1800e230:	dd003017 	ldw	r20,192(sp)
1800e234:	dcc02f17 	ldw	r19,188(sp)
1800e238:	dc802e17 	ldw	r18,184(sp)
1800e23c:	dc402d17 	ldw	r17,180(sp)
1800e240:	dc002c17 	ldw	r16,176(sp)
1800e244:	dec03604 	addi	sp,sp,216
1800e248:	f800283a 	ret
1800e24c:	80095200 	call	18009520 <__sinit>
1800e250:	003f2f06 	br	1800df10 <__alt_data_end+0xf800df10>
1800e254:	d8c02517 	ldw	r3,148(sp)
1800e258:	d8802215 	stw	r2,136(sp)
1800e25c:	00c7c83a 	sub	r3,zero,r3
1800e260:	d8c02515 	stw	r3,148(sp)
1800e264:	8c400114 	ori	r17,r17,4
1800e268:	b0c00007 	ldb	r3,0(r22)
1800e26c:	003f7306 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e270:	00800c04 	movi	r2,48
1800e274:	d9402217 	ldw	r5,136(sp)
1800e278:	d8801d05 	stb	r2,116(sp)
1800e27c:	00801e04 	movi	r2,120
1800e280:	d8801d45 	stb	r2,117(sp)
1800e284:	d8001d85 	stb	zero,118(sp)
1800e288:	b811883a 	mov	r8,r23
1800e28c:	28c00104 	addi	r3,r5,4
1800e290:	2cc00017 	ldw	r19,0(r5)
1800e294:	0029883a 	mov	r20,zero
1800e298:	88800094 	ori	r2,r17,2
1800e29c:	80032516 	blt	r16,zero,1800ef34 <___vfiprintf_internal_r+0x106c>
1800e2a0:	00bfdfc4 	movi	r2,-129
1800e2a4:	88a2703a 	and	r17,r17,r2
1800e2a8:	d8c02215 	stw	r3,136(sp)
1800e2ac:	8c400094 	ori	r17,r17,2
1800e2b0:	98032a1e 	bne	r19,zero,1800ef5c <___vfiprintf_internal_r+0x1094>
1800e2b4:	00860074 	movhi	r2,6145
1800e2b8:	1098f304 	addi	r2,r2,25548
1800e2bc:	d8802615 	stw	r2,152(sp)
1800e2c0:	002b883a 	mov	r21,zero
1800e2c4:	8001741e 	bne	r16,zero,1800e898 <___vfiprintf_internal_r+0x9d0>
1800e2c8:	0021883a 	mov	r16,zero
1800e2cc:	0029883a 	mov	r20,zero
1800e2d0:	ddc01a04 	addi	r23,sp,104
1800e2d4:	8027883a 	mov	r19,r16
1800e2d8:	8500010e 	bge	r16,r20,1800e2e0 <___vfiprintf_internal_r+0x418>
1800e2dc:	a027883a 	mov	r19,r20
1800e2e0:	ad403fcc 	andi	r21,r21,255
1800e2e4:	ad40201c 	xori	r21,r21,128
1800e2e8:	ad7fe004 	addi	r21,r21,-128
1800e2ec:	a8000126 	beq	r21,zero,1800e2f4 <___vfiprintf_internal_r+0x42c>
1800e2f0:	9cc00044 	addi	r19,r19,1
1800e2f4:	89c0008c 	andi	r7,r17,2
1800e2f8:	38000126 	beq	r7,zero,1800e300 <___vfiprintf_internal_r+0x438>
1800e2fc:	9cc00084 	addi	r19,r19,2
1800e300:	88c0210c 	andi	r3,r17,132
1800e304:	1801dd1e 	bne	r3,zero,1800ea7c <___vfiprintf_internal_r+0xbb4>
1800e308:	d9402517 	ldw	r5,148(sp)
1800e30c:	2cebc83a 	sub	r21,r5,r19
1800e310:	0541da0e 	bge	zero,r21,1800ea7c <___vfiprintf_internal_r+0xbb4>
1800e314:	07000404 	movi	fp,16
1800e318:	d8801c17 	ldw	r2,112(sp)
1800e31c:	e543be0e 	bge	fp,r21,1800f218 <___vfiprintf_internal_r+0x1350>
1800e320:	01460074 	movhi	r5,6145
1800e324:	29596804 	addi	r5,r5,26016
1800e328:	dc002715 	stw	r16,156(sp)
1800e32c:	d9801b17 	ldw	r6,108(sp)
1800e330:	a821883a 	mov	r16,r21
1800e334:	d9402315 	stw	r5,140(sp)
1800e338:	028001c4 	movi	r10,7
1800e33c:	d9c02915 	stw	r7,164(sp)
1800e340:	182b883a 	mov	r21,r3
1800e344:	00000506 	br	1800e35c <___vfiprintf_internal_r+0x494>
1800e348:	31000084 	addi	r4,r6,2
1800e34c:	42000204 	addi	r8,r8,8
1800e350:	180d883a 	mov	r6,r3
1800e354:	843ffc04 	addi	r16,r16,-16
1800e358:	e4000f0e 	bge	fp,r16,1800e398 <___vfiprintf_internal_r+0x4d0>
1800e35c:	01060074 	movhi	r4,6145
1800e360:	10800404 	addi	r2,r2,16
1800e364:	30c00044 	addi	r3,r6,1
1800e368:	21196804 	addi	r4,r4,26016
1800e36c:	41000015 	stw	r4,0(r8)
1800e370:	47000115 	stw	fp,4(r8)
1800e374:	d8801c15 	stw	r2,112(sp)
1800e378:	d8c01b15 	stw	r3,108(sp)
1800e37c:	50fff20e 	bge	r10,r3,1800e348 <__alt_data_end+0xf800e348>
1800e380:	1001b21e 	bne	r2,zero,1800ea4c <___vfiprintf_internal_r+0xb84>
1800e384:	843ffc04 	addi	r16,r16,-16
1800e388:	000d883a 	mov	r6,zero
1800e38c:	01000044 	movi	r4,1
1800e390:	d811883a 	mov	r8,sp
1800e394:	e43ff116 	blt	fp,r16,1800e35c <__alt_data_end+0xf800e35c>
1800e398:	a807883a 	mov	r3,r21
1800e39c:	d9c02917 	ldw	r7,164(sp)
1800e3a0:	802b883a 	mov	r21,r16
1800e3a4:	dc002717 	ldw	r16,156(sp)
1800e3a8:	d9402317 	ldw	r5,140(sp)
1800e3ac:	a885883a 	add	r2,r21,r2
1800e3b0:	45400115 	stw	r21,4(r8)
1800e3b4:	41400015 	stw	r5,0(r8)
1800e3b8:	d8801c15 	stw	r2,112(sp)
1800e3bc:	d9001b15 	stw	r4,108(sp)
1800e3c0:	014001c4 	movi	r5,7
1800e3c4:	29026216 	blt	r5,r4,1800ed50 <___vfiprintf_internal_r+0xe88>
1800e3c8:	d9801d87 	ldb	r6,118(sp)
1800e3cc:	42000204 	addi	r8,r8,8
1800e3d0:	21400044 	addi	r5,r4,1
1800e3d4:	3001ae1e 	bne	r6,zero,1800ea90 <___vfiprintf_internal_r+0xbc8>
1800e3d8:	3801bb26 	beq	r7,zero,1800eac8 <___vfiprintf_internal_r+0xc00>
1800e3dc:	d9001d04 	addi	r4,sp,116
1800e3e0:	10800084 	addi	r2,r2,2
1800e3e4:	41000015 	stw	r4,0(r8)
1800e3e8:	01000084 	movi	r4,2
1800e3ec:	41000115 	stw	r4,4(r8)
1800e3f0:	d8801c15 	stw	r2,112(sp)
1800e3f4:	d9401b15 	stw	r5,108(sp)
1800e3f8:	010001c4 	movi	r4,7
1800e3fc:	2142680e 	bge	r4,r5,1800eda0 <___vfiprintf_internal_r+0xed8>
1800e400:	1002b11e 	bne	r2,zero,1800eec8 <___vfiprintf_internal_r+0x1000>
1800e404:	01802004 	movi	r6,128
1800e408:	01400044 	movi	r5,1
1800e40c:	0009883a 	mov	r4,zero
1800e410:	d811883a 	mov	r8,sp
1800e414:	1981ae1e 	bne	r3,r6,1800ead0 <___vfiprintf_internal_r+0xc08>
1800e418:	d8c02517 	ldw	r3,148(sp)
1800e41c:	1cf9c83a 	sub	fp,r3,r19
1800e420:	0701ab0e 	bge	zero,fp,1800ead0 <___vfiprintf_internal_r+0xc08>
1800e424:	05400404 	movi	r21,16
1800e428:	af03a90e 	bge	r21,fp,1800f2d0 <___vfiprintf_internal_r+0x1408>
1800e42c:	01460074 	movhi	r5,6145
1800e430:	29596404 	addi	r5,r5,26000
1800e434:	d9402315 	stw	r5,140(sp)
1800e438:	01c001c4 	movi	r7,7
1800e43c:	00000506 	br	1800e454 <___vfiprintf_internal_r+0x58c>
1800e440:	21800084 	addi	r6,r4,2
1800e444:	42000204 	addi	r8,r8,8
1800e448:	1809883a 	mov	r4,r3
1800e44c:	e73ffc04 	addi	fp,fp,-16
1800e450:	af000d0e 	bge	r21,fp,1800e488 <___vfiprintf_internal_r+0x5c0>
1800e454:	10800404 	addi	r2,r2,16
1800e458:	20c00044 	addi	r3,r4,1
1800e45c:	44800015 	stw	r18,0(r8)
1800e460:	45400115 	stw	r21,4(r8)
1800e464:	d8801c15 	stw	r2,112(sp)
1800e468:	d8c01b15 	stw	r3,108(sp)
1800e46c:	38fff40e 	bge	r7,r3,1800e440 <__alt_data_end+0xf800e440>
1800e470:	10022b1e 	bne	r2,zero,1800ed20 <___vfiprintf_internal_r+0xe58>
1800e474:	e73ffc04 	addi	fp,fp,-16
1800e478:	01800044 	movi	r6,1
1800e47c:	0009883a 	mov	r4,zero
1800e480:	d811883a 	mov	r8,sp
1800e484:	af3ff316 	blt	r21,fp,1800e454 <__alt_data_end+0xf800e454>
1800e488:	d8c02317 	ldw	r3,140(sp)
1800e48c:	1705883a 	add	r2,r2,fp
1800e490:	47000115 	stw	fp,4(r8)
1800e494:	40c00015 	stw	r3,0(r8)
1800e498:	d8801c15 	stw	r2,112(sp)
1800e49c:	d9801b15 	stw	r6,108(sp)
1800e4a0:	00c001c4 	movi	r3,7
1800e4a4:	19829416 	blt	r3,r6,1800eef8 <___vfiprintf_internal_r+0x1030>
1800e4a8:	8521c83a 	sub	r16,r16,r20
1800e4ac:	42000204 	addi	r8,r8,8
1800e4b0:	31400044 	addi	r5,r6,1
1800e4b4:	3009883a 	mov	r4,r6
1800e4b8:	04018716 	blt	zero,r16,1800ead8 <___vfiprintf_internal_r+0xc10>
1800e4bc:	a085883a 	add	r2,r20,r2
1800e4c0:	45c00015 	stw	r23,0(r8)
1800e4c4:	45000115 	stw	r20,4(r8)
1800e4c8:	d8801c15 	stw	r2,112(sp)
1800e4cc:	d9401b15 	stw	r5,108(sp)
1800e4d0:	00c001c4 	movi	r3,7
1800e4d4:	1941c20e 	bge	r3,r5,1800ebe0 <___vfiprintf_internal_r+0xd18>
1800e4d8:	1002531e 	bne	r2,zero,1800ee28 <___vfiprintf_internal_r+0xf60>
1800e4dc:	d8001b15 	stw	zero,108(sp)
1800e4e0:	8c40010c 	andi	r17,r17,4
1800e4e4:	88023226 	beq	r17,zero,1800edb0 <___vfiprintf_internal_r+0xee8>
1800e4e8:	d9002517 	ldw	r4,148(sp)
1800e4ec:	24e3c83a 	sub	r17,r4,r19
1800e4f0:	04432916 	blt	zero,r17,1800f198 <___vfiprintf_internal_r+0x12d0>
1800e4f4:	d8802517 	ldw	r2,148(sp)
1800e4f8:	14c0010e 	bge	r2,r19,1800e500 <___vfiprintf_internal_r+0x638>
1800e4fc:	9805883a 	mov	r2,r19
1800e500:	d8c02417 	ldw	r3,144(sp)
1800e504:	1887883a 	add	r3,r3,r2
1800e508:	d8c02415 	stw	r3,144(sp)
1800e50c:	d8001b15 	stw	zero,108(sp)
1800e510:	d811883a 	mov	r8,sp
1800e514:	003ea006 	br	1800df98 <__alt_data_end+0xf800df98>
1800e518:	8c400814 	ori	r17,r17,32
1800e51c:	b0c00007 	ldb	r3,0(r22)
1800e520:	003ec606 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e524:	b0c00007 	ldb	r3,0(r22)
1800e528:	00801b04 	movi	r2,108
1800e52c:	18832026 	beq	r3,r2,1800f1b0 <___vfiprintf_internal_r+0x12e8>
1800e530:	8c400414 	ori	r17,r17,16
1800e534:	003ec106 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e538:	9cc03fcc 	andi	r19,r19,255
1800e53c:	b811883a 	mov	r8,r23
1800e540:	9803981e 	bne	r19,zero,1800f3a4 <___vfiprintf_internal_r+0x14dc>
1800e544:	8880080c 	andi	r2,r17,32
1800e548:	1002be26 	beq	r2,zero,1800f044 <___vfiprintf_internal_r+0x117c>
1800e54c:	d9002217 	ldw	r4,136(sp)
1800e550:	d9402417 	ldw	r5,144(sp)
1800e554:	20800017 	ldw	r2,0(r4)
1800e558:	2807d7fa 	srai	r3,r5,31
1800e55c:	21000104 	addi	r4,r4,4
1800e560:	d9002215 	stw	r4,136(sp)
1800e564:	11400015 	stw	r5,0(r2)
1800e568:	10c00115 	stw	r3,4(r2)
1800e56c:	003e8a06 	br	1800df98 <__alt_data_end+0xf800df98>
1800e570:	9cc03fcc 	andi	r19,r19,255
1800e574:	b811883a 	mov	r8,r23
1800e578:	9803871e 	bne	r19,zero,1800f398 <___vfiprintf_internal_r+0x14d0>
1800e57c:	8880080c 	andi	r2,r17,32
1800e580:	10009a26 	beq	r2,zero,1800e7ec <___vfiprintf_internal_r+0x924>
1800e584:	d9002217 	ldw	r4,136(sp)
1800e588:	d8001d85 	stb	zero,118(sp)
1800e58c:	20800204 	addi	r2,r4,8
1800e590:	24c00017 	ldw	r19,0(r4)
1800e594:	25000117 	ldw	r20,4(r4)
1800e598:	8002a416 	blt	r16,zero,1800f02c <___vfiprintf_internal_r+0x1164>
1800e59c:	013fdfc4 	movi	r4,-129
1800e5a0:	9d06b03a 	or	r3,r19,r20
1800e5a4:	d8802215 	stw	r2,136(sp)
1800e5a8:	8922703a 	and	r17,r17,r4
1800e5ac:	18009b26 	beq	r3,zero,1800e81c <___vfiprintf_internal_r+0x954>
1800e5b0:	002b883a 	mov	r21,zero
1800e5b4:	ddc01a04 	addi	r23,sp,104
1800e5b8:	9806d0fa 	srli	r3,r19,3
1800e5bc:	a008977a 	slli	r4,r20,29
1800e5c0:	a028d0fa 	srli	r20,r20,3
1800e5c4:	9cc001cc 	andi	r19,r19,7
1800e5c8:	98800c04 	addi	r2,r19,48
1800e5cc:	bdffffc4 	addi	r23,r23,-1
1800e5d0:	20e6b03a 	or	r19,r4,r3
1800e5d4:	b8800005 	stb	r2,0(r23)
1800e5d8:	9d06b03a 	or	r3,r19,r20
1800e5dc:	183ff61e 	bne	r3,zero,1800e5b8 <__alt_data_end+0xf800e5b8>
1800e5e0:	88c0004c 	andi	r3,r17,1
1800e5e4:	18021f1e 	bne	r3,zero,1800ee64 <___vfiprintf_internal_r+0xf9c>
1800e5e8:	d9401e17 	ldw	r5,120(sp)
1800e5ec:	2de9c83a 	sub	r20,r5,r23
1800e5f0:	003f3806 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800e5f4:	9cc03fcc 	andi	r19,r19,255
1800e5f8:	b811883a 	mov	r8,r23
1800e5fc:	98034f1e 	bne	r19,zero,1800f33c <___vfiprintf_internal_r+0x1474>
1800e600:	00860074 	movhi	r2,6145
1800e604:	1098f304 	addi	r2,r2,25548
1800e608:	d8802615 	stw	r2,152(sp)
1800e60c:	8880080c 	andi	r2,r17,32
1800e610:	1000ac26 	beq	r2,zero,1800e8c4 <___vfiprintf_internal_r+0x9fc>
1800e614:	d9002217 	ldw	r4,136(sp)
1800e618:	24c00017 	ldw	r19,0(r4)
1800e61c:	25000117 	ldw	r20,4(r4)
1800e620:	21000204 	addi	r4,r4,8
1800e624:	d9002215 	stw	r4,136(sp)
1800e628:	8880004c 	andi	r2,r17,1
1800e62c:	1001e726 	beq	r2,zero,1800edcc <___vfiprintf_internal_r+0xf04>
1800e630:	9d04b03a 	or	r2,r19,r20
1800e634:	10025c1e 	bne	r2,zero,1800efa8 <___vfiprintf_internal_r+0x10e0>
1800e638:	d8001d85 	stb	zero,118(sp)
1800e63c:	80024416 	blt	r16,zero,1800ef50 <___vfiprintf_internal_r+0x1088>
1800e640:	00bfdfc4 	movi	r2,-129
1800e644:	88a2703a 	and	r17,r17,r2
1800e648:	003f1d06 	br	1800e2c0 <__alt_data_end+0xf800e2c0>
1800e64c:	d8c02217 	ldw	r3,136(sp)
1800e650:	04c00044 	movi	r19,1
1800e654:	b811883a 	mov	r8,r23
1800e658:	18800017 	ldw	r2,0(r3)
1800e65c:	18c00104 	addi	r3,r3,4
1800e660:	d8001d85 	stb	zero,118(sp)
1800e664:	d8801005 	stb	r2,64(sp)
1800e668:	d8c02215 	stw	r3,136(sp)
1800e66c:	9829883a 	mov	r20,r19
1800e670:	ddc01004 	addi	r23,sp,64
1800e674:	0021883a 	mov	r16,zero
1800e678:	003f1e06 	br	1800e2f4 <__alt_data_end+0xf800e2f4>
1800e67c:	9cc03fcc 	andi	r19,r19,255
1800e680:	b811883a 	mov	r8,r23
1800e684:	9803331e 	bne	r19,zero,1800f354 <___vfiprintf_internal_r+0x148c>
1800e688:	8880080c 	andi	r2,r17,32
1800e68c:	10004826 	beq	r2,zero,1800e7b0 <___vfiprintf_internal_r+0x8e8>
1800e690:	d9002217 	ldw	r4,136(sp)
1800e694:	20800117 	ldw	r2,4(r4)
1800e698:	24c00017 	ldw	r19,0(r4)
1800e69c:	21000204 	addi	r4,r4,8
1800e6a0:	d9002215 	stw	r4,136(sp)
1800e6a4:	1029883a 	mov	r20,r2
1800e6a8:	10024c16 	blt	r2,zero,1800efdc <___vfiprintf_internal_r+0x1114>
1800e6ac:	dd401d83 	ldbu	r21,118(sp)
1800e6b0:	80007116 	blt	r16,zero,1800e878 <___vfiprintf_internal_r+0x9b0>
1800e6b4:	00ffdfc4 	movi	r3,-129
1800e6b8:	9d04b03a 	or	r2,r19,r20
1800e6bc:	88e2703a 	and	r17,r17,r3
1800e6c0:	1000d126 	beq	r2,zero,1800ea08 <___vfiprintf_internal_r+0xb40>
1800e6c4:	a0023526 	beq	r20,zero,1800ef9c <___vfiprintf_internal_r+0x10d4>
1800e6c8:	ddc01a04 	addi	r23,sp,104
1800e6cc:	4039883a 	mov	fp,r8
1800e6d0:	9809883a 	mov	r4,r19
1800e6d4:	a00b883a 	mov	r5,r20
1800e6d8:	01800284 	movi	r6,10
1800e6dc:	000f883a 	mov	r7,zero
1800e6e0:	80105000 	call	18010500 <__umoddi3>
1800e6e4:	10800c04 	addi	r2,r2,48
1800e6e8:	bdffffc4 	addi	r23,r23,-1
1800e6ec:	9809883a 	mov	r4,r19
1800e6f0:	a00b883a 	mov	r5,r20
1800e6f4:	b8800005 	stb	r2,0(r23)
1800e6f8:	01800284 	movi	r6,10
1800e6fc:	000f883a 	mov	r7,zero
1800e700:	800ff040 	call	1800ff04 <__udivdi3>
1800e704:	1027883a 	mov	r19,r2
1800e708:	10c4b03a 	or	r2,r2,r3
1800e70c:	1829883a 	mov	r20,r3
1800e710:	103fef1e 	bne	r2,zero,1800e6d0 <__alt_data_end+0xf800e6d0>
1800e714:	d9001e17 	ldw	r4,120(sp)
1800e718:	e011883a 	mov	r8,fp
1800e71c:	25e9c83a 	sub	r20,r4,r23
1800e720:	003eec06 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800e724:	d8802307 	ldb	r2,140(sp)
1800e728:	1002361e 	bne	r2,zero,1800f004 <___vfiprintf_internal_r+0x113c>
1800e72c:	00c00804 	movi	r3,32
1800e730:	d8c02305 	stb	r3,140(sp)
1800e734:	04c00044 	movi	r19,1
1800e738:	b0c00007 	ldb	r3,0(r22)
1800e73c:	003e3f06 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e740:	8c400054 	ori	r17,r17,1
1800e744:	b0c00007 	ldb	r3,0(r22)
1800e748:	003e3c06 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e74c:	8c402014 	ori	r17,r17,128
1800e750:	b0c00007 	ldb	r3,0(r22)
1800e754:	003e3906 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e758:	dc002715 	stw	r16,156(sp)
1800e75c:	d8002515 	stw	zero,148(sp)
1800e760:	1f3ff404 	addi	fp,r3,-48
1800e764:	0009883a 	mov	r4,zero
1800e768:	b021883a 	mov	r16,r22
1800e76c:	01400284 	movi	r5,10
1800e770:	8002b640 	call	18002b64 <__mulsi3>
1800e774:	80c00007 	ldb	r3,0(r16)
1800e778:	e089883a 	add	r4,fp,r2
1800e77c:	b5800044 	addi	r22,r22,1
1800e780:	1f3ff404 	addi	fp,r3,-48
1800e784:	b021883a 	mov	r16,r22
1800e788:	af3ff82e 	bgeu	r21,fp,1800e76c <__alt_data_end+0xf800e76c>
1800e78c:	d9002515 	stw	r4,148(sp)
1800e790:	dc002717 	ldw	r16,156(sp)
1800e794:	003e2a06 	br	1800e040 <__alt_data_end+0xf800e040>
1800e798:	9cc03fcc 	andi	r19,r19,255
1800e79c:	b811883a 	mov	r8,r23
1800e7a0:	9802e91e 	bne	r19,zero,1800f348 <___vfiprintf_internal_r+0x1480>
1800e7a4:	8c400414 	ori	r17,r17,16
1800e7a8:	8880080c 	andi	r2,r17,32
1800e7ac:	103fb81e 	bne	r2,zero,1800e690 <__alt_data_end+0xf800e690>
1800e7b0:	8880040c 	andi	r2,r17,16
1800e7b4:	10022e26 	beq	r2,zero,1800f070 <___vfiprintf_internal_r+0x11a8>
1800e7b8:	d9402217 	ldw	r5,136(sp)
1800e7bc:	2cc00017 	ldw	r19,0(r5)
1800e7c0:	29400104 	addi	r5,r5,4
1800e7c4:	d9402215 	stw	r5,136(sp)
1800e7c8:	9829d7fa 	srai	r20,r19,31
1800e7cc:	a005883a 	mov	r2,r20
1800e7d0:	003fb506 	br	1800e6a8 <__alt_data_end+0xf800e6a8>
1800e7d4:	9cc03fcc 	andi	r19,r19,255
1800e7d8:	b811883a 	mov	r8,r23
1800e7dc:	9802fa1e 	bne	r19,zero,1800f3c8 <___vfiprintf_internal_r+0x1500>
1800e7e0:	8c400414 	ori	r17,r17,16
1800e7e4:	8880080c 	andi	r2,r17,32
1800e7e8:	103f661e 	bne	r2,zero,1800e584 <__alt_data_end+0xf800e584>
1800e7ec:	8880040c 	andi	r2,r17,16
1800e7f0:	10020626 	beq	r2,zero,1800f00c <___vfiprintf_internal_r+0x1144>
1800e7f4:	d9402217 	ldw	r5,136(sp)
1800e7f8:	d8001d85 	stb	zero,118(sp)
1800e7fc:	0029883a 	mov	r20,zero
1800e800:	28800104 	addi	r2,r5,4
1800e804:	2cc00017 	ldw	r19,0(r5)
1800e808:	80020816 	blt	r16,zero,1800f02c <___vfiprintf_internal_r+0x1164>
1800e80c:	00ffdfc4 	movi	r3,-129
1800e810:	d8802215 	stw	r2,136(sp)
1800e814:	88e2703a 	and	r17,r17,r3
1800e818:	983f651e 	bne	r19,zero,1800e5b0 <__alt_data_end+0xf800e5b0>
1800e81c:	002b883a 	mov	r21,zero
1800e820:	8002cf26 	beq	r16,zero,1800f360 <___vfiprintf_internal_r+0x1498>
1800e824:	0027883a 	mov	r19,zero
1800e828:	0029883a 	mov	r20,zero
1800e82c:	003f6106 	br	1800e5b4 <__alt_data_end+0xf800e5b4>
1800e830:	9cc03fcc 	andi	r19,r19,255
1800e834:	b811883a 	mov	r8,r23
1800e838:	9802e01e 	bne	r19,zero,1800f3bc <___vfiprintf_internal_r+0x14f4>
1800e83c:	8c400414 	ori	r17,r17,16
1800e840:	8880080c 	andi	r2,r17,32
1800e844:	1000641e 	bne	r2,zero,1800e9d8 <___vfiprintf_internal_r+0xb10>
1800e848:	8880040c 	andi	r2,r17,16
1800e84c:	1001c81e 	bne	r2,zero,1800ef70 <___vfiprintf_internal_r+0x10a8>
1800e850:	8880100c 	andi	r2,r17,64
1800e854:	d8001d85 	stb	zero,118(sp)
1800e858:	1002281e 	bne	r2,zero,1800f0fc <___vfiprintf_internal_r+0x1234>
1800e85c:	d9002217 	ldw	r4,136(sp)
1800e860:	0029883a 	mov	r20,zero
1800e864:	20800104 	addi	r2,r4,4
1800e868:	24c00017 	ldw	r19,0(r4)
1800e86c:	8001c60e 	bge	r16,zero,1800ef88 <___vfiprintf_internal_r+0x10c0>
1800e870:	d8802215 	stw	r2,136(sp)
1800e874:	002b883a 	mov	r21,zero
1800e878:	9d04b03a 	or	r2,r19,r20
1800e87c:	103f911e 	bne	r2,zero,1800e6c4 <__alt_data_end+0xf800e6c4>
1800e880:	00800044 	movi	r2,1
1800e884:	10803fcc 	andi	r2,r2,255
1800e888:	00c00044 	movi	r3,1
1800e88c:	10c05f26 	beq	r2,r3,1800ea0c <___vfiprintf_internal_r+0xb44>
1800e890:	00c00084 	movi	r3,2
1800e894:	10ffe31e 	bne	r2,r3,1800e824 <__alt_data_end+0xf800e824>
1800e898:	0027883a 	mov	r19,zero
1800e89c:	0029883a 	mov	r20,zero
1800e8a0:	00015106 	br	1800ede8 <___vfiprintf_internal_r+0xf20>
1800e8a4:	9cc03fcc 	andi	r19,r19,255
1800e8a8:	b811883a 	mov	r8,r23
1800e8ac:	9802c01e 	bne	r19,zero,1800f3b0 <___vfiprintf_internal_r+0x14e8>
1800e8b0:	01460074 	movhi	r5,6145
1800e8b4:	2958ee04 	addi	r5,r5,25528
1800e8b8:	d9402615 	stw	r5,152(sp)
1800e8bc:	8880080c 	andi	r2,r17,32
1800e8c0:	103f541e 	bne	r2,zero,1800e614 <__alt_data_end+0xf800e614>
1800e8c4:	8880040c 	andi	r2,r17,16
1800e8c8:	1001f226 	beq	r2,zero,1800f094 <___vfiprintf_internal_r+0x11cc>
1800e8cc:	d9402217 	ldw	r5,136(sp)
1800e8d0:	0029883a 	mov	r20,zero
1800e8d4:	2cc00017 	ldw	r19,0(r5)
1800e8d8:	29400104 	addi	r5,r5,4
1800e8dc:	d9402215 	stw	r5,136(sp)
1800e8e0:	003f5106 	br	1800e628 <__alt_data_end+0xf800e628>
1800e8e4:	d8c02217 	ldw	r3,136(sp)
1800e8e8:	b811883a 	mov	r8,r23
1800e8ec:	d8001d85 	stb	zero,118(sp)
1800e8f0:	1dc00017 	ldw	r23,0(r3)
1800e8f4:	1f000104 	addi	fp,r3,4
1800e8f8:	b8025926 	beq	r23,zero,1800f260 <___vfiprintf_internal_r+0x1398>
1800e8fc:	80023316 	blt	r16,zero,1800f1cc <___vfiprintf_internal_r+0x1304>
1800e900:	800d883a 	mov	r6,r16
1800e904:	000b883a 	mov	r5,zero
1800e908:	b809883a 	mov	r4,r23
1800e90c:	da002a15 	stw	r8,168(sp)
1800e910:	800aa980 	call	1800aa98 <memchr>
1800e914:	da002a17 	ldw	r8,168(sp)
1800e918:	10026826 	beq	r2,zero,1800f2bc <___vfiprintf_internal_r+0x13f4>
1800e91c:	15e9c83a 	sub	r20,r2,r23
1800e920:	dd401d83 	ldbu	r21,118(sp)
1800e924:	df002215 	stw	fp,136(sp)
1800e928:	0021883a 	mov	r16,zero
1800e92c:	003e6906 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800e930:	9cc03fcc 	andi	r19,r19,255
1800e934:	b811883a 	mov	r8,r23
1800e938:	983fc126 	beq	r19,zero,1800e840 <__alt_data_end+0xf800e840>
1800e93c:	d8c02303 	ldbu	r3,140(sp)
1800e940:	d8c01d85 	stb	r3,118(sp)
1800e944:	003fbe06 	br	1800e840 <__alt_data_end+0xf800e840>
1800e948:	d9002217 	ldw	r4,136(sp)
1800e94c:	d9402217 	ldw	r5,136(sp)
1800e950:	21000017 	ldw	r4,0(r4)
1800e954:	28800104 	addi	r2,r5,4
1800e958:	d9002515 	stw	r4,148(sp)
1800e95c:	203e3d16 	blt	r4,zero,1800e254 <__alt_data_end+0xf800e254>
1800e960:	d8802215 	stw	r2,136(sp)
1800e964:	b0c00007 	ldb	r3,0(r22)
1800e968:	003db406 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e96c:	00c00ac4 	movi	r3,43
1800e970:	d8c02305 	stb	r3,140(sp)
1800e974:	04c00044 	movi	r19,1
1800e978:	b0c00007 	ldb	r3,0(r22)
1800e97c:	003daf06 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e980:	b0c00007 	ldb	r3,0(r22)
1800e984:	01000a84 	movi	r4,42
1800e988:	b4000044 	addi	r16,r22,1
1800e98c:	19025e26 	beq	r3,r4,1800f308 <___vfiprintf_internal_r+0x1440>
1800e990:	1f3ff404 	addi	fp,r3,-48
1800e994:	0009883a 	mov	r4,zero
1800e998:	af025236 	bltu	r21,fp,1800f2e4 <___vfiprintf_internal_r+0x141c>
1800e99c:	01400284 	movi	r5,10
1800e9a0:	8002b640 	call	18002b64 <__mulsi3>
1800e9a4:	80c00007 	ldb	r3,0(r16)
1800e9a8:	1709883a 	add	r4,r2,fp
1800e9ac:	85800044 	addi	r22,r16,1
1800e9b0:	1f3ff404 	addi	fp,r3,-48
1800e9b4:	b021883a 	mov	r16,r22
1800e9b8:	af3ff82e 	bgeu	r21,fp,1800e99c <__alt_data_end+0xf800e99c>
1800e9bc:	2021883a 	mov	r16,r4
1800e9c0:	203d9f0e 	bge	r4,zero,1800e040 <__alt_data_end+0xf800e040>
1800e9c4:	043fffc4 	movi	r16,-1
1800e9c8:	003d9d06 	br	1800e040 <__alt_data_end+0xf800e040>
1800e9cc:	8c401014 	ori	r17,r17,64
1800e9d0:	b0c00007 	ldb	r3,0(r22)
1800e9d4:	003d9906 	br	1800e03c <__alt_data_end+0xf800e03c>
1800e9d8:	d9002217 	ldw	r4,136(sp)
1800e9dc:	d8001d85 	stb	zero,118(sp)
1800e9e0:	20c00204 	addi	r3,r4,8
1800e9e4:	24c00017 	ldw	r19,0(r4)
1800e9e8:	25000117 	ldw	r20,4(r4)
1800e9ec:	8001e716 	blt	r16,zero,1800f18c <___vfiprintf_internal_r+0x12c4>
1800e9f0:	013fdfc4 	movi	r4,-129
1800e9f4:	9d04b03a 	or	r2,r19,r20
1800e9f8:	d8c02215 	stw	r3,136(sp)
1800e9fc:	8922703a 	and	r17,r17,r4
1800ea00:	002b883a 	mov	r21,zero
1800ea04:	103f2f1e 	bne	r2,zero,1800e6c4 <__alt_data_end+0xf800e6c4>
1800ea08:	803e2f26 	beq	r16,zero,1800e2c8 <__alt_data_end+0xf800e2c8>
1800ea0c:	0027883a 	mov	r19,zero
1800ea10:	9cc00c04 	addi	r19,r19,48
1800ea14:	dcc019c5 	stb	r19,103(sp)
1800ea18:	dd002817 	ldw	r20,160(sp)
1800ea1c:	ddc019c4 	addi	r23,sp,103
1800ea20:	003e2c06 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800ea24:	9cc03fcc 	andi	r19,r19,255
1800ea28:	b811883a 	mov	r8,r23
1800ea2c:	9802571e 	bne	r19,zero,1800f38c <___vfiprintf_internal_r+0x14c4>
1800ea30:	18005726 	beq	r3,zero,1800eb90 <___vfiprintf_internal_r+0xcc8>
1800ea34:	04c00044 	movi	r19,1
1800ea38:	d8c01005 	stb	r3,64(sp)
1800ea3c:	d8001d85 	stb	zero,118(sp)
1800ea40:	9829883a 	mov	r20,r19
1800ea44:	ddc01004 	addi	r23,sp,64
1800ea48:	003f0a06 	br	1800e674 <__alt_data_end+0xf800e674>
1800ea4c:	d9402017 	ldw	r5,128(sp)
1800ea50:	d9002117 	ldw	r4,132(sp)
1800ea54:	d9801a04 	addi	r6,sp,104
1800ea58:	da802a15 	stw	r10,168(sp)
1800ea5c:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ea60:	da802a17 	ldw	r10,168(sp)
1800ea64:	1000501e 	bne	r2,zero,1800eba8 <___vfiprintf_internal_r+0xce0>
1800ea68:	d9801b17 	ldw	r6,108(sp)
1800ea6c:	d8801c17 	ldw	r2,112(sp)
1800ea70:	d811883a 	mov	r8,sp
1800ea74:	31000044 	addi	r4,r6,1
1800ea78:	003e3606 	br	1800e354 <__alt_data_end+0xf800e354>
1800ea7c:	d9001b17 	ldw	r4,108(sp)
1800ea80:	d8801c17 	ldw	r2,112(sp)
1800ea84:	21400044 	addi	r5,r4,1
1800ea88:	d9801d87 	ldb	r6,118(sp)
1800ea8c:	303e5226 	beq	r6,zero,1800e3d8 <__alt_data_end+0xf800e3d8>
1800ea90:	01800044 	movi	r6,1
1800ea94:	d9001d84 	addi	r4,sp,118
1800ea98:	1185883a 	add	r2,r2,r6
1800ea9c:	41000015 	stw	r4,0(r8)
1800eaa0:	41800115 	stw	r6,4(r8)
1800eaa4:	d8801c15 	stw	r2,112(sp)
1800eaa8:	d9401b15 	stw	r5,108(sp)
1800eaac:	010001c4 	movi	r4,7
1800eab0:	2140b00e 	bge	r4,r5,1800ed74 <___vfiprintf_internal_r+0xeac>
1800eab4:	1000f61e 	bne	r2,zero,1800ee90 <___vfiprintf_internal_r+0xfc8>
1800eab8:	3800b31e 	bne	r7,zero,1800ed88 <___vfiprintf_internal_r+0xec0>
1800eabc:	0009883a 	mov	r4,zero
1800eac0:	300b883a 	mov	r5,r6
1800eac4:	d811883a 	mov	r8,sp
1800eac8:	01802004 	movi	r6,128
1800eacc:	19be5226 	beq	r3,r6,1800e418 <__alt_data_end+0xf800e418>
1800ead0:	8521c83a 	sub	r16,r16,r20
1800ead4:	043e790e 	bge	zero,r16,1800e4bc <__alt_data_end+0xf800e4bc>
1800ead8:	05400404 	movi	r21,16
1800eadc:	ac01b00e 	bge	r21,r16,1800f1a0 <___vfiprintf_internal_r+0x12d8>
1800eae0:	01460074 	movhi	r5,6145
1800eae4:	29596404 	addi	r5,r5,26000
1800eae8:	d9402315 	stw	r5,140(sp)
1800eaec:	070001c4 	movi	fp,7
1800eaf0:	00000506 	br	1800eb08 <___vfiprintf_internal_r+0xc40>
1800eaf4:	21400084 	addi	r5,r4,2
1800eaf8:	42000204 	addi	r8,r8,8
1800eafc:	1809883a 	mov	r4,r3
1800eb00:	843ffc04 	addi	r16,r16,-16
1800eb04:	ac000d0e 	bge	r21,r16,1800eb3c <___vfiprintf_internal_r+0xc74>
1800eb08:	10800404 	addi	r2,r2,16
1800eb0c:	20c00044 	addi	r3,r4,1
1800eb10:	44800015 	stw	r18,0(r8)
1800eb14:	45400115 	stw	r21,4(r8)
1800eb18:	d8801c15 	stw	r2,112(sp)
1800eb1c:	d8c01b15 	stw	r3,108(sp)
1800eb20:	e0fff40e 	bge	fp,r3,1800eaf4 <__alt_data_end+0xf800eaf4>
1800eb24:	1000101e 	bne	r2,zero,1800eb68 <___vfiprintf_internal_r+0xca0>
1800eb28:	843ffc04 	addi	r16,r16,-16
1800eb2c:	01400044 	movi	r5,1
1800eb30:	0009883a 	mov	r4,zero
1800eb34:	d811883a 	mov	r8,sp
1800eb38:	ac3ff316 	blt	r21,r16,1800eb08 <__alt_data_end+0xf800eb08>
1800eb3c:	d8c02317 	ldw	r3,140(sp)
1800eb40:	1405883a 	add	r2,r2,r16
1800eb44:	44000115 	stw	r16,4(r8)
1800eb48:	40c00015 	stw	r3,0(r8)
1800eb4c:	d8801c15 	stw	r2,112(sp)
1800eb50:	d9401b15 	stw	r5,108(sp)
1800eb54:	00c001c4 	movi	r3,7
1800eb58:	19401916 	blt	r3,r5,1800ebc0 <___vfiprintf_internal_r+0xcf8>
1800eb5c:	42000204 	addi	r8,r8,8
1800eb60:	29400044 	addi	r5,r5,1
1800eb64:	003e5506 	br	1800e4bc <__alt_data_end+0xf800e4bc>
1800eb68:	d9402017 	ldw	r5,128(sp)
1800eb6c:	d9002117 	ldw	r4,132(sp)
1800eb70:	d9801a04 	addi	r6,sp,104
1800eb74:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800eb78:	10000b1e 	bne	r2,zero,1800eba8 <___vfiprintf_internal_r+0xce0>
1800eb7c:	d9001b17 	ldw	r4,108(sp)
1800eb80:	d8801c17 	ldw	r2,112(sp)
1800eb84:	d811883a 	mov	r8,sp
1800eb88:	21400044 	addi	r5,r4,1
1800eb8c:	003fdc06 	br	1800eb00 <__alt_data_end+0xf800eb00>
1800eb90:	d8801c17 	ldw	r2,112(sp)
1800eb94:	10000426 	beq	r2,zero,1800eba8 <___vfiprintf_internal_r+0xce0>
1800eb98:	d9402017 	ldw	r5,128(sp)
1800eb9c:	d9002117 	ldw	r4,132(sp)
1800eba0:	d9801a04 	addi	r6,sp,104
1800eba4:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800eba8:	d9402017 	ldw	r5,128(sp)
1800ebac:	2880030b 	ldhu	r2,12(r5)
1800ebb0:	1080100c 	andi	r2,r2,64
1800ebb4:	10014d1e 	bne	r2,zero,1800f0ec <___vfiprintf_internal_r+0x1224>
1800ebb8:	d8802417 	ldw	r2,144(sp)
1800ebbc:	003d9706 	br	1800e21c <__alt_data_end+0xf800e21c>
1800ebc0:	1000d21e 	bne	r2,zero,1800ef0c <___vfiprintf_internal_r+0x1044>
1800ebc4:	00c00044 	movi	r3,1
1800ebc8:	a005883a 	mov	r2,r20
1800ebcc:	ddc00015 	stw	r23,0(sp)
1800ebd0:	dd000115 	stw	r20,4(sp)
1800ebd4:	dd001c15 	stw	r20,112(sp)
1800ebd8:	d8c01b15 	stw	r3,108(sp)
1800ebdc:	d811883a 	mov	r8,sp
1800ebe0:	42000204 	addi	r8,r8,8
1800ebe4:	8c40010c 	andi	r17,r17,4
1800ebe8:	88004026 	beq	r17,zero,1800ecec <___vfiprintf_internal_r+0xe24>
1800ebec:	d9002517 	ldw	r4,148(sp)
1800ebf0:	24e3c83a 	sub	r17,r4,r19
1800ebf4:	04403d0e 	bge	zero,r17,1800ecec <___vfiprintf_internal_r+0xe24>
1800ebf8:	04000404 	movi	r16,16
1800ebfc:	8441a90e 	bge	r16,r17,1800f2a4 <___vfiprintf_internal_r+0x13dc>
1800ec00:	00c60074 	movhi	r3,6145
1800ec04:	18d96804 	addi	r3,r3,26016
1800ec08:	d9001b17 	ldw	r4,108(sp)
1800ec0c:	d8c02315 	stw	r3,140(sp)
1800ec10:	050001c4 	movi	r20,7
1800ec14:	dd402117 	ldw	r21,132(sp)
1800ec18:	ddc02017 	ldw	r23,128(sp)
1800ec1c:	00000506 	br	1800ec34 <___vfiprintf_internal_r+0xd6c>
1800ec20:	21400084 	addi	r5,r4,2
1800ec24:	42000204 	addi	r8,r8,8
1800ec28:	1809883a 	mov	r4,r3
1800ec2c:	8c7ffc04 	addi	r17,r17,-16
1800ec30:	84400f0e 	bge	r16,r17,1800ec70 <___vfiprintf_internal_r+0xda8>
1800ec34:	01460074 	movhi	r5,6145
1800ec38:	10800404 	addi	r2,r2,16
1800ec3c:	20c00044 	addi	r3,r4,1
1800ec40:	29596804 	addi	r5,r5,26016
1800ec44:	41400015 	stw	r5,0(r8)
1800ec48:	44000115 	stw	r16,4(r8)
1800ec4c:	d8801c15 	stw	r2,112(sp)
1800ec50:	d8c01b15 	stw	r3,108(sp)
1800ec54:	a0fff20e 	bge	r20,r3,1800ec20 <__alt_data_end+0xf800ec20>
1800ec58:	1000141e 	bne	r2,zero,1800ecac <___vfiprintf_internal_r+0xde4>
1800ec5c:	8c7ffc04 	addi	r17,r17,-16
1800ec60:	01400044 	movi	r5,1
1800ec64:	0009883a 	mov	r4,zero
1800ec68:	d811883a 	mov	r8,sp
1800ec6c:	847ff116 	blt	r16,r17,1800ec34 <__alt_data_end+0xf800ec34>
1800ec70:	d8c02317 	ldw	r3,140(sp)
1800ec74:	1445883a 	add	r2,r2,r17
1800ec78:	44400115 	stw	r17,4(r8)
1800ec7c:	40c00015 	stw	r3,0(r8)
1800ec80:	d8801c15 	stw	r2,112(sp)
1800ec84:	d9401b15 	stw	r5,108(sp)
1800ec88:	00c001c4 	movi	r3,7
1800ec8c:	1940170e 	bge	r3,r5,1800ecec <___vfiprintf_internal_r+0xe24>
1800ec90:	1000101e 	bne	r2,zero,1800ecd4 <___vfiprintf_internal_r+0xe0c>
1800ec94:	d8802517 	ldw	r2,148(sp)
1800ec98:	14c11616 	blt	r2,r19,1800f0f4 <___vfiprintf_internal_r+0x122c>
1800ec9c:	d9002417 	ldw	r4,144(sp)
1800eca0:	2089883a 	add	r4,r4,r2
1800eca4:	d9002415 	stw	r4,144(sp)
1800eca8:	003e1806 	br	1800e50c <__alt_data_end+0xf800e50c>
1800ecac:	d9801a04 	addi	r6,sp,104
1800ecb0:	b80b883a 	mov	r5,r23
1800ecb4:	a809883a 	mov	r4,r21
1800ecb8:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ecbc:	103fba1e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800ecc0:	d9001b17 	ldw	r4,108(sp)
1800ecc4:	d8801c17 	ldw	r2,112(sp)
1800ecc8:	d811883a 	mov	r8,sp
1800eccc:	21400044 	addi	r5,r4,1
1800ecd0:	003fd606 	br	1800ec2c <__alt_data_end+0xf800ec2c>
1800ecd4:	d9402017 	ldw	r5,128(sp)
1800ecd8:	d9002117 	ldw	r4,132(sp)
1800ecdc:	d9801a04 	addi	r6,sp,104
1800ece0:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ece4:	103fb01e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800ece8:	d8801c17 	ldw	r2,112(sp)
1800ecec:	d8c02517 	ldw	r3,148(sp)
1800ecf0:	1cc0010e 	bge	r3,r19,1800ecf8 <___vfiprintf_internal_r+0xe30>
1800ecf4:	9807883a 	mov	r3,r19
1800ecf8:	d9002417 	ldw	r4,144(sp)
1800ecfc:	20c9883a 	add	r4,r4,r3
1800ed00:	d9002415 	stw	r4,144(sp)
1800ed04:	103e0126 	beq	r2,zero,1800e50c <__alt_data_end+0xf800e50c>
1800ed08:	d9402017 	ldw	r5,128(sp)
1800ed0c:	d9002117 	ldw	r4,132(sp)
1800ed10:	d9801a04 	addi	r6,sp,104
1800ed14:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ed18:	103dfc26 	beq	r2,zero,1800e50c <__alt_data_end+0xf800e50c>
1800ed1c:	003fa206 	br	1800eba8 <__alt_data_end+0xf800eba8>
1800ed20:	d9402017 	ldw	r5,128(sp)
1800ed24:	d9002117 	ldw	r4,132(sp)
1800ed28:	d9801a04 	addi	r6,sp,104
1800ed2c:	d9c02b15 	stw	r7,172(sp)
1800ed30:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ed34:	d9c02b17 	ldw	r7,172(sp)
1800ed38:	103f9b1e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800ed3c:	d9001b17 	ldw	r4,108(sp)
1800ed40:	d8801c17 	ldw	r2,112(sp)
1800ed44:	d811883a 	mov	r8,sp
1800ed48:	21800044 	addi	r6,r4,1
1800ed4c:	003dbf06 	br	1800e44c <__alt_data_end+0xf800e44c>
1800ed50:	1000d81e 	bne	r2,zero,1800f0b4 <___vfiprintf_internal_r+0x11ec>
1800ed54:	d9001d87 	ldb	r4,118(sp)
1800ed58:	20000a26 	beq	r4,zero,1800ed84 <___vfiprintf_internal_r+0xebc>
1800ed5c:	00800044 	movi	r2,1
1800ed60:	d9001d84 	addi	r4,sp,118
1800ed64:	100b883a 	mov	r5,r2
1800ed68:	d9000015 	stw	r4,0(sp)
1800ed6c:	d8800115 	stw	r2,4(sp)
1800ed70:	d811883a 	mov	r8,sp
1800ed74:	2809883a 	mov	r4,r5
1800ed78:	42000204 	addi	r8,r8,8
1800ed7c:	29400044 	addi	r5,r5,1
1800ed80:	003d9506 	br	1800e3d8 <__alt_data_end+0xf800e3d8>
1800ed84:	3800fd26 	beq	r7,zero,1800f17c <___vfiprintf_internal_r+0x12b4>
1800ed88:	00800084 	movi	r2,2
1800ed8c:	d9001d04 	addi	r4,sp,116
1800ed90:	d9000015 	stw	r4,0(sp)
1800ed94:	d8800115 	stw	r2,4(sp)
1800ed98:	01400044 	movi	r5,1
1800ed9c:	d811883a 	mov	r8,sp
1800eda0:	2809883a 	mov	r4,r5
1800eda4:	42000204 	addi	r8,r8,8
1800eda8:	29400044 	addi	r5,r5,1
1800edac:	003f4606 	br	1800eac8 <__alt_data_end+0xf800eac8>
1800edb0:	d8802517 	ldw	r2,148(sp)
1800edb4:	14c0010e 	bge	r2,r19,1800edbc <___vfiprintf_internal_r+0xef4>
1800edb8:	9805883a 	mov	r2,r19
1800edbc:	d9402417 	ldw	r5,144(sp)
1800edc0:	288b883a 	add	r5,r5,r2
1800edc4:	d9402415 	stw	r5,144(sp)
1800edc8:	003dd006 	br	1800e50c <__alt_data_end+0xf800e50c>
1800edcc:	d8001d85 	stb	zero,118(sp)
1800edd0:	80005d16 	blt	r16,zero,1800ef48 <___vfiprintf_internal_r+0x1080>
1800edd4:	00ffdfc4 	movi	r3,-129
1800edd8:	9d04b03a 	or	r2,r19,r20
1800eddc:	88e2703a 	and	r17,r17,r3
1800ede0:	103d3726 	beq	r2,zero,1800e2c0 <__alt_data_end+0xf800e2c0>
1800ede4:	002b883a 	mov	r21,zero
1800ede8:	d9002617 	ldw	r4,152(sp)
1800edec:	ddc01a04 	addi	r23,sp,104
1800edf0:	988003cc 	andi	r2,r19,15
1800edf4:	a006973a 	slli	r3,r20,28
1800edf8:	2085883a 	add	r2,r4,r2
1800edfc:	9826d13a 	srli	r19,r19,4
1800ee00:	10800003 	ldbu	r2,0(r2)
1800ee04:	a028d13a 	srli	r20,r20,4
1800ee08:	bdffffc4 	addi	r23,r23,-1
1800ee0c:	1ce6b03a 	or	r19,r3,r19
1800ee10:	b8800005 	stb	r2,0(r23)
1800ee14:	9d04b03a 	or	r2,r19,r20
1800ee18:	103ff51e 	bne	r2,zero,1800edf0 <__alt_data_end+0xf800edf0>
1800ee1c:	d8801e17 	ldw	r2,120(sp)
1800ee20:	15e9c83a 	sub	r20,r2,r23
1800ee24:	003d2b06 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800ee28:	d9402017 	ldw	r5,128(sp)
1800ee2c:	d9002117 	ldw	r4,132(sp)
1800ee30:	d9801a04 	addi	r6,sp,104
1800ee34:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ee38:	103f5b1e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800ee3c:	d8801c17 	ldw	r2,112(sp)
1800ee40:	d811883a 	mov	r8,sp
1800ee44:	003f6706 	br	1800ebe4 <__alt_data_end+0xf800ebe4>
1800ee48:	d9402017 	ldw	r5,128(sp)
1800ee4c:	d9002117 	ldw	r4,132(sp)
1800ee50:	d9801a04 	addi	r6,sp,104
1800ee54:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ee58:	103f531e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800ee5c:	d811883a 	mov	r8,sp
1800ee60:	003cd906 	br	1800e1c8 <__alt_data_end+0xf800e1c8>
1800ee64:	10803fcc 	andi	r2,r2,255
1800ee68:	1080201c 	xori	r2,r2,128
1800ee6c:	10bfe004 	addi	r2,r2,-128
1800ee70:	00c00c04 	movi	r3,48
1800ee74:	10ffe926 	beq	r2,r3,1800ee1c <__alt_data_end+0xf800ee1c>
1800ee78:	b8ffffc5 	stb	r3,-1(r23)
1800ee7c:	d8c01e17 	ldw	r3,120(sp)
1800ee80:	b8bfffc4 	addi	r2,r23,-1
1800ee84:	102f883a 	mov	r23,r2
1800ee88:	18a9c83a 	sub	r20,r3,r2
1800ee8c:	003d1106 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800ee90:	d9402017 	ldw	r5,128(sp)
1800ee94:	d9002117 	ldw	r4,132(sp)
1800ee98:	d9801a04 	addi	r6,sp,104
1800ee9c:	d8c02a15 	stw	r3,168(sp)
1800eea0:	d9c02b15 	stw	r7,172(sp)
1800eea4:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800eea8:	d8c02a17 	ldw	r3,168(sp)
1800eeac:	d9c02b17 	ldw	r7,172(sp)
1800eeb0:	103f3d1e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800eeb4:	d9001b17 	ldw	r4,108(sp)
1800eeb8:	d8801c17 	ldw	r2,112(sp)
1800eebc:	d811883a 	mov	r8,sp
1800eec0:	21400044 	addi	r5,r4,1
1800eec4:	003d4406 	br	1800e3d8 <__alt_data_end+0xf800e3d8>
1800eec8:	d9402017 	ldw	r5,128(sp)
1800eecc:	d9002117 	ldw	r4,132(sp)
1800eed0:	d9801a04 	addi	r6,sp,104
1800eed4:	d8c02a15 	stw	r3,168(sp)
1800eed8:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800eedc:	d8c02a17 	ldw	r3,168(sp)
1800eee0:	103f311e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800eee4:	d9001b17 	ldw	r4,108(sp)
1800eee8:	d8801c17 	ldw	r2,112(sp)
1800eeec:	d811883a 	mov	r8,sp
1800eef0:	21400044 	addi	r5,r4,1
1800eef4:	003ef406 	br	1800eac8 <__alt_data_end+0xf800eac8>
1800eef8:	1000bd1e 	bne	r2,zero,1800f1f0 <___vfiprintf_internal_r+0x1328>
1800eefc:	01400044 	movi	r5,1
1800ef00:	0009883a 	mov	r4,zero
1800ef04:	d811883a 	mov	r8,sp
1800ef08:	003ef106 	br	1800ead0 <__alt_data_end+0xf800ead0>
1800ef0c:	d9402017 	ldw	r5,128(sp)
1800ef10:	d9002117 	ldw	r4,132(sp)
1800ef14:	d9801a04 	addi	r6,sp,104
1800ef18:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800ef1c:	103f221e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800ef20:	d9401b17 	ldw	r5,108(sp)
1800ef24:	d8801c17 	ldw	r2,112(sp)
1800ef28:	d811883a 	mov	r8,sp
1800ef2c:	29400044 	addi	r5,r5,1
1800ef30:	003d6206 	br	1800e4bc <__alt_data_end+0xf800e4bc>
1800ef34:	01460074 	movhi	r5,6145
1800ef38:	2958f304 	addi	r5,r5,25548
1800ef3c:	d9402615 	stw	r5,152(sp)
1800ef40:	d8c02215 	stw	r3,136(sp)
1800ef44:	1023883a 	mov	r17,r2
1800ef48:	9d04b03a 	or	r2,r19,r20
1800ef4c:	103fa51e 	bne	r2,zero,1800ede4 <__alt_data_end+0xf800ede4>
1800ef50:	002b883a 	mov	r21,zero
1800ef54:	00800084 	movi	r2,2
1800ef58:	003e4a06 	br	1800e884 <__alt_data_end+0xf800e884>
1800ef5c:	01460074 	movhi	r5,6145
1800ef60:	2958f304 	addi	r5,r5,25548
1800ef64:	002b883a 	mov	r21,zero
1800ef68:	d9402615 	stw	r5,152(sp)
1800ef6c:	003f9e06 	br	1800ede8 <__alt_data_end+0xf800ede8>
1800ef70:	d9402217 	ldw	r5,136(sp)
1800ef74:	d8001d85 	stb	zero,118(sp)
1800ef78:	0029883a 	mov	r20,zero
1800ef7c:	28800104 	addi	r2,r5,4
1800ef80:	2cc00017 	ldw	r19,0(r5)
1800ef84:	803e3a16 	blt	r16,zero,1800e870 <__alt_data_end+0xf800e870>
1800ef88:	00ffdfc4 	movi	r3,-129
1800ef8c:	d8802215 	stw	r2,136(sp)
1800ef90:	88e2703a 	and	r17,r17,r3
1800ef94:	002b883a 	mov	r21,zero
1800ef98:	983e9b26 	beq	r19,zero,1800ea08 <__alt_data_end+0xf800ea08>
1800ef9c:	00800244 	movi	r2,9
1800efa0:	14fdc936 	bltu	r2,r19,1800e6c8 <__alt_data_end+0xf800e6c8>
1800efa4:	003e9a06 	br	1800ea10 <__alt_data_end+0xf800ea10>
1800efa8:	00800c04 	movi	r2,48
1800efac:	d8c01d45 	stb	r3,117(sp)
1800efb0:	d8801d05 	stb	r2,116(sp)
1800efb4:	d8001d85 	stb	zero,118(sp)
1800efb8:	88c00094 	ori	r3,r17,2
1800efbc:	80009c16 	blt	r16,zero,1800f230 <___vfiprintf_internal_r+0x1368>
1800efc0:	00bfdfc4 	movi	r2,-129
1800efc4:	88a2703a 	and	r17,r17,r2
1800efc8:	8c400094 	ori	r17,r17,2
1800efcc:	002b883a 	mov	r21,zero
1800efd0:	003f8506 	br	1800ede8 <__alt_data_end+0xf800ede8>
1800efd4:	b029883a 	mov	r20,r22
1800efd8:	003c0b06 	br	1800e008 <__alt_data_end+0xf800e008>
1800efdc:	04e7c83a 	sub	r19,zero,r19
1800efe0:	05400b44 	movi	r21,45
1800efe4:	9804c03a 	cmpne	r2,r19,zero
1800efe8:	0529c83a 	sub	r20,zero,r20
1800efec:	dd401d85 	stb	r21,118(sp)
1800eff0:	a0a9c83a 	sub	r20,r20,r2
1800eff4:	80009716 	blt	r16,zero,1800f254 <___vfiprintf_internal_r+0x138c>
1800eff8:	00bfdfc4 	movi	r2,-129
1800effc:	88a2703a 	and	r17,r17,r2
1800f000:	003db006 	br	1800e6c4 <__alt_data_end+0xf800e6c4>
1800f004:	b0c00007 	ldb	r3,0(r22)
1800f008:	003c0c06 	br	1800e03c <__alt_data_end+0xf800e03c>
1800f00c:	8880100c 	andi	r2,r17,64
1800f010:	d8001d85 	stb	zero,118(sp)
1800f014:	1000461e 	bne	r2,zero,1800f130 <___vfiprintf_internal_r+0x1268>
1800f018:	d9002217 	ldw	r4,136(sp)
1800f01c:	0029883a 	mov	r20,zero
1800f020:	20800104 	addi	r2,r4,4
1800f024:	24c00017 	ldw	r19,0(r4)
1800f028:	803df80e 	bge	r16,zero,1800e80c <__alt_data_end+0xf800e80c>
1800f02c:	9d06b03a 	or	r3,r19,r20
1800f030:	d8802215 	stw	r2,136(sp)
1800f034:	183d5e1e 	bne	r3,zero,1800e5b0 <__alt_data_end+0xf800e5b0>
1800f038:	002b883a 	mov	r21,zero
1800f03c:	0005883a 	mov	r2,zero
1800f040:	003e1006 	br	1800e884 <__alt_data_end+0xf800e884>
1800f044:	8880040c 	andi	r2,r17,16
1800f048:	1000321e 	bne	r2,zero,1800f114 <___vfiprintf_internal_r+0x124c>
1800f04c:	8c40100c 	andi	r17,r17,64
1800f050:	88008d26 	beq	r17,zero,1800f288 <___vfiprintf_internal_r+0x13c0>
1800f054:	d9402217 	ldw	r5,136(sp)
1800f058:	d8c02417 	ldw	r3,144(sp)
1800f05c:	28800017 	ldw	r2,0(r5)
1800f060:	29400104 	addi	r5,r5,4
1800f064:	d9402215 	stw	r5,136(sp)
1800f068:	10c0000d 	sth	r3,0(r2)
1800f06c:	003bca06 	br	1800df98 <__alt_data_end+0xf800df98>
1800f070:	8880100c 	andi	r2,r17,64
1800f074:	10003a26 	beq	r2,zero,1800f160 <___vfiprintf_internal_r+0x1298>
1800f078:	d8802217 	ldw	r2,136(sp)
1800f07c:	14c0000f 	ldh	r19,0(r2)
1800f080:	10800104 	addi	r2,r2,4
1800f084:	d8802215 	stw	r2,136(sp)
1800f088:	9829d7fa 	srai	r20,r19,31
1800f08c:	a005883a 	mov	r2,r20
1800f090:	003d8506 	br	1800e6a8 <__alt_data_end+0xf800e6a8>
1800f094:	8880100c 	andi	r2,r17,64
1800f098:	10002b26 	beq	r2,zero,1800f148 <___vfiprintf_internal_r+0x1280>
1800f09c:	d8802217 	ldw	r2,136(sp)
1800f0a0:	0029883a 	mov	r20,zero
1800f0a4:	14c0000b 	ldhu	r19,0(r2)
1800f0a8:	10800104 	addi	r2,r2,4
1800f0ac:	d8802215 	stw	r2,136(sp)
1800f0b0:	003d5d06 	br	1800e628 <__alt_data_end+0xf800e628>
1800f0b4:	d9402017 	ldw	r5,128(sp)
1800f0b8:	d9002117 	ldw	r4,132(sp)
1800f0bc:	d9801a04 	addi	r6,sp,104
1800f0c0:	d8c02a15 	stw	r3,168(sp)
1800f0c4:	d9c02b15 	stw	r7,172(sp)
1800f0c8:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800f0cc:	d8c02a17 	ldw	r3,168(sp)
1800f0d0:	d9c02b17 	ldw	r7,172(sp)
1800f0d4:	103eb41e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800f0d8:	d9001b17 	ldw	r4,108(sp)
1800f0dc:	d8801c17 	ldw	r2,112(sp)
1800f0e0:	d811883a 	mov	r8,sp
1800f0e4:	21400044 	addi	r5,r4,1
1800f0e8:	003e6706 	br	1800ea88 <__alt_data_end+0xf800ea88>
1800f0ec:	00bfffc4 	movi	r2,-1
1800f0f0:	003c4a06 	br	1800e21c <__alt_data_end+0xf800e21c>
1800f0f4:	9805883a 	mov	r2,r19
1800f0f8:	003ee806 	br	1800ec9c <__alt_data_end+0xf800ec9c>
1800f0fc:	d8c02217 	ldw	r3,136(sp)
1800f100:	0029883a 	mov	r20,zero
1800f104:	18800104 	addi	r2,r3,4
1800f108:	1cc0000b 	ldhu	r19,0(r3)
1800f10c:	803f9e0e 	bge	r16,zero,1800ef88 <__alt_data_end+0xf800ef88>
1800f110:	003dd706 	br	1800e870 <__alt_data_end+0xf800e870>
1800f114:	d8c02217 	ldw	r3,136(sp)
1800f118:	d9002417 	ldw	r4,144(sp)
1800f11c:	18800017 	ldw	r2,0(r3)
1800f120:	18c00104 	addi	r3,r3,4
1800f124:	d8c02215 	stw	r3,136(sp)
1800f128:	11000015 	stw	r4,0(r2)
1800f12c:	003b9a06 	br	1800df98 <__alt_data_end+0xf800df98>
1800f130:	d8c02217 	ldw	r3,136(sp)
1800f134:	0029883a 	mov	r20,zero
1800f138:	18800104 	addi	r2,r3,4
1800f13c:	1cc0000b 	ldhu	r19,0(r3)
1800f140:	803db20e 	bge	r16,zero,1800e80c <__alt_data_end+0xf800e80c>
1800f144:	003fb906 	br	1800f02c <__alt_data_end+0xf800f02c>
1800f148:	d9002217 	ldw	r4,136(sp)
1800f14c:	0029883a 	mov	r20,zero
1800f150:	24c00017 	ldw	r19,0(r4)
1800f154:	21000104 	addi	r4,r4,4
1800f158:	d9002215 	stw	r4,136(sp)
1800f15c:	003d3206 	br	1800e628 <__alt_data_end+0xf800e628>
1800f160:	d8c02217 	ldw	r3,136(sp)
1800f164:	1cc00017 	ldw	r19,0(r3)
1800f168:	18c00104 	addi	r3,r3,4
1800f16c:	d8c02215 	stw	r3,136(sp)
1800f170:	9829d7fa 	srai	r20,r19,31
1800f174:	a005883a 	mov	r2,r20
1800f178:	003d4b06 	br	1800e6a8 <__alt_data_end+0xf800e6a8>
1800f17c:	0009883a 	mov	r4,zero
1800f180:	01400044 	movi	r5,1
1800f184:	d811883a 	mov	r8,sp
1800f188:	003e4f06 	br	1800eac8 <__alt_data_end+0xf800eac8>
1800f18c:	d8c02215 	stw	r3,136(sp)
1800f190:	002b883a 	mov	r21,zero
1800f194:	003db806 	br	1800e878 <__alt_data_end+0xf800e878>
1800f198:	d811883a 	mov	r8,sp
1800f19c:	003e9606 	br	1800ebf8 <__alt_data_end+0xf800ebf8>
1800f1a0:	01060074 	movhi	r4,6145
1800f1a4:	21196404 	addi	r4,r4,26000
1800f1a8:	d9002315 	stw	r4,140(sp)
1800f1ac:	003e6306 	br	1800eb3c <__alt_data_end+0xf800eb3c>
1800f1b0:	b0c00043 	ldbu	r3,1(r22)
1800f1b4:	8c400814 	ori	r17,r17,32
1800f1b8:	b5800044 	addi	r22,r22,1
1800f1bc:	18c03fcc 	andi	r3,r3,255
1800f1c0:	18c0201c 	xori	r3,r3,128
1800f1c4:	18ffe004 	addi	r3,r3,-128
1800f1c8:	003b9c06 	br	1800e03c <__alt_data_end+0xf800e03c>
1800f1cc:	b809883a 	mov	r4,r23
1800f1d0:	da002a15 	stw	r8,168(sp)
1800f1d4:	8002e0c0 	call	18002e0c <strlen>
1800f1d8:	1029883a 	mov	r20,r2
1800f1dc:	dd401d83 	ldbu	r21,118(sp)
1800f1e0:	df002215 	stw	fp,136(sp)
1800f1e4:	0021883a 	mov	r16,zero
1800f1e8:	da002a17 	ldw	r8,168(sp)
1800f1ec:	003c3906 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800f1f0:	d9402017 	ldw	r5,128(sp)
1800f1f4:	d9002117 	ldw	r4,132(sp)
1800f1f8:	d9801a04 	addi	r6,sp,104
1800f1fc:	800ddb40 	call	1800ddb4 <__sprint_r.part.0>
1800f200:	103e691e 	bne	r2,zero,1800eba8 <__alt_data_end+0xf800eba8>
1800f204:	d9001b17 	ldw	r4,108(sp)
1800f208:	d8801c17 	ldw	r2,112(sp)
1800f20c:	d811883a 	mov	r8,sp
1800f210:	21400044 	addi	r5,r4,1
1800f214:	003e2e06 	br	1800ead0 <__alt_data_end+0xf800ead0>
1800f218:	01060074 	movhi	r4,6145
1800f21c:	21196804 	addi	r4,r4,26016
1800f220:	d9002315 	stw	r4,140(sp)
1800f224:	d9001b17 	ldw	r4,108(sp)
1800f228:	21000044 	addi	r4,r4,1
1800f22c:	003c5e06 	br	1800e3a8 <__alt_data_end+0xf800e3a8>
1800f230:	002b883a 	mov	r21,zero
1800f234:	00800084 	movi	r2,2
1800f238:	10803fcc 	andi	r2,r2,255
1800f23c:	01000044 	movi	r4,1
1800f240:	11002b26 	beq	r2,r4,1800f2f0 <___vfiprintf_internal_r+0x1428>
1800f244:	01000084 	movi	r4,2
1800f248:	11002b1e 	bne	r2,r4,1800f2f8 <___vfiprintf_internal_r+0x1430>
1800f24c:	1823883a 	mov	r17,r3
1800f250:	003ee506 	br	1800ede8 <__alt_data_end+0xf800ede8>
1800f254:	8807883a 	mov	r3,r17
1800f258:	00800044 	movi	r2,1
1800f25c:	003ff606 	br	1800f238 <__alt_data_end+0xf800f238>
1800f260:	00800184 	movi	r2,6
1800f264:	1400012e 	bgeu	r2,r16,1800f26c <___vfiprintf_internal_r+0x13a4>
1800f268:	1021883a 	mov	r16,r2
1800f26c:	8029883a 	mov	r20,r16
1800f270:	8027883a 	mov	r19,r16
1800f274:	80002216 	blt	r16,zero,1800f300 <___vfiprintf_internal_r+0x1438>
1800f278:	05c60074 	movhi	r23,6145
1800f27c:	df002215 	stw	fp,136(sp)
1800f280:	bdd8f804 	addi	r23,r23,25568
1800f284:	003cfb06 	br	1800e674 <__alt_data_end+0xf800e674>
1800f288:	d9002217 	ldw	r4,136(sp)
1800f28c:	d9402417 	ldw	r5,144(sp)
1800f290:	20800017 	ldw	r2,0(r4)
1800f294:	21000104 	addi	r4,r4,4
1800f298:	d9002215 	stw	r4,136(sp)
1800f29c:	11400015 	stw	r5,0(r2)
1800f2a0:	003b3d06 	br	1800df98 <__alt_data_end+0xf800df98>
1800f2a4:	01460074 	movhi	r5,6145
1800f2a8:	29596804 	addi	r5,r5,26016
1800f2ac:	d9402315 	stw	r5,140(sp)
1800f2b0:	d9401b17 	ldw	r5,108(sp)
1800f2b4:	29400044 	addi	r5,r5,1
1800f2b8:	003e6d06 	br	1800ec70 <__alt_data_end+0xf800ec70>
1800f2bc:	8029883a 	mov	r20,r16
1800f2c0:	dd401d83 	ldbu	r21,118(sp)
1800f2c4:	df002215 	stw	fp,136(sp)
1800f2c8:	0021883a 	mov	r16,zero
1800f2cc:	003c0106 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800f2d0:	00c60074 	movhi	r3,6145
1800f2d4:	18d96404 	addi	r3,r3,26000
1800f2d8:	d8c02315 	stw	r3,140(sp)
1800f2dc:	280d883a 	mov	r6,r5
1800f2e0:	003c6906 	br	1800e488 <__alt_data_end+0xf800e488>
1800f2e4:	802d883a 	mov	r22,r16
1800f2e8:	0021883a 	mov	r16,zero
1800f2ec:	003b5406 	br	1800e040 <__alt_data_end+0xf800e040>
1800f2f0:	1823883a 	mov	r17,r3
1800f2f4:	003cf306 	br	1800e6c4 <__alt_data_end+0xf800e6c4>
1800f2f8:	1823883a 	mov	r17,r3
1800f2fc:	003cad06 	br	1800e5b4 <__alt_data_end+0xf800e5b4>
1800f300:	0027883a 	mov	r19,zero
1800f304:	003fdc06 	br	1800f278 <__alt_data_end+0xf800f278>
1800f308:	d9402217 	ldw	r5,136(sp)
1800f30c:	8005883a 	mov	r2,r16
1800f310:	b0c00043 	ldbu	r3,1(r22)
1800f314:	2c000017 	ldw	r16,0(r5)
1800f318:	29000104 	addi	r4,r5,4
1800f31c:	d9002215 	stw	r4,136(sp)
1800f320:	102d883a 	mov	r22,r2
1800f324:	803fa50e 	bge	r16,zero,1800f1bc <__alt_data_end+0xf800f1bc>
1800f328:	18c03fcc 	andi	r3,r3,255
1800f32c:	18c0201c 	xori	r3,r3,128
1800f330:	043fffc4 	movi	r16,-1
1800f334:	18ffe004 	addi	r3,r3,-128
1800f338:	003b4006 	br	1800e03c <__alt_data_end+0xf800e03c>
1800f33c:	d9402303 	ldbu	r5,140(sp)
1800f340:	d9401d85 	stb	r5,118(sp)
1800f344:	003cae06 	br	1800e600 <__alt_data_end+0xf800e600>
1800f348:	d8c02303 	ldbu	r3,140(sp)
1800f34c:	d8c01d85 	stb	r3,118(sp)
1800f350:	003d1406 	br	1800e7a4 <__alt_data_end+0xf800e7a4>
1800f354:	d8c02303 	ldbu	r3,140(sp)
1800f358:	d8c01d85 	stb	r3,118(sp)
1800f35c:	003cca06 	br	1800e688 <__alt_data_end+0xf800e688>
1800f360:	8880004c 	andi	r2,r17,1
1800f364:	002b883a 	mov	r21,zero
1800f368:	10000526 	beq	r2,zero,1800f380 <___vfiprintf_internal_r+0x14b8>
1800f36c:	00800c04 	movi	r2,48
1800f370:	d88019c5 	stb	r2,103(sp)
1800f374:	dd002817 	ldw	r20,160(sp)
1800f378:	ddc019c4 	addi	r23,sp,103
1800f37c:	003bd506 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800f380:	0029883a 	mov	r20,zero
1800f384:	ddc01a04 	addi	r23,sp,104
1800f388:	003bd206 	br	1800e2d4 <__alt_data_end+0xf800e2d4>
1800f38c:	d9002303 	ldbu	r4,140(sp)
1800f390:	d9001d85 	stb	r4,118(sp)
1800f394:	003da606 	br	1800ea30 <__alt_data_end+0xf800ea30>
1800f398:	d8c02303 	ldbu	r3,140(sp)
1800f39c:	d8c01d85 	stb	r3,118(sp)
1800f3a0:	003c7606 	br	1800e57c <__alt_data_end+0xf800e57c>
1800f3a4:	d8c02303 	ldbu	r3,140(sp)
1800f3a8:	d8c01d85 	stb	r3,118(sp)
1800f3ac:	003c6506 	br	1800e544 <__alt_data_end+0xf800e544>
1800f3b0:	d9002303 	ldbu	r4,140(sp)
1800f3b4:	d9001d85 	stb	r4,118(sp)
1800f3b8:	003d3d06 	br	1800e8b0 <__alt_data_end+0xf800e8b0>
1800f3bc:	d8c02303 	ldbu	r3,140(sp)
1800f3c0:	d8c01d85 	stb	r3,118(sp)
1800f3c4:	003d1d06 	br	1800e83c <__alt_data_end+0xf800e83c>
1800f3c8:	d8c02303 	ldbu	r3,140(sp)
1800f3cc:	d8c01d85 	stb	r3,118(sp)
1800f3d0:	003d0306 	br	1800e7e0 <__alt_data_end+0xf800e7e0>

1800f3d4 <__vfiprintf_internal>:
1800f3d4:	008600b4 	movhi	r2,6146
1800f3d8:	10a11f04 	addi	r2,r2,-31620
1800f3dc:	300f883a 	mov	r7,r6
1800f3e0:	280d883a 	mov	r6,r5
1800f3e4:	200b883a 	mov	r5,r4
1800f3e8:	11000017 	ldw	r4,0(r2)
1800f3ec:	800dec81 	jmpi	1800dec8 <___vfiprintf_internal_r>

1800f3f0 <__sbprintf>:
1800f3f0:	2880030b 	ldhu	r2,12(r5)
1800f3f4:	2ac01917 	ldw	r11,100(r5)
1800f3f8:	2a80038b 	ldhu	r10,14(r5)
1800f3fc:	2a400717 	ldw	r9,28(r5)
1800f400:	2a000917 	ldw	r8,36(r5)
1800f404:	defee204 	addi	sp,sp,-1144
1800f408:	00c10004 	movi	r3,1024
1800f40c:	dc011a15 	stw	r16,1128(sp)
1800f410:	10bfff4c 	andi	r2,r2,65533
1800f414:	2821883a 	mov	r16,r5
1800f418:	d8cb883a 	add	r5,sp,r3
1800f41c:	dc811c15 	stw	r18,1136(sp)
1800f420:	dc411b15 	stw	r17,1132(sp)
1800f424:	dfc11d15 	stw	ra,1140(sp)
1800f428:	2025883a 	mov	r18,r4
1800f42c:	d881030d 	sth	r2,1036(sp)
1800f430:	dac11915 	stw	r11,1124(sp)
1800f434:	da81038d 	sth	r10,1038(sp)
1800f438:	da410715 	stw	r9,1052(sp)
1800f43c:	da010915 	stw	r8,1060(sp)
1800f440:	dec10015 	stw	sp,1024(sp)
1800f444:	dec10415 	stw	sp,1040(sp)
1800f448:	d8c10215 	stw	r3,1032(sp)
1800f44c:	d8c10515 	stw	r3,1044(sp)
1800f450:	d8010615 	stw	zero,1048(sp)
1800f454:	800dec80 	call	1800dec8 <___vfiprintf_internal_r>
1800f458:	1023883a 	mov	r17,r2
1800f45c:	10000416 	blt	r2,zero,1800f470 <__sbprintf+0x80>
1800f460:	d9410004 	addi	r5,sp,1024
1800f464:	9009883a 	mov	r4,r18
1800f468:	80091340 	call	18009134 <_fflush_r>
1800f46c:	10000d1e 	bne	r2,zero,1800f4a4 <__sbprintf+0xb4>
1800f470:	d881030b 	ldhu	r2,1036(sp)
1800f474:	1080100c 	andi	r2,r2,64
1800f478:	10000326 	beq	r2,zero,1800f488 <__sbprintf+0x98>
1800f47c:	8080030b 	ldhu	r2,12(r16)
1800f480:	10801014 	ori	r2,r2,64
1800f484:	8080030d 	sth	r2,12(r16)
1800f488:	8805883a 	mov	r2,r17
1800f48c:	dfc11d17 	ldw	ra,1140(sp)
1800f490:	dc811c17 	ldw	r18,1136(sp)
1800f494:	dc411b17 	ldw	r17,1132(sp)
1800f498:	dc011a17 	ldw	r16,1128(sp)
1800f49c:	dec11e04 	addi	sp,sp,1144
1800f4a0:	f800283a 	ret
1800f4a4:	047fffc4 	movi	r17,-1
1800f4a8:	003ff106 	br	1800f470 <__alt_data_end+0xf800f470>

1800f4ac <_write_r>:
1800f4ac:	defffd04 	addi	sp,sp,-12
1800f4b0:	2805883a 	mov	r2,r5
1800f4b4:	dc000015 	stw	r16,0(sp)
1800f4b8:	040600b4 	movhi	r16,6146
1800f4bc:	dc400115 	stw	r17,4(sp)
1800f4c0:	300b883a 	mov	r5,r6
1800f4c4:	8428aa04 	addi	r16,r16,-23896
1800f4c8:	2023883a 	mov	r17,r4
1800f4cc:	380d883a 	mov	r6,r7
1800f4d0:	1009883a 	mov	r4,r2
1800f4d4:	dfc00215 	stw	ra,8(sp)
1800f4d8:	80000015 	stw	zero,0(r16)
1800f4dc:	8013c2c0 	call	18013c2c <write>
1800f4e0:	00ffffc4 	movi	r3,-1
1800f4e4:	10c00526 	beq	r2,r3,1800f4fc <_write_r+0x50>
1800f4e8:	dfc00217 	ldw	ra,8(sp)
1800f4ec:	dc400117 	ldw	r17,4(sp)
1800f4f0:	dc000017 	ldw	r16,0(sp)
1800f4f4:	dec00304 	addi	sp,sp,12
1800f4f8:	f800283a 	ret
1800f4fc:	80c00017 	ldw	r3,0(r16)
1800f500:	183ff926 	beq	r3,zero,1800f4e8 <__alt_data_end+0xf800f4e8>
1800f504:	88c00015 	stw	r3,0(r17)
1800f508:	003ff706 	br	1800f4e8 <__alt_data_end+0xf800f4e8>

1800f50c <_close_r>:
1800f50c:	defffd04 	addi	sp,sp,-12
1800f510:	dc000015 	stw	r16,0(sp)
1800f514:	040600b4 	movhi	r16,6146
1800f518:	dc400115 	stw	r17,4(sp)
1800f51c:	8428aa04 	addi	r16,r16,-23896
1800f520:	2023883a 	mov	r17,r4
1800f524:	2809883a 	mov	r4,r5
1800f528:	dfc00215 	stw	ra,8(sp)
1800f52c:	80000015 	stw	zero,0(r16)
1800f530:	80133a40 	call	180133a4 <close>
1800f534:	00ffffc4 	movi	r3,-1
1800f538:	10c00526 	beq	r2,r3,1800f550 <_close_r+0x44>
1800f53c:	dfc00217 	ldw	ra,8(sp)
1800f540:	dc400117 	ldw	r17,4(sp)
1800f544:	dc000017 	ldw	r16,0(sp)
1800f548:	dec00304 	addi	sp,sp,12
1800f54c:	f800283a 	ret
1800f550:	80c00017 	ldw	r3,0(r16)
1800f554:	183ff926 	beq	r3,zero,1800f53c <__alt_data_end+0xf800f53c>
1800f558:	88c00015 	stw	r3,0(r17)
1800f55c:	003ff706 	br	1800f53c <__alt_data_end+0xf800f53c>

1800f560 <_calloc_r>:
1800f560:	defffe04 	addi	sp,sp,-8
1800f564:	2805883a 	mov	r2,r5
1800f568:	dc000015 	stw	r16,0(sp)
1800f56c:	300b883a 	mov	r5,r6
1800f570:	2021883a 	mov	r16,r4
1800f574:	1009883a 	mov	r4,r2
1800f578:	dfc00115 	stw	ra,4(sp)
1800f57c:	8002b640 	call	18002b64 <__mulsi3>
1800f580:	100b883a 	mov	r5,r2
1800f584:	8009883a 	mov	r4,r16
1800f588:	800a28c0 	call	1800a28c <_malloc_r>
1800f58c:	10002926 	beq	r2,zero,1800f634 <_calloc_r+0xd4>
1800f590:	11bfff17 	ldw	r6,-4(r2)
1800f594:	1021883a 	mov	r16,r2
1800f598:	00bfff04 	movi	r2,-4
1800f59c:	308c703a 	and	r6,r6,r2
1800f5a0:	00c00904 	movi	r3,36
1800f5a4:	308d883a 	add	r6,r6,r2
1800f5a8:	19801636 	bltu	r3,r6,1800f604 <_calloc_r+0xa4>
1800f5ac:	008004c4 	movi	r2,19
1800f5b0:	11800b2e 	bgeu	r2,r6,1800f5e0 <_calloc_r+0x80>
1800f5b4:	80000015 	stw	zero,0(r16)
1800f5b8:	80000115 	stw	zero,4(r16)
1800f5bc:	008006c4 	movi	r2,27
1800f5c0:	11801a2e 	bgeu	r2,r6,1800f62c <_calloc_r+0xcc>
1800f5c4:	80000215 	stw	zero,8(r16)
1800f5c8:	80000315 	stw	zero,12(r16)
1800f5cc:	30c0151e 	bne	r6,r3,1800f624 <_calloc_r+0xc4>
1800f5d0:	80000415 	stw	zero,16(r16)
1800f5d4:	80800604 	addi	r2,r16,24
1800f5d8:	80000515 	stw	zero,20(r16)
1800f5dc:	00000106 	br	1800f5e4 <_calloc_r+0x84>
1800f5e0:	8005883a 	mov	r2,r16
1800f5e4:	10000015 	stw	zero,0(r2)
1800f5e8:	10000115 	stw	zero,4(r2)
1800f5ec:	10000215 	stw	zero,8(r2)
1800f5f0:	8005883a 	mov	r2,r16
1800f5f4:	dfc00117 	ldw	ra,4(sp)
1800f5f8:	dc000017 	ldw	r16,0(sp)
1800f5fc:	dec00204 	addi	sp,sp,8
1800f600:	f800283a 	ret
1800f604:	000b883a 	mov	r5,zero
1800f608:	8009883a 	mov	r4,r16
1800f60c:	800ae200 	call	1800ae20 <memset>
1800f610:	8005883a 	mov	r2,r16
1800f614:	dfc00117 	ldw	ra,4(sp)
1800f618:	dc000017 	ldw	r16,0(sp)
1800f61c:	dec00204 	addi	sp,sp,8
1800f620:	f800283a 	ret
1800f624:	80800404 	addi	r2,r16,16
1800f628:	003fee06 	br	1800f5e4 <__alt_data_end+0xf800f5e4>
1800f62c:	80800204 	addi	r2,r16,8
1800f630:	003fec06 	br	1800f5e4 <__alt_data_end+0xf800f5e4>
1800f634:	0005883a 	mov	r2,zero
1800f638:	003fee06 	br	1800f5f4 <__alt_data_end+0xf800f5f4>

1800f63c <_fclose_r>:
1800f63c:	28003926 	beq	r5,zero,1800f724 <_fclose_r+0xe8>
1800f640:	defffc04 	addi	sp,sp,-16
1800f644:	dc400115 	stw	r17,4(sp)
1800f648:	dc000015 	stw	r16,0(sp)
1800f64c:	dfc00315 	stw	ra,12(sp)
1800f650:	dc800215 	stw	r18,8(sp)
1800f654:	2023883a 	mov	r17,r4
1800f658:	2821883a 	mov	r16,r5
1800f65c:	20000226 	beq	r4,zero,1800f668 <_fclose_r+0x2c>
1800f660:	20800e17 	ldw	r2,56(r4)
1800f664:	10002726 	beq	r2,zero,1800f704 <_fclose_r+0xc8>
1800f668:	8080030f 	ldh	r2,12(r16)
1800f66c:	1000071e 	bne	r2,zero,1800f68c <_fclose_r+0x50>
1800f670:	0005883a 	mov	r2,zero
1800f674:	dfc00317 	ldw	ra,12(sp)
1800f678:	dc800217 	ldw	r18,8(sp)
1800f67c:	dc400117 	ldw	r17,4(sp)
1800f680:	dc000017 	ldw	r16,0(sp)
1800f684:	dec00404 	addi	sp,sp,16
1800f688:	f800283a 	ret
1800f68c:	800b883a 	mov	r5,r16
1800f690:	8809883a 	mov	r4,r17
1800f694:	8008f180 	call	18008f18 <__sflush_r>
1800f698:	1025883a 	mov	r18,r2
1800f69c:	80800b17 	ldw	r2,44(r16)
1800f6a0:	10000426 	beq	r2,zero,1800f6b4 <_fclose_r+0x78>
1800f6a4:	81400717 	ldw	r5,28(r16)
1800f6a8:	8809883a 	mov	r4,r17
1800f6ac:	103ee83a 	callr	r2
1800f6b0:	10001616 	blt	r2,zero,1800f70c <_fclose_r+0xd0>
1800f6b4:	8080030b 	ldhu	r2,12(r16)
1800f6b8:	1080200c 	andi	r2,r2,128
1800f6bc:	1000151e 	bne	r2,zero,1800f714 <_fclose_r+0xd8>
1800f6c0:	81400c17 	ldw	r5,48(r16)
1800f6c4:	28000526 	beq	r5,zero,1800f6dc <_fclose_r+0xa0>
1800f6c8:	80801004 	addi	r2,r16,64
1800f6cc:	28800226 	beq	r5,r2,1800f6d8 <_fclose_r+0x9c>
1800f6d0:	8809883a 	mov	r4,r17
1800f6d4:	80096940 	call	18009694 <_free_r>
1800f6d8:	80000c15 	stw	zero,48(r16)
1800f6dc:	81401117 	ldw	r5,68(r16)
1800f6e0:	28000326 	beq	r5,zero,1800f6f0 <_fclose_r+0xb4>
1800f6e4:	8809883a 	mov	r4,r17
1800f6e8:	80096940 	call	18009694 <_free_r>
1800f6ec:	80001115 	stw	zero,68(r16)
1800f6f0:	80095300 	call	18009530 <__sfp_lock_acquire>
1800f6f4:	8000030d 	sth	zero,12(r16)
1800f6f8:	80095340 	call	18009534 <__sfp_lock_release>
1800f6fc:	9005883a 	mov	r2,r18
1800f700:	003fdc06 	br	1800f674 <__alt_data_end+0xf800f674>
1800f704:	80095200 	call	18009520 <__sinit>
1800f708:	003fd706 	br	1800f668 <__alt_data_end+0xf800f668>
1800f70c:	04bfffc4 	movi	r18,-1
1800f710:	003fe806 	br	1800f6b4 <__alt_data_end+0xf800f6b4>
1800f714:	81400417 	ldw	r5,16(r16)
1800f718:	8809883a 	mov	r4,r17
1800f71c:	80096940 	call	18009694 <_free_r>
1800f720:	003fe706 	br	1800f6c0 <__alt_data_end+0xf800f6c0>
1800f724:	0005883a 	mov	r2,zero
1800f728:	f800283a 	ret

1800f72c <fclose>:
1800f72c:	008600b4 	movhi	r2,6146
1800f730:	10a11f04 	addi	r2,r2,-31620
1800f734:	200b883a 	mov	r5,r4
1800f738:	11000017 	ldw	r4,0(r2)
1800f73c:	800f63c1 	jmpi	1800f63c <_fclose_r>

1800f740 <__fputwc>:
1800f740:	defff804 	addi	sp,sp,-32
1800f744:	dcc00415 	stw	r19,16(sp)
1800f748:	dc800315 	stw	r18,12(sp)
1800f74c:	dc000115 	stw	r16,4(sp)
1800f750:	dfc00715 	stw	ra,28(sp)
1800f754:	dd400615 	stw	r21,24(sp)
1800f758:	dd000515 	stw	r20,20(sp)
1800f75c:	dc400215 	stw	r17,8(sp)
1800f760:	2027883a 	mov	r19,r4
1800f764:	2825883a 	mov	r18,r5
1800f768:	3021883a 	mov	r16,r6
1800f76c:	800a07c0 	call	1800a07c <__locale_mb_cur_max>
1800f770:	00c00044 	movi	r3,1
1800f774:	10c03e26 	beq	r2,r3,1800f870 <__fputwc+0x130>
1800f778:	81c01704 	addi	r7,r16,92
1800f77c:	900d883a 	mov	r6,r18
1800f780:	d80b883a 	mov	r5,sp
1800f784:	9809883a 	mov	r4,r19
1800f788:	800fc100 	call	1800fc10 <_wcrtomb_r>
1800f78c:	1029883a 	mov	r20,r2
1800f790:	00bfffc4 	movi	r2,-1
1800f794:	a0802026 	beq	r20,r2,1800f818 <__fputwc+0xd8>
1800f798:	d9400003 	ldbu	r5,0(sp)
1800f79c:	a0001c26 	beq	r20,zero,1800f810 <__fputwc+0xd0>
1800f7a0:	0023883a 	mov	r17,zero
1800f7a4:	05400284 	movi	r21,10
1800f7a8:	00000906 	br	1800f7d0 <__fputwc+0x90>
1800f7ac:	80800017 	ldw	r2,0(r16)
1800f7b0:	11400005 	stb	r5,0(r2)
1800f7b4:	80c00017 	ldw	r3,0(r16)
1800f7b8:	18c00044 	addi	r3,r3,1
1800f7bc:	80c00015 	stw	r3,0(r16)
1800f7c0:	8c400044 	addi	r17,r17,1
1800f7c4:	dc45883a 	add	r2,sp,r17
1800f7c8:	8d00112e 	bgeu	r17,r20,1800f810 <__fputwc+0xd0>
1800f7cc:	11400003 	ldbu	r5,0(r2)
1800f7d0:	80c00217 	ldw	r3,8(r16)
1800f7d4:	18ffffc4 	addi	r3,r3,-1
1800f7d8:	80c00215 	stw	r3,8(r16)
1800f7dc:	183ff30e 	bge	r3,zero,1800f7ac <__alt_data_end+0xf800f7ac>
1800f7e0:	80800617 	ldw	r2,24(r16)
1800f7e4:	18801916 	blt	r3,r2,1800f84c <__fputwc+0x10c>
1800f7e8:	80800017 	ldw	r2,0(r16)
1800f7ec:	11400005 	stb	r5,0(r2)
1800f7f0:	80800017 	ldw	r2,0(r16)
1800f7f4:	10c00003 	ldbu	r3,0(r2)
1800f7f8:	10800044 	addi	r2,r2,1
1800f7fc:	1d402326 	beq	r3,r21,1800f88c <__fputwc+0x14c>
1800f800:	80800015 	stw	r2,0(r16)
1800f804:	8c400044 	addi	r17,r17,1
1800f808:	dc45883a 	add	r2,sp,r17
1800f80c:	8d3fef36 	bltu	r17,r20,1800f7cc <__alt_data_end+0xf800f7cc>
1800f810:	9005883a 	mov	r2,r18
1800f814:	00000406 	br	1800f828 <__fputwc+0xe8>
1800f818:	80c0030b 	ldhu	r3,12(r16)
1800f81c:	a005883a 	mov	r2,r20
1800f820:	18c01014 	ori	r3,r3,64
1800f824:	80c0030d 	sth	r3,12(r16)
1800f828:	dfc00717 	ldw	ra,28(sp)
1800f82c:	dd400617 	ldw	r21,24(sp)
1800f830:	dd000517 	ldw	r20,20(sp)
1800f834:	dcc00417 	ldw	r19,16(sp)
1800f838:	dc800317 	ldw	r18,12(sp)
1800f83c:	dc400217 	ldw	r17,8(sp)
1800f840:	dc000117 	ldw	r16,4(sp)
1800f844:	dec00804 	addi	sp,sp,32
1800f848:	f800283a 	ret
1800f84c:	800d883a 	mov	r6,r16
1800f850:	29403fcc 	andi	r5,r5,255
1800f854:	9809883a 	mov	r4,r19
1800f858:	800fab80 	call	1800fab8 <__swbuf_r>
1800f85c:	10bfffe0 	cmpeqi	r2,r2,-1
1800f860:	10803fcc 	andi	r2,r2,255
1800f864:	103fd626 	beq	r2,zero,1800f7c0 <__alt_data_end+0xf800f7c0>
1800f868:	00bfffc4 	movi	r2,-1
1800f86c:	003fee06 	br	1800f828 <__alt_data_end+0xf800f828>
1800f870:	90ffffc4 	addi	r3,r18,-1
1800f874:	01003f84 	movi	r4,254
1800f878:	20ffbf36 	bltu	r4,r3,1800f778 <__alt_data_end+0xf800f778>
1800f87c:	900b883a 	mov	r5,r18
1800f880:	dc800005 	stb	r18,0(sp)
1800f884:	1029883a 	mov	r20,r2
1800f888:	003fc506 	br	1800f7a0 <__alt_data_end+0xf800f7a0>
1800f88c:	800d883a 	mov	r6,r16
1800f890:	a80b883a 	mov	r5,r21
1800f894:	9809883a 	mov	r4,r19
1800f898:	800fab80 	call	1800fab8 <__swbuf_r>
1800f89c:	10bfffe0 	cmpeqi	r2,r2,-1
1800f8a0:	003fef06 	br	1800f860 <__alt_data_end+0xf800f860>

1800f8a4 <_fputwc_r>:
1800f8a4:	3080030b 	ldhu	r2,12(r6)
1800f8a8:	10c8000c 	andi	r3,r2,8192
1800f8ac:	1800051e 	bne	r3,zero,1800f8c4 <_fputwc_r+0x20>
1800f8b0:	30c01917 	ldw	r3,100(r6)
1800f8b4:	10880014 	ori	r2,r2,8192
1800f8b8:	3080030d 	sth	r2,12(r6)
1800f8bc:	18880014 	ori	r2,r3,8192
1800f8c0:	30801915 	stw	r2,100(r6)
1800f8c4:	800f7401 	jmpi	1800f740 <__fputwc>

1800f8c8 <fputwc>:
1800f8c8:	008600b4 	movhi	r2,6146
1800f8cc:	defffc04 	addi	sp,sp,-16
1800f8d0:	10a11f04 	addi	r2,r2,-31620
1800f8d4:	dc000115 	stw	r16,4(sp)
1800f8d8:	14000017 	ldw	r16,0(r2)
1800f8dc:	dc400215 	stw	r17,8(sp)
1800f8e0:	dfc00315 	stw	ra,12(sp)
1800f8e4:	2023883a 	mov	r17,r4
1800f8e8:	80000226 	beq	r16,zero,1800f8f4 <fputwc+0x2c>
1800f8ec:	80800e17 	ldw	r2,56(r16)
1800f8f0:	10001026 	beq	r2,zero,1800f934 <fputwc+0x6c>
1800f8f4:	2880030b 	ldhu	r2,12(r5)
1800f8f8:	10c8000c 	andi	r3,r2,8192
1800f8fc:	1800051e 	bne	r3,zero,1800f914 <fputwc+0x4c>
1800f900:	28c01917 	ldw	r3,100(r5)
1800f904:	10880014 	ori	r2,r2,8192
1800f908:	2880030d 	sth	r2,12(r5)
1800f90c:	18880014 	ori	r2,r3,8192
1800f910:	28801915 	stw	r2,100(r5)
1800f914:	280d883a 	mov	r6,r5
1800f918:	8009883a 	mov	r4,r16
1800f91c:	880b883a 	mov	r5,r17
1800f920:	dfc00317 	ldw	ra,12(sp)
1800f924:	dc400217 	ldw	r17,8(sp)
1800f928:	dc000117 	ldw	r16,4(sp)
1800f92c:	dec00404 	addi	sp,sp,16
1800f930:	800f7401 	jmpi	1800f740 <__fputwc>
1800f934:	8009883a 	mov	r4,r16
1800f938:	d9400015 	stw	r5,0(sp)
1800f93c:	80095200 	call	18009520 <__sinit>
1800f940:	d9400017 	ldw	r5,0(sp)
1800f944:	003feb06 	br	1800f8f4 <__alt_data_end+0xf800f8f4>

1800f948 <_fstat_r>:
1800f948:	defffd04 	addi	sp,sp,-12
1800f94c:	2805883a 	mov	r2,r5
1800f950:	dc000015 	stw	r16,0(sp)
1800f954:	040600b4 	movhi	r16,6146
1800f958:	dc400115 	stw	r17,4(sp)
1800f95c:	8428aa04 	addi	r16,r16,-23896
1800f960:	2023883a 	mov	r17,r4
1800f964:	300b883a 	mov	r5,r6
1800f968:	1009883a 	mov	r4,r2
1800f96c:	dfc00215 	stw	ra,8(sp)
1800f970:	80000015 	stw	zero,0(r16)
1800f974:	80134e40 	call	180134e4 <fstat>
1800f978:	00ffffc4 	movi	r3,-1
1800f97c:	10c00526 	beq	r2,r3,1800f994 <_fstat_r+0x4c>
1800f980:	dfc00217 	ldw	ra,8(sp)
1800f984:	dc400117 	ldw	r17,4(sp)
1800f988:	dc000017 	ldw	r16,0(sp)
1800f98c:	dec00304 	addi	sp,sp,12
1800f990:	f800283a 	ret
1800f994:	80c00017 	ldw	r3,0(r16)
1800f998:	183ff926 	beq	r3,zero,1800f980 <__alt_data_end+0xf800f980>
1800f99c:	88c00015 	stw	r3,0(r17)
1800f9a0:	003ff706 	br	1800f980 <__alt_data_end+0xf800f980>

1800f9a4 <_isatty_r>:
1800f9a4:	defffd04 	addi	sp,sp,-12
1800f9a8:	dc000015 	stw	r16,0(sp)
1800f9ac:	040600b4 	movhi	r16,6146
1800f9b0:	dc400115 	stw	r17,4(sp)
1800f9b4:	8428aa04 	addi	r16,r16,-23896
1800f9b8:	2023883a 	mov	r17,r4
1800f9bc:	2809883a 	mov	r4,r5
1800f9c0:	dfc00215 	stw	ra,8(sp)
1800f9c4:	80000015 	stw	zero,0(r16)
1800f9c8:	80135d80 	call	180135d8 <isatty>
1800f9cc:	00ffffc4 	movi	r3,-1
1800f9d0:	10c00526 	beq	r2,r3,1800f9e8 <_isatty_r+0x44>
1800f9d4:	dfc00217 	ldw	ra,8(sp)
1800f9d8:	dc400117 	ldw	r17,4(sp)
1800f9dc:	dc000017 	ldw	r16,0(sp)
1800f9e0:	dec00304 	addi	sp,sp,12
1800f9e4:	f800283a 	ret
1800f9e8:	80c00017 	ldw	r3,0(r16)
1800f9ec:	183ff926 	beq	r3,zero,1800f9d4 <__alt_data_end+0xf800f9d4>
1800f9f0:	88c00015 	stw	r3,0(r17)
1800f9f4:	003ff706 	br	1800f9d4 <__alt_data_end+0xf800f9d4>

1800f9f8 <_lseek_r>:
1800f9f8:	defffd04 	addi	sp,sp,-12
1800f9fc:	2805883a 	mov	r2,r5
1800fa00:	dc000015 	stw	r16,0(sp)
1800fa04:	040600b4 	movhi	r16,6146
1800fa08:	dc400115 	stw	r17,4(sp)
1800fa0c:	300b883a 	mov	r5,r6
1800fa10:	8428aa04 	addi	r16,r16,-23896
1800fa14:	2023883a 	mov	r17,r4
1800fa18:	380d883a 	mov	r6,r7
1800fa1c:	1009883a 	mov	r4,r2
1800fa20:	dfc00215 	stw	ra,8(sp)
1800fa24:	80000015 	stw	zero,0(r16)
1800fa28:	80137ac0 	call	180137ac <lseek>
1800fa2c:	00ffffc4 	movi	r3,-1
1800fa30:	10c00526 	beq	r2,r3,1800fa48 <_lseek_r+0x50>
1800fa34:	dfc00217 	ldw	ra,8(sp)
1800fa38:	dc400117 	ldw	r17,4(sp)
1800fa3c:	dc000017 	ldw	r16,0(sp)
1800fa40:	dec00304 	addi	sp,sp,12
1800fa44:	f800283a 	ret
1800fa48:	80c00017 	ldw	r3,0(r16)
1800fa4c:	183ff926 	beq	r3,zero,1800fa34 <__alt_data_end+0xf800fa34>
1800fa50:	88c00015 	stw	r3,0(r17)
1800fa54:	003ff706 	br	1800fa34 <__alt_data_end+0xf800fa34>

1800fa58 <_read_r>:
1800fa58:	defffd04 	addi	sp,sp,-12
1800fa5c:	2805883a 	mov	r2,r5
1800fa60:	dc000015 	stw	r16,0(sp)
1800fa64:	040600b4 	movhi	r16,6146
1800fa68:	dc400115 	stw	r17,4(sp)
1800fa6c:	300b883a 	mov	r5,r6
1800fa70:	8428aa04 	addi	r16,r16,-23896
1800fa74:	2023883a 	mov	r17,r4
1800fa78:	380d883a 	mov	r6,r7
1800fa7c:	1009883a 	mov	r4,r2
1800fa80:	dfc00215 	stw	ra,8(sp)
1800fa84:	80000015 	stw	zero,0(r16)
1800fa88:	80139880 	call	18013988 <read>
1800fa8c:	00ffffc4 	movi	r3,-1
1800fa90:	10c00526 	beq	r2,r3,1800faa8 <_read_r+0x50>
1800fa94:	dfc00217 	ldw	ra,8(sp)
1800fa98:	dc400117 	ldw	r17,4(sp)
1800fa9c:	dc000017 	ldw	r16,0(sp)
1800faa0:	dec00304 	addi	sp,sp,12
1800faa4:	f800283a 	ret
1800faa8:	80c00017 	ldw	r3,0(r16)
1800faac:	183ff926 	beq	r3,zero,1800fa94 <__alt_data_end+0xf800fa94>
1800fab0:	88c00015 	stw	r3,0(r17)
1800fab4:	003ff706 	br	1800fa94 <__alt_data_end+0xf800fa94>

1800fab8 <__swbuf_r>:
1800fab8:	defffb04 	addi	sp,sp,-20
1800fabc:	dcc00315 	stw	r19,12(sp)
1800fac0:	dc800215 	stw	r18,8(sp)
1800fac4:	dc000015 	stw	r16,0(sp)
1800fac8:	dfc00415 	stw	ra,16(sp)
1800facc:	dc400115 	stw	r17,4(sp)
1800fad0:	2025883a 	mov	r18,r4
1800fad4:	2827883a 	mov	r19,r5
1800fad8:	3021883a 	mov	r16,r6
1800fadc:	20000226 	beq	r4,zero,1800fae8 <__swbuf_r+0x30>
1800fae0:	20800e17 	ldw	r2,56(r4)
1800fae4:	10004226 	beq	r2,zero,1800fbf0 <__swbuf_r+0x138>
1800fae8:	80800617 	ldw	r2,24(r16)
1800faec:	8100030b 	ldhu	r4,12(r16)
1800faf0:	80800215 	stw	r2,8(r16)
1800faf4:	2080020c 	andi	r2,r4,8
1800faf8:	10003626 	beq	r2,zero,1800fbd4 <__swbuf_r+0x11c>
1800fafc:	80c00417 	ldw	r3,16(r16)
1800fb00:	18003426 	beq	r3,zero,1800fbd4 <__swbuf_r+0x11c>
1800fb04:	2088000c 	andi	r2,r4,8192
1800fb08:	9c403fcc 	andi	r17,r19,255
1800fb0c:	10001a26 	beq	r2,zero,1800fb78 <__swbuf_r+0xc0>
1800fb10:	80800017 	ldw	r2,0(r16)
1800fb14:	81000517 	ldw	r4,20(r16)
1800fb18:	10c7c83a 	sub	r3,r2,r3
1800fb1c:	1900200e 	bge	r3,r4,1800fba0 <__swbuf_r+0xe8>
1800fb20:	18c00044 	addi	r3,r3,1
1800fb24:	81000217 	ldw	r4,8(r16)
1800fb28:	11400044 	addi	r5,r2,1
1800fb2c:	81400015 	stw	r5,0(r16)
1800fb30:	213fffc4 	addi	r4,r4,-1
1800fb34:	81000215 	stw	r4,8(r16)
1800fb38:	14c00005 	stb	r19,0(r2)
1800fb3c:	80800517 	ldw	r2,20(r16)
1800fb40:	10c01e26 	beq	r2,r3,1800fbbc <__swbuf_r+0x104>
1800fb44:	8080030b 	ldhu	r2,12(r16)
1800fb48:	1080004c 	andi	r2,r2,1
1800fb4c:	10000226 	beq	r2,zero,1800fb58 <__swbuf_r+0xa0>
1800fb50:	00800284 	movi	r2,10
1800fb54:	88801926 	beq	r17,r2,1800fbbc <__swbuf_r+0x104>
1800fb58:	8805883a 	mov	r2,r17
1800fb5c:	dfc00417 	ldw	ra,16(sp)
1800fb60:	dcc00317 	ldw	r19,12(sp)
1800fb64:	dc800217 	ldw	r18,8(sp)
1800fb68:	dc400117 	ldw	r17,4(sp)
1800fb6c:	dc000017 	ldw	r16,0(sp)
1800fb70:	dec00504 	addi	sp,sp,20
1800fb74:	f800283a 	ret
1800fb78:	81401917 	ldw	r5,100(r16)
1800fb7c:	00b7ffc4 	movi	r2,-8193
1800fb80:	21080014 	ori	r4,r4,8192
1800fb84:	2884703a 	and	r2,r5,r2
1800fb88:	80801915 	stw	r2,100(r16)
1800fb8c:	80800017 	ldw	r2,0(r16)
1800fb90:	8100030d 	sth	r4,12(r16)
1800fb94:	81000517 	ldw	r4,20(r16)
1800fb98:	10c7c83a 	sub	r3,r2,r3
1800fb9c:	193fe016 	blt	r3,r4,1800fb20 <__alt_data_end+0xf800fb20>
1800fba0:	800b883a 	mov	r5,r16
1800fba4:	9009883a 	mov	r4,r18
1800fba8:	80091340 	call	18009134 <_fflush_r>
1800fbac:	1000071e 	bne	r2,zero,1800fbcc <__swbuf_r+0x114>
1800fbb0:	80800017 	ldw	r2,0(r16)
1800fbb4:	00c00044 	movi	r3,1
1800fbb8:	003fda06 	br	1800fb24 <__alt_data_end+0xf800fb24>
1800fbbc:	800b883a 	mov	r5,r16
1800fbc0:	9009883a 	mov	r4,r18
1800fbc4:	80091340 	call	18009134 <_fflush_r>
1800fbc8:	103fe326 	beq	r2,zero,1800fb58 <__alt_data_end+0xf800fb58>
1800fbcc:	00bfffc4 	movi	r2,-1
1800fbd0:	003fe206 	br	1800fb5c <__alt_data_end+0xf800fb5c>
1800fbd4:	800b883a 	mov	r5,r16
1800fbd8:	9009883a 	mov	r4,r18
1800fbdc:	80075140 	call	18007514 <__swsetup_r>
1800fbe0:	103ffa1e 	bne	r2,zero,1800fbcc <__alt_data_end+0xf800fbcc>
1800fbe4:	8100030b 	ldhu	r4,12(r16)
1800fbe8:	80c00417 	ldw	r3,16(r16)
1800fbec:	003fc506 	br	1800fb04 <__alt_data_end+0xf800fb04>
1800fbf0:	80095200 	call	18009520 <__sinit>
1800fbf4:	003fbc06 	br	1800fae8 <__alt_data_end+0xf800fae8>

1800fbf8 <__swbuf>:
1800fbf8:	008600b4 	movhi	r2,6146
1800fbfc:	10a11f04 	addi	r2,r2,-31620
1800fc00:	280d883a 	mov	r6,r5
1800fc04:	200b883a 	mov	r5,r4
1800fc08:	11000017 	ldw	r4,0(r2)
1800fc0c:	800fab81 	jmpi	1800fab8 <__swbuf_r>

1800fc10 <_wcrtomb_r>:
1800fc10:	defff604 	addi	sp,sp,-40
1800fc14:	008600b4 	movhi	r2,6146
1800fc18:	dc800815 	stw	r18,32(sp)
1800fc1c:	dc400715 	stw	r17,28(sp)
1800fc20:	dc000615 	stw	r16,24(sp)
1800fc24:	10a12304 	addi	r2,r2,-31604
1800fc28:	dfc00915 	stw	ra,36(sp)
1800fc2c:	2021883a 	mov	r16,r4
1800fc30:	3823883a 	mov	r17,r7
1800fc34:	14800017 	ldw	r18,0(r2)
1800fc38:	28001426 	beq	r5,zero,1800fc8c <_wcrtomb_r+0x7c>
1800fc3c:	d9400415 	stw	r5,16(sp)
1800fc40:	d9800515 	stw	r6,20(sp)
1800fc44:	800a0700 	call	1800a070 <__locale_charset>
1800fc48:	d9800517 	ldw	r6,20(sp)
1800fc4c:	d9400417 	ldw	r5,16(sp)
1800fc50:	100f883a 	mov	r7,r2
1800fc54:	dc400015 	stw	r17,0(sp)
1800fc58:	8009883a 	mov	r4,r16
1800fc5c:	903ee83a 	callr	r18
1800fc60:	00ffffc4 	movi	r3,-1
1800fc64:	10c0031e 	bne	r2,r3,1800fc74 <_wcrtomb_r+0x64>
1800fc68:	88000015 	stw	zero,0(r17)
1800fc6c:	00c02284 	movi	r3,138
1800fc70:	80c00015 	stw	r3,0(r16)
1800fc74:	dfc00917 	ldw	ra,36(sp)
1800fc78:	dc800817 	ldw	r18,32(sp)
1800fc7c:	dc400717 	ldw	r17,28(sp)
1800fc80:	dc000617 	ldw	r16,24(sp)
1800fc84:	dec00a04 	addi	sp,sp,40
1800fc88:	f800283a 	ret
1800fc8c:	800a0700 	call	1800a070 <__locale_charset>
1800fc90:	100f883a 	mov	r7,r2
1800fc94:	dc400015 	stw	r17,0(sp)
1800fc98:	000d883a 	mov	r6,zero
1800fc9c:	d9400104 	addi	r5,sp,4
1800fca0:	8009883a 	mov	r4,r16
1800fca4:	903ee83a 	callr	r18
1800fca8:	003fed06 	br	1800fc60 <__alt_data_end+0xf800fc60>

1800fcac <wcrtomb>:
1800fcac:	defff604 	addi	sp,sp,-40
1800fcb0:	008600b4 	movhi	r2,6146
1800fcb4:	dc800615 	stw	r18,24(sp)
1800fcb8:	dc400515 	stw	r17,20(sp)
1800fcbc:	10a11f04 	addi	r2,r2,-31620
1800fcc0:	dfc00915 	stw	ra,36(sp)
1800fcc4:	dd000815 	stw	r20,32(sp)
1800fcc8:	dcc00715 	stw	r19,28(sp)
1800fccc:	dc000415 	stw	r16,16(sp)
1800fcd0:	3025883a 	mov	r18,r6
1800fcd4:	14400017 	ldw	r17,0(r2)
1800fcd8:	20001926 	beq	r4,zero,1800fd40 <wcrtomb+0x94>
1800fcdc:	008600b4 	movhi	r2,6146
1800fce0:	10a12304 	addi	r2,r2,-31604
1800fce4:	15000017 	ldw	r20,0(r2)
1800fce8:	2021883a 	mov	r16,r4
1800fcec:	2827883a 	mov	r19,r5
1800fcf0:	800a0700 	call	1800a070 <__locale_charset>
1800fcf4:	100f883a 	mov	r7,r2
1800fcf8:	dc800015 	stw	r18,0(sp)
1800fcfc:	980d883a 	mov	r6,r19
1800fd00:	800b883a 	mov	r5,r16
1800fd04:	8809883a 	mov	r4,r17
1800fd08:	a03ee83a 	callr	r20
1800fd0c:	00ffffc4 	movi	r3,-1
1800fd10:	10c0031e 	bne	r2,r3,1800fd20 <wcrtomb+0x74>
1800fd14:	90000015 	stw	zero,0(r18)
1800fd18:	00c02284 	movi	r3,138
1800fd1c:	88c00015 	stw	r3,0(r17)
1800fd20:	dfc00917 	ldw	ra,36(sp)
1800fd24:	dd000817 	ldw	r20,32(sp)
1800fd28:	dcc00717 	ldw	r19,28(sp)
1800fd2c:	dc800617 	ldw	r18,24(sp)
1800fd30:	dc400517 	ldw	r17,20(sp)
1800fd34:	dc000417 	ldw	r16,16(sp)
1800fd38:	dec00a04 	addi	sp,sp,40
1800fd3c:	f800283a 	ret
1800fd40:	008600b4 	movhi	r2,6146
1800fd44:	10a12304 	addi	r2,r2,-31604
1800fd48:	14000017 	ldw	r16,0(r2)
1800fd4c:	800a0700 	call	1800a070 <__locale_charset>
1800fd50:	100f883a 	mov	r7,r2
1800fd54:	dc800015 	stw	r18,0(sp)
1800fd58:	000d883a 	mov	r6,zero
1800fd5c:	d9400104 	addi	r5,sp,4
1800fd60:	8809883a 	mov	r4,r17
1800fd64:	803ee83a 	callr	r16
1800fd68:	003fe806 	br	1800fd0c <__alt_data_end+0xf800fd0c>

1800fd6c <__ascii_wctomb>:
1800fd6c:	28000526 	beq	r5,zero,1800fd84 <__ascii_wctomb+0x18>
1800fd70:	00803fc4 	movi	r2,255
1800fd74:	11800536 	bltu	r2,r6,1800fd8c <__ascii_wctomb+0x20>
1800fd78:	29800005 	stb	r6,0(r5)
1800fd7c:	00800044 	movi	r2,1
1800fd80:	f800283a 	ret
1800fd84:	0005883a 	mov	r2,zero
1800fd88:	f800283a 	ret
1800fd8c:	00802284 	movi	r2,138
1800fd90:	20800015 	stw	r2,0(r4)
1800fd94:	00bfffc4 	movi	r2,-1
1800fd98:	f800283a 	ret

1800fd9c <_wctomb_r>:
1800fd9c:	008600b4 	movhi	r2,6146
1800fda0:	defff904 	addi	sp,sp,-28
1800fda4:	10a12304 	addi	r2,r2,-31604
1800fda8:	dfc00615 	stw	ra,24(sp)
1800fdac:	dc400515 	stw	r17,20(sp)
1800fdb0:	dc000415 	stw	r16,16(sp)
1800fdb4:	3823883a 	mov	r17,r7
1800fdb8:	14000017 	ldw	r16,0(r2)
1800fdbc:	d9000115 	stw	r4,4(sp)
1800fdc0:	d9400215 	stw	r5,8(sp)
1800fdc4:	d9800315 	stw	r6,12(sp)
1800fdc8:	800a0700 	call	1800a070 <__locale_charset>
1800fdcc:	d9800317 	ldw	r6,12(sp)
1800fdd0:	d9400217 	ldw	r5,8(sp)
1800fdd4:	d9000117 	ldw	r4,4(sp)
1800fdd8:	100f883a 	mov	r7,r2
1800fddc:	dc400015 	stw	r17,0(sp)
1800fde0:	803ee83a 	callr	r16
1800fde4:	dfc00617 	ldw	ra,24(sp)
1800fde8:	dc400517 	ldw	r17,20(sp)
1800fdec:	dc000417 	ldw	r16,16(sp)
1800fdf0:	dec00704 	addi	sp,sp,28
1800fdf4:	f800283a 	ret

1800fdf8 <__muldi3>:
1800fdf8:	defff604 	addi	sp,sp,-40
1800fdfc:	dd800615 	stw	r22,24(sp)
1800fe00:	dd400515 	stw	r21,20(sp)
1800fe04:	dc400115 	stw	r17,4(sp)
1800fe08:	357fffcc 	andi	r21,r6,65535
1800fe0c:	2022d43a 	srli	r17,r4,16
1800fe10:	25bfffcc 	andi	r22,r4,65535
1800fe14:	dcc00315 	stw	r19,12(sp)
1800fe18:	dc800215 	stw	r18,8(sp)
1800fe1c:	2027883a 	mov	r19,r4
1800fe20:	2825883a 	mov	r18,r5
1800fe24:	b009883a 	mov	r4,r22
1800fe28:	a80b883a 	mov	r5,r21
1800fe2c:	dfc00915 	stw	ra,36(sp)
1800fe30:	df000815 	stw	fp,32(sp)
1800fe34:	ddc00715 	stw	r23,28(sp)
1800fe38:	3839883a 	mov	fp,r7
1800fe3c:	302ed43a 	srli	r23,r6,16
1800fe40:	dd000415 	stw	r20,16(sp)
1800fe44:	dc000015 	stw	r16,0(sp)
1800fe48:	3029883a 	mov	r20,r6
1800fe4c:	8002b640 	call	18002b64 <__mulsi3>
1800fe50:	a80b883a 	mov	r5,r21
1800fe54:	8809883a 	mov	r4,r17
1800fe58:	1021883a 	mov	r16,r2
1800fe5c:	8002b640 	call	18002b64 <__mulsi3>
1800fe60:	8809883a 	mov	r4,r17
1800fe64:	b80b883a 	mov	r5,r23
1800fe68:	102b883a 	mov	r21,r2
1800fe6c:	8002b640 	call	18002b64 <__mulsi3>
1800fe70:	b80b883a 	mov	r5,r23
1800fe74:	b009883a 	mov	r4,r22
1800fe78:	1023883a 	mov	r17,r2
1800fe7c:	8002b640 	call	18002b64 <__mulsi3>
1800fe80:	8006d43a 	srli	r3,r16,16
1800fe84:	1545883a 	add	r2,r2,r21
1800fe88:	1885883a 	add	r2,r3,r2
1800fe8c:	1540022e 	bgeu	r2,r21,1800fe98 <__muldi3+0xa0>
1800fe90:	00c00074 	movhi	r3,1
1800fe94:	88e3883a 	add	r17,r17,r3
1800fe98:	1006d43a 	srli	r3,r2,16
1800fe9c:	1004943a 	slli	r2,r2,16
1800fea0:	e00b883a 	mov	r5,fp
1800fea4:	9809883a 	mov	r4,r19
1800fea8:	843fffcc 	andi	r16,r16,65535
1800feac:	1c63883a 	add	r17,r3,r17
1800feb0:	1421883a 	add	r16,r2,r16
1800feb4:	8002b640 	call	18002b64 <__mulsi3>
1800feb8:	900b883a 	mov	r5,r18
1800febc:	a009883a 	mov	r4,r20
1800fec0:	1027883a 	mov	r19,r2
1800fec4:	8002b640 	call	18002b64 <__mulsi3>
1800fec8:	9885883a 	add	r2,r19,r2
1800fecc:	1447883a 	add	r3,r2,r17
1800fed0:	8005883a 	mov	r2,r16
1800fed4:	dfc00917 	ldw	ra,36(sp)
1800fed8:	df000817 	ldw	fp,32(sp)
1800fedc:	ddc00717 	ldw	r23,28(sp)
1800fee0:	dd800617 	ldw	r22,24(sp)
1800fee4:	dd400517 	ldw	r21,20(sp)
1800fee8:	dd000417 	ldw	r20,16(sp)
1800feec:	dcc00317 	ldw	r19,12(sp)
1800fef0:	dc800217 	ldw	r18,8(sp)
1800fef4:	dc400117 	ldw	r17,4(sp)
1800fef8:	dc000017 	ldw	r16,0(sp)
1800fefc:	dec00a04 	addi	sp,sp,40
1800ff00:	f800283a 	ret

1800ff04 <__udivdi3>:
1800ff04:	defff404 	addi	sp,sp,-48
1800ff08:	dcc00515 	stw	r19,20(sp)
1800ff0c:	dc000215 	stw	r16,8(sp)
1800ff10:	dfc00b15 	stw	ra,44(sp)
1800ff14:	df000a15 	stw	fp,40(sp)
1800ff18:	ddc00915 	stw	r23,36(sp)
1800ff1c:	dd800815 	stw	r22,32(sp)
1800ff20:	dd400715 	stw	r21,28(sp)
1800ff24:	dd000615 	stw	r20,24(sp)
1800ff28:	dc800415 	stw	r18,16(sp)
1800ff2c:	dc400315 	stw	r17,12(sp)
1800ff30:	2027883a 	mov	r19,r4
1800ff34:	2821883a 	mov	r16,r5
1800ff38:	3800461e 	bne	r7,zero,18010054 <__udivdi3+0x150>
1800ff3c:	3023883a 	mov	r17,r6
1800ff40:	2025883a 	mov	r18,r4
1800ff44:	2980572e 	bgeu	r5,r6,180100a4 <__udivdi3+0x1a0>
1800ff48:	00bfffd4 	movui	r2,65535
1800ff4c:	282d883a 	mov	r22,r5
1800ff50:	1180b236 	bltu	r2,r6,1801021c <__udivdi3+0x318>
1800ff54:	00803fc4 	movi	r2,255
1800ff58:	1185803a 	cmpltu	r2,r2,r6
1800ff5c:	100490fa 	slli	r2,r2,3
1800ff60:	3086d83a 	srl	r3,r6,r2
1800ff64:	01060074 	movhi	r4,6145
1800ff68:	21196c04 	addi	r4,r4,26032
1800ff6c:	20c7883a 	add	r3,r4,r3
1800ff70:	18c00003 	ldbu	r3,0(r3)
1800ff74:	1885883a 	add	r2,r3,r2
1800ff78:	00c00804 	movi	r3,32
1800ff7c:	1887c83a 	sub	r3,r3,r2
1800ff80:	18000526 	beq	r3,zero,1800ff98 <__udivdi3+0x94>
1800ff84:	80e0983a 	sll	r16,r16,r3
1800ff88:	9884d83a 	srl	r2,r19,r2
1800ff8c:	30e2983a 	sll	r17,r6,r3
1800ff90:	98e4983a 	sll	r18,r19,r3
1800ff94:	142cb03a 	or	r22,r2,r16
1800ff98:	882ad43a 	srli	r21,r17,16
1800ff9c:	b009883a 	mov	r4,r22
1800ffa0:	8d3fffcc 	andi	r20,r17,65535
1800ffa4:	a80b883a 	mov	r5,r21
1800ffa8:	8002b0c0 	call	18002b0c <__umodsi3>
1800ffac:	b009883a 	mov	r4,r22
1800ffb0:	a80b883a 	mov	r5,r21
1800ffb4:	1027883a 	mov	r19,r2
1800ffb8:	8002aa80 	call	18002aa8 <__udivsi3>
1800ffbc:	100b883a 	mov	r5,r2
1800ffc0:	a009883a 	mov	r4,r20
1800ffc4:	102d883a 	mov	r22,r2
1800ffc8:	8002b640 	call	18002b64 <__mulsi3>
1800ffcc:	9826943a 	slli	r19,r19,16
1800ffd0:	9006d43a 	srli	r3,r18,16
1800ffd4:	1cc6b03a 	or	r3,r3,r19
1800ffd8:	1880052e 	bgeu	r3,r2,1800fff0 <__udivdi3+0xec>
1800ffdc:	1c47883a 	add	r3,r3,r17
1800ffe0:	b13fffc4 	addi	r4,r22,-1
1800ffe4:	1c400136 	bltu	r3,r17,1800ffec <__udivdi3+0xe8>
1800ffe8:	18814236 	bltu	r3,r2,180104f4 <__udivdi3+0x5f0>
1800ffec:	202d883a 	mov	r22,r4
1800fff0:	18a1c83a 	sub	r16,r3,r2
1800fff4:	8009883a 	mov	r4,r16
1800fff8:	a80b883a 	mov	r5,r21
1800fffc:	8002b0c0 	call	18002b0c <__umodsi3>
18010000:	1027883a 	mov	r19,r2
18010004:	8009883a 	mov	r4,r16
18010008:	a80b883a 	mov	r5,r21
1801000c:	9826943a 	slli	r19,r19,16
18010010:	8002aa80 	call	18002aa8 <__udivsi3>
18010014:	100b883a 	mov	r5,r2
18010018:	a009883a 	mov	r4,r20
1801001c:	94bfffcc 	andi	r18,r18,65535
18010020:	1021883a 	mov	r16,r2
18010024:	94e4b03a 	or	r18,r18,r19
18010028:	8002b640 	call	18002b64 <__mulsi3>
1801002c:	9080052e 	bgeu	r18,r2,18010044 <__udivdi3+0x140>
18010030:	8ca5883a 	add	r18,r17,r18
18010034:	80ffffc4 	addi	r3,r16,-1
18010038:	94410c36 	bltu	r18,r17,1801046c <__udivdi3+0x568>
1801003c:	90810b2e 	bgeu	r18,r2,1801046c <__udivdi3+0x568>
18010040:	843fff84 	addi	r16,r16,-2
18010044:	b004943a 	slli	r2,r22,16
18010048:	0007883a 	mov	r3,zero
1801004c:	1404b03a 	or	r2,r2,r16
18010050:	00005e06 	br	180101cc <__udivdi3+0x2c8>
18010054:	29c05b36 	bltu	r5,r7,180101c4 <__udivdi3+0x2c0>
18010058:	00bfffd4 	movui	r2,65535
1801005c:	11c0672e 	bgeu	r2,r7,180101fc <__udivdi3+0x2f8>
18010060:	00804034 	movhi	r2,256
18010064:	10bfffc4 	addi	r2,r2,-1
18010068:	11c10a36 	bltu	r2,r7,18010494 <__udivdi3+0x590>
1801006c:	00800404 	movi	r2,16
18010070:	3886d83a 	srl	r3,r7,r2
18010074:	01060074 	movhi	r4,6145
18010078:	21196c04 	addi	r4,r4,26032
1801007c:	20c7883a 	add	r3,r4,r3
18010080:	18c00003 	ldbu	r3,0(r3)
18010084:	05c00804 	movi	r23,32
18010088:	1885883a 	add	r2,r3,r2
1801008c:	b8afc83a 	sub	r23,r23,r2
18010090:	b800671e 	bne	r23,zero,18010230 <__udivdi3+0x32c>
18010094:	3c010536 	bltu	r7,r16,180104ac <__udivdi3+0x5a8>
18010098:	9985403a 	cmpgeu	r2,r19,r6
1801009c:	0007883a 	mov	r3,zero
180100a0:	00004a06 	br	180101cc <__udivdi3+0x2c8>
180100a4:	3000041e 	bne	r6,zero,180100b8 <__udivdi3+0x1b4>
180100a8:	000b883a 	mov	r5,zero
180100ac:	01000044 	movi	r4,1
180100b0:	8002aa80 	call	18002aa8 <__udivsi3>
180100b4:	1023883a 	mov	r17,r2
180100b8:	00bfffd4 	movui	r2,65535
180100bc:	1440532e 	bgeu	r2,r17,1801020c <__udivdi3+0x308>
180100c0:	00804034 	movhi	r2,256
180100c4:	10bfffc4 	addi	r2,r2,-1
180100c8:	1440f436 	bltu	r2,r17,1801049c <__udivdi3+0x598>
180100cc:	00800404 	movi	r2,16
180100d0:	8886d83a 	srl	r3,r17,r2
180100d4:	01060074 	movhi	r4,6145
180100d8:	21196c04 	addi	r4,r4,26032
180100dc:	20c7883a 	add	r3,r4,r3
180100e0:	18c00003 	ldbu	r3,0(r3)
180100e4:	1885883a 	add	r2,r3,r2
180100e8:	00c00804 	movi	r3,32
180100ec:	1887c83a 	sub	r3,r3,r2
180100f0:	1800a51e 	bne	r3,zero,18010388 <__udivdi3+0x484>
180100f4:	882ad43a 	srli	r21,r17,16
180100f8:	8461c83a 	sub	r16,r16,r17
180100fc:	8d3fffcc 	andi	r20,r17,65535
18010100:	00c00044 	movi	r3,1
18010104:	a80b883a 	mov	r5,r21
18010108:	8009883a 	mov	r4,r16
1801010c:	d8c00115 	stw	r3,4(sp)
18010110:	8002b0c0 	call	18002b0c <__umodsi3>
18010114:	a80b883a 	mov	r5,r21
18010118:	8009883a 	mov	r4,r16
1801011c:	1027883a 	mov	r19,r2
18010120:	8002aa80 	call	18002aa8 <__udivsi3>
18010124:	a00b883a 	mov	r5,r20
18010128:	1009883a 	mov	r4,r2
1801012c:	102d883a 	mov	r22,r2
18010130:	8002b640 	call	18002b64 <__mulsi3>
18010134:	9826943a 	slli	r19,r19,16
18010138:	900ed43a 	srli	r7,r18,16
1801013c:	d8c00117 	ldw	r3,4(sp)
18010140:	3cceb03a 	or	r7,r7,r19
18010144:	3880052e 	bgeu	r7,r2,1801015c <__udivdi3+0x258>
18010148:	3c4f883a 	add	r7,r7,r17
1801014c:	b13fffc4 	addi	r4,r22,-1
18010150:	3c400136 	bltu	r7,r17,18010158 <__udivdi3+0x254>
18010154:	3880e436 	bltu	r7,r2,180104e8 <__udivdi3+0x5e4>
18010158:	202d883a 	mov	r22,r4
1801015c:	38a1c83a 	sub	r16,r7,r2
18010160:	8009883a 	mov	r4,r16
18010164:	a80b883a 	mov	r5,r21
18010168:	d8c00115 	stw	r3,4(sp)
1801016c:	8002b0c0 	call	18002b0c <__umodsi3>
18010170:	1027883a 	mov	r19,r2
18010174:	8009883a 	mov	r4,r16
18010178:	a80b883a 	mov	r5,r21
1801017c:	9826943a 	slli	r19,r19,16
18010180:	8002aa80 	call	18002aa8 <__udivsi3>
18010184:	a00b883a 	mov	r5,r20
18010188:	1009883a 	mov	r4,r2
1801018c:	94bfffcc 	andi	r18,r18,65535
18010190:	1021883a 	mov	r16,r2
18010194:	94e4b03a 	or	r18,r18,r19
18010198:	8002b640 	call	18002b64 <__mulsi3>
1801019c:	d8c00117 	ldw	r3,4(sp)
180101a0:	9080052e 	bgeu	r18,r2,180101b8 <__udivdi3+0x2b4>
180101a4:	8ca5883a 	add	r18,r17,r18
180101a8:	813fffc4 	addi	r4,r16,-1
180101ac:	9440ad36 	bltu	r18,r17,18010464 <__udivdi3+0x560>
180101b0:	9080ac2e 	bgeu	r18,r2,18010464 <__udivdi3+0x560>
180101b4:	843fff84 	addi	r16,r16,-2
180101b8:	b004943a 	slli	r2,r22,16
180101bc:	1404b03a 	or	r2,r2,r16
180101c0:	00000206 	br	180101cc <__udivdi3+0x2c8>
180101c4:	0007883a 	mov	r3,zero
180101c8:	0005883a 	mov	r2,zero
180101cc:	dfc00b17 	ldw	ra,44(sp)
180101d0:	df000a17 	ldw	fp,40(sp)
180101d4:	ddc00917 	ldw	r23,36(sp)
180101d8:	dd800817 	ldw	r22,32(sp)
180101dc:	dd400717 	ldw	r21,28(sp)
180101e0:	dd000617 	ldw	r20,24(sp)
180101e4:	dcc00517 	ldw	r19,20(sp)
180101e8:	dc800417 	ldw	r18,16(sp)
180101ec:	dc400317 	ldw	r17,12(sp)
180101f0:	dc000217 	ldw	r16,8(sp)
180101f4:	dec00c04 	addi	sp,sp,48
180101f8:	f800283a 	ret
180101fc:	00803fc4 	movi	r2,255
18010200:	11c5803a 	cmpltu	r2,r2,r7
18010204:	100490fa 	slli	r2,r2,3
18010208:	003f9906 	br	18010070 <__alt_data_end+0xf8010070>
1801020c:	00803fc4 	movi	r2,255
18010210:	1445803a 	cmpltu	r2,r2,r17
18010214:	100490fa 	slli	r2,r2,3
18010218:	003fad06 	br	180100d0 <__alt_data_end+0xf80100d0>
1801021c:	00804034 	movhi	r2,256
18010220:	10bfffc4 	addi	r2,r2,-1
18010224:	11809f36 	bltu	r2,r6,180104a4 <__udivdi3+0x5a0>
18010228:	00800404 	movi	r2,16
1801022c:	003f4c06 	br	1800ff60 <__alt_data_end+0xf800ff60>
18010230:	3dce983a 	sll	r7,r7,r23
18010234:	30b8d83a 	srl	fp,r6,r2
18010238:	80a2d83a 	srl	r17,r16,r2
1801023c:	35cc983a 	sll	r6,r6,r23
18010240:	3f38b03a 	or	fp,r7,fp
18010244:	e024d43a 	srli	r18,fp,16
18010248:	9884d83a 	srl	r2,r19,r2
1801024c:	85e0983a 	sll	r16,r16,r23
18010250:	8809883a 	mov	r4,r17
18010254:	900b883a 	mov	r5,r18
18010258:	d9800015 	stw	r6,0(sp)
1801025c:	1420b03a 	or	r16,r2,r16
18010260:	8002b0c0 	call	18002b0c <__umodsi3>
18010264:	900b883a 	mov	r5,r18
18010268:	8809883a 	mov	r4,r17
1801026c:	1029883a 	mov	r20,r2
18010270:	e5bfffcc 	andi	r22,fp,65535
18010274:	8002aa80 	call	18002aa8 <__udivsi3>
18010278:	100b883a 	mov	r5,r2
1801027c:	b009883a 	mov	r4,r22
18010280:	102b883a 	mov	r21,r2
18010284:	8002b640 	call	18002b64 <__mulsi3>
18010288:	a028943a 	slli	r20,r20,16
1801028c:	8006d43a 	srli	r3,r16,16
18010290:	1d06b03a 	or	r3,r3,r20
18010294:	1880042e 	bgeu	r3,r2,180102a8 <__udivdi3+0x3a4>
18010298:	1f07883a 	add	r3,r3,fp
1801029c:	a93fffc4 	addi	r4,r21,-1
180102a0:	1f00892e 	bgeu	r3,fp,180104c8 <__udivdi3+0x5c4>
180102a4:	202b883a 	mov	r21,r4
180102a8:	18a3c83a 	sub	r17,r3,r2
180102ac:	8809883a 	mov	r4,r17
180102b0:	900b883a 	mov	r5,r18
180102b4:	8002b0c0 	call	18002b0c <__umodsi3>
180102b8:	1029883a 	mov	r20,r2
180102bc:	8809883a 	mov	r4,r17
180102c0:	900b883a 	mov	r5,r18
180102c4:	a028943a 	slli	r20,r20,16
180102c8:	8002aa80 	call	18002aa8 <__udivsi3>
180102cc:	100b883a 	mov	r5,r2
180102d0:	b009883a 	mov	r4,r22
180102d4:	843fffcc 	andi	r16,r16,65535
180102d8:	1023883a 	mov	r17,r2
180102dc:	8520b03a 	or	r16,r16,r20
180102e0:	8002b640 	call	18002b64 <__mulsi3>
180102e4:	8080042e 	bgeu	r16,r2,180102f8 <__udivdi3+0x3f4>
180102e8:	8721883a 	add	r16,r16,fp
180102ec:	88ffffc4 	addi	r3,r17,-1
180102f0:	8700712e 	bgeu	r16,fp,180104b8 <__udivdi3+0x5b4>
180102f4:	1823883a 	mov	r17,r3
180102f8:	a80e943a 	slli	r7,r21,16
180102fc:	d8c00017 	ldw	r3,0(sp)
18010300:	80a1c83a 	sub	r16,r16,r2
18010304:	3c64b03a 	or	r18,r7,r17
18010308:	1d3fffcc 	andi	r20,r3,65535
1801030c:	9022d43a 	srli	r17,r18,16
18010310:	95bfffcc 	andi	r22,r18,65535
18010314:	a00b883a 	mov	r5,r20
18010318:	b009883a 	mov	r4,r22
1801031c:	182ad43a 	srli	r21,r3,16
18010320:	8002b640 	call	18002b64 <__mulsi3>
18010324:	a00b883a 	mov	r5,r20
18010328:	8809883a 	mov	r4,r17
1801032c:	1039883a 	mov	fp,r2
18010330:	8002b640 	call	18002b64 <__mulsi3>
18010334:	8809883a 	mov	r4,r17
18010338:	a80b883a 	mov	r5,r21
1801033c:	1029883a 	mov	r20,r2
18010340:	8002b640 	call	18002b64 <__mulsi3>
18010344:	a80b883a 	mov	r5,r21
18010348:	b009883a 	mov	r4,r22
1801034c:	1023883a 	mov	r17,r2
18010350:	8002b640 	call	18002b64 <__mulsi3>
18010354:	e006d43a 	srli	r3,fp,16
18010358:	1505883a 	add	r2,r2,r20
1801035c:	1887883a 	add	r3,r3,r2
18010360:	1d00022e 	bgeu	r3,r20,1801036c <__udivdi3+0x468>
18010364:	00800074 	movhi	r2,1
18010368:	88a3883a 	add	r17,r17,r2
1801036c:	1804d43a 	srli	r2,r3,16
18010370:	1463883a 	add	r17,r2,r17
18010374:	84404436 	bltu	r16,r17,18010488 <__udivdi3+0x584>
18010378:	84403e26 	beq	r16,r17,18010474 <__udivdi3+0x570>
1801037c:	9005883a 	mov	r2,r18
18010380:	0007883a 	mov	r3,zero
18010384:	003f9106 	br	180101cc <__alt_data_end+0xf80101cc>
18010388:	88e2983a 	sll	r17,r17,r3
1801038c:	80aed83a 	srl	r23,r16,r2
18010390:	80e0983a 	sll	r16,r16,r3
18010394:	882ad43a 	srli	r21,r17,16
18010398:	9884d83a 	srl	r2,r19,r2
1801039c:	b809883a 	mov	r4,r23
180103a0:	a80b883a 	mov	r5,r21
180103a4:	98e4983a 	sll	r18,r19,r3
180103a8:	142cb03a 	or	r22,r2,r16
180103ac:	8002b0c0 	call	18002b0c <__umodsi3>
180103b0:	b809883a 	mov	r4,r23
180103b4:	a80b883a 	mov	r5,r21
180103b8:	1027883a 	mov	r19,r2
180103bc:	8d3fffcc 	andi	r20,r17,65535
180103c0:	8002aa80 	call	18002aa8 <__udivsi3>
180103c4:	a009883a 	mov	r4,r20
180103c8:	100b883a 	mov	r5,r2
180103cc:	102f883a 	mov	r23,r2
180103d0:	8002b640 	call	18002b64 <__mulsi3>
180103d4:	9826943a 	slli	r19,r19,16
180103d8:	b008d43a 	srli	r4,r22,16
180103dc:	24c8b03a 	or	r4,r4,r19
180103e0:	2080062e 	bgeu	r4,r2,180103fc <__udivdi3+0x4f8>
180103e4:	2449883a 	add	r4,r4,r17
180103e8:	b8ffffc4 	addi	r3,r23,-1
180103ec:	24403c36 	bltu	r4,r17,180104e0 <__udivdi3+0x5dc>
180103f0:	20803b2e 	bgeu	r4,r2,180104e0 <__udivdi3+0x5dc>
180103f4:	bdffff84 	addi	r23,r23,-2
180103f8:	2449883a 	add	r4,r4,r17
180103fc:	20a1c83a 	sub	r16,r4,r2
18010400:	a80b883a 	mov	r5,r21
18010404:	8009883a 	mov	r4,r16
18010408:	8002b0c0 	call	18002b0c <__umodsi3>
1801040c:	a80b883a 	mov	r5,r21
18010410:	8009883a 	mov	r4,r16
18010414:	1027883a 	mov	r19,r2
18010418:	8002aa80 	call	18002aa8 <__udivsi3>
1801041c:	a009883a 	mov	r4,r20
18010420:	100b883a 	mov	r5,r2
18010424:	9826943a 	slli	r19,r19,16
18010428:	1039883a 	mov	fp,r2
1801042c:	8002b640 	call	18002b64 <__mulsi3>
18010430:	b13fffcc 	andi	r4,r22,65535
18010434:	24c8b03a 	or	r4,r4,r19
18010438:	2080062e 	bgeu	r4,r2,18010454 <__udivdi3+0x550>
1801043c:	2449883a 	add	r4,r4,r17
18010440:	e0ffffc4 	addi	r3,fp,-1
18010444:	24402436 	bltu	r4,r17,180104d8 <__udivdi3+0x5d4>
18010448:	2080232e 	bgeu	r4,r2,180104d8 <__udivdi3+0x5d4>
1801044c:	e73fff84 	addi	fp,fp,-2
18010450:	2449883a 	add	r4,r4,r17
18010454:	b82e943a 	slli	r23,r23,16
18010458:	20a1c83a 	sub	r16,r4,r2
1801045c:	bf06b03a 	or	r3,r23,fp
18010460:	003f2806 	br	18010104 <__alt_data_end+0xf8010104>
18010464:	2021883a 	mov	r16,r4
18010468:	003f5306 	br	180101b8 <__alt_data_end+0xf80101b8>
1801046c:	1821883a 	mov	r16,r3
18010470:	003ef406 	br	18010044 <__alt_data_end+0xf8010044>
18010474:	1806943a 	slli	r3,r3,16
18010478:	9de6983a 	sll	r19,r19,r23
1801047c:	e73fffcc 	andi	fp,fp,65535
18010480:	1f07883a 	add	r3,r3,fp
18010484:	98ffbd2e 	bgeu	r19,r3,1801037c <__alt_data_end+0xf801037c>
18010488:	90bfffc4 	addi	r2,r18,-1
1801048c:	0007883a 	mov	r3,zero
18010490:	003f4e06 	br	180101cc <__alt_data_end+0xf80101cc>
18010494:	00800604 	movi	r2,24
18010498:	003ef506 	br	18010070 <__alt_data_end+0xf8010070>
1801049c:	00800604 	movi	r2,24
180104a0:	003f0b06 	br	180100d0 <__alt_data_end+0xf80100d0>
180104a4:	00800604 	movi	r2,24
180104a8:	003ead06 	br	1800ff60 <__alt_data_end+0xf800ff60>
180104ac:	0007883a 	mov	r3,zero
180104b0:	00800044 	movi	r2,1
180104b4:	003f4506 	br	180101cc <__alt_data_end+0xf80101cc>
180104b8:	80bf8e2e 	bgeu	r16,r2,180102f4 <__alt_data_end+0xf80102f4>
180104bc:	8c7fff84 	addi	r17,r17,-2
180104c0:	8721883a 	add	r16,r16,fp
180104c4:	003f8c06 	br	180102f8 <__alt_data_end+0xf80102f8>
180104c8:	18bf762e 	bgeu	r3,r2,180102a4 <__alt_data_end+0xf80102a4>
180104cc:	ad7fff84 	addi	r21,r21,-2
180104d0:	1f07883a 	add	r3,r3,fp
180104d4:	003f7406 	br	180102a8 <__alt_data_end+0xf80102a8>
180104d8:	1839883a 	mov	fp,r3
180104dc:	003fdd06 	br	18010454 <__alt_data_end+0xf8010454>
180104e0:	182f883a 	mov	r23,r3
180104e4:	003fc506 	br	180103fc <__alt_data_end+0xf80103fc>
180104e8:	b5bfff84 	addi	r22,r22,-2
180104ec:	3c4f883a 	add	r7,r7,r17
180104f0:	003f1a06 	br	1801015c <__alt_data_end+0xf801015c>
180104f4:	b5bfff84 	addi	r22,r22,-2
180104f8:	1c47883a 	add	r3,r3,r17
180104fc:	003ebc06 	br	1800fff0 <__alt_data_end+0xf800fff0>

18010500 <__umoddi3>:
18010500:	defff304 	addi	sp,sp,-52
18010504:	df000b15 	stw	fp,44(sp)
18010508:	dc400415 	stw	r17,16(sp)
1801050c:	dc000315 	stw	r16,12(sp)
18010510:	dfc00c15 	stw	ra,48(sp)
18010514:	ddc00a15 	stw	r23,40(sp)
18010518:	dd800915 	stw	r22,36(sp)
1801051c:	dd400815 	stw	r21,32(sp)
18010520:	dd000715 	stw	r20,28(sp)
18010524:	dcc00615 	stw	r19,24(sp)
18010528:	dc800515 	stw	r18,20(sp)
1801052c:	2021883a 	mov	r16,r4
18010530:	2823883a 	mov	r17,r5
18010534:	2839883a 	mov	fp,r5
18010538:	3800401e 	bne	r7,zero,1801063c <__umoddi3+0x13c>
1801053c:	3027883a 	mov	r19,r6
18010540:	2029883a 	mov	r20,r4
18010544:	2980552e 	bgeu	r5,r6,1801069c <__umoddi3+0x19c>
18010548:	00bfffd4 	movui	r2,65535
1801054c:	1180a236 	bltu	r2,r6,180107d8 <__umoddi3+0x2d8>
18010550:	01003fc4 	movi	r4,255
18010554:	2189803a 	cmpltu	r4,r4,r6
18010558:	200890fa 	slli	r4,r4,3
1801055c:	3104d83a 	srl	r2,r6,r4
18010560:	00c60074 	movhi	r3,6145
18010564:	18d96c04 	addi	r3,r3,26032
18010568:	1885883a 	add	r2,r3,r2
1801056c:	10c00003 	ldbu	r3,0(r2)
18010570:	00800804 	movi	r2,32
18010574:	1909883a 	add	r4,r3,r4
18010578:	1125c83a 	sub	r18,r2,r4
1801057c:	90000526 	beq	r18,zero,18010594 <__umoddi3+0x94>
18010580:	8ca2983a 	sll	r17,r17,r18
18010584:	8108d83a 	srl	r4,r16,r4
18010588:	34a6983a 	sll	r19,r6,r18
1801058c:	84a8983a 	sll	r20,r16,r18
18010590:	2478b03a 	or	fp,r4,r17
18010594:	982cd43a 	srli	r22,r19,16
18010598:	e009883a 	mov	r4,fp
1801059c:	9dffffcc 	andi	r23,r19,65535
180105a0:	b00b883a 	mov	r5,r22
180105a4:	8002b0c0 	call	18002b0c <__umodsi3>
180105a8:	b00b883a 	mov	r5,r22
180105ac:	e009883a 	mov	r4,fp
180105b0:	102b883a 	mov	r21,r2
180105b4:	8002aa80 	call	18002aa8 <__udivsi3>
180105b8:	100b883a 	mov	r5,r2
180105bc:	b809883a 	mov	r4,r23
180105c0:	8002b640 	call	18002b64 <__mulsi3>
180105c4:	a82a943a 	slli	r21,r21,16
180105c8:	a006d43a 	srli	r3,r20,16
180105cc:	1d46b03a 	or	r3,r3,r21
180105d0:	1880032e 	bgeu	r3,r2,180105e0 <__umoddi3+0xe0>
180105d4:	1cc7883a 	add	r3,r3,r19
180105d8:	1cc00136 	bltu	r3,r19,180105e0 <__umoddi3+0xe0>
180105dc:	18813136 	bltu	r3,r2,18010aa4 <__umoddi3+0x5a4>
180105e0:	18a1c83a 	sub	r16,r3,r2
180105e4:	b00b883a 	mov	r5,r22
180105e8:	8009883a 	mov	r4,r16
180105ec:	8002b0c0 	call	18002b0c <__umodsi3>
180105f0:	b00b883a 	mov	r5,r22
180105f4:	8009883a 	mov	r4,r16
180105f8:	1023883a 	mov	r17,r2
180105fc:	8002aa80 	call	18002aa8 <__udivsi3>
18010600:	100b883a 	mov	r5,r2
18010604:	b809883a 	mov	r4,r23
18010608:	8822943a 	slli	r17,r17,16
1801060c:	8002b640 	call	18002b64 <__mulsi3>
18010610:	a0ffffcc 	andi	r3,r20,65535
18010614:	1c46b03a 	or	r3,r3,r17
18010618:	1880042e 	bgeu	r3,r2,1801062c <__umoddi3+0x12c>
1801061c:	1cc7883a 	add	r3,r3,r19
18010620:	1cc00236 	bltu	r3,r19,1801062c <__umoddi3+0x12c>
18010624:	1880012e 	bgeu	r3,r2,1801062c <__umoddi3+0x12c>
18010628:	1cc7883a 	add	r3,r3,r19
1801062c:	1885c83a 	sub	r2,r3,r2
18010630:	1484d83a 	srl	r2,r2,r18
18010634:	0007883a 	mov	r3,zero
18010638:	00005306 	br	18010788 <__umoddi3+0x288>
1801063c:	29c05036 	bltu	r5,r7,18010780 <__umoddi3+0x280>
18010640:	00bfffd4 	movui	r2,65535
18010644:	11c05c2e 	bgeu	r2,r7,180107b8 <__umoddi3+0x2b8>
18010648:	00804034 	movhi	r2,256
1801064c:	10bfffc4 	addi	r2,r2,-1
18010650:	11c10636 	bltu	r2,r7,18010a6c <__umoddi3+0x56c>
18010654:	01000404 	movi	r4,16
18010658:	3904d83a 	srl	r2,r7,r4
1801065c:	00c60074 	movhi	r3,6145
18010660:	18d96c04 	addi	r3,r3,26032
18010664:	1885883a 	add	r2,r3,r2
18010668:	14c00003 	ldbu	r19,0(r2)
1801066c:	00c00804 	movi	r3,32
18010670:	9927883a 	add	r19,r19,r4
18010674:	1ce9c83a 	sub	r20,r3,r19
18010678:	a0005c1e 	bne	r20,zero,180107ec <__umoddi3+0x2ec>
1801067c:	3c400136 	bltu	r7,r17,18010684 <__umoddi3+0x184>
18010680:	81810a36 	bltu	r16,r6,18010aac <__umoddi3+0x5ac>
18010684:	8185c83a 	sub	r2,r16,r6
18010688:	89e3c83a 	sub	r17,r17,r7
1801068c:	8089803a 	cmpltu	r4,r16,r2
18010690:	8939c83a 	sub	fp,r17,r4
18010694:	e007883a 	mov	r3,fp
18010698:	00003b06 	br	18010788 <__umoddi3+0x288>
1801069c:	3000041e 	bne	r6,zero,180106b0 <__umoddi3+0x1b0>
180106a0:	000b883a 	mov	r5,zero
180106a4:	01000044 	movi	r4,1
180106a8:	8002aa80 	call	18002aa8 <__udivsi3>
180106ac:	1027883a 	mov	r19,r2
180106b0:	00bfffd4 	movui	r2,65535
180106b4:	14c0442e 	bgeu	r2,r19,180107c8 <__umoddi3+0x2c8>
180106b8:	00804034 	movhi	r2,256
180106bc:	10bfffc4 	addi	r2,r2,-1
180106c0:	14c0ec36 	bltu	r2,r19,18010a74 <__umoddi3+0x574>
180106c4:	00800404 	movi	r2,16
180106c8:	9886d83a 	srl	r3,r19,r2
180106cc:	01060074 	movhi	r4,6145
180106d0:	21196c04 	addi	r4,r4,26032
180106d4:	20c7883a 	add	r3,r4,r3
180106d8:	18c00003 	ldbu	r3,0(r3)
180106dc:	1887883a 	add	r3,r3,r2
180106e0:	00800804 	movi	r2,32
180106e4:	10e5c83a 	sub	r18,r2,r3
180106e8:	9000ab1e 	bne	r18,zero,18010998 <__umoddi3+0x498>
180106ec:	982cd43a 	srli	r22,r19,16
180106f0:	8ce3c83a 	sub	r17,r17,r19
180106f4:	9dffffcc 	andi	r23,r19,65535
180106f8:	b00b883a 	mov	r5,r22
180106fc:	8809883a 	mov	r4,r17
18010700:	8002b0c0 	call	18002b0c <__umodsi3>
18010704:	b00b883a 	mov	r5,r22
18010708:	8809883a 	mov	r4,r17
1801070c:	102b883a 	mov	r21,r2
18010710:	8002aa80 	call	18002aa8 <__udivsi3>
18010714:	b80b883a 	mov	r5,r23
18010718:	1009883a 	mov	r4,r2
1801071c:	8002b640 	call	18002b64 <__mulsi3>
18010720:	a82a943a 	slli	r21,r21,16
18010724:	a006d43a 	srli	r3,r20,16
18010728:	1d46b03a 	or	r3,r3,r21
1801072c:	1880042e 	bgeu	r3,r2,18010740 <__umoddi3+0x240>
18010730:	1cc7883a 	add	r3,r3,r19
18010734:	1cc00236 	bltu	r3,r19,18010740 <__umoddi3+0x240>
18010738:	1880012e 	bgeu	r3,r2,18010740 <__umoddi3+0x240>
1801073c:	1cc7883a 	add	r3,r3,r19
18010740:	18a1c83a 	sub	r16,r3,r2
18010744:	b00b883a 	mov	r5,r22
18010748:	8009883a 	mov	r4,r16
1801074c:	8002b0c0 	call	18002b0c <__umodsi3>
18010750:	1023883a 	mov	r17,r2
18010754:	b00b883a 	mov	r5,r22
18010758:	8009883a 	mov	r4,r16
1801075c:	8002aa80 	call	18002aa8 <__udivsi3>
18010760:	8822943a 	slli	r17,r17,16
18010764:	b80b883a 	mov	r5,r23
18010768:	1009883a 	mov	r4,r2
1801076c:	8002b640 	call	18002b64 <__mulsi3>
18010770:	a53fffcc 	andi	r20,r20,65535
18010774:	a446b03a 	or	r3,r20,r17
18010778:	18bfac2e 	bgeu	r3,r2,1801062c <__alt_data_end+0xf801062c>
1801077c:	003fa706 	br	1801061c <__alt_data_end+0xf801061c>
18010780:	2005883a 	mov	r2,r4
18010784:	2807883a 	mov	r3,r5
18010788:	dfc00c17 	ldw	ra,48(sp)
1801078c:	df000b17 	ldw	fp,44(sp)
18010790:	ddc00a17 	ldw	r23,40(sp)
18010794:	dd800917 	ldw	r22,36(sp)
18010798:	dd400817 	ldw	r21,32(sp)
1801079c:	dd000717 	ldw	r20,28(sp)
180107a0:	dcc00617 	ldw	r19,24(sp)
180107a4:	dc800517 	ldw	r18,20(sp)
180107a8:	dc400417 	ldw	r17,16(sp)
180107ac:	dc000317 	ldw	r16,12(sp)
180107b0:	dec00d04 	addi	sp,sp,52
180107b4:	f800283a 	ret
180107b8:	04c03fc4 	movi	r19,255
180107bc:	99c9803a 	cmpltu	r4,r19,r7
180107c0:	200890fa 	slli	r4,r4,3
180107c4:	003fa406 	br	18010658 <__alt_data_end+0xf8010658>
180107c8:	00803fc4 	movi	r2,255
180107cc:	14c5803a 	cmpltu	r2,r2,r19
180107d0:	100490fa 	slli	r2,r2,3
180107d4:	003fbc06 	br	180106c8 <__alt_data_end+0xf80106c8>
180107d8:	00804034 	movhi	r2,256
180107dc:	10bfffc4 	addi	r2,r2,-1
180107e0:	1180a636 	bltu	r2,r6,18010a7c <__umoddi3+0x57c>
180107e4:	01000404 	movi	r4,16
180107e8:	003f5c06 	br	1801055c <__alt_data_end+0xf801055c>
180107ec:	3d0e983a 	sll	r7,r7,r20
180107f0:	34ead83a 	srl	r21,r6,r19
180107f4:	8cc6d83a 	srl	r3,r17,r19
180107f8:	8d10983a 	sll	r8,r17,r20
180107fc:	3d6ab03a 	or	r21,r7,r21
18010800:	a82cd43a 	srli	r22,r21,16
18010804:	84e2d83a 	srl	r17,r16,r19
18010808:	1809883a 	mov	r4,r3
1801080c:	b00b883a 	mov	r5,r22
18010810:	8a22b03a 	or	r17,r17,r8
18010814:	3524983a 	sll	r18,r6,r20
18010818:	dc400015 	stw	r17,0(sp)
1801081c:	d8c00115 	stw	r3,4(sp)
18010820:	8002b0c0 	call	18002b0c <__umodsi3>
18010824:	d8c00117 	ldw	r3,4(sp)
18010828:	b00b883a 	mov	r5,r22
1801082c:	1039883a 	mov	fp,r2
18010830:	1809883a 	mov	r4,r3
18010834:	8002aa80 	call	18002aa8 <__udivsi3>
18010838:	adffffcc 	andi	r23,r21,65535
1801083c:	100b883a 	mov	r5,r2
18010840:	b809883a 	mov	r4,r23
18010844:	1023883a 	mov	r17,r2
18010848:	8002b640 	call	18002b64 <__mulsi3>
1801084c:	d9400017 	ldw	r5,0(sp)
18010850:	e008943a 	slli	r4,fp,16
18010854:	8520983a 	sll	r16,r16,r20
18010858:	2806d43a 	srli	r3,r5,16
1801085c:	1906b03a 	or	r3,r3,r4
18010860:	1880042e 	bgeu	r3,r2,18010874 <__umoddi3+0x374>
18010864:	1d47883a 	add	r3,r3,r21
18010868:	893fffc4 	addi	r4,r17,-1
1801086c:	1d40892e 	bgeu	r3,r21,18010a94 <__umoddi3+0x594>
18010870:	2023883a 	mov	r17,r4
18010874:	18b9c83a 	sub	fp,r3,r2
18010878:	b00b883a 	mov	r5,r22
1801087c:	e009883a 	mov	r4,fp
18010880:	8002b0c0 	call	18002b0c <__umodsi3>
18010884:	b00b883a 	mov	r5,r22
18010888:	e009883a 	mov	r4,fp
1801088c:	d8800215 	stw	r2,8(sp)
18010890:	8002aa80 	call	18002aa8 <__udivsi3>
18010894:	100b883a 	mov	r5,r2
18010898:	b809883a 	mov	r4,r23
1801089c:	102d883a 	mov	r22,r2
180108a0:	8002b640 	call	18002b64 <__mulsi3>
180108a4:	d9800217 	ldw	r6,8(sp)
180108a8:	d8c00017 	ldw	r3,0(sp)
180108ac:	300c943a 	slli	r6,r6,16
180108b0:	1a3fffcc 	andi	r8,r3,65535
180108b4:	4190b03a 	or	r8,r8,r6
180108b8:	4080042e 	bgeu	r8,r2,180108cc <__umoddi3+0x3cc>
180108bc:	4551883a 	add	r8,r8,r21
180108c0:	b0ffffc4 	addi	r3,r22,-1
180108c4:	45406f2e 	bgeu	r8,r21,18010a84 <__umoddi3+0x584>
180108c8:	182d883a 	mov	r22,r3
180108cc:	880e943a 	slli	r7,r17,16
180108d0:	9006d43a 	srli	r3,r18,16
180108d4:	91bfffcc 	andi	r6,r18,65535
180108d8:	3dacb03a 	or	r22,r7,r22
180108dc:	b02ed43a 	srli	r23,r22,16
180108e0:	b5bfffcc 	andi	r22,r22,65535
180108e4:	300b883a 	mov	r5,r6
180108e8:	b009883a 	mov	r4,r22
180108ec:	40a3c83a 	sub	r17,r8,r2
180108f0:	d8c00115 	stw	r3,4(sp)
180108f4:	d9800215 	stw	r6,8(sp)
180108f8:	8002b640 	call	18002b64 <__mulsi3>
180108fc:	d9800217 	ldw	r6,8(sp)
18010900:	b809883a 	mov	r4,r23
18010904:	1039883a 	mov	fp,r2
18010908:	300b883a 	mov	r5,r6
1801090c:	8002b640 	call	18002b64 <__mulsi3>
18010910:	d8c00117 	ldw	r3,4(sp)
18010914:	b809883a 	mov	r4,r23
18010918:	d8800215 	stw	r2,8(sp)
1801091c:	180b883a 	mov	r5,r3
18010920:	8002b640 	call	18002b64 <__mulsi3>
18010924:	d8c00117 	ldw	r3,4(sp)
18010928:	b009883a 	mov	r4,r22
1801092c:	102f883a 	mov	r23,r2
18010930:	180b883a 	mov	r5,r3
18010934:	8002b640 	call	18002b64 <__mulsi3>
18010938:	d9800217 	ldw	r6,8(sp)
1801093c:	e006d43a 	srli	r3,fp,16
18010940:	1185883a 	add	r2,r2,r6
18010944:	1885883a 	add	r2,r3,r2
18010948:	1180022e 	bgeu	r2,r6,18010954 <__umoddi3+0x454>
1801094c:	00c00074 	movhi	r3,1
18010950:	b8ef883a 	add	r23,r23,r3
18010954:	1006d43a 	srli	r3,r2,16
18010958:	1004943a 	slli	r2,r2,16
1801095c:	e73fffcc 	andi	fp,fp,65535
18010960:	1dc7883a 	add	r3,r3,r23
18010964:	1739883a 	add	fp,r2,fp
18010968:	88c03a36 	bltu	r17,r3,18010a54 <__umoddi3+0x554>
1801096c:	88c05126 	beq	r17,r3,18010ab4 <__umoddi3+0x5b4>
18010970:	88c9c83a 	sub	r4,r17,r3
18010974:	e00f883a 	mov	r7,fp
18010978:	81cfc83a 	sub	r7,r16,r7
1801097c:	81c7803a 	cmpltu	r3,r16,r7
18010980:	20c7c83a 	sub	r3,r4,r3
18010984:	1cc4983a 	sll	r2,r3,r19
18010988:	3d0ed83a 	srl	r7,r7,r20
1801098c:	1d06d83a 	srl	r3,r3,r20
18010990:	11c4b03a 	or	r2,r2,r7
18010994:	003f7c06 	br	18010788 <__alt_data_end+0xf8010788>
18010998:	9ca6983a 	sll	r19,r19,r18
1801099c:	88f8d83a 	srl	fp,r17,r3
180109a0:	80c4d83a 	srl	r2,r16,r3
180109a4:	982cd43a 	srli	r22,r19,16
180109a8:	8ca2983a 	sll	r17,r17,r18
180109ac:	e009883a 	mov	r4,fp
180109b0:	b00b883a 	mov	r5,r22
180109b4:	146ab03a 	or	r21,r2,r17
180109b8:	8002b0c0 	call	18002b0c <__umodsi3>
180109bc:	b00b883a 	mov	r5,r22
180109c0:	e009883a 	mov	r4,fp
180109c4:	1029883a 	mov	r20,r2
180109c8:	9dffffcc 	andi	r23,r19,65535
180109cc:	8002aa80 	call	18002aa8 <__udivsi3>
180109d0:	b809883a 	mov	r4,r23
180109d4:	100b883a 	mov	r5,r2
180109d8:	8002b640 	call	18002b64 <__mulsi3>
180109dc:	a008943a 	slli	r4,r20,16
180109e0:	a806d43a 	srli	r3,r21,16
180109e4:	84a8983a 	sll	r20,r16,r18
180109e8:	1906b03a 	or	r3,r3,r4
180109ec:	1880042e 	bgeu	r3,r2,18010a00 <__umoddi3+0x500>
180109f0:	1cc7883a 	add	r3,r3,r19
180109f4:	1cc00236 	bltu	r3,r19,18010a00 <__umoddi3+0x500>
180109f8:	1880012e 	bgeu	r3,r2,18010a00 <__umoddi3+0x500>
180109fc:	1cc7883a 	add	r3,r3,r19
18010a00:	18a3c83a 	sub	r17,r3,r2
18010a04:	b00b883a 	mov	r5,r22
18010a08:	8809883a 	mov	r4,r17
18010a0c:	8002b0c0 	call	18002b0c <__umodsi3>
18010a10:	b00b883a 	mov	r5,r22
18010a14:	8809883a 	mov	r4,r17
18010a18:	1021883a 	mov	r16,r2
18010a1c:	8002aa80 	call	18002aa8 <__udivsi3>
18010a20:	100b883a 	mov	r5,r2
18010a24:	b809883a 	mov	r4,r23
18010a28:	8020943a 	slli	r16,r16,16
18010a2c:	8002b640 	call	18002b64 <__mulsi3>
18010a30:	a8ffffcc 	andi	r3,r21,65535
18010a34:	1c06b03a 	or	r3,r3,r16
18010a38:	1880042e 	bgeu	r3,r2,18010a4c <__umoddi3+0x54c>
18010a3c:	1cc7883a 	add	r3,r3,r19
18010a40:	1cc00236 	bltu	r3,r19,18010a4c <__umoddi3+0x54c>
18010a44:	1880012e 	bgeu	r3,r2,18010a4c <__umoddi3+0x54c>
18010a48:	1cc7883a 	add	r3,r3,r19
18010a4c:	18a3c83a 	sub	r17,r3,r2
18010a50:	003f2906 	br	180106f8 <__alt_data_end+0xf80106f8>
18010a54:	e48fc83a 	sub	r7,fp,r18
18010a58:	1d49c83a 	sub	r4,r3,r21
18010a5c:	e1f9803a 	cmpltu	fp,fp,r7
18010a60:	2739c83a 	sub	fp,r4,fp
18010a64:	8f09c83a 	sub	r4,r17,fp
18010a68:	003fc306 	br	18010978 <__alt_data_end+0xf8010978>
18010a6c:	01000604 	movi	r4,24
18010a70:	003ef906 	br	18010658 <__alt_data_end+0xf8010658>
18010a74:	00800604 	movi	r2,24
18010a78:	003f1306 	br	180106c8 <__alt_data_end+0xf80106c8>
18010a7c:	01000604 	movi	r4,24
18010a80:	003eb606 	br	1801055c <__alt_data_end+0xf801055c>
18010a84:	40bf902e 	bgeu	r8,r2,180108c8 <__alt_data_end+0xf80108c8>
18010a88:	b5bfff84 	addi	r22,r22,-2
18010a8c:	4551883a 	add	r8,r8,r21
18010a90:	003f8e06 	br	180108cc <__alt_data_end+0xf80108cc>
18010a94:	18bf762e 	bgeu	r3,r2,18010870 <__alt_data_end+0xf8010870>
18010a98:	8c7fff84 	addi	r17,r17,-2
18010a9c:	1d47883a 	add	r3,r3,r21
18010aa0:	003f7406 	br	18010874 <__alt_data_end+0xf8010874>
18010aa4:	1cc7883a 	add	r3,r3,r19
18010aa8:	003ecd06 	br	180105e0 <__alt_data_end+0xf80105e0>
18010aac:	8005883a 	mov	r2,r16
18010ab0:	003ef806 	br	18010694 <__alt_data_end+0xf8010694>
18010ab4:	873fe736 	bltu	r16,fp,18010a54 <__alt_data_end+0xf8010a54>
18010ab8:	e00f883a 	mov	r7,fp
18010abc:	0009883a 	mov	r4,zero
18010ac0:	003fad06 	br	18010978 <__alt_data_end+0xf8010978>

18010ac4 <__adddf3>:
18010ac4:	02c00434 	movhi	r11,16
18010ac8:	5affffc4 	addi	r11,r11,-1
18010acc:	2806d7fa 	srli	r3,r5,31
18010ad0:	2ad4703a 	and	r10,r5,r11
18010ad4:	3ad2703a 	and	r9,r7,r11
18010ad8:	3804d53a 	srli	r2,r7,20
18010adc:	3018d77a 	srli	r12,r6,29
18010ae0:	280ad53a 	srli	r5,r5,20
18010ae4:	501490fa 	slli	r10,r10,3
18010ae8:	2010d77a 	srli	r8,r4,29
18010aec:	481290fa 	slli	r9,r9,3
18010af0:	380ed7fa 	srli	r7,r7,31
18010af4:	defffb04 	addi	sp,sp,-20
18010af8:	dc800215 	stw	r18,8(sp)
18010afc:	dc400115 	stw	r17,4(sp)
18010b00:	dc000015 	stw	r16,0(sp)
18010b04:	dfc00415 	stw	ra,16(sp)
18010b08:	dcc00315 	stw	r19,12(sp)
18010b0c:	1c803fcc 	andi	r18,r3,255
18010b10:	2c01ffcc 	andi	r16,r5,2047
18010b14:	5210b03a 	or	r8,r10,r8
18010b18:	202290fa 	slli	r17,r4,3
18010b1c:	1081ffcc 	andi	r2,r2,2047
18010b20:	4b12b03a 	or	r9,r9,r12
18010b24:	300c90fa 	slli	r6,r6,3
18010b28:	91c07526 	beq	r18,r7,18010d00 <__adddf3+0x23c>
18010b2c:	8087c83a 	sub	r3,r16,r2
18010b30:	00c0ab0e 	bge	zero,r3,18010de0 <__adddf3+0x31c>
18010b34:	10002a1e 	bne	r2,zero,18010be0 <__adddf3+0x11c>
18010b38:	4984b03a 	or	r2,r9,r6
18010b3c:	1000961e 	bne	r2,zero,18010d98 <__adddf3+0x2d4>
18010b40:	888001cc 	andi	r2,r17,7
18010b44:	10000726 	beq	r2,zero,18010b64 <__adddf3+0xa0>
18010b48:	888003cc 	andi	r2,r17,15
18010b4c:	00c00104 	movi	r3,4
18010b50:	10c00426 	beq	r2,r3,18010b64 <__adddf3+0xa0>
18010b54:	88c7883a 	add	r3,r17,r3
18010b58:	1c63803a 	cmpltu	r17,r3,r17
18010b5c:	4451883a 	add	r8,r8,r17
18010b60:	1823883a 	mov	r17,r3
18010b64:	4080202c 	andhi	r2,r8,128
18010b68:	10005926 	beq	r2,zero,18010cd0 <__adddf3+0x20c>
18010b6c:	84000044 	addi	r16,r16,1
18010b70:	0081ffc4 	movi	r2,2047
18010b74:	8080ba26 	beq	r16,r2,18010e60 <__adddf3+0x39c>
18010b78:	00bfe034 	movhi	r2,65408
18010b7c:	10bfffc4 	addi	r2,r2,-1
18010b80:	4090703a 	and	r8,r8,r2
18010b84:	4004977a 	slli	r2,r8,29
18010b88:	4010927a 	slli	r8,r8,9
18010b8c:	8822d0fa 	srli	r17,r17,3
18010b90:	8401ffcc 	andi	r16,r16,2047
18010b94:	4010d33a 	srli	r8,r8,12
18010b98:	9007883a 	mov	r3,r18
18010b9c:	1444b03a 	or	r2,r2,r17
18010ba0:	8401ffcc 	andi	r16,r16,2047
18010ba4:	8020953a 	slli	r16,r16,20
18010ba8:	18c03fcc 	andi	r3,r3,255
18010bac:	01000434 	movhi	r4,16
18010bb0:	213fffc4 	addi	r4,r4,-1
18010bb4:	180697fa 	slli	r3,r3,31
18010bb8:	4110703a 	and	r8,r8,r4
18010bbc:	4410b03a 	or	r8,r8,r16
18010bc0:	40c6b03a 	or	r3,r8,r3
18010bc4:	dfc00417 	ldw	ra,16(sp)
18010bc8:	dcc00317 	ldw	r19,12(sp)
18010bcc:	dc800217 	ldw	r18,8(sp)
18010bd0:	dc400117 	ldw	r17,4(sp)
18010bd4:	dc000017 	ldw	r16,0(sp)
18010bd8:	dec00504 	addi	sp,sp,20
18010bdc:	f800283a 	ret
18010be0:	0081ffc4 	movi	r2,2047
18010be4:	80bfd626 	beq	r16,r2,18010b40 <__alt_data_end+0xf8010b40>
18010be8:	4a402034 	orhi	r9,r9,128
18010bec:	00800e04 	movi	r2,56
18010bf0:	10c09f16 	blt	r2,r3,18010e70 <__adddf3+0x3ac>
18010bf4:	008007c4 	movi	r2,31
18010bf8:	10c0c216 	blt	r2,r3,18010f04 <__adddf3+0x440>
18010bfc:	00800804 	movi	r2,32
18010c00:	10c5c83a 	sub	r2,r2,r3
18010c04:	488a983a 	sll	r5,r9,r2
18010c08:	30c8d83a 	srl	r4,r6,r3
18010c0c:	3084983a 	sll	r2,r6,r2
18010c10:	48c6d83a 	srl	r3,r9,r3
18010c14:	290cb03a 	or	r6,r5,r4
18010c18:	1004c03a 	cmpne	r2,r2,zero
18010c1c:	308cb03a 	or	r6,r6,r2
18010c20:	898dc83a 	sub	r6,r17,r6
18010c24:	89a3803a 	cmpltu	r17,r17,r6
18010c28:	40d1c83a 	sub	r8,r8,r3
18010c2c:	4451c83a 	sub	r8,r8,r17
18010c30:	3023883a 	mov	r17,r6
18010c34:	4080202c 	andhi	r2,r8,128
18010c38:	10002326 	beq	r2,zero,18010cc8 <__adddf3+0x204>
18010c3c:	04c02034 	movhi	r19,128
18010c40:	9cffffc4 	addi	r19,r19,-1
18010c44:	44e6703a 	and	r19,r8,r19
18010c48:	98007626 	beq	r19,zero,18010e24 <__adddf3+0x360>
18010c4c:	9809883a 	mov	r4,r19
18010c50:	80133040 	call	18013304 <__clzsi2>
18010c54:	10fffe04 	addi	r3,r2,-8
18010c58:	010007c4 	movi	r4,31
18010c5c:	20c07716 	blt	r4,r3,18010e3c <__adddf3+0x378>
18010c60:	00800804 	movi	r2,32
18010c64:	10c5c83a 	sub	r2,r2,r3
18010c68:	8884d83a 	srl	r2,r17,r2
18010c6c:	98d0983a 	sll	r8,r19,r3
18010c70:	88e2983a 	sll	r17,r17,r3
18010c74:	1204b03a 	or	r2,r2,r8
18010c78:	1c007416 	blt	r3,r16,18010e4c <__adddf3+0x388>
18010c7c:	1c21c83a 	sub	r16,r3,r16
18010c80:	82000044 	addi	r8,r16,1
18010c84:	00c007c4 	movi	r3,31
18010c88:	1a009116 	blt	r3,r8,18010ed0 <__adddf3+0x40c>
18010c8c:	00c00804 	movi	r3,32
18010c90:	1a07c83a 	sub	r3,r3,r8
18010c94:	8a08d83a 	srl	r4,r17,r8
18010c98:	88e2983a 	sll	r17,r17,r3
18010c9c:	10c6983a 	sll	r3,r2,r3
18010ca0:	1210d83a 	srl	r8,r2,r8
18010ca4:	8804c03a 	cmpne	r2,r17,zero
18010ca8:	1906b03a 	or	r3,r3,r4
18010cac:	18a2b03a 	or	r17,r3,r2
18010cb0:	0021883a 	mov	r16,zero
18010cb4:	003fa206 	br	18010b40 <__alt_data_end+0xf8010b40>
18010cb8:	1890b03a 	or	r8,r3,r2
18010cbc:	40017d26 	beq	r8,zero,180112b4 <__adddf3+0x7f0>
18010cc0:	1011883a 	mov	r8,r2
18010cc4:	1823883a 	mov	r17,r3
18010cc8:	888001cc 	andi	r2,r17,7
18010ccc:	103f9e1e 	bne	r2,zero,18010b48 <__alt_data_end+0xf8010b48>
18010cd0:	4004977a 	slli	r2,r8,29
18010cd4:	8822d0fa 	srli	r17,r17,3
18010cd8:	4010d0fa 	srli	r8,r8,3
18010cdc:	9007883a 	mov	r3,r18
18010ce0:	1444b03a 	or	r2,r2,r17
18010ce4:	0101ffc4 	movi	r4,2047
18010ce8:	81002426 	beq	r16,r4,18010d7c <__adddf3+0x2b8>
18010cec:	8120703a 	and	r16,r16,r4
18010cf0:	01000434 	movhi	r4,16
18010cf4:	213fffc4 	addi	r4,r4,-1
18010cf8:	4110703a 	and	r8,r8,r4
18010cfc:	003fa806 	br	18010ba0 <__alt_data_end+0xf8010ba0>
18010d00:	8089c83a 	sub	r4,r16,r2
18010d04:	01005e0e 	bge	zero,r4,18010e80 <__adddf3+0x3bc>
18010d08:	10002b26 	beq	r2,zero,18010db8 <__adddf3+0x2f4>
18010d0c:	0081ffc4 	movi	r2,2047
18010d10:	80bf8b26 	beq	r16,r2,18010b40 <__alt_data_end+0xf8010b40>
18010d14:	4a402034 	orhi	r9,r9,128
18010d18:	00800e04 	movi	r2,56
18010d1c:	1100a40e 	bge	r2,r4,18010fb0 <__adddf3+0x4ec>
18010d20:	498cb03a 	or	r6,r9,r6
18010d24:	300ac03a 	cmpne	r5,r6,zero
18010d28:	0013883a 	mov	r9,zero
18010d2c:	2c4b883a 	add	r5,r5,r17
18010d30:	2c63803a 	cmpltu	r17,r5,r17
18010d34:	4a11883a 	add	r8,r9,r8
18010d38:	8a11883a 	add	r8,r17,r8
18010d3c:	2823883a 	mov	r17,r5
18010d40:	4080202c 	andhi	r2,r8,128
18010d44:	103fe026 	beq	r2,zero,18010cc8 <__alt_data_end+0xf8010cc8>
18010d48:	84000044 	addi	r16,r16,1
18010d4c:	0081ffc4 	movi	r2,2047
18010d50:	8080d226 	beq	r16,r2,1801109c <__adddf3+0x5d8>
18010d54:	00bfe034 	movhi	r2,65408
18010d58:	10bfffc4 	addi	r2,r2,-1
18010d5c:	4090703a 	and	r8,r8,r2
18010d60:	880ad07a 	srli	r5,r17,1
18010d64:	400897fa 	slli	r4,r8,31
18010d68:	88c0004c 	andi	r3,r17,1
18010d6c:	28e2b03a 	or	r17,r5,r3
18010d70:	4010d07a 	srli	r8,r8,1
18010d74:	2462b03a 	or	r17,r4,r17
18010d78:	003f7106 	br	18010b40 <__alt_data_end+0xf8010b40>
18010d7c:	4088b03a 	or	r4,r8,r2
18010d80:	20014526 	beq	r4,zero,18011298 <__adddf3+0x7d4>
18010d84:	01000434 	movhi	r4,16
18010d88:	42000234 	orhi	r8,r8,8
18010d8c:	213fffc4 	addi	r4,r4,-1
18010d90:	4110703a 	and	r8,r8,r4
18010d94:	003f8206 	br	18010ba0 <__alt_data_end+0xf8010ba0>
18010d98:	18ffffc4 	addi	r3,r3,-1
18010d9c:	1800491e 	bne	r3,zero,18010ec4 <__adddf3+0x400>
18010da0:	898bc83a 	sub	r5,r17,r6
18010da4:	8963803a 	cmpltu	r17,r17,r5
18010da8:	4251c83a 	sub	r8,r8,r9
18010dac:	4451c83a 	sub	r8,r8,r17
18010db0:	2823883a 	mov	r17,r5
18010db4:	003f9f06 	br	18010c34 <__alt_data_end+0xf8010c34>
18010db8:	4984b03a 	or	r2,r9,r6
18010dbc:	103f6026 	beq	r2,zero,18010b40 <__alt_data_end+0xf8010b40>
18010dc0:	213fffc4 	addi	r4,r4,-1
18010dc4:	2000931e 	bne	r4,zero,18011014 <__adddf3+0x550>
18010dc8:	898d883a 	add	r6,r17,r6
18010dcc:	3463803a 	cmpltu	r17,r6,r17
18010dd0:	4251883a 	add	r8,r8,r9
18010dd4:	8a11883a 	add	r8,r17,r8
18010dd8:	3023883a 	mov	r17,r6
18010ddc:	003fd806 	br	18010d40 <__alt_data_end+0xf8010d40>
18010de0:	1800541e 	bne	r3,zero,18010f34 <__adddf3+0x470>
18010de4:	80800044 	addi	r2,r16,1
18010de8:	1081ffcc 	andi	r2,r2,2047
18010dec:	00c00044 	movi	r3,1
18010df0:	1880a00e 	bge	r3,r2,18011074 <__adddf3+0x5b0>
18010df4:	8989c83a 	sub	r4,r17,r6
18010df8:	8905803a 	cmpltu	r2,r17,r4
18010dfc:	4267c83a 	sub	r19,r8,r9
18010e00:	98a7c83a 	sub	r19,r19,r2
18010e04:	9880202c 	andhi	r2,r19,128
18010e08:	10006326 	beq	r2,zero,18010f98 <__adddf3+0x4d4>
18010e0c:	3463c83a 	sub	r17,r6,r17
18010e10:	4a07c83a 	sub	r3,r9,r8
18010e14:	344d803a 	cmpltu	r6,r6,r17
18010e18:	19a7c83a 	sub	r19,r3,r6
18010e1c:	3825883a 	mov	r18,r7
18010e20:	983f8a1e 	bne	r19,zero,18010c4c <__alt_data_end+0xf8010c4c>
18010e24:	8809883a 	mov	r4,r17
18010e28:	80133040 	call	18013304 <__clzsi2>
18010e2c:	10800804 	addi	r2,r2,32
18010e30:	10fffe04 	addi	r3,r2,-8
18010e34:	010007c4 	movi	r4,31
18010e38:	20ff890e 	bge	r4,r3,18010c60 <__alt_data_end+0xf8010c60>
18010e3c:	10bff604 	addi	r2,r2,-40
18010e40:	8884983a 	sll	r2,r17,r2
18010e44:	0023883a 	mov	r17,zero
18010e48:	1c3f8c0e 	bge	r3,r16,18010c7c <__alt_data_end+0xf8010c7c>
18010e4c:	023fe034 	movhi	r8,65408
18010e50:	423fffc4 	addi	r8,r8,-1
18010e54:	80e1c83a 	sub	r16,r16,r3
18010e58:	1210703a 	and	r8,r2,r8
18010e5c:	003f3806 	br	18010b40 <__alt_data_end+0xf8010b40>
18010e60:	9007883a 	mov	r3,r18
18010e64:	0011883a 	mov	r8,zero
18010e68:	0005883a 	mov	r2,zero
18010e6c:	003f4c06 	br	18010ba0 <__alt_data_end+0xf8010ba0>
18010e70:	498cb03a 	or	r6,r9,r6
18010e74:	300cc03a 	cmpne	r6,r6,zero
18010e78:	0007883a 	mov	r3,zero
18010e7c:	003f6806 	br	18010c20 <__alt_data_end+0xf8010c20>
18010e80:	20009c1e 	bne	r4,zero,180110f4 <__adddf3+0x630>
18010e84:	80800044 	addi	r2,r16,1
18010e88:	1141ffcc 	andi	r5,r2,2047
18010e8c:	01000044 	movi	r4,1
18010e90:	2140670e 	bge	r4,r5,18011030 <__adddf3+0x56c>
18010e94:	0101ffc4 	movi	r4,2047
18010e98:	11007f26 	beq	r2,r4,18011098 <__adddf3+0x5d4>
18010e9c:	898d883a 	add	r6,r17,r6
18010ea0:	4247883a 	add	r3,r8,r9
18010ea4:	3451803a 	cmpltu	r8,r6,r17
18010ea8:	40d1883a 	add	r8,r8,r3
18010eac:	402297fa 	slli	r17,r8,31
18010eb0:	300cd07a 	srli	r6,r6,1
18010eb4:	4010d07a 	srli	r8,r8,1
18010eb8:	1021883a 	mov	r16,r2
18010ebc:	89a2b03a 	or	r17,r17,r6
18010ec0:	003f1f06 	br	18010b40 <__alt_data_end+0xf8010b40>
18010ec4:	0081ffc4 	movi	r2,2047
18010ec8:	80bf481e 	bne	r16,r2,18010bec <__alt_data_end+0xf8010bec>
18010ecc:	003f1c06 	br	18010b40 <__alt_data_end+0xf8010b40>
18010ed0:	843ff844 	addi	r16,r16,-31
18010ed4:	01000804 	movi	r4,32
18010ed8:	1406d83a 	srl	r3,r2,r16
18010edc:	41005026 	beq	r8,r4,18011020 <__adddf3+0x55c>
18010ee0:	01001004 	movi	r4,64
18010ee4:	2211c83a 	sub	r8,r4,r8
18010ee8:	1204983a 	sll	r2,r2,r8
18010eec:	88a2b03a 	or	r17,r17,r2
18010ef0:	8822c03a 	cmpne	r17,r17,zero
18010ef4:	1c62b03a 	or	r17,r3,r17
18010ef8:	0011883a 	mov	r8,zero
18010efc:	0021883a 	mov	r16,zero
18010f00:	003f7106 	br	18010cc8 <__alt_data_end+0xf8010cc8>
18010f04:	193ff804 	addi	r4,r3,-32
18010f08:	00800804 	movi	r2,32
18010f0c:	4908d83a 	srl	r4,r9,r4
18010f10:	18804526 	beq	r3,r2,18011028 <__adddf3+0x564>
18010f14:	00801004 	movi	r2,64
18010f18:	10c5c83a 	sub	r2,r2,r3
18010f1c:	4886983a 	sll	r3,r9,r2
18010f20:	198cb03a 	or	r6,r3,r6
18010f24:	300cc03a 	cmpne	r6,r6,zero
18010f28:	218cb03a 	or	r6,r4,r6
18010f2c:	0007883a 	mov	r3,zero
18010f30:	003f3b06 	br	18010c20 <__alt_data_end+0xf8010c20>
18010f34:	80002a26 	beq	r16,zero,18010fe0 <__adddf3+0x51c>
18010f38:	0101ffc4 	movi	r4,2047
18010f3c:	11006826 	beq	r2,r4,180110e0 <__adddf3+0x61c>
18010f40:	00c7c83a 	sub	r3,zero,r3
18010f44:	42002034 	orhi	r8,r8,128
18010f48:	01000e04 	movi	r4,56
18010f4c:	20c07c16 	blt	r4,r3,18011140 <__adddf3+0x67c>
18010f50:	010007c4 	movi	r4,31
18010f54:	20c0da16 	blt	r4,r3,180112c0 <__adddf3+0x7fc>
18010f58:	01000804 	movi	r4,32
18010f5c:	20c9c83a 	sub	r4,r4,r3
18010f60:	4114983a 	sll	r10,r8,r4
18010f64:	88cad83a 	srl	r5,r17,r3
18010f68:	8908983a 	sll	r4,r17,r4
18010f6c:	40c6d83a 	srl	r3,r8,r3
18010f70:	5162b03a 	or	r17,r10,r5
18010f74:	2008c03a 	cmpne	r4,r4,zero
18010f78:	8922b03a 	or	r17,r17,r4
18010f7c:	3463c83a 	sub	r17,r6,r17
18010f80:	48c7c83a 	sub	r3,r9,r3
18010f84:	344d803a 	cmpltu	r6,r6,r17
18010f88:	1991c83a 	sub	r8,r3,r6
18010f8c:	1021883a 	mov	r16,r2
18010f90:	3825883a 	mov	r18,r7
18010f94:	003f2706 	br	18010c34 <__alt_data_end+0xf8010c34>
18010f98:	24d0b03a 	or	r8,r4,r19
18010f9c:	40001b1e 	bne	r8,zero,1801100c <__adddf3+0x548>
18010fa0:	0005883a 	mov	r2,zero
18010fa4:	0007883a 	mov	r3,zero
18010fa8:	0021883a 	mov	r16,zero
18010fac:	003f4d06 	br	18010ce4 <__alt_data_end+0xf8010ce4>
18010fb0:	008007c4 	movi	r2,31
18010fb4:	11003c16 	blt	r2,r4,180110a8 <__adddf3+0x5e4>
18010fb8:	00800804 	movi	r2,32
18010fbc:	1105c83a 	sub	r2,r2,r4
18010fc0:	488e983a 	sll	r7,r9,r2
18010fc4:	310ad83a 	srl	r5,r6,r4
18010fc8:	3084983a 	sll	r2,r6,r2
18010fcc:	4912d83a 	srl	r9,r9,r4
18010fd0:	394ab03a 	or	r5,r7,r5
18010fd4:	1004c03a 	cmpne	r2,r2,zero
18010fd8:	288ab03a 	or	r5,r5,r2
18010fdc:	003f5306 	br	18010d2c <__alt_data_end+0xf8010d2c>
18010fe0:	4448b03a 	or	r4,r8,r17
18010fe4:	20003e26 	beq	r4,zero,180110e0 <__adddf3+0x61c>
18010fe8:	00c6303a 	nor	r3,zero,r3
18010fec:	18003a1e 	bne	r3,zero,180110d8 <__adddf3+0x614>
18010ff0:	3463c83a 	sub	r17,r6,r17
18010ff4:	4a07c83a 	sub	r3,r9,r8
18010ff8:	344d803a 	cmpltu	r6,r6,r17
18010ffc:	1991c83a 	sub	r8,r3,r6
18011000:	1021883a 	mov	r16,r2
18011004:	3825883a 	mov	r18,r7
18011008:	003f0a06 	br	18010c34 <__alt_data_end+0xf8010c34>
1801100c:	2023883a 	mov	r17,r4
18011010:	003f0d06 	br	18010c48 <__alt_data_end+0xf8010c48>
18011014:	0081ffc4 	movi	r2,2047
18011018:	80bf3f1e 	bne	r16,r2,18010d18 <__alt_data_end+0xf8010d18>
1801101c:	003ec806 	br	18010b40 <__alt_data_end+0xf8010b40>
18011020:	0005883a 	mov	r2,zero
18011024:	003fb106 	br	18010eec <__alt_data_end+0xf8010eec>
18011028:	0007883a 	mov	r3,zero
1801102c:	003fbc06 	br	18010f20 <__alt_data_end+0xf8010f20>
18011030:	4444b03a 	or	r2,r8,r17
18011034:	8000871e 	bne	r16,zero,18011254 <__adddf3+0x790>
18011038:	1000ba26 	beq	r2,zero,18011324 <__adddf3+0x860>
1801103c:	4984b03a 	or	r2,r9,r6
18011040:	103ebf26 	beq	r2,zero,18010b40 <__alt_data_end+0xf8010b40>
18011044:	8985883a 	add	r2,r17,r6
18011048:	4247883a 	add	r3,r8,r9
1801104c:	1451803a 	cmpltu	r8,r2,r17
18011050:	40d1883a 	add	r8,r8,r3
18011054:	40c0202c 	andhi	r3,r8,128
18011058:	1023883a 	mov	r17,r2
1801105c:	183f1a26 	beq	r3,zero,18010cc8 <__alt_data_end+0xf8010cc8>
18011060:	00bfe034 	movhi	r2,65408
18011064:	10bfffc4 	addi	r2,r2,-1
18011068:	2021883a 	mov	r16,r4
1801106c:	4090703a 	and	r8,r8,r2
18011070:	003eb306 	br	18010b40 <__alt_data_end+0xf8010b40>
18011074:	4444b03a 	or	r2,r8,r17
18011078:	8000291e 	bne	r16,zero,18011120 <__adddf3+0x65c>
1801107c:	10004b1e 	bne	r2,zero,180111ac <__adddf3+0x6e8>
18011080:	4990b03a 	or	r8,r9,r6
18011084:	40008b26 	beq	r8,zero,180112b4 <__adddf3+0x7f0>
18011088:	4811883a 	mov	r8,r9
1801108c:	3023883a 	mov	r17,r6
18011090:	3825883a 	mov	r18,r7
18011094:	003eaa06 	br	18010b40 <__alt_data_end+0xf8010b40>
18011098:	1021883a 	mov	r16,r2
1801109c:	0011883a 	mov	r8,zero
180110a0:	0005883a 	mov	r2,zero
180110a4:	003f0f06 	br	18010ce4 <__alt_data_end+0xf8010ce4>
180110a8:	217ff804 	addi	r5,r4,-32
180110ac:	00800804 	movi	r2,32
180110b0:	494ad83a 	srl	r5,r9,r5
180110b4:	20807d26 	beq	r4,r2,180112ac <__adddf3+0x7e8>
180110b8:	00801004 	movi	r2,64
180110bc:	1109c83a 	sub	r4,r2,r4
180110c0:	4912983a 	sll	r9,r9,r4
180110c4:	498cb03a 	or	r6,r9,r6
180110c8:	300cc03a 	cmpne	r6,r6,zero
180110cc:	298ab03a 	or	r5,r5,r6
180110d0:	0013883a 	mov	r9,zero
180110d4:	003f1506 	br	18010d2c <__alt_data_end+0xf8010d2c>
180110d8:	0101ffc4 	movi	r4,2047
180110dc:	113f9a1e 	bne	r2,r4,18010f48 <__alt_data_end+0xf8010f48>
180110e0:	4811883a 	mov	r8,r9
180110e4:	3023883a 	mov	r17,r6
180110e8:	1021883a 	mov	r16,r2
180110ec:	3825883a 	mov	r18,r7
180110f0:	003e9306 	br	18010b40 <__alt_data_end+0xf8010b40>
180110f4:	8000161e 	bne	r16,zero,18011150 <__adddf3+0x68c>
180110f8:	444ab03a 	or	r5,r8,r17
180110fc:	28005126 	beq	r5,zero,18011244 <__adddf3+0x780>
18011100:	0108303a 	nor	r4,zero,r4
18011104:	20004d1e 	bne	r4,zero,1801123c <__adddf3+0x778>
18011108:	89a3883a 	add	r17,r17,r6
1801110c:	4253883a 	add	r9,r8,r9
18011110:	898d803a 	cmpltu	r6,r17,r6
18011114:	3251883a 	add	r8,r6,r9
18011118:	1021883a 	mov	r16,r2
1801111c:	003f0806 	br	18010d40 <__alt_data_end+0xf8010d40>
18011120:	1000301e 	bne	r2,zero,180111e4 <__adddf3+0x720>
18011124:	4984b03a 	or	r2,r9,r6
18011128:	10007126 	beq	r2,zero,180112f0 <__adddf3+0x82c>
1801112c:	4811883a 	mov	r8,r9
18011130:	3023883a 	mov	r17,r6
18011134:	3825883a 	mov	r18,r7
18011138:	0401ffc4 	movi	r16,2047
1801113c:	003e8006 	br	18010b40 <__alt_data_end+0xf8010b40>
18011140:	4462b03a 	or	r17,r8,r17
18011144:	8822c03a 	cmpne	r17,r17,zero
18011148:	0007883a 	mov	r3,zero
1801114c:	003f8b06 	br	18010f7c <__alt_data_end+0xf8010f7c>
18011150:	0141ffc4 	movi	r5,2047
18011154:	11403b26 	beq	r2,r5,18011244 <__adddf3+0x780>
18011158:	0109c83a 	sub	r4,zero,r4
1801115c:	42002034 	orhi	r8,r8,128
18011160:	01400e04 	movi	r5,56
18011164:	29006716 	blt	r5,r4,18011304 <__adddf3+0x840>
18011168:	014007c4 	movi	r5,31
1801116c:	29007016 	blt	r5,r4,18011330 <__adddf3+0x86c>
18011170:	01400804 	movi	r5,32
18011174:	290bc83a 	sub	r5,r5,r4
18011178:	4154983a 	sll	r10,r8,r5
1801117c:	890ed83a 	srl	r7,r17,r4
18011180:	894a983a 	sll	r5,r17,r5
18011184:	4108d83a 	srl	r4,r8,r4
18011188:	51e2b03a 	or	r17,r10,r7
1801118c:	280ac03a 	cmpne	r5,r5,zero
18011190:	8962b03a 	or	r17,r17,r5
18011194:	89a3883a 	add	r17,r17,r6
18011198:	2253883a 	add	r9,r4,r9
1801119c:	898d803a 	cmpltu	r6,r17,r6
180111a0:	3251883a 	add	r8,r6,r9
180111a4:	1021883a 	mov	r16,r2
180111a8:	003ee506 	br	18010d40 <__alt_data_end+0xf8010d40>
180111ac:	4984b03a 	or	r2,r9,r6
180111b0:	103e6326 	beq	r2,zero,18010b40 <__alt_data_end+0xf8010b40>
180111b4:	8987c83a 	sub	r3,r17,r6
180111b8:	88c9803a 	cmpltu	r4,r17,r3
180111bc:	4245c83a 	sub	r2,r8,r9
180111c0:	1105c83a 	sub	r2,r2,r4
180111c4:	1100202c 	andhi	r4,r2,128
180111c8:	203ebb26 	beq	r4,zero,18010cb8 <__alt_data_end+0xf8010cb8>
180111cc:	3463c83a 	sub	r17,r6,r17
180111d0:	4a07c83a 	sub	r3,r9,r8
180111d4:	344d803a 	cmpltu	r6,r6,r17
180111d8:	1991c83a 	sub	r8,r3,r6
180111dc:	3825883a 	mov	r18,r7
180111e0:	003e5706 	br	18010b40 <__alt_data_end+0xf8010b40>
180111e4:	4984b03a 	or	r2,r9,r6
180111e8:	10002e26 	beq	r2,zero,180112a4 <__adddf3+0x7e0>
180111ec:	4004d0fa 	srli	r2,r8,3
180111f0:	8822d0fa 	srli	r17,r17,3
180111f4:	4010977a 	slli	r8,r8,29
180111f8:	10c0022c 	andhi	r3,r2,8
180111fc:	4462b03a 	or	r17,r8,r17
18011200:	18000826 	beq	r3,zero,18011224 <__adddf3+0x760>
18011204:	4808d0fa 	srli	r4,r9,3
18011208:	20c0022c 	andhi	r3,r4,8
1801120c:	1800051e 	bne	r3,zero,18011224 <__adddf3+0x760>
18011210:	300cd0fa 	srli	r6,r6,3
18011214:	4806977a 	slli	r3,r9,29
18011218:	2005883a 	mov	r2,r4
1801121c:	3825883a 	mov	r18,r7
18011220:	19a2b03a 	or	r17,r3,r6
18011224:	8810d77a 	srli	r8,r17,29
18011228:	100490fa 	slli	r2,r2,3
1801122c:	882290fa 	slli	r17,r17,3
18011230:	0401ffc4 	movi	r16,2047
18011234:	4090b03a 	or	r8,r8,r2
18011238:	003e4106 	br	18010b40 <__alt_data_end+0xf8010b40>
1801123c:	0141ffc4 	movi	r5,2047
18011240:	117fc71e 	bne	r2,r5,18011160 <__alt_data_end+0xf8011160>
18011244:	4811883a 	mov	r8,r9
18011248:	3023883a 	mov	r17,r6
1801124c:	1021883a 	mov	r16,r2
18011250:	003e3b06 	br	18010b40 <__alt_data_end+0xf8010b40>
18011254:	10002f26 	beq	r2,zero,18011314 <__adddf3+0x850>
18011258:	4984b03a 	or	r2,r9,r6
1801125c:	10001126 	beq	r2,zero,180112a4 <__adddf3+0x7e0>
18011260:	4004d0fa 	srli	r2,r8,3
18011264:	8822d0fa 	srli	r17,r17,3
18011268:	4010977a 	slli	r8,r8,29
1801126c:	10c0022c 	andhi	r3,r2,8
18011270:	4462b03a 	or	r17,r8,r17
18011274:	183feb26 	beq	r3,zero,18011224 <__alt_data_end+0xf8011224>
18011278:	4808d0fa 	srli	r4,r9,3
1801127c:	20c0022c 	andhi	r3,r4,8
18011280:	183fe81e 	bne	r3,zero,18011224 <__alt_data_end+0xf8011224>
18011284:	300cd0fa 	srli	r6,r6,3
18011288:	4806977a 	slli	r3,r9,29
1801128c:	2005883a 	mov	r2,r4
18011290:	19a2b03a 	or	r17,r3,r6
18011294:	003fe306 	br	18011224 <__alt_data_end+0xf8011224>
18011298:	0011883a 	mov	r8,zero
1801129c:	0005883a 	mov	r2,zero
180112a0:	003e3f06 	br	18010ba0 <__alt_data_end+0xf8010ba0>
180112a4:	0401ffc4 	movi	r16,2047
180112a8:	003e2506 	br	18010b40 <__alt_data_end+0xf8010b40>
180112ac:	0013883a 	mov	r9,zero
180112b0:	003f8406 	br	180110c4 <__alt_data_end+0xf80110c4>
180112b4:	0005883a 	mov	r2,zero
180112b8:	0007883a 	mov	r3,zero
180112bc:	003e8906 	br	18010ce4 <__alt_data_end+0xf8010ce4>
180112c0:	197ff804 	addi	r5,r3,-32
180112c4:	01000804 	movi	r4,32
180112c8:	414ad83a 	srl	r5,r8,r5
180112cc:	19002426 	beq	r3,r4,18011360 <__adddf3+0x89c>
180112d0:	01001004 	movi	r4,64
180112d4:	20c7c83a 	sub	r3,r4,r3
180112d8:	40c6983a 	sll	r3,r8,r3
180112dc:	1c46b03a 	or	r3,r3,r17
180112e0:	1806c03a 	cmpne	r3,r3,zero
180112e4:	28e2b03a 	or	r17,r5,r3
180112e8:	0007883a 	mov	r3,zero
180112ec:	003f2306 	br	18010f7c <__alt_data_end+0xf8010f7c>
180112f0:	0007883a 	mov	r3,zero
180112f4:	5811883a 	mov	r8,r11
180112f8:	00bfffc4 	movi	r2,-1
180112fc:	0401ffc4 	movi	r16,2047
18011300:	003e7806 	br	18010ce4 <__alt_data_end+0xf8010ce4>
18011304:	4462b03a 	or	r17,r8,r17
18011308:	8822c03a 	cmpne	r17,r17,zero
1801130c:	0009883a 	mov	r4,zero
18011310:	003fa006 	br	18011194 <__alt_data_end+0xf8011194>
18011314:	4811883a 	mov	r8,r9
18011318:	3023883a 	mov	r17,r6
1801131c:	0401ffc4 	movi	r16,2047
18011320:	003e0706 	br	18010b40 <__alt_data_end+0xf8010b40>
18011324:	4811883a 	mov	r8,r9
18011328:	3023883a 	mov	r17,r6
1801132c:	003e0406 	br	18010b40 <__alt_data_end+0xf8010b40>
18011330:	21fff804 	addi	r7,r4,-32
18011334:	01400804 	movi	r5,32
18011338:	41ced83a 	srl	r7,r8,r7
1801133c:	21400a26 	beq	r4,r5,18011368 <__adddf3+0x8a4>
18011340:	01401004 	movi	r5,64
18011344:	2909c83a 	sub	r4,r5,r4
18011348:	4108983a 	sll	r4,r8,r4
1801134c:	2448b03a 	or	r4,r4,r17
18011350:	2008c03a 	cmpne	r4,r4,zero
18011354:	3922b03a 	or	r17,r7,r4
18011358:	0009883a 	mov	r4,zero
1801135c:	003f8d06 	br	18011194 <__alt_data_end+0xf8011194>
18011360:	0007883a 	mov	r3,zero
18011364:	003fdd06 	br	180112dc <__alt_data_end+0xf80112dc>
18011368:	0009883a 	mov	r4,zero
1801136c:	003ff706 	br	1801134c <__alt_data_end+0xf801134c>

18011370 <__divdf3>:
18011370:	defff004 	addi	sp,sp,-64
18011374:	dc800815 	stw	r18,32(sp)
18011378:	2824d53a 	srli	r18,r5,20
1801137c:	dd800c15 	stw	r22,48(sp)
18011380:	282cd7fa 	srli	r22,r5,31
18011384:	dc000615 	stw	r16,24(sp)
18011388:	04000434 	movhi	r16,16
1801138c:	843fffc4 	addi	r16,r16,-1
18011390:	dfc00f15 	stw	ra,60(sp)
18011394:	df000e15 	stw	fp,56(sp)
18011398:	ddc00d15 	stw	r23,52(sp)
1801139c:	dd400b15 	stw	r21,44(sp)
180113a0:	dd000a15 	stw	r20,40(sp)
180113a4:	dcc00915 	stw	r19,36(sp)
180113a8:	dc400715 	stw	r17,28(sp)
180113ac:	9481ffcc 	andi	r18,r18,2047
180113b0:	2c20703a 	and	r16,r5,r16
180113b4:	b2003fcc 	andi	r8,r22,255
180113b8:	90006126 	beq	r18,zero,18011540 <__divdf3+0x1d0>
180113bc:	0081ffc4 	movi	r2,2047
180113c0:	202b883a 	mov	r21,r4
180113c4:	90803726 	beq	r18,r2,180114a4 <__divdf3+0x134>
180113c8:	80800434 	orhi	r2,r16,16
180113cc:	100490fa 	slli	r2,r2,3
180113d0:	2020d77a 	srli	r16,r4,29
180113d4:	202a90fa 	slli	r21,r4,3
180113d8:	94bf0044 	addi	r18,r18,-1023
180113dc:	80a0b03a 	or	r16,r16,r2
180113e0:	0013883a 	mov	r9,zero
180113e4:	000b883a 	mov	r5,zero
180113e8:	3806d53a 	srli	r3,r7,20
180113ec:	382ed7fa 	srli	r23,r7,31
180113f0:	04400434 	movhi	r17,16
180113f4:	8c7fffc4 	addi	r17,r17,-1
180113f8:	18c1ffcc 	andi	r3,r3,2047
180113fc:	3029883a 	mov	r20,r6
18011400:	3c62703a 	and	r17,r7,r17
18011404:	bf003fcc 	andi	fp,r23,255
18011408:	18006e26 	beq	r3,zero,180115c4 <__divdf3+0x254>
1801140c:	0081ffc4 	movi	r2,2047
18011410:	18806626 	beq	r3,r2,180115ac <__divdf3+0x23c>
18011414:	88800434 	orhi	r2,r17,16
18011418:	100490fa 	slli	r2,r2,3
1801141c:	3022d77a 	srli	r17,r6,29
18011420:	302890fa 	slli	r20,r6,3
18011424:	18ff0044 	addi	r3,r3,-1023
18011428:	88a2b03a 	or	r17,r17,r2
1801142c:	000f883a 	mov	r7,zero
18011430:	b5e6f03a 	xor	r19,r22,r23
18011434:	3a4cb03a 	or	r6,r7,r9
18011438:	008003c4 	movi	r2,15
1801143c:	9809883a 	mov	r4,r19
18011440:	90c7c83a 	sub	r3,r18,r3
18011444:	9cc03fcc 	andi	r19,r19,255
18011448:	11809636 	bltu	r2,r6,180116a4 <__divdf3+0x334>
1801144c:	300c90ba 	slli	r6,r6,2
18011450:	00860074 	movhi	r2,6145
18011454:	10851904 	addi	r2,r2,5220
18011458:	308d883a 	add	r6,r6,r2
1801145c:	30800017 	ldw	r2,0(r6)
18011460:	1000683a 	jmp	r2
18011464:	180116a4 	muli	zero,r3,1114
18011468:	180114dc 	xori	zero,r3,1107
1801146c:	18011694 	ori	zero,r3,1114
18011470:	180114d0 	cmplti	zero,r3,1107
18011474:	18011694 	ori	zero,r3,1114
18011478:	18011668 	cmpgeui	zero,r3,1113
1801147c:	18011694 	ori	zero,r3,1114
18011480:	180114d0 	cmplti	zero,r3,1107
18011484:	180114dc 	xori	zero,r3,1107
18011488:	180114dc 	xori	zero,r3,1107
1801148c:	18011668 	cmpgeui	zero,r3,1113
18011490:	180114d0 	cmplti	zero,r3,1107
18011494:	180114c0 	call	1180114c <__alt_mem_onchip_memory2_0+0x1180114c>
18011498:	180114c0 	call	1180114c <__alt_mem_onchip_memory2_0+0x1180114c>
1801149c:	180114c0 	call	1180114c <__alt_mem_onchip_memory2_0+0x1180114c>
180114a0:	18011a2c 	andhi	zero,r3,1128
180114a4:	2404b03a 	or	r2,r4,r16
180114a8:	10006c1e 	bne	r2,zero,1801165c <__divdf3+0x2ec>
180114ac:	02400204 	movi	r9,8
180114b0:	0021883a 	mov	r16,zero
180114b4:	002b883a 	mov	r21,zero
180114b8:	01400084 	movi	r5,2
180114bc:	003fca06 	br	180113e8 <__alt_data_end+0xf80113e8>
180114c0:	8023883a 	mov	r17,r16
180114c4:	a829883a 	mov	r20,r21
180114c8:	4039883a 	mov	fp,r8
180114cc:	280f883a 	mov	r7,r5
180114d0:	00800084 	movi	r2,2
180114d4:	3881601e 	bne	r7,r2,18011a58 <__divdf3+0x6e8>
180114d8:	e027883a 	mov	r19,fp
180114dc:	9900004c 	andi	r4,r19,1
180114e0:	0081ffc4 	movi	r2,2047
180114e4:	0021883a 	mov	r16,zero
180114e8:	002b883a 	mov	r21,zero
180114ec:	1004953a 	slli	r2,r2,20
180114f0:	20c03fcc 	andi	r3,r4,255
180114f4:	01400434 	movhi	r5,16
180114f8:	297fffc4 	addi	r5,r5,-1
180114fc:	180697fa 	slli	r3,r3,31
18011500:	8160703a 	and	r16,r16,r5
18011504:	80a0b03a 	or	r16,r16,r2
18011508:	80c6b03a 	or	r3,r16,r3
1801150c:	a805883a 	mov	r2,r21
18011510:	dfc00f17 	ldw	ra,60(sp)
18011514:	df000e17 	ldw	fp,56(sp)
18011518:	ddc00d17 	ldw	r23,52(sp)
1801151c:	dd800c17 	ldw	r22,48(sp)
18011520:	dd400b17 	ldw	r21,44(sp)
18011524:	dd000a17 	ldw	r20,40(sp)
18011528:	dcc00917 	ldw	r19,36(sp)
1801152c:	dc800817 	ldw	r18,32(sp)
18011530:	dc400717 	ldw	r17,28(sp)
18011534:	dc000617 	ldw	r16,24(sp)
18011538:	dec01004 	addi	sp,sp,64
1801153c:	f800283a 	ret
18011540:	2404b03a 	or	r2,r4,r16
18011544:	2023883a 	mov	r17,r4
18011548:	10003f26 	beq	r2,zero,18011648 <__divdf3+0x2d8>
1801154c:	80015e26 	beq	r16,zero,18011ac8 <__divdf3+0x758>
18011550:	8009883a 	mov	r4,r16
18011554:	d9800215 	stw	r6,8(sp)
18011558:	d9c00515 	stw	r7,20(sp)
1801155c:	da000415 	stw	r8,16(sp)
18011560:	80133040 	call	18013304 <__clzsi2>
18011564:	d9800217 	ldw	r6,8(sp)
18011568:	d9c00517 	ldw	r7,20(sp)
1801156c:	da000417 	ldw	r8,16(sp)
18011570:	113ffd44 	addi	r4,r2,-11
18011574:	00c00704 	movi	r3,28
18011578:	19014f16 	blt	r3,r4,18011ab8 <__divdf3+0x748>
1801157c:	00c00744 	movi	r3,29
18011580:	157ffe04 	addi	r21,r2,-8
18011584:	1907c83a 	sub	r3,r3,r4
18011588:	8560983a 	sll	r16,r16,r21
1801158c:	88c6d83a 	srl	r3,r17,r3
18011590:	8d6a983a 	sll	r21,r17,r21
18011594:	1c20b03a 	or	r16,r3,r16
18011598:	1080fcc4 	addi	r2,r2,1011
1801159c:	00a5c83a 	sub	r18,zero,r2
180115a0:	0013883a 	mov	r9,zero
180115a4:	000b883a 	mov	r5,zero
180115a8:	003f8f06 	br	180113e8 <__alt_data_end+0xf80113e8>
180115ac:	3444b03a 	or	r2,r6,r17
180115b0:	1000231e 	bne	r2,zero,18011640 <__divdf3+0x2d0>
180115b4:	0023883a 	mov	r17,zero
180115b8:	0029883a 	mov	r20,zero
180115bc:	01c00084 	movi	r7,2
180115c0:	003f9b06 	br	18011430 <__alt_data_end+0xf8011430>
180115c4:	3444b03a 	or	r2,r6,r17
180115c8:	10001926 	beq	r2,zero,18011630 <__divdf3+0x2c0>
180115cc:	88014b26 	beq	r17,zero,18011afc <__divdf3+0x78c>
180115d0:	8809883a 	mov	r4,r17
180115d4:	d9400115 	stw	r5,4(sp)
180115d8:	d9800215 	stw	r6,8(sp)
180115dc:	da000415 	stw	r8,16(sp)
180115e0:	da400315 	stw	r9,12(sp)
180115e4:	80133040 	call	18013304 <__clzsi2>
180115e8:	d9400117 	ldw	r5,4(sp)
180115ec:	d9800217 	ldw	r6,8(sp)
180115f0:	da000417 	ldw	r8,16(sp)
180115f4:	da400317 	ldw	r9,12(sp)
180115f8:	113ffd44 	addi	r4,r2,-11
180115fc:	00c00704 	movi	r3,28
18011600:	19013a16 	blt	r3,r4,18011aec <__divdf3+0x77c>
18011604:	00c00744 	movi	r3,29
18011608:	153ffe04 	addi	r20,r2,-8
1801160c:	1907c83a 	sub	r3,r3,r4
18011610:	8d22983a 	sll	r17,r17,r20
18011614:	30c6d83a 	srl	r3,r6,r3
18011618:	3528983a 	sll	r20,r6,r20
1801161c:	1c62b03a 	or	r17,r3,r17
18011620:	1080fcc4 	addi	r2,r2,1011
18011624:	0087c83a 	sub	r3,zero,r2
18011628:	000f883a 	mov	r7,zero
1801162c:	003f8006 	br	18011430 <__alt_data_end+0xf8011430>
18011630:	0023883a 	mov	r17,zero
18011634:	0029883a 	mov	r20,zero
18011638:	01c00044 	movi	r7,1
1801163c:	003f7c06 	br	18011430 <__alt_data_end+0xf8011430>
18011640:	01c000c4 	movi	r7,3
18011644:	003f7a06 	br	18011430 <__alt_data_end+0xf8011430>
18011648:	02400104 	movi	r9,4
1801164c:	0021883a 	mov	r16,zero
18011650:	002b883a 	mov	r21,zero
18011654:	01400044 	movi	r5,1
18011658:	003f6306 	br	180113e8 <__alt_data_end+0xf80113e8>
1801165c:	02400304 	movi	r9,12
18011660:	014000c4 	movi	r5,3
18011664:	003f6006 	br	180113e8 <__alt_data_end+0xf80113e8>
18011668:	04000434 	movhi	r16,16
1801166c:	0009883a 	mov	r4,zero
18011670:	843fffc4 	addi	r16,r16,-1
18011674:	057fffc4 	movi	r21,-1
18011678:	0081ffc4 	movi	r2,2047
1801167c:	003f9b06 	br	180114ec <__alt_data_end+0xf80114ec>
18011680:	00c00044 	movi	r3,1
18011684:	1887c83a 	sub	r3,r3,r2
18011688:	01000e04 	movi	r4,56
1801168c:	20c1530e 	bge	r4,r3,18011bdc <__divdf3+0x86c>
18011690:	9900004c 	andi	r4,r19,1
18011694:	0005883a 	mov	r2,zero
18011698:	0021883a 	mov	r16,zero
1801169c:	002b883a 	mov	r21,zero
180116a0:	003f9206 	br	180114ec <__alt_data_end+0xf80114ec>
180116a4:	8c012e36 	bltu	r17,r16,18011b60 <__divdf3+0x7f0>
180116a8:	84412c26 	beq	r16,r17,18011b5c <__divdf3+0x7ec>
180116ac:	a82f883a 	mov	r23,r21
180116b0:	18ffffc4 	addi	r3,r3,-1
180116b4:	002b883a 	mov	r21,zero
180116b8:	a004d63a 	srli	r2,r20,24
180116bc:	8822923a 	slli	r17,r17,8
180116c0:	a028923a 	slli	r20,r20,8
180116c4:	8009883a 	mov	r4,r16
180116c8:	88acb03a 	or	r22,r17,r2
180116cc:	dd000015 	stw	r20,0(sp)
180116d0:	b028d43a 	srli	r20,r22,16
180116d4:	d8c00215 	stw	r3,8(sp)
180116d8:	b4bfffcc 	andi	r18,r22,65535
180116dc:	a00b883a 	mov	r5,r20
180116e0:	8002aa80 	call	18002aa8 <__udivsi3>
180116e4:	100b883a 	mov	r5,r2
180116e8:	9009883a 	mov	r4,r18
180116ec:	1023883a 	mov	r17,r2
180116f0:	8002b640 	call	18002b64 <__mulsi3>
180116f4:	8009883a 	mov	r4,r16
180116f8:	a00b883a 	mov	r5,r20
180116fc:	1039883a 	mov	fp,r2
18011700:	8002b0c0 	call	18002b0c <__umodsi3>
18011704:	1004943a 	slli	r2,r2,16
18011708:	b808d43a 	srli	r4,r23,16
1801170c:	d8c00217 	ldw	r3,8(sp)
18011710:	2084b03a 	or	r2,r4,r2
18011714:	1700062e 	bgeu	r2,fp,18011730 <__divdf3+0x3c0>
18011718:	1585883a 	add	r2,r2,r22
1801171c:	893fffc4 	addi	r4,r17,-1
18011720:	15811d36 	bltu	r2,r22,18011b98 <__divdf3+0x828>
18011724:	17011c2e 	bgeu	r2,fp,18011b98 <__divdf3+0x828>
18011728:	8c7fff84 	addi	r17,r17,-2
1801172c:	1585883a 	add	r2,r2,r22
18011730:	1739c83a 	sub	fp,r2,fp
18011734:	a00b883a 	mov	r5,r20
18011738:	e009883a 	mov	r4,fp
1801173c:	d8c00215 	stw	r3,8(sp)
18011740:	8002aa80 	call	18002aa8 <__udivsi3>
18011744:	100b883a 	mov	r5,r2
18011748:	9009883a 	mov	r4,r18
1801174c:	1021883a 	mov	r16,r2
18011750:	8002b640 	call	18002b64 <__mulsi3>
18011754:	a00b883a 	mov	r5,r20
18011758:	e009883a 	mov	r4,fp
1801175c:	d8800415 	stw	r2,16(sp)
18011760:	8002b0c0 	call	18002b0c <__umodsi3>
18011764:	1004943a 	slli	r2,r2,16
18011768:	da000417 	ldw	r8,16(sp)
1801176c:	bdffffcc 	andi	r23,r23,65535
18011770:	b884b03a 	or	r2,r23,r2
18011774:	d8c00217 	ldw	r3,8(sp)
18011778:	1200062e 	bgeu	r2,r8,18011794 <__divdf3+0x424>
1801177c:	1585883a 	add	r2,r2,r22
18011780:	813fffc4 	addi	r4,r16,-1
18011784:	15810236 	bltu	r2,r22,18011b90 <__divdf3+0x820>
18011788:	1201012e 	bgeu	r2,r8,18011b90 <__divdf3+0x820>
1801178c:	843fff84 	addi	r16,r16,-2
18011790:	1585883a 	add	r2,r2,r22
18011794:	8822943a 	slli	r17,r17,16
18011798:	d9800017 	ldw	r6,0(sp)
1801179c:	1211c83a 	sub	r8,r2,r8
180117a0:	8c22b03a 	or	r17,r17,r16
180117a4:	373fffcc 	andi	fp,r6,65535
180117a8:	8abfffcc 	andi	r10,r17,65535
180117ac:	8820d43a 	srli	r16,r17,16
180117b0:	5009883a 	mov	r4,r10
180117b4:	e00b883a 	mov	r5,fp
180117b8:	302ed43a 	srli	r23,r6,16
180117bc:	d8c00215 	stw	r3,8(sp)
180117c0:	da000415 	stw	r8,16(sp)
180117c4:	da800115 	stw	r10,4(sp)
180117c8:	8002b640 	call	18002b64 <__mulsi3>
180117cc:	800b883a 	mov	r5,r16
180117d0:	e009883a 	mov	r4,fp
180117d4:	d8800515 	stw	r2,20(sp)
180117d8:	8002b640 	call	18002b64 <__mulsi3>
180117dc:	8009883a 	mov	r4,r16
180117e0:	b80b883a 	mov	r5,r23
180117e4:	d8800315 	stw	r2,12(sp)
180117e8:	8002b640 	call	18002b64 <__mulsi3>
180117ec:	da800117 	ldw	r10,4(sp)
180117f0:	b80b883a 	mov	r5,r23
180117f4:	1021883a 	mov	r16,r2
180117f8:	5009883a 	mov	r4,r10
180117fc:	8002b640 	call	18002b64 <__mulsi3>
18011800:	d9c00517 	ldw	r7,20(sp)
18011804:	da400317 	ldw	r9,12(sp)
18011808:	d8c00217 	ldw	r3,8(sp)
1801180c:	3808d43a 	srli	r4,r7,16
18011810:	1245883a 	add	r2,r2,r9
18011814:	da000417 	ldw	r8,16(sp)
18011818:	2085883a 	add	r2,r4,r2
1801181c:	1240022e 	bgeu	r2,r9,18011828 <__divdf3+0x4b8>
18011820:	01000074 	movhi	r4,1
18011824:	8121883a 	add	r16,r16,r4
18011828:	1008d43a 	srli	r4,r2,16
1801182c:	1004943a 	slli	r2,r2,16
18011830:	39ffffcc 	andi	r7,r7,65535
18011834:	2409883a 	add	r4,r4,r16
18011838:	11c5883a 	add	r2,r2,r7
1801183c:	4100bb36 	bltu	r8,r4,18011b2c <__divdf3+0x7bc>
18011840:	4100d726 	beq	r8,r4,18011ba0 <__divdf3+0x830>
18011844:	4109c83a 	sub	r4,r8,r4
18011848:	a8a1c83a 	sub	r16,r21,r2
1801184c:	ac2b803a 	cmpltu	r21,r21,r16
18011850:	256bc83a 	sub	r21,r4,r21
18011854:	b540d926 	beq	r22,r21,18011bbc <__divdf3+0x84c>
18011858:	a00b883a 	mov	r5,r20
1801185c:	a809883a 	mov	r4,r21
18011860:	d8c00215 	stw	r3,8(sp)
18011864:	8002aa80 	call	18002aa8 <__udivsi3>
18011868:	100b883a 	mov	r5,r2
1801186c:	9009883a 	mov	r4,r18
18011870:	d8800515 	stw	r2,20(sp)
18011874:	8002b640 	call	18002b64 <__mulsi3>
18011878:	a809883a 	mov	r4,r21
1801187c:	a00b883a 	mov	r5,r20
18011880:	d8800415 	stw	r2,16(sp)
18011884:	8002b0c0 	call	18002b0c <__umodsi3>
18011888:	1004943a 	slli	r2,r2,16
1801188c:	8008d43a 	srli	r4,r16,16
18011890:	da000417 	ldw	r8,16(sp)
18011894:	d8c00217 	ldw	r3,8(sp)
18011898:	2084b03a 	or	r2,r4,r2
1801189c:	d9c00517 	ldw	r7,20(sp)
180118a0:	1200062e 	bgeu	r2,r8,180118bc <__divdf3+0x54c>
180118a4:	1585883a 	add	r2,r2,r22
180118a8:	393fffc4 	addi	r4,r7,-1
180118ac:	1580c536 	bltu	r2,r22,18011bc4 <__divdf3+0x854>
180118b0:	1200c42e 	bgeu	r2,r8,18011bc4 <__divdf3+0x854>
180118b4:	39ffff84 	addi	r7,r7,-2
180118b8:	1585883a 	add	r2,r2,r22
180118bc:	122bc83a 	sub	r21,r2,r8
180118c0:	a00b883a 	mov	r5,r20
180118c4:	a809883a 	mov	r4,r21
180118c8:	d8c00215 	stw	r3,8(sp)
180118cc:	d9c00515 	stw	r7,20(sp)
180118d0:	8002aa80 	call	18002aa8 <__udivsi3>
180118d4:	9009883a 	mov	r4,r18
180118d8:	100b883a 	mov	r5,r2
180118dc:	d8800415 	stw	r2,16(sp)
180118e0:	8002b640 	call	18002b64 <__mulsi3>
180118e4:	a809883a 	mov	r4,r21
180118e8:	a00b883a 	mov	r5,r20
180118ec:	1025883a 	mov	r18,r2
180118f0:	8002b0c0 	call	18002b0c <__umodsi3>
180118f4:	1004943a 	slli	r2,r2,16
180118f8:	813fffcc 	andi	r4,r16,65535
180118fc:	d8c00217 	ldw	r3,8(sp)
18011900:	20a0b03a 	or	r16,r4,r2
18011904:	d9c00517 	ldw	r7,20(sp)
18011908:	da000417 	ldw	r8,16(sp)
1801190c:	8480062e 	bgeu	r16,r18,18011928 <__divdf3+0x5b8>
18011910:	85a1883a 	add	r16,r16,r22
18011914:	40bfffc4 	addi	r2,r8,-1
18011918:	8580ac36 	bltu	r16,r22,18011bcc <__divdf3+0x85c>
1801191c:	8480ab2e 	bgeu	r16,r18,18011bcc <__divdf3+0x85c>
18011920:	423fff84 	addi	r8,r8,-2
18011924:	85a1883a 	add	r16,r16,r22
18011928:	3804943a 	slli	r2,r7,16
1801192c:	84a1c83a 	sub	r16,r16,r18
18011930:	e009883a 	mov	r4,fp
18011934:	1228b03a 	or	r20,r2,r8
18011938:	a1ffffcc 	andi	r7,r20,65535
1801193c:	a024d43a 	srli	r18,r20,16
18011940:	380b883a 	mov	r5,r7
18011944:	d8c00215 	stw	r3,8(sp)
18011948:	d9c00515 	stw	r7,20(sp)
1801194c:	8002b640 	call	18002b64 <__mulsi3>
18011950:	900b883a 	mov	r5,r18
18011954:	e009883a 	mov	r4,fp
18011958:	102b883a 	mov	r21,r2
1801195c:	8002b640 	call	18002b64 <__mulsi3>
18011960:	900b883a 	mov	r5,r18
18011964:	b809883a 	mov	r4,r23
18011968:	1039883a 	mov	fp,r2
1801196c:	8002b640 	call	18002b64 <__mulsi3>
18011970:	d9c00517 	ldw	r7,20(sp)
18011974:	b80b883a 	mov	r5,r23
18011978:	1025883a 	mov	r18,r2
1801197c:	3809883a 	mov	r4,r7
18011980:	8002b640 	call	18002b64 <__mulsi3>
18011984:	a808d43a 	srli	r4,r21,16
18011988:	1705883a 	add	r2,r2,fp
1801198c:	d8c00217 	ldw	r3,8(sp)
18011990:	2085883a 	add	r2,r4,r2
18011994:	1700022e 	bgeu	r2,fp,180119a0 <__divdf3+0x630>
18011998:	01000074 	movhi	r4,1
1801199c:	9125883a 	add	r18,r18,r4
180119a0:	1008d43a 	srli	r4,r2,16
180119a4:	1004943a 	slli	r2,r2,16
180119a8:	ad7fffcc 	andi	r21,r21,65535
180119ac:	2489883a 	add	r4,r4,r18
180119b0:	1545883a 	add	r2,r2,r21
180119b4:	81003836 	bltu	r16,r4,18011a98 <__divdf3+0x728>
180119b8:	81003626 	beq	r16,r4,18011a94 <__divdf3+0x724>
180119bc:	a5000054 	ori	r20,r20,1
180119c0:	1880ffc4 	addi	r2,r3,1023
180119c4:	00bf2e0e 	bge	zero,r2,18011680 <__alt_data_end+0xf8011680>
180119c8:	a10001cc 	andi	r4,r20,7
180119cc:	20000726 	beq	r4,zero,180119ec <__divdf3+0x67c>
180119d0:	a10003cc 	andi	r4,r20,15
180119d4:	01400104 	movi	r5,4
180119d8:	21400426 	beq	r4,r5,180119ec <__divdf3+0x67c>
180119dc:	a149883a 	add	r4,r20,r5
180119e0:	2529803a 	cmpltu	r20,r4,r20
180119e4:	8d23883a 	add	r17,r17,r20
180119e8:	2029883a 	mov	r20,r4
180119ec:	8900402c 	andhi	r4,r17,256
180119f0:	20000426 	beq	r4,zero,18011a04 <__divdf3+0x694>
180119f4:	18810004 	addi	r2,r3,1024
180119f8:	00ffc034 	movhi	r3,65280
180119fc:	18ffffc4 	addi	r3,r3,-1
18011a00:	88e2703a 	and	r17,r17,r3
18011a04:	00c1ff84 	movi	r3,2046
18011a08:	18beb416 	blt	r3,r2,180114dc <__alt_data_end+0xf80114dc>
18011a0c:	a028d0fa 	srli	r20,r20,3
18011a10:	882a977a 	slli	r21,r17,29
18011a14:	8820927a 	slli	r16,r17,9
18011a18:	1081ffcc 	andi	r2,r2,2047
18011a1c:	ad2ab03a 	or	r21,r21,r20
18011a20:	8020d33a 	srli	r16,r16,12
18011a24:	9900004c 	andi	r4,r19,1
18011a28:	003eb006 	br	180114ec <__alt_data_end+0xf80114ec>
18011a2c:	8080022c 	andhi	r2,r16,8
18011a30:	10001226 	beq	r2,zero,18011a7c <__divdf3+0x70c>
18011a34:	8880022c 	andhi	r2,r17,8
18011a38:	1000101e 	bne	r2,zero,18011a7c <__divdf3+0x70c>
18011a3c:	00800434 	movhi	r2,16
18011a40:	8c000234 	orhi	r16,r17,8
18011a44:	10bfffc4 	addi	r2,r2,-1
18011a48:	b809883a 	mov	r4,r23
18011a4c:	80a0703a 	and	r16,r16,r2
18011a50:	a02b883a 	mov	r21,r20
18011a54:	003f0806 	br	18011678 <__alt_data_end+0xf8011678>
18011a58:	008000c4 	movi	r2,3
18011a5c:	3880b126 	beq	r7,r2,18011d24 <__divdf3+0x9b4>
18011a60:	00800044 	movi	r2,1
18011a64:	38805b1e 	bne	r7,r2,18011bd4 <__divdf3+0x864>
18011a68:	e009883a 	mov	r4,fp
18011a6c:	0005883a 	mov	r2,zero
18011a70:	0021883a 	mov	r16,zero
18011a74:	002b883a 	mov	r21,zero
18011a78:	003e9c06 	br	180114ec <__alt_data_end+0xf80114ec>
18011a7c:	00800434 	movhi	r2,16
18011a80:	84000234 	orhi	r16,r16,8
18011a84:	10bfffc4 	addi	r2,r2,-1
18011a88:	b009883a 	mov	r4,r22
18011a8c:	80a0703a 	and	r16,r16,r2
18011a90:	003ef906 	br	18011678 <__alt_data_end+0xf8011678>
18011a94:	103fca26 	beq	r2,zero,180119c0 <__alt_data_end+0xf80119c0>
18011a98:	b421883a 	add	r16,r22,r16
18011a9c:	a17fffc4 	addi	r5,r20,-1
18011aa0:	8580422e 	bgeu	r16,r22,18011bac <__divdf3+0x83c>
18011aa4:	2829883a 	mov	r20,r5
18011aa8:	813fc41e 	bne	r16,r4,180119bc <__alt_data_end+0xf80119bc>
18011aac:	d9800017 	ldw	r6,0(sp)
18011ab0:	30bfc21e 	bne	r6,r2,180119bc <__alt_data_end+0xf80119bc>
18011ab4:	003fc206 	br	180119c0 <__alt_data_end+0xf80119c0>
18011ab8:	143ff604 	addi	r16,r2,-40
18011abc:	8c20983a 	sll	r16,r17,r16
18011ac0:	002b883a 	mov	r21,zero
18011ac4:	003eb406 	br	18011598 <__alt_data_end+0xf8011598>
18011ac8:	d9800215 	stw	r6,8(sp)
18011acc:	d9c00515 	stw	r7,20(sp)
18011ad0:	da000415 	stw	r8,16(sp)
18011ad4:	80133040 	call	18013304 <__clzsi2>
18011ad8:	10800804 	addi	r2,r2,32
18011adc:	da000417 	ldw	r8,16(sp)
18011ae0:	d9c00517 	ldw	r7,20(sp)
18011ae4:	d9800217 	ldw	r6,8(sp)
18011ae8:	003ea106 	br	18011570 <__alt_data_end+0xf8011570>
18011aec:	147ff604 	addi	r17,r2,-40
18011af0:	3462983a 	sll	r17,r6,r17
18011af4:	0029883a 	mov	r20,zero
18011af8:	003ec906 	br	18011620 <__alt_data_end+0xf8011620>
18011afc:	3009883a 	mov	r4,r6
18011b00:	d9400115 	stw	r5,4(sp)
18011b04:	d9800215 	stw	r6,8(sp)
18011b08:	da000415 	stw	r8,16(sp)
18011b0c:	da400315 	stw	r9,12(sp)
18011b10:	80133040 	call	18013304 <__clzsi2>
18011b14:	10800804 	addi	r2,r2,32
18011b18:	da400317 	ldw	r9,12(sp)
18011b1c:	da000417 	ldw	r8,16(sp)
18011b20:	d9800217 	ldw	r6,8(sp)
18011b24:	d9400117 	ldw	r5,4(sp)
18011b28:	003eb306 	br	180115f8 <__alt_data_end+0xf80115f8>
18011b2c:	d9800017 	ldw	r6,0(sp)
18011b30:	a9ab883a 	add	r21,r21,r6
18011b34:	a98b803a 	cmpltu	r5,r21,r6
18011b38:	2d8b883a 	add	r5,r5,r22
18011b3c:	2a11883a 	add	r8,r5,r8
18011b40:	897fffc4 	addi	r5,r17,-1
18011b44:	b2000c2e 	bgeu	r22,r8,18011b78 <__divdf3+0x808>
18011b48:	41003f36 	bltu	r8,r4,18011c48 <__divdf3+0x8d8>
18011b4c:	22006c26 	beq	r4,r8,18011d00 <__divdf3+0x990>
18011b50:	4109c83a 	sub	r4,r8,r4
18011b54:	2823883a 	mov	r17,r5
18011b58:	003f3b06 	br	18011848 <__alt_data_end+0xf8011848>
18011b5c:	ad3ed336 	bltu	r21,r20,180116ac <__alt_data_end+0xf80116ac>
18011b60:	a804d07a 	srli	r2,r21,1
18011b64:	802e97fa 	slli	r23,r16,31
18011b68:	a82a97fa 	slli	r21,r21,31
18011b6c:	8020d07a 	srli	r16,r16,1
18011b70:	b8aeb03a 	or	r23,r23,r2
18011b74:	003ed006 	br	180116b8 <__alt_data_end+0xf80116b8>
18011b78:	b23ff51e 	bne	r22,r8,18011b50 <__alt_data_end+0xf8011b50>
18011b7c:	d9800017 	ldw	r6,0(sp)
18011b80:	a9bff12e 	bgeu	r21,r6,18011b48 <__alt_data_end+0xf8011b48>
18011b84:	b109c83a 	sub	r4,r22,r4
18011b88:	2823883a 	mov	r17,r5
18011b8c:	003f2e06 	br	18011848 <__alt_data_end+0xf8011848>
18011b90:	2021883a 	mov	r16,r4
18011b94:	003eff06 	br	18011794 <__alt_data_end+0xf8011794>
18011b98:	2023883a 	mov	r17,r4
18011b9c:	003ee406 	br	18011730 <__alt_data_end+0xf8011730>
18011ba0:	a8bfe236 	bltu	r21,r2,18011b2c <__alt_data_end+0xf8011b2c>
18011ba4:	0009883a 	mov	r4,zero
18011ba8:	003f2706 	br	18011848 <__alt_data_end+0xf8011848>
18011bac:	81002d36 	bltu	r16,r4,18011c64 <__divdf3+0x8f4>
18011bb0:	24005626 	beq	r4,r16,18011d0c <__divdf3+0x99c>
18011bb4:	2829883a 	mov	r20,r5
18011bb8:	003f8006 	br	180119bc <__alt_data_end+0xf80119bc>
18011bbc:	053fffc4 	movi	r20,-1
18011bc0:	003f7f06 	br	180119c0 <__alt_data_end+0xf80119c0>
18011bc4:	200f883a 	mov	r7,r4
18011bc8:	003f3c06 	br	180118bc <__alt_data_end+0xf80118bc>
18011bcc:	1011883a 	mov	r8,r2
18011bd0:	003f5506 	br	18011928 <__alt_data_end+0xf8011928>
18011bd4:	e027883a 	mov	r19,fp
18011bd8:	003f7906 	br	180119c0 <__alt_data_end+0xf80119c0>
18011bdc:	010007c4 	movi	r4,31
18011be0:	20c02816 	blt	r4,r3,18011c84 <__divdf3+0x914>
18011be4:	00800804 	movi	r2,32
18011be8:	10c5c83a 	sub	r2,r2,r3
18011bec:	888a983a 	sll	r5,r17,r2
18011bf0:	a0c8d83a 	srl	r4,r20,r3
18011bf4:	a084983a 	sll	r2,r20,r2
18011bf8:	88e2d83a 	srl	r17,r17,r3
18011bfc:	2906b03a 	or	r3,r5,r4
18011c00:	1004c03a 	cmpne	r2,r2,zero
18011c04:	1886b03a 	or	r3,r3,r2
18011c08:	188001cc 	andi	r2,r3,7
18011c0c:	10000726 	beq	r2,zero,18011c2c <__divdf3+0x8bc>
18011c10:	188003cc 	andi	r2,r3,15
18011c14:	01000104 	movi	r4,4
18011c18:	11000426 	beq	r2,r4,18011c2c <__divdf3+0x8bc>
18011c1c:	1805883a 	mov	r2,r3
18011c20:	10c00104 	addi	r3,r2,4
18011c24:	1885803a 	cmpltu	r2,r3,r2
18011c28:	88a3883a 	add	r17,r17,r2
18011c2c:	8880202c 	andhi	r2,r17,128
18011c30:	10002926 	beq	r2,zero,18011cd8 <__divdf3+0x968>
18011c34:	9900004c 	andi	r4,r19,1
18011c38:	00800044 	movi	r2,1
18011c3c:	0021883a 	mov	r16,zero
18011c40:	002b883a 	mov	r21,zero
18011c44:	003e2906 	br	180114ec <__alt_data_end+0xf80114ec>
18011c48:	d9800017 	ldw	r6,0(sp)
18011c4c:	8c7fff84 	addi	r17,r17,-2
18011c50:	a9ab883a 	add	r21,r21,r6
18011c54:	a98b803a 	cmpltu	r5,r21,r6
18011c58:	2d8b883a 	add	r5,r5,r22
18011c5c:	2a11883a 	add	r8,r5,r8
18011c60:	003ef806 	br	18011844 <__alt_data_end+0xf8011844>
18011c64:	d9800017 	ldw	r6,0(sp)
18011c68:	318f883a 	add	r7,r6,r6
18011c6c:	398b803a 	cmpltu	r5,r7,r6
18011c70:	2d8d883a 	add	r6,r5,r22
18011c74:	81a1883a 	add	r16,r16,r6
18011c78:	a17fff84 	addi	r5,r20,-2
18011c7c:	d9c00015 	stw	r7,0(sp)
18011c80:	003f8806 	br	18011aa4 <__alt_data_end+0xf8011aa4>
18011c84:	013ff844 	movi	r4,-31
18011c88:	2085c83a 	sub	r2,r4,r2
18011c8c:	8888d83a 	srl	r4,r17,r2
18011c90:	00800804 	movi	r2,32
18011c94:	18802126 	beq	r3,r2,18011d1c <__divdf3+0x9ac>
18011c98:	04001004 	movi	r16,64
18011c9c:	80c7c83a 	sub	r3,r16,r3
18011ca0:	88e0983a 	sll	r16,r17,r3
18011ca4:	8504b03a 	or	r2,r16,r20
18011ca8:	1004c03a 	cmpne	r2,r2,zero
18011cac:	2084b03a 	or	r2,r4,r2
18011cb0:	144001cc 	andi	r17,r2,7
18011cb4:	88000d1e 	bne	r17,zero,18011cec <__divdf3+0x97c>
18011cb8:	0021883a 	mov	r16,zero
18011cbc:	102ad0fa 	srli	r21,r2,3
18011cc0:	9900004c 	andi	r4,r19,1
18011cc4:	0005883a 	mov	r2,zero
18011cc8:	ac6ab03a 	or	r21,r21,r17
18011ccc:	003e0706 	br	180114ec <__alt_data_end+0xf80114ec>
18011cd0:	1007883a 	mov	r3,r2
18011cd4:	0023883a 	mov	r17,zero
18011cd8:	8820927a 	slli	r16,r17,9
18011cdc:	1805883a 	mov	r2,r3
18011ce0:	8822977a 	slli	r17,r17,29
18011ce4:	8020d33a 	srli	r16,r16,12
18011ce8:	003ff406 	br	18011cbc <__alt_data_end+0xf8011cbc>
18011cec:	10c003cc 	andi	r3,r2,15
18011cf0:	01000104 	movi	r4,4
18011cf4:	193ff626 	beq	r3,r4,18011cd0 <__alt_data_end+0xf8011cd0>
18011cf8:	0023883a 	mov	r17,zero
18011cfc:	003fc806 	br	18011c20 <__alt_data_end+0xf8011c20>
18011d00:	a8bfd136 	bltu	r21,r2,18011c48 <__alt_data_end+0xf8011c48>
18011d04:	2823883a 	mov	r17,r5
18011d08:	003fa606 	br	18011ba4 <__alt_data_end+0xf8011ba4>
18011d0c:	d9800017 	ldw	r6,0(sp)
18011d10:	30bfd436 	bltu	r6,r2,18011c64 <__alt_data_end+0xf8011c64>
18011d14:	2829883a 	mov	r20,r5
18011d18:	003f6406 	br	18011aac <__alt_data_end+0xf8011aac>
18011d1c:	0021883a 	mov	r16,zero
18011d20:	003fe006 	br	18011ca4 <__alt_data_end+0xf8011ca4>
18011d24:	00800434 	movhi	r2,16
18011d28:	8c000234 	orhi	r16,r17,8
18011d2c:	10bfffc4 	addi	r2,r2,-1
18011d30:	e009883a 	mov	r4,fp
18011d34:	80a0703a 	and	r16,r16,r2
18011d38:	a02b883a 	mov	r21,r20
18011d3c:	003e4e06 	br	18011678 <__alt_data_end+0xf8011678>

18011d40 <__eqdf2>:
18011d40:	2804d53a 	srli	r2,r5,20
18011d44:	3806d53a 	srli	r3,r7,20
18011d48:	02000434 	movhi	r8,16
18011d4c:	423fffc4 	addi	r8,r8,-1
18011d50:	1081ffcc 	andi	r2,r2,2047
18011d54:	0281ffc4 	movi	r10,2047
18011d58:	2a12703a 	and	r9,r5,r8
18011d5c:	18c1ffcc 	andi	r3,r3,2047
18011d60:	3a10703a 	and	r8,r7,r8
18011d64:	280ad7fa 	srli	r5,r5,31
18011d68:	380ed7fa 	srli	r7,r7,31
18011d6c:	12801026 	beq	r2,r10,18011db0 <__eqdf2+0x70>
18011d70:	0281ffc4 	movi	r10,2047
18011d74:	1a800a26 	beq	r3,r10,18011da0 <__eqdf2+0x60>
18011d78:	10c00226 	beq	r2,r3,18011d84 <__eqdf2+0x44>
18011d7c:	00800044 	movi	r2,1
18011d80:	f800283a 	ret
18011d84:	4a3ffd1e 	bne	r9,r8,18011d7c <__alt_data_end+0xf8011d7c>
18011d88:	21bffc1e 	bne	r4,r6,18011d7c <__alt_data_end+0xf8011d7c>
18011d8c:	29c00c26 	beq	r5,r7,18011dc0 <__eqdf2+0x80>
18011d90:	103ffa1e 	bne	r2,zero,18011d7c <__alt_data_end+0xf8011d7c>
18011d94:	2244b03a 	or	r2,r4,r9
18011d98:	1004c03a 	cmpne	r2,r2,zero
18011d9c:	f800283a 	ret
18011da0:	3214b03a 	or	r10,r6,r8
18011da4:	503ff426 	beq	r10,zero,18011d78 <__alt_data_end+0xf8011d78>
18011da8:	00800044 	movi	r2,1
18011dac:	f800283a 	ret
18011db0:	2254b03a 	or	r10,r4,r9
18011db4:	503fee26 	beq	r10,zero,18011d70 <__alt_data_end+0xf8011d70>
18011db8:	00800044 	movi	r2,1
18011dbc:	f800283a 	ret
18011dc0:	0005883a 	mov	r2,zero
18011dc4:	f800283a 	ret

18011dc8 <__gedf2>:
18011dc8:	2804d53a 	srli	r2,r5,20
18011dcc:	3806d53a 	srli	r3,r7,20
18011dd0:	02000434 	movhi	r8,16
18011dd4:	423fffc4 	addi	r8,r8,-1
18011dd8:	1081ffcc 	andi	r2,r2,2047
18011ddc:	0241ffc4 	movi	r9,2047
18011de0:	2a14703a 	and	r10,r5,r8
18011de4:	18c1ffcc 	andi	r3,r3,2047
18011de8:	3a10703a 	and	r8,r7,r8
18011dec:	280ad7fa 	srli	r5,r5,31
18011df0:	380ed7fa 	srli	r7,r7,31
18011df4:	12401d26 	beq	r2,r9,18011e6c <__gedf2+0xa4>
18011df8:	0241ffc4 	movi	r9,2047
18011dfc:	1a401226 	beq	r3,r9,18011e48 <__gedf2+0x80>
18011e00:	1000081e 	bne	r2,zero,18011e24 <__gedf2+0x5c>
18011e04:	2296b03a 	or	r11,r4,r10
18011e08:	5813003a 	cmpeq	r9,r11,zero
18011e0c:	1800091e 	bne	r3,zero,18011e34 <__gedf2+0x6c>
18011e10:	3218b03a 	or	r12,r6,r8
18011e14:	6000071e 	bne	r12,zero,18011e34 <__gedf2+0x6c>
18011e18:	0005883a 	mov	r2,zero
18011e1c:	5800101e 	bne	r11,zero,18011e60 <__gedf2+0x98>
18011e20:	f800283a 	ret
18011e24:	18000c1e 	bne	r3,zero,18011e58 <__gedf2+0x90>
18011e28:	3212b03a 	or	r9,r6,r8
18011e2c:	48000c26 	beq	r9,zero,18011e60 <__gedf2+0x98>
18011e30:	0013883a 	mov	r9,zero
18011e34:	39c03fcc 	andi	r7,r7,255
18011e38:	48000826 	beq	r9,zero,18011e5c <__gedf2+0x94>
18011e3c:	38000926 	beq	r7,zero,18011e64 <__gedf2+0x9c>
18011e40:	00800044 	movi	r2,1
18011e44:	f800283a 	ret
18011e48:	3212b03a 	or	r9,r6,r8
18011e4c:	483fec26 	beq	r9,zero,18011e00 <__alt_data_end+0xf8011e00>
18011e50:	00bfff84 	movi	r2,-2
18011e54:	f800283a 	ret
18011e58:	39c03fcc 	andi	r7,r7,255
18011e5c:	29c00626 	beq	r5,r7,18011e78 <__gedf2+0xb0>
18011e60:	283ff726 	beq	r5,zero,18011e40 <__alt_data_end+0xf8011e40>
18011e64:	00bfffc4 	movi	r2,-1
18011e68:	f800283a 	ret
18011e6c:	2292b03a 	or	r9,r4,r10
18011e70:	483fe126 	beq	r9,zero,18011df8 <__alt_data_end+0xf8011df8>
18011e74:	003ff606 	br	18011e50 <__alt_data_end+0xf8011e50>
18011e78:	18bff916 	blt	r3,r2,18011e60 <__alt_data_end+0xf8011e60>
18011e7c:	10c00316 	blt	r2,r3,18011e8c <__gedf2+0xc4>
18011e80:	42bff736 	bltu	r8,r10,18011e60 <__alt_data_end+0xf8011e60>
18011e84:	52000326 	beq	r10,r8,18011e94 <__gedf2+0xcc>
18011e88:	5200042e 	bgeu	r10,r8,18011e9c <__gedf2+0xd4>
18011e8c:	283fec1e 	bne	r5,zero,18011e40 <__alt_data_end+0xf8011e40>
18011e90:	003ff406 	br	18011e64 <__alt_data_end+0xf8011e64>
18011e94:	313ff236 	bltu	r6,r4,18011e60 <__alt_data_end+0xf8011e60>
18011e98:	21bffc36 	bltu	r4,r6,18011e8c <__alt_data_end+0xf8011e8c>
18011e9c:	0005883a 	mov	r2,zero
18011ea0:	f800283a 	ret

18011ea4 <__ledf2>:
18011ea4:	2804d53a 	srli	r2,r5,20
18011ea8:	3810d53a 	srli	r8,r7,20
18011eac:	00c00434 	movhi	r3,16
18011eb0:	18ffffc4 	addi	r3,r3,-1
18011eb4:	1081ffcc 	andi	r2,r2,2047
18011eb8:	0241ffc4 	movi	r9,2047
18011ebc:	28d4703a 	and	r10,r5,r3
18011ec0:	4201ffcc 	andi	r8,r8,2047
18011ec4:	38c6703a 	and	r3,r7,r3
18011ec8:	280ad7fa 	srli	r5,r5,31
18011ecc:	380ed7fa 	srli	r7,r7,31
18011ed0:	12401f26 	beq	r2,r9,18011f50 <__ledf2+0xac>
18011ed4:	0241ffc4 	movi	r9,2047
18011ed8:	42401426 	beq	r8,r9,18011f2c <__ledf2+0x88>
18011edc:	1000091e 	bne	r2,zero,18011f04 <__ledf2+0x60>
18011ee0:	2296b03a 	or	r11,r4,r10
18011ee4:	5813003a 	cmpeq	r9,r11,zero
18011ee8:	29403fcc 	andi	r5,r5,255
18011eec:	40000a1e 	bne	r8,zero,18011f18 <__ledf2+0x74>
18011ef0:	30d8b03a 	or	r12,r6,r3
18011ef4:	6000081e 	bne	r12,zero,18011f18 <__ledf2+0x74>
18011ef8:	0005883a 	mov	r2,zero
18011efc:	5800111e 	bne	r11,zero,18011f44 <__ledf2+0xa0>
18011f00:	f800283a 	ret
18011f04:	29403fcc 	andi	r5,r5,255
18011f08:	40000c1e 	bne	r8,zero,18011f3c <__ledf2+0x98>
18011f0c:	30d2b03a 	or	r9,r6,r3
18011f10:	48000c26 	beq	r9,zero,18011f44 <__ledf2+0xa0>
18011f14:	0013883a 	mov	r9,zero
18011f18:	39c03fcc 	andi	r7,r7,255
18011f1c:	48000826 	beq	r9,zero,18011f40 <__ledf2+0x9c>
18011f20:	38001126 	beq	r7,zero,18011f68 <__ledf2+0xc4>
18011f24:	00800044 	movi	r2,1
18011f28:	f800283a 	ret
18011f2c:	30d2b03a 	or	r9,r6,r3
18011f30:	483fea26 	beq	r9,zero,18011edc <__alt_data_end+0xf8011edc>
18011f34:	00800084 	movi	r2,2
18011f38:	f800283a 	ret
18011f3c:	39c03fcc 	andi	r7,r7,255
18011f40:	39400726 	beq	r7,r5,18011f60 <__ledf2+0xbc>
18011f44:	2800081e 	bne	r5,zero,18011f68 <__ledf2+0xc4>
18011f48:	00800044 	movi	r2,1
18011f4c:	f800283a 	ret
18011f50:	2292b03a 	or	r9,r4,r10
18011f54:	483fdf26 	beq	r9,zero,18011ed4 <__alt_data_end+0xf8011ed4>
18011f58:	00800084 	movi	r2,2
18011f5c:	f800283a 	ret
18011f60:	4080030e 	bge	r8,r2,18011f70 <__ledf2+0xcc>
18011f64:	383fef26 	beq	r7,zero,18011f24 <__alt_data_end+0xf8011f24>
18011f68:	00bfffc4 	movi	r2,-1
18011f6c:	f800283a 	ret
18011f70:	123feb16 	blt	r2,r8,18011f20 <__alt_data_end+0xf8011f20>
18011f74:	1abff336 	bltu	r3,r10,18011f44 <__alt_data_end+0xf8011f44>
18011f78:	50c00326 	beq	r10,r3,18011f88 <__ledf2+0xe4>
18011f7c:	50c0042e 	bgeu	r10,r3,18011f90 <__ledf2+0xec>
18011f80:	283fe81e 	bne	r5,zero,18011f24 <__alt_data_end+0xf8011f24>
18011f84:	003ff806 	br	18011f68 <__alt_data_end+0xf8011f68>
18011f88:	313fee36 	bltu	r6,r4,18011f44 <__alt_data_end+0xf8011f44>
18011f8c:	21bffc36 	bltu	r4,r6,18011f80 <__alt_data_end+0xf8011f80>
18011f90:	0005883a 	mov	r2,zero
18011f94:	f800283a 	ret

18011f98 <__muldf3>:
18011f98:	deffee04 	addi	sp,sp,-72
18011f9c:	dd000c15 	stw	r20,48(sp)
18011fa0:	2828d53a 	srli	r20,r5,20
18011fa4:	ddc00f15 	stw	r23,60(sp)
18011fa8:	282ed7fa 	srli	r23,r5,31
18011fac:	dc000815 	stw	r16,32(sp)
18011fb0:	04000434 	movhi	r16,16
18011fb4:	dcc00b15 	stw	r19,44(sp)
18011fb8:	843fffc4 	addi	r16,r16,-1
18011fbc:	dfc01115 	stw	ra,68(sp)
18011fc0:	df001015 	stw	fp,64(sp)
18011fc4:	dd800e15 	stw	r22,56(sp)
18011fc8:	dd400d15 	stw	r21,52(sp)
18011fcc:	dc800a15 	stw	r18,40(sp)
18011fd0:	dc400915 	stw	r17,36(sp)
18011fd4:	a501ffcc 	andi	r20,r20,2047
18011fd8:	2c20703a 	and	r16,r5,r16
18011fdc:	b827883a 	mov	r19,r23
18011fe0:	ba403fcc 	andi	r9,r23,255
18011fe4:	a0006026 	beq	r20,zero,18012168 <__muldf3+0x1d0>
18011fe8:	0081ffc4 	movi	r2,2047
18011fec:	202d883a 	mov	r22,r4
18011ff0:	a0803626 	beq	r20,r2,180120cc <__muldf3+0x134>
18011ff4:	84000434 	orhi	r16,r16,16
18011ff8:	200ad77a 	srli	r5,r4,29
18011ffc:	800490fa 	slli	r2,r16,3
18012000:	202c90fa 	slli	r22,r4,3
18012004:	a53f0044 	addi	r20,r20,-1023
18012008:	28a0b03a 	or	r16,r5,r2
1801200c:	002b883a 	mov	r21,zero
18012010:	000b883a 	mov	r5,zero
18012014:	3804d53a 	srli	r2,r7,20
18012018:	3838d7fa 	srli	fp,r7,31
1801201c:	04400434 	movhi	r17,16
18012020:	8c7fffc4 	addi	r17,r17,-1
18012024:	1081ffcc 	andi	r2,r2,2047
18012028:	3025883a 	mov	r18,r6
1801202c:	3c62703a 	and	r17,r7,r17
18012030:	e2803fcc 	andi	r10,fp,255
18012034:	10006d26 	beq	r2,zero,180121ec <__muldf3+0x254>
18012038:	00c1ffc4 	movi	r3,2047
1801203c:	10c06526 	beq	r2,r3,180121d4 <__muldf3+0x23c>
18012040:	8c400434 	orhi	r17,r17,16
18012044:	300ed77a 	srli	r7,r6,29
18012048:	880690fa 	slli	r3,r17,3
1801204c:	302490fa 	slli	r18,r6,3
18012050:	10bf0044 	addi	r2,r2,-1023
18012054:	38e2b03a 	or	r17,r7,r3
18012058:	000f883a 	mov	r7,zero
1801205c:	a087883a 	add	r3,r20,r2
18012060:	010003c4 	movi	r4,15
18012064:	3d44b03a 	or	r2,r7,r21
18012068:	e5ccf03a 	xor	r6,fp,r23
1801206c:	1a000044 	addi	r8,r3,1
18012070:	20809b36 	bltu	r4,r2,180122e0 <__muldf3+0x348>
18012074:	100490ba 	slli	r2,r2,2
18012078:	01060074 	movhi	r4,6145
1801207c:	21082304 	addi	r4,r4,8332
18012080:	1105883a 	add	r2,r2,r4
18012084:	10800017 	ldw	r2,0(r2)
18012088:	1000683a 	jmp	r2
1801208c:	180122e0 	cmpeqi	zero,r3,1163
18012090:	180120ec 	andhi	zero,r3,1155
18012094:	180120ec 	andhi	zero,r3,1155
18012098:	180120e8 	cmpgeui	zero,r3,1155
1801209c:	180122bc 	xorhi	zero,r3,1162
180120a0:	180122bc 	xorhi	zero,r3,1162
180120a4:	180122a4 	muli	zero,r3,1162
180120a8:	180120e8 	cmpgeui	zero,r3,1155
180120ac:	180122bc 	xorhi	zero,r3,1162
180120b0:	180122a4 	muli	zero,r3,1162
180120b4:	180122bc 	xorhi	zero,r3,1162
180120b8:	180120e8 	cmpgeui	zero,r3,1155
180120bc:	180122cc 	andi	zero,r3,1163
180120c0:	180122cc 	andi	zero,r3,1163
180120c4:	180122cc 	andi	zero,r3,1163
180120c8:	1801262c 	andhi	zero,r3,1176
180120cc:	2404b03a 	or	r2,r4,r16
180120d0:	1000711e 	bne	r2,zero,18012298 <__muldf3+0x300>
180120d4:	05400204 	movi	r21,8
180120d8:	0021883a 	mov	r16,zero
180120dc:	002d883a 	mov	r22,zero
180120e0:	01400084 	movi	r5,2
180120e4:	003fcb06 	br	18012014 <__alt_data_end+0xf8012014>
180120e8:	500d883a 	mov	r6,r10
180120ec:	00800084 	movi	r2,2
180120f0:	38805926 	beq	r7,r2,18012258 <__muldf3+0x2c0>
180120f4:	008000c4 	movi	r2,3
180120f8:	3881bb26 	beq	r7,r2,180127e8 <__muldf3+0x850>
180120fc:	00800044 	movi	r2,1
18012100:	3881961e 	bne	r7,r2,1801275c <__muldf3+0x7c4>
18012104:	3027883a 	mov	r19,r6
18012108:	0005883a 	mov	r2,zero
1801210c:	0021883a 	mov	r16,zero
18012110:	002d883a 	mov	r22,zero
18012114:	1004953a 	slli	r2,r2,20
18012118:	98c03fcc 	andi	r3,r19,255
1801211c:	04400434 	movhi	r17,16
18012120:	8c7fffc4 	addi	r17,r17,-1
18012124:	180697fa 	slli	r3,r3,31
18012128:	8460703a 	and	r16,r16,r17
1801212c:	80a0b03a 	or	r16,r16,r2
18012130:	80c6b03a 	or	r3,r16,r3
18012134:	b005883a 	mov	r2,r22
18012138:	dfc01117 	ldw	ra,68(sp)
1801213c:	df001017 	ldw	fp,64(sp)
18012140:	ddc00f17 	ldw	r23,60(sp)
18012144:	dd800e17 	ldw	r22,56(sp)
18012148:	dd400d17 	ldw	r21,52(sp)
1801214c:	dd000c17 	ldw	r20,48(sp)
18012150:	dcc00b17 	ldw	r19,44(sp)
18012154:	dc800a17 	ldw	r18,40(sp)
18012158:	dc400917 	ldw	r17,36(sp)
1801215c:	dc000817 	ldw	r16,32(sp)
18012160:	dec01204 	addi	sp,sp,72
18012164:	f800283a 	ret
18012168:	2404b03a 	or	r2,r4,r16
1801216c:	202b883a 	mov	r21,r4
18012170:	10004426 	beq	r2,zero,18012284 <__muldf3+0x2ec>
18012174:	80015126 	beq	r16,zero,180126bc <__muldf3+0x724>
18012178:	8009883a 	mov	r4,r16
1801217c:	d9800715 	stw	r6,28(sp)
18012180:	d9c00215 	stw	r7,8(sp)
18012184:	da400415 	stw	r9,16(sp)
18012188:	80133040 	call	18013304 <__clzsi2>
1801218c:	d9800717 	ldw	r6,28(sp)
18012190:	d9c00217 	ldw	r7,8(sp)
18012194:	da400417 	ldw	r9,16(sp)
18012198:	113ffd44 	addi	r4,r2,-11
1801219c:	00c00704 	movi	r3,28
180121a0:	19014216 	blt	r3,r4,180126ac <__muldf3+0x714>
180121a4:	00c00744 	movi	r3,29
180121a8:	15bffe04 	addi	r22,r2,-8
180121ac:	1907c83a 	sub	r3,r3,r4
180121b0:	85a0983a 	sll	r16,r16,r22
180121b4:	a8c6d83a 	srl	r3,r21,r3
180121b8:	adac983a 	sll	r22,r21,r22
180121bc:	1c20b03a 	or	r16,r3,r16
180121c0:	1080fcc4 	addi	r2,r2,1011
180121c4:	00a9c83a 	sub	r20,zero,r2
180121c8:	002b883a 	mov	r21,zero
180121cc:	000b883a 	mov	r5,zero
180121d0:	003f9006 	br	18012014 <__alt_data_end+0xf8012014>
180121d4:	3446b03a 	or	r3,r6,r17
180121d8:	1800281e 	bne	r3,zero,1801227c <__muldf3+0x2e4>
180121dc:	0023883a 	mov	r17,zero
180121e0:	0025883a 	mov	r18,zero
180121e4:	01c00084 	movi	r7,2
180121e8:	003f9c06 	br	1801205c <__alt_data_end+0xf801205c>
180121ec:	3446b03a 	or	r3,r6,r17
180121f0:	18001e26 	beq	r3,zero,1801226c <__muldf3+0x2d4>
180121f4:	88012126 	beq	r17,zero,1801267c <__muldf3+0x6e4>
180121f8:	8809883a 	mov	r4,r17
180121fc:	d9400215 	stw	r5,8(sp)
18012200:	d9800715 	stw	r6,28(sp)
18012204:	da400415 	stw	r9,16(sp)
18012208:	da800315 	stw	r10,12(sp)
1801220c:	80133040 	call	18013304 <__clzsi2>
18012210:	d9400217 	ldw	r5,8(sp)
18012214:	d9800717 	ldw	r6,28(sp)
18012218:	da400417 	ldw	r9,16(sp)
1801221c:	da800317 	ldw	r10,12(sp)
18012220:	113ffd44 	addi	r4,r2,-11
18012224:	00c00704 	movi	r3,28
18012228:	19011016 	blt	r3,r4,1801266c <__muldf3+0x6d4>
1801222c:	00c00744 	movi	r3,29
18012230:	14bffe04 	addi	r18,r2,-8
18012234:	1907c83a 	sub	r3,r3,r4
18012238:	8ca2983a 	sll	r17,r17,r18
1801223c:	30c6d83a 	srl	r3,r6,r3
18012240:	34a4983a 	sll	r18,r6,r18
18012244:	1c62b03a 	or	r17,r3,r17
18012248:	1080fcc4 	addi	r2,r2,1011
1801224c:	0085c83a 	sub	r2,zero,r2
18012250:	000f883a 	mov	r7,zero
18012254:	003f8106 	br	1801205c <__alt_data_end+0xf801205c>
18012258:	3027883a 	mov	r19,r6
1801225c:	0081ffc4 	movi	r2,2047
18012260:	0021883a 	mov	r16,zero
18012264:	002d883a 	mov	r22,zero
18012268:	003faa06 	br	18012114 <__alt_data_end+0xf8012114>
1801226c:	0023883a 	mov	r17,zero
18012270:	0025883a 	mov	r18,zero
18012274:	01c00044 	movi	r7,1
18012278:	003f7806 	br	1801205c <__alt_data_end+0xf801205c>
1801227c:	01c000c4 	movi	r7,3
18012280:	003f7606 	br	1801205c <__alt_data_end+0xf801205c>
18012284:	05400104 	movi	r21,4
18012288:	0021883a 	mov	r16,zero
1801228c:	002d883a 	mov	r22,zero
18012290:	01400044 	movi	r5,1
18012294:	003f5f06 	br	18012014 <__alt_data_end+0xf8012014>
18012298:	05400304 	movi	r21,12
1801229c:	014000c4 	movi	r5,3
180122a0:	003f5c06 	br	18012014 <__alt_data_end+0xf8012014>
180122a4:	04000434 	movhi	r16,16
180122a8:	0027883a 	mov	r19,zero
180122ac:	843fffc4 	addi	r16,r16,-1
180122b0:	05bfffc4 	movi	r22,-1
180122b4:	0081ffc4 	movi	r2,2047
180122b8:	003f9606 	br	18012114 <__alt_data_end+0xf8012114>
180122bc:	8023883a 	mov	r17,r16
180122c0:	b025883a 	mov	r18,r22
180122c4:	280f883a 	mov	r7,r5
180122c8:	003f8806 	br	180120ec <__alt_data_end+0xf80120ec>
180122cc:	8023883a 	mov	r17,r16
180122d0:	b025883a 	mov	r18,r22
180122d4:	480d883a 	mov	r6,r9
180122d8:	280f883a 	mov	r7,r5
180122dc:	003f8306 	br	180120ec <__alt_data_end+0xf80120ec>
180122e0:	b026d43a 	srli	r19,r22,16
180122e4:	902ed43a 	srli	r23,r18,16
180122e8:	b5bfffcc 	andi	r22,r22,65535
180122ec:	94bfffcc 	andi	r18,r18,65535
180122f0:	b00b883a 	mov	r5,r22
180122f4:	9009883a 	mov	r4,r18
180122f8:	d8c00515 	stw	r3,20(sp)
180122fc:	d9800715 	stw	r6,28(sp)
18012300:	da000615 	stw	r8,24(sp)
18012304:	8002b640 	call	18002b64 <__mulsi3>
18012308:	980b883a 	mov	r5,r19
1801230c:	9009883a 	mov	r4,r18
18012310:	1029883a 	mov	r20,r2
18012314:	8002b640 	call	18002b64 <__mulsi3>
18012318:	b80b883a 	mov	r5,r23
1801231c:	9809883a 	mov	r4,r19
18012320:	102b883a 	mov	r21,r2
18012324:	8002b640 	call	18002b64 <__mulsi3>
18012328:	b809883a 	mov	r4,r23
1801232c:	b00b883a 	mov	r5,r22
18012330:	1039883a 	mov	fp,r2
18012334:	8002b640 	call	18002b64 <__mulsi3>
18012338:	a008d43a 	srli	r4,r20,16
1801233c:	1545883a 	add	r2,r2,r21
18012340:	d8c00517 	ldw	r3,20(sp)
18012344:	2085883a 	add	r2,r4,r2
18012348:	d9800717 	ldw	r6,28(sp)
1801234c:	da000617 	ldw	r8,24(sp)
18012350:	1540022e 	bgeu	r2,r21,1801235c <__muldf3+0x3c4>
18012354:	01000074 	movhi	r4,1
18012358:	e139883a 	add	fp,fp,r4
1801235c:	100e943a 	slli	r7,r2,16
18012360:	1004d43a 	srli	r2,r2,16
18012364:	882ad43a 	srli	r21,r17,16
18012368:	a53fffcc 	andi	r20,r20,65535
1801236c:	8c7fffcc 	andi	r17,r17,65535
18012370:	3d29883a 	add	r20,r7,r20
18012374:	b00b883a 	mov	r5,r22
18012378:	8809883a 	mov	r4,r17
1801237c:	d8c00515 	stw	r3,20(sp)
18012380:	d9800715 	stw	r6,28(sp)
18012384:	da000615 	stw	r8,24(sp)
18012388:	dd000115 	stw	r20,4(sp)
1801238c:	d8800015 	stw	r2,0(sp)
18012390:	8002b640 	call	18002b64 <__mulsi3>
18012394:	980b883a 	mov	r5,r19
18012398:	8809883a 	mov	r4,r17
1801239c:	d8800215 	stw	r2,8(sp)
180123a0:	8002b640 	call	18002b64 <__mulsi3>
180123a4:	9809883a 	mov	r4,r19
180123a8:	a80b883a 	mov	r5,r21
180123ac:	1029883a 	mov	r20,r2
180123b0:	8002b640 	call	18002b64 <__mulsi3>
180123b4:	b00b883a 	mov	r5,r22
180123b8:	a809883a 	mov	r4,r21
180123bc:	d8800415 	stw	r2,16(sp)
180123c0:	8002b640 	call	18002b64 <__mulsi3>
180123c4:	d9c00217 	ldw	r7,8(sp)
180123c8:	1505883a 	add	r2,r2,r20
180123cc:	d8c00517 	ldw	r3,20(sp)
180123d0:	3826d43a 	srli	r19,r7,16
180123d4:	d9800717 	ldw	r6,28(sp)
180123d8:	da000617 	ldw	r8,24(sp)
180123dc:	9885883a 	add	r2,r19,r2
180123e0:	da400417 	ldw	r9,16(sp)
180123e4:	1500022e 	bgeu	r2,r20,180123f0 <__muldf3+0x458>
180123e8:	01000074 	movhi	r4,1
180123ec:	4913883a 	add	r9,r9,r4
180123f0:	1028d43a 	srli	r20,r2,16
180123f4:	1004943a 	slli	r2,r2,16
180123f8:	802cd43a 	srli	r22,r16,16
180123fc:	843fffcc 	andi	r16,r16,65535
18012400:	3cffffcc 	andi	r19,r7,65535
18012404:	9009883a 	mov	r4,r18
18012408:	800b883a 	mov	r5,r16
1801240c:	a269883a 	add	r20,r20,r9
18012410:	d8c00515 	stw	r3,20(sp)
18012414:	d9800715 	stw	r6,28(sp)
18012418:	da000615 	stw	r8,24(sp)
1801241c:	14e7883a 	add	r19,r2,r19
18012420:	8002b640 	call	18002b64 <__mulsi3>
18012424:	9009883a 	mov	r4,r18
18012428:	b00b883a 	mov	r5,r22
1801242c:	d8800315 	stw	r2,12(sp)
18012430:	8002b640 	call	18002b64 <__mulsi3>
18012434:	b809883a 	mov	r4,r23
18012438:	b00b883a 	mov	r5,r22
1801243c:	d8800215 	stw	r2,8(sp)
18012440:	8002b640 	call	18002b64 <__mulsi3>
18012444:	b80b883a 	mov	r5,r23
18012448:	8009883a 	mov	r4,r16
1801244c:	d8800415 	stw	r2,16(sp)
18012450:	8002b640 	call	18002b64 <__mulsi3>
18012454:	da800317 	ldw	r10,12(sp)
18012458:	d9c00217 	ldw	r7,8(sp)
1801245c:	d9000017 	ldw	r4,0(sp)
18012460:	502ed43a 	srli	r23,r10,16
18012464:	11c5883a 	add	r2,r2,r7
18012468:	24e5883a 	add	r18,r4,r19
1801246c:	b885883a 	add	r2,r23,r2
18012470:	d8c00517 	ldw	r3,20(sp)
18012474:	d9800717 	ldw	r6,28(sp)
18012478:	da000617 	ldw	r8,24(sp)
1801247c:	da400417 	ldw	r9,16(sp)
18012480:	11c0022e 	bgeu	r2,r7,1801248c <__muldf3+0x4f4>
18012484:	01000074 	movhi	r4,1
18012488:	4913883a 	add	r9,r9,r4
1801248c:	100ed43a 	srli	r7,r2,16
18012490:	1004943a 	slli	r2,r2,16
18012494:	55ffffcc 	andi	r23,r10,65535
18012498:	3a53883a 	add	r9,r7,r9
1801249c:	8809883a 	mov	r4,r17
180124a0:	800b883a 	mov	r5,r16
180124a4:	d8c00515 	stw	r3,20(sp)
180124a8:	d9800715 	stw	r6,28(sp)
180124ac:	da000615 	stw	r8,24(sp)
180124b0:	da400415 	stw	r9,16(sp)
180124b4:	15ef883a 	add	r23,r2,r23
180124b8:	8002b640 	call	18002b64 <__mulsi3>
180124bc:	8809883a 	mov	r4,r17
180124c0:	b00b883a 	mov	r5,r22
180124c4:	d8800215 	stw	r2,8(sp)
180124c8:	8002b640 	call	18002b64 <__mulsi3>
180124cc:	b00b883a 	mov	r5,r22
180124d0:	a809883a 	mov	r4,r21
180124d4:	d8800315 	stw	r2,12(sp)
180124d8:	8002b640 	call	18002b64 <__mulsi3>
180124dc:	8009883a 	mov	r4,r16
180124e0:	a80b883a 	mov	r5,r21
180124e4:	1023883a 	mov	r17,r2
180124e8:	8002b640 	call	18002b64 <__mulsi3>
180124ec:	d9c00217 	ldw	r7,8(sp)
180124f0:	da800317 	ldw	r10,12(sp)
180124f4:	d8c00517 	ldw	r3,20(sp)
180124f8:	3808d43a 	srli	r4,r7,16
180124fc:	1285883a 	add	r2,r2,r10
18012500:	d9800717 	ldw	r6,28(sp)
18012504:	2085883a 	add	r2,r4,r2
18012508:	da000617 	ldw	r8,24(sp)
1801250c:	da400417 	ldw	r9,16(sp)
18012510:	1280022e 	bgeu	r2,r10,1801251c <__muldf3+0x584>
18012514:	01000074 	movhi	r4,1
18012518:	8923883a 	add	r17,r17,r4
1801251c:	1008943a 	slli	r4,r2,16
18012520:	39ffffcc 	andi	r7,r7,65535
18012524:	e4b9883a 	add	fp,fp,r18
18012528:	21cf883a 	add	r7,r4,r7
1801252c:	e4e7803a 	cmpltu	r19,fp,r19
18012530:	3d0f883a 	add	r7,r7,r20
18012534:	bf39883a 	add	fp,r23,fp
18012538:	99c9883a 	add	r4,r19,r7
1801253c:	e5ef803a 	cmpltu	r23,fp,r23
18012540:	490b883a 	add	r5,r9,r4
18012544:	1004d43a 	srli	r2,r2,16
18012548:	b965883a 	add	r18,r23,r5
1801254c:	24c9803a 	cmpltu	r4,r4,r19
18012550:	3d29803a 	cmpltu	r20,r7,r20
18012554:	a128b03a 	or	r20,r20,r4
18012558:	95ef803a 	cmpltu	r23,r18,r23
1801255c:	2a53803a 	cmpltu	r9,r5,r9
18012560:	a0a9883a 	add	r20,r20,r2
18012564:	4deeb03a 	or	r23,r9,r23
18012568:	a5ef883a 	add	r23,r20,r23
1801256c:	bc63883a 	add	r17,r23,r17
18012570:	e004927a 	slli	r2,fp,9
18012574:	d9000117 	ldw	r4,4(sp)
18012578:	882e927a 	slli	r23,r17,9
1801257c:	9022d5fa 	srli	r17,r18,23
18012580:	e038d5fa 	srli	fp,fp,23
18012584:	1104b03a 	or	r2,r2,r4
18012588:	9024927a 	slli	r18,r18,9
1801258c:	1004c03a 	cmpne	r2,r2,zero
18012590:	bc62b03a 	or	r17,r23,r17
18012594:	1738b03a 	or	fp,r2,fp
18012598:	8880402c 	andhi	r2,r17,256
1801259c:	e4a4b03a 	or	r18,fp,r18
180125a0:	10000726 	beq	r2,zero,180125c0 <__muldf3+0x628>
180125a4:	9006d07a 	srli	r3,r18,1
180125a8:	880497fa 	slli	r2,r17,31
180125ac:	9480004c 	andi	r18,r18,1
180125b0:	8822d07a 	srli	r17,r17,1
180125b4:	1ca4b03a 	or	r18,r3,r18
180125b8:	14a4b03a 	or	r18,r2,r18
180125bc:	4007883a 	mov	r3,r8
180125c0:	1880ffc4 	addi	r2,r3,1023
180125c4:	0080460e 	bge	zero,r2,180126e0 <__muldf3+0x748>
180125c8:	910001cc 	andi	r4,r18,7
180125cc:	20000726 	beq	r4,zero,180125ec <__muldf3+0x654>
180125d0:	910003cc 	andi	r4,r18,15
180125d4:	01400104 	movi	r5,4
180125d8:	21400426 	beq	r4,r5,180125ec <__muldf3+0x654>
180125dc:	9149883a 	add	r4,r18,r5
180125e0:	24a5803a 	cmpltu	r18,r4,r18
180125e4:	8ca3883a 	add	r17,r17,r18
180125e8:	2025883a 	mov	r18,r4
180125ec:	8900402c 	andhi	r4,r17,256
180125f0:	20000426 	beq	r4,zero,18012604 <__muldf3+0x66c>
180125f4:	18810004 	addi	r2,r3,1024
180125f8:	00ffc034 	movhi	r3,65280
180125fc:	18ffffc4 	addi	r3,r3,-1
18012600:	88e2703a 	and	r17,r17,r3
18012604:	00c1ff84 	movi	r3,2046
18012608:	18bf1316 	blt	r3,r2,18012258 <__alt_data_end+0xf8012258>
1801260c:	882c977a 	slli	r22,r17,29
18012610:	9024d0fa 	srli	r18,r18,3
18012614:	8822927a 	slli	r17,r17,9
18012618:	1081ffcc 	andi	r2,r2,2047
1801261c:	b4acb03a 	or	r22,r22,r18
18012620:	8820d33a 	srli	r16,r17,12
18012624:	3027883a 	mov	r19,r6
18012628:	003eba06 	br	18012114 <__alt_data_end+0xf8012114>
1801262c:	8080022c 	andhi	r2,r16,8
18012630:	10000926 	beq	r2,zero,18012658 <__muldf3+0x6c0>
18012634:	8880022c 	andhi	r2,r17,8
18012638:	1000071e 	bne	r2,zero,18012658 <__muldf3+0x6c0>
1801263c:	00800434 	movhi	r2,16
18012640:	8c000234 	orhi	r16,r17,8
18012644:	10bfffc4 	addi	r2,r2,-1
18012648:	e027883a 	mov	r19,fp
1801264c:	80a0703a 	and	r16,r16,r2
18012650:	902d883a 	mov	r22,r18
18012654:	003f1706 	br	180122b4 <__alt_data_end+0xf80122b4>
18012658:	00800434 	movhi	r2,16
1801265c:	84000234 	orhi	r16,r16,8
18012660:	10bfffc4 	addi	r2,r2,-1
18012664:	80a0703a 	and	r16,r16,r2
18012668:	003f1206 	br	180122b4 <__alt_data_end+0xf80122b4>
1801266c:	147ff604 	addi	r17,r2,-40
18012670:	3462983a 	sll	r17,r6,r17
18012674:	0025883a 	mov	r18,zero
18012678:	003ef306 	br	18012248 <__alt_data_end+0xf8012248>
1801267c:	3009883a 	mov	r4,r6
18012680:	d9400215 	stw	r5,8(sp)
18012684:	d9800715 	stw	r6,28(sp)
18012688:	da400415 	stw	r9,16(sp)
1801268c:	da800315 	stw	r10,12(sp)
18012690:	80133040 	call	18013304 <__clzsi2>
18012694:	10800804 	addi	r2,r2,32
18012698:	da800317 	ldw	r10,12(sp)
1801269c:	da400417 	ldw	r9,16(sp)
180126a0:	d9800717 	ldw	r6,28(sp)
180126a4:	d9400217 	ldw	r5,8(sp)
180126a8:	003edd06 	br	18012220 <__alt_data_end+0xf8012220>
180126ac:	143ff604 	addi	r16,r2,-40
180126b0:	ac20983a 	sll	r16,r21,r16
180126b4:	002d883a 	mov	r22,zero
180126b8:	003ec106 	br	180121c0 <__alt_data_end+0xf80121c0>
180126bc:	d9800715 	stw	r6,28(sp)
180126c0:	d9c00215 	stw	r7,8(sp)
180126c4:	da400415 	stw	r9,16(sp)
180126c8:	80133040 	call	18013304 <__clzsi2>
180126cc:	10800804 	addi	r2,r2,32
180126d0:	da400417 	ldw	r9,16(sp)
180126d4:	d9c00217 	ldw	r7,8(sp)
180126d8:	d9800717 	ldw	r6,28(sp)
180126dc:	003eae06 	br	18012198 <__alt_data_end+0xf8012198>
180126e0:	00c00044 	movi	r3,1
180126e4:	1887c83a 	sub	r3,r3,r2
180126e8:	01000e04 	movi	r4,56
180126ec:	20fe8516 	blt	r4,r3,18012104 <__alt_data_end+0xf8012104>
180126f0:	010007c4 	movi	r4,31
180126f4:	20c01b16 	blt	r4,r3,18012764 <__muldf3+0x7cc>
180126f8:	00800804 	movi	r2,32
180126fc:	10c5c83a 	sub	r2,r2,r3
18012700:	888a983a 	sll	r5,r17,r2
18012704:	90c8d83a 	srl	r4,r18,r3
18012708:	9084983a 	sll	r2,r18,r2
1801270c:	88e2d83a 	srl	r17,r17,r3
18012710:	2906b03a 	or	r3,r5,r4
18012714:	1004c03a 	cmpne	r2,r2,zero
18012718:	1886b03a 	or	r3,r3,r2
1801271c:	188001cc 	andi	r2,r3,7
18012720:	10000726 	beq	r2,zero,18012740 <__muldf3+0x7a8>
18012724:	188003cc 	andi	r2,r3,15
18012728:	01000104 	movi	r4,4
1801272c:	11000426 	beq	r2,r4,18012740 <__muldf3+0x7a8>
18012730:	1805883a 	mov	r2,r3
18012734:	10c00104 	addi	r3,r2,4
18012738:	1885803a 	cmpltu	r2,r3,r2
1801273c:	88a3883a 	add	r17,r17,r2
18012740:	8880202c 	andhi	r2,r17,128
18012744:	10001c26 	beq	r2,zero,180127b8 <__muldf3+0x820>
18012748:	3027883a 	mov	r19,r6
1801274c:	00800044 	movi	r2,1
18012750:	0021883a 	mov	r16,zero
18012754:	002d883a 	mov	r22,zero
18012758:	003e6e06 	br	18012114 <__alt_data_end+0xf8012114>
1801275c:	4007883a 	mov	r3,r8
18012760:	003f9706 	br	180125c0 <__alt_data_end+0xf80125c0>
18012764:	017ff844 	movi	r5,-31
18012768:	2885c83a 	sub	r2,r5,r2
1801276c:	888ad83a 	srl	r5,r17,r2
18012770:	00800804 	movi	r2,32
18012774:	18801a26 	beq	r3,r2,180127e0 <__muldf3+0x848>
18012778:	01001004 	movi	r4,64
1801277c:	20c7c83a 	sub	r3,r4,r3
18012780:	88e2983a 	sll	r17,r17,r3
18012784:	8ca4b03a 	or	r18,r17,r18
18012788:	9004c03a 	cmpne	r2,r18,zero
1801278c:	2884b03a 	or	r2,r5,r2
18012790:	144001cc 	andi	r17,r2,7
18012794:	88000d1e 	bne	r17,zero,180127cc <__muldf3+0x834>
18012798:	0021883a 	mov	r16,zero
1801279c:	102cd0fa 	srli	r22,r2,3
180127a0:	3027883a 	mov	r19,r6
180127a4:	0005883a 	mov	r2,zero
180127a8:	b46cb03a 	or	r22,r22,r17
180127ac:	003e5906 	br	18012114 <__alt_data_end+0xf8012114>
180127b0:	1007883a 	mov	r3,r2
180127b4:	0023883a 	mov	r17,zero
180127b8:	8820927a 	slli	r16,r17,9
180127bc:	1805883a 	mov	r2,r3
180127c0:	8822977a 	slli	r17,r17,29
180127c4:	8020d33a 	srli	r16,r16,12
180127c8:	003ff406 	br	1801279c <__alt_data_end+0xf801279c>
180127cc:	10c003cc 	andi	r3,r2,15
180127d0:	01000104 	movi	r4,4
180127d4:	193ff626 	beq	r3,r4,180127b0 <__alt_data_end+0xf80127b0>
180127d8:	0023883a 	mov	r17,zero
180127dc:	003fd506 	br	18012734 <__alt_data_end+0xf8012734>
180127e0:	0023883a 	mov	r17,zero
180127e4:	003fe706 	br	18012784 <__alt_data_end+0xf8012784>
180127e8:	00800434 	movhi	r2,16
180127ec:	8c000234 	orhi	r16,r17,8
180127f0:	10bfffc4 	addi	r2,r2,-1
180127f4:	3027883a 	mov	r19,r6
180127f8:	80a0703a 	and	r16,r16,r2
180127fc:	902d883a 	mov	r22,r18
18012800:	003eac06 	br	180122b4 <__alt_data_end+0xf80122b4>

18012804 <__subdf3>:
18012804:	02000434 	movhi	r8,16
18012808:	423fffc4 	addi	r8,r8,-1
1801280c:	defffb04 	addi	sp,sp,-20
18012810:	2a14703a 	and	r10,r5,r8
18012814:	3812d53a 	srli	r9,r7,20
18012818:	3a10703a 	and	r8,r7,r8
1801281c:	2006d77a 	srli	r3,r4,29
18012820:	3004d77a 	srli	r2,r6,29
18012824:	dc000015 	stw	r16,0(sp)
18012828:	501490fa 	slli	r10,r10,3
1801282c:	2820d53a 	srli	r16,r5,20
18012830:	401090fa 	slli	r8,r8,3
18012834:	dc800215 	stw	r18,8(sp)
18012838:	dc400115 	stw	r17,4(sp)
1801283c:	dfc00415 	stw	ra,16(sp)
18012840:	202290fa 	slli	r17,r4,3
18012844:	dcc00315 	stw	r19,12(sp)
18012848:	4a41ffcc 	andi	r9,r9,2047
1801284c:	0101ffc4 	movi	r4,2047
18012850:	2824d7fa 	srli	r18,r5,31
18012854:	8401ffcc 	andi	r16,r16,2047
18012858:	50c6b03a 	or	r3,r10,r3
1801285c:	380ed7fa 	srli	r7,r7,31
18012860:	408ab03a 	or	r5,r8,r2
18012864:	300c90fa 	slli	r6,r6,3
18012868:	49009626 	beq	r9,r4,18012ac4 <__subdf3+0x2c0>
1801286c:	39c0005c 	xori	r7,r7,1
18012870:	8245c83a 	sub	r2,r16,r9
18012874:	3c807426 	beq	r7,r18,18012a48 <__subdf3+0x244>
18012878:	0080af0e 	bge	zero,r2,18012b38 <__subdf3+0x334>
1801287c:	48002a1e 	bne	r9,zero,18012928 <__subdf3+0x124>
18012880:	2988b03a 	or	r4,r5,r6
18012884:	20009a1e 	bne	r4,zero,18012af0 <__subdf3+0x2ec>
18012888:	888001cc 	andi	r2,r17,7
1801288c:	10000726 	beq	r2,zero,180128ac <__subdf3+0xa8>
18012890:	888003cc 	andi	r2,r17,15
18012894:	01000104 	movi	r4,4
18012898:	11000426 	beq	r2,r4,180128ac <__subdf3+0xa8>
1801289c:	890b883a 	add	r5,r17,r4
180128a0:	2c63803a 	cmpltu	r17,r5,r17
180128a4:	1c47883a 	add	r3,r3,r17
180128a8:	2823883a 	mov	r17,r5
180128ac:	1880202c 	andhi	r2,r3,128
180128b0:	10005926 	beq	r2,zero,18012a18 <__subdf3+0x214>
180128b4:	84000044 	addi	r16,r16,1
180128b8:	0081ffc4 	movi	r2,2047
180128bc:	8080be26 	beq	r16,r2,18012bb8 <__subdf3+0x3b4>
180128c0:	017fe034 	movhi	r5,65408
180128c4:	297fffc4 	addi	r5,r5,-1
180128c8:	1946703a 	and	r3,r3,r5
180128cc:	1804977a 	slli	r2,r3,29
180128d0:	1806927a 	slli	r3,r3,9
180128d4:	8822d0fa 	srli	r17,r17,3
180128d8:	8401ffcc 	andi	r16,r16,2047
180128dc:	180ad33a 	srli	r5,r3,12
180128e0:	9100004c 	andi	r4,r18,1
180128e4:	1444b03a 	or	r2,r2,r17
180128e8:	80c1ffcc 	andi	r3,r16,2047
180128ec:	1820953a 	slli	r16,r3,20
180128f0:	20c03fcc 	andi	r3,r4,255
180128f4:	180897fa 	slli	r4,r3,31
180128f8:	00c00434 	movhi	r3,16
180128fc:	18ffffc4 	addi	r3,r3,-1
18012900:	28c6703a 	and	r3,r5,r3
18012904:	1c06b03a 	or	r3,r3,r16
18012908:	1906b03a 	or	r3,r3,r4
1801290c:	dfc00417 	ldw	ra,16(sp)
18012910:	dcc00317 	ldw	r19,12(sp)
18012914:	dc800217 	ldw	r18,8(sp)
18012918:	dc400117 	ldw	r17,4(sp)
1801291c:	dc000017 	ldw	r16,0(sp)
18012920:	dec00504 	addi	sp,sp,20
18012924:	f800283a 	ret
18012928:	0101ffc4 	movi	r4,2047
1801292c:	813fd626 	beq	r16,r4,18012888 <__alt_data_end+0xf8012888>
18012930:	29402034 	orhi	r5,r5,128
18012934:	01000e04 	movi	r4,56
18012938:	2080a316 	blt	r4,r2,18012bc8 <__subdf3+0x3c4>
1801293c:	010007c4 	movi	r4,31
18012940:	2080c616 	blt	r4,r2,18012c5c <__subdf3+0x458>
18012944:	01000804 	movi	r4,32
18012948:	2089c83a 	sub	r4,r4,r2
1801294c:	2910983a 	sll	r8,r5,r4
18012950:	308ed83a 	srl	r7,r6,r2
18012954:	3108983a 	sll	r4,r6,r4
18012958:	2884d83a 	srl	r2,r5,r2
1801295c:	41ccb03a 	or	r6,r8,r7
18012960:	2008c03a 	cmpne	r4,r4,zero
18012964:	310cb03a 	or	r6,r6,r4
18012968:	898dc83a 	sub	r6,r17,r6
1801296c:	89a3803a 	cmpltu	r17,r17,r6
18012970:	1887c83a 	sub	r3,r3,r2
18012974:	1c47c83a 	sub	r3,r3,r17
18012978:	3023883a 	mov	r17,r6
1801297c:	1880202c 	andhi	r2,r3,128
18012980:	10002326 	beq	r2,zero,18012a10 <__subdf3+0x20c>
18012984:	04c02034 	movhi	r19,128
18012988:	9cffffc4 	addi	r19,r19,-1
1801298c:	1ce6703a 	and	r19,r3,r19
18012990:	98007a26 	beq	r19,zero,18012b7c <__subdf3+0x378>
18012994:	9809883a 	mov	r4,r19
18012998:	80133040 	call	18013304 <__clzsi2>
1801299c:	113ffe04 	addi	r4,r2,-8
180129a0:	00c007c4 	movi	r3,31
180129a4:	19007b16 	blt	r3,r4,18012b94 <__subdf3+0x390>
180129a8:	00800804 	movi	r2,32
180129ac:	1105c83a 	sub	r2,r2,r4
180129b0:	8884d83a 	srl	r2,r17,r2
180129b4:	9906983a 	sll	r3,r19,r4
180129b8:	8922983a 	sll	r17,r17,r4
180129bc:	10c4b03a 	or	r2,r2,r3
180129c0:	24007816 	blt	r4,r16,18012ba4 <__subdf3+0x3a0>
180129c4:	2421c83a 	sub	r16,r4,r16
180129c8:	80c00044 	addi	r3,r16,1
180129cc:	010007c4 	movi	r4,31
180129d0:	20c09516 	blt	r4,r3,18012c28 <__subdf3+0x424>
180129d4:	01400804 	movi	r5,32
180129d8:	28cbc83a 	sub	r5,r5,r3
180129dc:	88c8d83a 	srl	r4,r17,r3
180129e0:	8962983a 	sll	r17,r17,r5
180129e4:	114a983a 	sll	r5,r2,r5
180129e8:	10c6d83a 	srl	r3,r2,r3
180129ec:	8804c03a 	cmpne	r2,r17,zero
180129f0:	290ab03a 	or	r5,r5,r4
180129f4:	28a2b03a 	or	r17,r5,r2
180129f8:	0021883a 	mov	r16,zero
180129fc:	003fa206 	br	18012888 <__alt_data_end+0xf8012888>
18012a00:	2090b03a 	or	r8,r4,r2
18012a04:	40018e26 	beq	r8,zero,18013040 <__subdf3+0x83c>
18012a08:	1007883a 	mov	r3,r2
18012a0c:	2023883a 	mov	r17,r4
18012a10:	888001cc 	andi	r2,r17,7
18012a14:	103f9e1e 	bne	r2,zero,18012890 <__alt_data_end+0xf8012890>
18012a18:	1804977a 	slli	r2,r3,29
18012a1c:	8822d0fa 	srli	r17,r17,3
18012a20:	1810d0fa 	srli	r8,r3,3
18012a24:	9100004c 	andi	r4,r18,1
18012a28:	1444b03a 	or	r2,r2,r17
18012a2c:	00c1ffc4 	movi	r3,2047
18012a30:	80c02826 	beq	r16,r3,18012ad4 <__subdf3+0x2d0>
18012a34:	01400434 	movhi	r5,16
18012a38:	297fffc4 	addi	r5,r5,-1
18012a3c:	80e0703a 	and	r16,r16,r3
18012a40:	414a703a 	and	r5,r8,r5
18012a44:	003fa806 	br	180128e8 <__alt_data_end+0xf80128e8>
18012a48:	0080630e 	bge	zero,r2,18012bd8 <__subdf3+0x3d4>
18012a4c:	48003026 	beq	r9,zero,18012b10 <__subdf3+0x30c>
18012a50:	0101ffc4 	movi	r4,2047
18012a54:	813f8c26 	beq	r16,r4,18012888 <__alt_data_end+0xf8012888>
18012a58:	29402034 	orhi	r5,r5,128
18012a5c:	01000e04 	movi	r4,56
18012a60:	2080a90e 	bge	r4,r2,18012d08 <__subdf3+0x504>
18012a64:	298cb03a 	or	r6,r5,r6
18012a68:	3012c03a 	cmpne	r9,r6,zero
18012a6c:	0005883a 	mov	r2,zero
18012a70:	4c53883a 	add	r9,r9,r17
18012a74:	4c63803a 	cmpltu	r17,r9,r17
18012a78:	10c7883a 	add	r3,r2,r3
18012a7c:	88c7883a 	add	r3,r17,r3
18012a80:	4823883a 	mov	r17,r9
18012a84:	1880202c 	andhi	r2,r3,128
18012a88:	1000d026 	beq	r2,zero,18012dcc <__subdf3+0x5c8>
18012a8c:	84000044 	addi	r16,r16,1
18012a90:	0081ffc4 	movi	r2,2047
18012a94:	8080fe26 	beq	r16,r2,18012e90 <__subdf3+0x68c>
18012a98:	00bfe034 	movhi	r2,65408
18012a9c:	10bfffc4 	addi	r2,r2,-1
18012aa0:	1886703a 	and	r3,r3,r2
18012aa4:	880ad07a 	srli	r5,r17,1
18012aa8:	180497fa 	slli	r2,r3,31
18012aac:	8900004c 	andi	r4,r17,1
18012ab0:	2922b03a 	or	r17,r5,r4
18012ab4:	1806d07a 	srli	r3,r3,1
18012ab8:	1462b03a 	or	r17,r2,r17
18012abc:	3825883a 	mov	r18,r7
18012ac0:	003f7106 	br	18012888 <__alt_data_end+0xf8012888>
18012ac4:	2984b03a 	or	r2,r5,r6
18012ac8:	103f6826 	beq	r2,zero,1801286c <__alt_data_end+0xf801286c>
18012acc:	39c03fcc 	andi	r7,r7,255
18012ad0:	003f6706 	br	18012870 <__alt_data_end+0xf8012870>
18012ad4:	4086b03a 	or	r3,r8,r2
18012ad8:	18015226 	beq	r3,zero,18013024 <__subdf3+0x820>
18012adc:	00c00434 	movhi	r3,16
18012ae0:	41400234 	orhi	r5,r8,8
18012ae4:	18ffffc4 	addi	r3,r3,-1
18012ae8:	28ca703a 	and	r5,r5,r3
18012aec:	003f7e06 	br	180128e8 <__alt_data_end+0xf80128e8>
18012af0:	10bfffc4 	addi	r2,r2,-1
18012af4:	1000491e 	bne	r2,zero,18012c1c <__subdf3+0x418>
18012af8:	898fc83a 	sub	r7,r17,r6
18012afc:	89e3803a 	cmpltu	r17,r17,r7
18012b00:	1947c83a 	sub	r3,r3,r5
18012b04:	1c47c83a 	sub	r3,r3,r17
18012b08:	3823883a 	mov	r17,r7
18012b0c:	003f9b06 	br	1801297c <__alt_data_end+0xf801297c>
18012b10:	2988b03a 	or	r4,r5,r6
18012b14:	203f5c26 	beq	r4,zero,18012888 <__alt_data_end+0xf8012888>
18012b18:	10bfffc4 	addi	r2,r2,-1
18012b1c:	1000931e 	bne	r2,zero,18012d6c <__subdf3+0x568>
18012b20:	898d883a 	add	r6,r17,r6
18012b24:	3463803a 	cmpltu	r17,r6,r17
18012b28:	1947883a 	add	r3,r3,r5
18012b2c:	88c7883a 	add	r3,r17,r3
18012b30:	3023883a 	mov	r17,r6
18012b34:	003fd306 	br	18012a84 <__alt_data_end+0xf8012a84>
18012b38:	1000541e 	bne	r2,zero,18012c8c <__subdf3+0x488>
18012b3c:	80800044 	addi	r2,r16,1
18012b40:	1081ffcc 	andi	r2,r2,2047
18012b44:	01000044 	movi	r4,1
18012b48:	2080a20e 	bge	r4,r2,18012dd4 <__subdf3+0x5d0>
18012b4c:	8989c83a 	sub	r4,r17,r6
18012b50:	8905803a 	cmpltu	r2,r17,r4
18012b54:	1967c83a 	sub	r19,r3,r5
18012b58:	98a7c83a 	sub	r19,r19,r2
18012b5c:	9880202c 	andhi	r2,r19,128
18012b60:	10006326 	beq	r2,zero,18012cf0 <__subdf3+0x4ec>
18012b64:	3463c83a 	sub	r17,r6,r17
18012b68:	28c7c83a 	sub	r3,r5,r3
18012b6c:	344d803a 	cmpltu	r6,r6,r17
18012b70:	19a7c83a 	sub	r19,r3,r6
18012b74:	3825883a 	mov	r18,r7
18012b78:	983f861e 	bne	r19,zero,18012994 <__alt_data_end+0xf8012994>
18012b7c:	8809883a 	mov	r4,r17
18012b80:	80133040 	call	18013304 <__clzsi2>
18012b84:	10800804 	addi	r2,r2,32
18012b88:	113ffe04 	addi	r4,r2,-8
18012b8c:	00c007c4 	movi	r3,31
18012b90:	193f850e 	bge	r3,r4,180129a8 <__alt_data_end+0xf80129a8>
18012b94:	10bff604 	addi	r2,r2,-40
18012b98:	8884983a 	sll	r2,r17,r2
18012b9c:	0023883a 	mov	r17,zero
18012ba0:	243f880e 	bge	r4,r16,180129c4 <__alt_data_end+0xf80129c4>
18012ba4:	00ffe034 	movhi	r3,65408
18012ba8:	18ffffc4 	addi	r3,r3,-1
18012bac:	8121c83a 	sub	r16,r16,r4
18012bb0:	10c6703a 	and	r3,r2,r3
18012bb4:	003f3406 	br	18012888 <__alt_data_end+0xf8012888>
18012bb8:	9100004c 	andi	r4,r18,1
18012bbc:	000b883a 	mov	r5,zero
18012bc0:	0005883a 	mov	r2,zero
18012bc4:	003f4806 	br	180128e8 <__alt_data_end+0xf80128e8>
18012bc8:	298cb03a 	or	r6,r5,r6
18012bcc:	300cc03a 	cmpne	r6,r6,zero
18012bd0:	0005883a 	mov	r2,zero
18012bd4:	003f6406 	br	18012968 <__alt_data_end+0xf8012968>
18012bd8:	10009a1e 	bne	r2,zero,18012e44 <__subdf3+0x640>
18012bdc:	82400044 	addi	r9,r16,1
18012be0:	4881ffcc 	andi	r2,r9,2047
18012be4:	02800044 	movi	r10,1
18012be8:	5080670e 	bge	r10,r2,18012d88 <__subdf3+0x584>
18012bec:	0081ffc4 	movi	r2,2047
18012bf0:	4880af26 	beq	r9,r2,18012eb0 <__subdf3+0x6ac>
18012bf4:	898d883a 	add	r6,r17,r6
18012bf8:	1945883a 	add	r2,r3,r5
18012bfc:	3447803a 	cmpltu	r3,r6,r17
18012c00:	1887883a 	add	r3,r3,r2
18012c04:	182297fa 	slli	r17,r3,31
18012c08:	300cd07a 	srli	r6,r6,1
18012c0c:	1806d07a 	srli	r3,r3,1
18012c10:	4821883a 	mov	r16,r9
18012c14:	89a2b03a 	or	r17,r17,r6
18012c18:	003f1b06 	br	18012888 <__alt_data_end+0xf8012888>
18012c1c:	0101ffc4 	movi	r4,2047
18012c20:	813f441e 	bne	r16,r4,18012934 <__alt_data_end+0xf8012934>
18012c24:	003f1806 	br	18012888 <__alt_data_end+0xf8012888>
18012c28:	843ff844 	addi	r16,r16,-31
18012c2c:	01400804 	movi	r5,32
18012c30:	1408d83a 	srl	r4,r2,r16
18012c34:	19405026 	beq	r3,r5,18012d78 <__subdf3+0x574>
18012c38:	01401004 	movi	r5,64
18012c3c:	28c7c83a 	sub	r3,r5,r3
18012c40:	10c4983a 	sll	r2,r2,r3
18012c44:	88a2b03a 	or	r17,r17,r2
18012c48:	8822c03a 	cmpne	r17,r17,zero
18012c4c:	2462b03a 	or	r17,r4,r17
18012c50:	0007883a 	mov	r3,zero
18012c54:	0021883a 	mov	r16,zero
18012c58:	003f6d06 	br	18012a10 <__alt_data_end+0xf8012a10>
18012c5c:	11fff804 	addi	r7,r2,-32
18012c60:	01000804 	movi	r4,32
18012c64:	29ced83a 	srl	r7,r5,r7
18012c68:	11004526 	beq	r2,r4,18012d80 <__subdf3+0x57c>
18012c6c:	01001004 	movi	r4,64
18012c70:	2089c83a 	sub	r4,r4,r2
18012c74:	2904983a 	sll	r2,r5,r4
18012c78:	118cb03a 	or	r6,r2,r6
18012c7c:	300cc03a 	cmpne	r6,r6,zero
18012c80:	398cb03a 	or	r6,r7,r6
18012c84:	0005883a 	mov	r2,zero
18012c88:	003f3706 	br	18012968 <__alt_data_end+0xf8012968>
18012c8c:	80002a26 	beq	r16,zero,18012d38 <__subdf3+0x534>
18012c90:	0101ffc4 	movi	r4,2047
18012c94:	49006626 	beq	r9,r4,18012e30 <__subdf3+0x62c>
18012c98:	0085c83a 	sub	r2,zero,r2
18012c9c:	18c02034 	orhi	r3,r3,128
18012ca0:	01000e04 	movi	r4,56
18012ca4:	20807e16 	blt	r4,r2,18012ea0 <__subdf3+0x69c>
18012ca8:	010007c4 	movi	r4,31
18012cac:	2080e716 	blt	r4,r2,1801304c <__subdf3+0x848>
18012cb0:	01000804 	movi	r4,32
18012cb4:	2089c83a 	sub	r4,r4,r2
18012cb8:	1914983a 	sll	r10,r3,r4
18012cbc:	8890d83a 	srl	r8,r17,r2
18012cc0:	8908983a 	sll	r4,r17,r4
18012cc4:	1884d83a 	srl	r2,r3,r2
18012cc8:	5222b03a 	or	r17,r10,r8
18012ccc:	2006c03a 	cmpne	r3,r4,zero
18012cd0:	88e2b03a 	or	r17,r17,r3
18012cd4:	3463c83a 	sub	r17,r6,r17
18012cd8:	2885c83a 	sub	r2,r5,r2
18012cdc:	344d803a 	cmpltu	r6,r6,r17
18012ce0:	1187c83a 	sub	r3,r2,r6
18012ce4:	4821883a 	mov	r16,r9
18012ce8:	3825883a 	mov	r18,r7
18012cec:	003f2306 	br	1801297c <__alt_data_end+0xf801297c>
18012cf0:	24d0b03a 	or	r8,r4,r19
18012cf4:	40001b1e 	bne	r8,zero,18012d64 <__subdf3+0x560>
18012cf8:	0005883a 	mov	r2,zero
18012cfc:	0009883a 	mov	r4,zero
18012d00:	0021883a 	mov	r16,zero
18012d04:	003f4906 	br	18012a2c <__alt_data_end+0xf8012a2c>
18012d08:	010007c4 	movi	r4,31
18012d0c:	20803a16 	blt	r4,r2,18012df8 <__subdf3+0x5f4>
18012d10:	01000804 	movi	r4,32
18012d14:	2089c83a 	sub	r4,r4,r2
18012d18:	2912983a 	sll	r9,r5,r4
18012d1c:	3090d83a 	srl	r8,r6,r2
18012d20:	3108983a 	sll	r4,r6,r4
18012d24:	2884d83a 	srl	r2,r5,r2
18012d28:	4a12b03a 	or	r9,r9,r8
18012d2c:	2008c03a 	cmpne	r4,r4,zero
18012d30:	4912b03a 	or	r9,r9,r4
18012d34:	003f4e06 	br	18012a70 <__alt_data_end+0xf8012a70>
18012d38:	1c48b03a 	or	r4,r3,r17
18012d3c:	20003c26 	beq	r4,zero,18012e30 <__subdf3+0x62c>
18012d40:	0084303a 	nor	r2,zero,r2
18012d44:	1000381e 	bne	r2,zero,18012e28 <__subdf3+0x624>
18012d48:	3463c83a 	sub	r17,r6,r17
18012d4c:	28c5c83a 	sub	r2,r5,r3
18012d50:	344d803a 	cmpltu	r6,r6,r17
18012d54:	1187c83a 	sub	r3,r2,r6
18012d58:	4821883a 	mov	r16,r9
18012d5c:	3825883a 	mov	r18,r7
18012d60:	003f0606 	br	1801297c <__alt_data_end+0xf801297c>
18012d64:	2023883a 	mov	r17,r4
18012d68:	003f0906 	br	18012990 <__alt_data_end+0xf8012990>
18012d6c:	0101ffc4 	movi	r4,2047
18012d70:	813f3a1e 	bne	r16,r4,18012a5c <__alt_data_end+0xf8012a5c>
18012d74:	003ec406 	br	18012888 <__alt_data_end+0xf8012888>
18012d78:	0005883a 	mov	r2,zero
18012d7c:	003fb106 	br	18012c44 <__alt_data_end+0xf8012c44>
18012d80:	0005883a 	mov	r2,zero
18012d84:	003fbc06 	br	18012c78 <__alt_data_end+0xf8012c78>
18012d88:	1c44b03a 	or	r2,r3,r17
18012d8c:	80008e1e 	bne	r16,zero,18012fc8 <__subdf3+0x7c4>
18012d90:	1000c826 	beq	r2,zero,180130b4 <__subdf3+0x8b0>
18012d94:	2984b03a 	or	r2,r5,r6
18012d98:	103ebb26 	beq	r2,zero,18012888 <__alt_data_end+0xf8012888>
18012d9c:	8989883a 	add	r4,r17,r6
18012da0:	1945883a 	add	r2,r3,r5
18012da4:	2447803a 	cmpltu	r3,r4,r17
18012da8:	1887883a 	add	r3,r3,r2
18012dac:	1880202c 	andhi	r2,r3,128
18012db0:	2023883a 	mov	r17,r4
18012db4:	103f1626 	beq	r2,zero,18012a10 <__alt_data_end+0xf8012a10>
18012db8:	00bfe034 	movhi	r2,65408
18012dbc:	10bfffc4 	addi	r2,r2,-1
18012dc0:	5021883a 	mov	r16,r10
18012dc4:	1886703a 	and	r3,r3,r2
18012dc8:	003eaf06 	br	18012888 <__alt_data_end+0xf8012888>
18012dcc:	3825883a 	mov	r18,r7
18012dd0:	003f0f06 	br	18012a10 <__alt_data_end+0xf8012a10>
18012dd4:	1c44b03a 	or	r2,r3,r17
18012dd8:	8000251e 	bne	r16,zero,18012e70 <__subdf3+0x66c>
18012ddc:	1000661e 	bne	r2,zero,18012f78 <__subdf3+0x774>
18012de0:	2990b03a 	or	r8,r5,r6
18012de4:	40009626 	beq	r8,zero,18013040 <__subdf3+0x83c>
18012de8:	2807883a 	mov	r3,r5
18012dec:	3023883a 	mov	r17,r6
18012df0:	3825883a 	mov	r18,r7
18012df4:	003ea406 	br	18012888 <__alt_data_end+0xf8012888>
18012df8:	127ff804 	addi	r9,r2,-32
18012dfc:	01000804 	movi	r4,32
18012e00:	2a52d83a 	srl	r9,r5,r9
18012e04:	11008c26 	beq	r2,r4,18013038 <__subdf3+0x834>
18012e08:	01001004 	movi	r4,64
18012e0c:	2085c83a 	sub	r2,r4,r2
18012e10:	2884983a 	sll	r2,r5,r2
18012e14:	118cb03a 	or	r6,r2,r6
18012e18:	300cc03a 	cmpne	r6,r6,zero
18012e1c:	4992b03a 	or	r9,r9,r6
18012e20:	0005883a 	mov	r2,zero
18012e24:	003f1206 	br	18012a70 <__alt_data_end+0xf8012a70>
18012e28:	0101ffc4 	movi	r4,2047
18012e2c:	493f9c1e 	bne	r9,r4,18012ca0 <__alt_data_end+0xf8012ca0>
18012e30:	2807883a 	mov	r3,r5
18012e34:	3023883a 	mov	r17,r6
18012e38:	4821883a 	mov	r16,r9
18012e3c:	3825883a 	mov	r18,r7
18012e40:	003e9106 	br	18012888 <__alt_data_end+0xf8012888>
18012e44:	80001f1e 	bne	r16,zero,18012ec4 <__subdf3+0x6c0>
18012e48:	1c48b03a 	or	r4,r3,r17
18012e4c:	20005a26 	beq	r4,zero,18012fb8 <__subdf3+0x7b4>
18012e50:	0084303a 	nor	r2,zero,r2
18012e54:	1000561e 	bne	r2,zero,18012fb0 <__subdf3+0x7ac>
18012e58:	89a3883a 	add	r17,r17,r6
18012e5c:	1945883a 	add	r2,r3,r5
18012e60:	898d803a 	cmpltu	r6,r17,r6
18012e64:	3087883a 	add	r3,r6,r2
18012e68:	4821883a 	mov	r16,r9
18012e6c:	003f0506 	br	18012a84 <__alt_data_end+0xf8012a84>
18012e70:	10002b1e 	bne	r2,zero,18012f20 <__subdf3+0x71c>
18012e74:	2984b03a 	or	r2,r5,r6
18012e78:	10008026 	beq	r2,zero,1801307c <__subdf3+0x878>
18012e7c:	2807883a 	mov	r3,r5
18012e80:	3023883a 	mov	r17,r6
18012e84:	3825883a 	mov	r18,r7
18012e88:	0401ffc4 	movi	r16,2047
18012e8c:	003e7e06 	br	18012888 <__alt_data_end+0xf8012888>
18012e90:	3809883a 	mov	r4,r7
18012e94:	0011883a 	mov	r8,zero
18012e98:	0005883a 	mov	r2,zero
18012e9c:	003ee306 	br	18012a2c <__alt_data_end+0xf8012a2c>
18012ea0:	1c62b03a 	or	r17,r3,r17
18012ea4:	8822c03a 	cmpne	r17,r17,zero
18012ea8:	0005883a 	mov	r2,zero
18012eac:	003f8906 	br	18012cd4 <__alt_data_end+0xf8012cd4>
18012eb0:	3809883a 	mov	r4,r7
18012eb4:	4821883a 	mov	r16,r9
18012eb8:	0011883a 	mov	r8,zero
18012ebc:	0005883a 	mov	r2,zero
18012ec0:	003eda06 	br	18012a2c <__alt_data_end+0xf8012a2c>
18012ec4:	0101ffc4 	movi	r4,2047
18012ec8:	49003b26 	beq	r9,r4,18012fb8 <__subdf3+0x7b4>
18012ecc:	0085c83a 	sub	r2,zero,r2
18012ed0:	18c02034 	orhi	r3,r3,128
18012ed4:	01000e04 	movi	r4,56
18012ed8:	20806e16 	blt	r4,r2,18013094 <__subdf3+0x890>
18012edc:	010007c4 	movi	r4,31
18012ee0:	20807716 	blt	r4,r2,180130c0 <__subdf3+0x8bc>
18012ee4:	01000804 	movi	r4,32
18012ee8:	2089c83a 	sub	r4,r4,r2
18012eec:	1914983a 	sll	r10,r3,r4
18012ef0:	8890d83a 	srl	r8,r17,r2
18012ef4:	8908983a 	sll	r4,r17,r4
18012ef8:	1884d83a 	srl	r2,r3,r2
18012efc:	5222b03a 	or	r17,r10,r8
18012f00:	2006c03a 	cmpne	r3,r4,zero
18012f04:	88e2b03a 	or	r17,r17,r3
18012f08:	89a3883a 	add	r17,r17,r6
18012f0c:	1145883a 	add	r2,r2,r5
18012f10:	898d803a 	cmpltu	r6,r17,r6
18012f14:	3087883a 	add	r3,r6,r2
18012f18:	4821883a 	mov	r16,r9
18012f1c:	003ed906 	br	18012a84 <__alt_data_end+0xf8012a84>
18012f20:	2984b03a 	or	r2,r5,r6
18012f24:	10004226 	beq	r2,zero,18013030 <__subdf3+0x82c>
18012f28:	1808d0fa 	srli	r4,r3,3
18012f2c:	8822d0fa 	srli	r17,r17,3
18012f30:	1806977a 	slli	r3,r3,29
18012f34:	2080022c 	andhi	r2,r4,8
18012f38:	1c62b03a 	or	r17,r3,r17
18012f3c:	10000826 	beq	r2,zero,18012f60 <__subdf3+0x75c>
18012f40:	2812d0fa 	srli	r9,r5,3
18012f44:	4880022c 	andhi	r2,r9,8
18012f48:	1000051e 	bne	r2,zero,18012f60 <__subdf3+0x75c>
18012f4c:	300cd0fa 	srli	r6,r6,3
18012f50:	2804977a 	slli	r2,r5,29
18012f54:	4809883a 	mov	r4,r9
18012f58:	3825883a 	mov	r18,r7
18012f5c:	11a2b03a 	or	r17,r2,r6
18012f60:	8806d77a 	srli	r3,r17,29
18012f64:	200890fa 	slli	r4,r4,3
18012f68:	882290fa 	slli	r17,r17,3
18012f6c:	0401ffc4 	movi	r16,2047
18012f70:	1906b03a 	or	r3,r3,r4
18012f74:	003e4406 	br	18012888 <__alt_data_end+0xf8012888>
18012f78:	2984b03a 	or	r2,r5,r6
18012f7c:	103e4226 	beq	r2,zero,18012888 <__alt_data_end+0xf8012888>
18012f80:	8989c83a 	sub	r4,r17,r6
18012f84:	8911803a 	cmpltu	r8,r17,r4
18012f88:	1945c83a 	sub	r2,r3,r5
18012f8c:	1205c83a 	sub	r2,r2,r8
18012f90:	1200202c 	andhi	r8,r2,128
18012f94:	403e9a26 	beq	r8,zero,18012a00 <__alt_data_end+0xf8012a00>
18012f98:	3463c83a 	sub	r17,r6,r17
18012f9c:	28c5c83a 	sub	r2,r5,r3
18012fa0:	344d803a 	cmpltu	r6,r6,r17
18012fa4:	1187c83a 	sub	r3,r2,r6
18012fa8:	3825883a 	mov	r18,r7
18012fac:	003e3606 	br	18012888 <__alt_data_end+0xf8012888>
18012fb0:	0101ffc4 	movi	r4,2047
18012fb4:	493fc71e 	bne	r9,r4,18012ed4 <__alt_data_end+0xf8012ed4>
18012fb8:	2807883a 	mov	r3,r5
18012fbc:	3023883a 	mov	r17,r6
18012fc0:	4821883a 	mov	r16,r9
18012fc4:	003e3006 	br	18012888 <__alt_data_end+0xf8012888>
18012fc8:	10003626 	beq	r2,zero,180130a4 <__subdf3+0x8a0>
18012fcc:	2984b03a 	or	r2,r5,r6
18012fd0:	10001726 	beq	r2,zero,18013030 <__subdf3+0x82c>
18012fd4:	1808d0fa 	srli	r4,r3,3
18012fd8:	8822d0fa 	srli	r17,r17,3
18012fdc:	1806977a 	slli	r3,r3,29
18012fe0:	2080022c 	andhi	r2,r4,8
18012fe4:	1c62b03a 	or	r17,r3,r17
18012fe8:	10000726 	beq	r2,zero,18013008 <__subdf3+0x804>
18012fec:	2812d0fa 	srli	r9,r5,3
18012ff0:	4880022c 	andhi	r2,r9,8
18012ff4:	1000041e 	bne	r2,zero,18013008 <__subdf3+0x804>
18012ff8:	300cd0fa 	srli	r6,r6,3
18012ffc:	2804977a 	slli	r2,r5,29
18013000:	4809883a 	mov	r4,r9
18013004:	11a2b03a 	or	r17,r2,r6
18013008:	8806d77a 	srli	r3,r17,29
1801300c:	200890fa 	slli	r4,r4,3
18013010:	882290fa 	slli	r17,r17,3
18013014:	3825883a 	mov	r18,r7
18013018:	1906b03a 	or	r3,r3,r4
1801301c:	0401ffc4 	movi	r16,2047
18013020:	003e1906 	br	18012888 <__alt_data_end+0xf8012888>
18013024:	000b883a 	mov	r5,zero
18013028:	0005883a 	mov	r2,zero
1801302c:	003e2e06 	br	180128e8 <__alt_data_end+0xf80128e8>
18013030:	0401ffc4 	movi	r16,2047
18013034:	003e1406 	br	18012888 <__alt_data_end+0xf8012888>
18013038:	0005883a 	mov	r2,zero
1801303c:	003f7506 	br	18012e14 <__alt_data_end+0xf8012e14>
18013040:	0005883a 	mov	r2,zero
18013044:	0009883a 	mov	r4,zero
18013048:	003e7806 	br	18012a2c <__alt_data_end+0xf8012a2c>
1801304c:	123ff804 	addi	r8,r2,-32
18013050:	01000804 	movi	r4,32
18013054:	1a10d83a 	srl	r8,r3,r8
18013058:	11002526 	beq	r2,r4,180130f0 <__subdf3+0x8ec>
1801305c:	01001004 	movi	r4,64
18013060:	2085c83a 	sub	r2,r4,r2
18013064:	1884983a 	sll	r2,r3,r2
18013068:	1444b03a 	or	r2,r2,r17
1801306c:	1004c03a 	cmpne	r2,r2,zero
18013070:	40a2b03a 	or	r17,r8,r2
18013074:	0005883a 	mov	r2,zero
18013078:	003f1606 	br	18012cd4 <__alt_data_end+0xf8012cd4>
1801307c:	02000434 	movhi	r8,16
18013080:	0009883a 	mov	r4,zero
18013084:	423fffc4 	addi	r8,r8,-1
18013088:	00bfffc4 	movi	r2,-1
1801308c:	0401ffc4 	movi	r16,2047
18013090:	003e6606 	br	18012a2c <__alt_data_end+0xf8012a2c>
18013094:	1c62b03a 	or	r17,r3,r17
18013098:	8822c03a 	cmpne	r17,r17,zero
1801309c:	0005883a 	mov	r2,zero
180130a0:	003f9906 	br	18012f08 <__alt_data_end+0xf8012f08>
180130a4:	2807883a 	mov	r3,r5
180130a8:	3023883a 	mov	r17,r6
180130ac:	0401ffc4 	movi	r16,2047
180130b0:	003df506 	br	18012888 <__alt_data_end+0xf8012888>
180130b4:	2807883a 	mov	r3,r5
180130b8:	3023883a 	mov	r17,r6
180130bc:	003df206 	br	18012888 <__alt_data_end+0xf8012888>
180130c0:	123ff804 	addi	r8,r2,-32
180130c4:	01000804 	movi	r4,32
180130c8:	1a10d83a 	srl	r8,r3,r8
180130cc:	11000a26 	beq	r2,r4,180130f8 <__subdf3+0x8f4>
180130d0:	01001004 	movi	r4,64
180130d4:	2085c83a 	sub	r2,r4,r2
180130d8:	1884983a 	sll	r2,r3,r2
180130dc:	1444b03a 	or	r2,r2,r17
180130e0:	1004c03a 	cmpne	r2,r2,zero
180130e4:	40a2b03a 	or	r17,r8,r2
180130e8:	0005883a 	mov	r2,zero
180130ec:	003f8606 	br	18012f08 <__alt_data_end+0xf8012f08>
180130f0:	0005883a 	mov	r2,zero
180130f4:	003fdc06 	br	18013068 <__alt_data_end+0xf8013068>
180130f8:	0005883a 	mov	r2,zero
180130fc:	003ff706 	br	180130dc <__alt_data_end+0xf80130dc>

18013100 <__fixdfsi>:
18013100:	280cd53a 	srli	r6,r5,20
18013104:	00c00434 	movhi	r3,16
18013108:	18ffffc4 	addi	r3,r3,-1
1801310c:	3181ffcc 	andi	r6,r6,2047
18013110:	01c0ff84 	movi	r7,1022
18013114:	28c6703a 	and	r3,r5,r3
18013118:	280ad7fa 	srli	r5,r5,31
1801311c:	3980120e 	bge	r7,r6,18013168 <__fixdfsi+0x68>
18013120:	00810744 	movi	r2,1053
18013124:	11800c16 	blt	r2,r6,18013158 <__fixdfsi+0x58>
18013128:	00810cc4 	movi	r2,1075
1801312c:	1185c83a 	sub	r2,r2,r6
18013130:	01c007c4 	movi	r7,31
18013134:	18c00434 	orhi	r3,r3,16
18013138:	38800d16 	blt	r7,r2,18013170 <__fixdfsi+0x70>
1801313c:	31befb44 	addi	r6,r6,-1043
18013140:	2084d83a 	srl	r2,r4,r2
18013144:	1986983a 	sll	r3,r3,r6
18013148:	1884b03a 	or	r2,r3,r2
1801314c:	28000726 	beq	r5,zero,1801316c <__fixdfsi+0x6c>
18013150:	0085c83a 	sub	r2,zero,r2
18013154:	f800283a 	ret
18013158:	00a00034 	movhi	r2,32768
1801315c:	10bfffc4 	addi	r2,r2,-1
18013160:	2885883a 	add	r2,r5,r2
18013164:	f800283a 	ret
18013168:	0005883a 	mov	r2,zero
1801316c:	f800283a 	ret
18013170:	008104c4 	movi	r2,1043
18013174:	1185c83a 	sub	r2,r2,r6
18013178:	1884d83a 	srl	r2,r3,r2
1801317c:	003ff306 	br	1801314c <__alt_data_end+0xf801314c>

18013180 <__floatsidf>:
18013180:	defffd04 	addi	sp,sp,-12
18013184:	dfc00215 	stw	ra,8(sp)
18013188:	dc400115 	stw	r17,4(sp)
1801318c:	dc000015 	stw	r16,0(sp)
18013190:	20002b26 	beq	r4,zero,18013240 <__floatsidf+0xc0>
18013194:	2023883a 	mov	r17,r4
18013198:	2020d7fa 	srli	r16,r4,31
1801319c:	20002d16 	blt	r4,zero,18013254 <__floatsidf+0xd4>
180131a0:	8809883a 	mov	r4,r17
180131a4:	80133040 	call	18013304 <__clzsi2>
180131a8:	01410784 	movi	r5,1054
180131ac:	288bc83a 	sub	r5,r5,r2
180131b0:	01010cc4 	movi	r4,1075
180131b4:	2149c83a 	sub	r4,r4,r5
180131b8:	00c007c4 	movi	r3,31
180131bc:	1900160e 	bge	r3,r4,18013218 <__floatsidf+0x98>
180131c0:	00c104c4 	movi	r3,1043
180131c4:	1947c83a 	sub	r3,r3,r5
180131c8:	88c6983a 	sll	r3,r17,r3
180131cc:	00800434 	movhi	r2,16
180131d0:	10bfffc4 	addi	r2,r2,-1
180131d4:	1886703a 	and	r3,r3,r2
180131d8:	2941ffcc 	andi	r5,r5,2047
180131dc:	800d883a 	mov	r6,r16
180131e0:	0005883a 	mov	r2,zero
180131e4:	280a953a 	slli	r5,r5,20
180131e8:	31803fcc 	andi	r6,r6,255
180131ec:	01000434 	movhi	r4,16
180131f0:	300c97fa 	slli	r6,r6,31
180131f4:	213fffc4 	addi	r4,r4,-1
180131f8:	1906703a 	and	r3,r3,r4
180131fc:	1946b03a 	or	r3,r3,r5
18013200:	1986b03a 	or	r3,r3,r6
18013204:	dfc00217 	ldw	ra,8(sp)
18013208:	dc400117 	ldw	r17,4(sp)
1801320c:	dc000017 	ldw	r16,0(sp)
18013210:	dec00304 	addi	sp,sp,12
18013214:	f800283a 	ret
18013218:	00c002c4 	movi	r3,11
1801321c:	1887c83a 	sub	r3,r3,r2
18013220:	88c6d83a 	srl	r3,r17,r3
18013224:	8904983a 	sll	r2,r17,r4
18013228:	01000434 	movhi	r4,16
1801322c:	213fffc4 	addi	r4,r4,-1
18013230:	2941ffcc 	andi	r5,r5,2047
18013234:	1906703a 	and	r3,r3,r4
18013238:	800d883a 	mov	r6,r16
1801323c:	003fe906 	br	180131e4 <__alt_data_end+0xf80131e4>
18013240:	000d883a 	mov	r6,zero
18013244:	000b883a 	mov	r5,zero
18013248:	0007883a 	mov	r3,zero
1801324c:	0005883a 	mov	r2,zero
18013250:	003fe406 	br	180131e4 <__alt_data_end+0xf80131e4>
18013254:	0123c83a 	sub	r17,zero,r4
18013258:	003fd106 	br	180131a0 <__alt_data_end+0xf80131a0>

1801325c <__floatunsidf>:
1801325c:	defffe04 	addi	sp,sp,-8
18013260:	dc000015 	stw	r16,0(sp)
18013264:	dfc00115 	stw	ra,4(sp)
18013268:	2021883a 	mov	r16,r4
1801326c:	20002226 	beq	r4,zero,180132f8 <__floatunsidf+0x9c>
18013270:	80133040 	call	18013304 <__clzsi2>
18013274:	01010784 	movi	r4,1054
18013278:	2089c83a 	sub	r4,r4,r2
1801327c:	01810cc4 	movi	r6,1075
18013280:	310dc83a 	sub	r6,r6,r4
18013284:	00c007c4 	movi	r3,31
18013288:	1980120e 	bge	r3,r6,180132d4 <__floatunsidf+0x78>
1801328c:	00c104c4 	movi	r3,1043
18013290:	1907c83a 	sub	r3,r3,r4
18013294:	80ca983a 	sll	r5,r16,r3
18013298:	00800434 	movhi	r2,16
1801329c:	10bfffc4 	addi	r2,r2,-1
180132a0:	2101ffcc 	andi	r4,r4,2047
180132a4:	0021883a 	mov	r16,zero
180132a8:	288a703a 	and	r5,r5,r2
180132ac:	2008953a 	slli	r4,r4,20
180132b0:	00c00434 	movhi	r3,16
180132b4:	18ffffc4 	addi	r3,r3,-1
180132b8:	28c6703a 	and	r3,r5,r3
180132bc:	8005883a 	mov	r2,r16
180132c0:	1906b03a 	or	r3,r3,r4
180132c4:	dfc00117 	ldw	ra,4(sp)
180132c8:	dc000017 	ldw	r16,0(sp)
180132cc:	dec00204 	addi	sp,sp,8
180132d0:	f800283a 	ret
180132d4:	00c002c4 	movi	r3,11
180132d8:	188bc83a 	sub	r5,r3,r2
180132dc:	814ad83a 	srl	r5,r16,r5
180132e0:	00c00434 	movhi	r3,16
180132e4:	18ffffc4 	addi	r3,r3,-1
180132e8:	81a0983a 	sll	r16,r16,r6
180132ec:	2101ffcc 	andi	r4,r4,2047
180132f0:	28ca703a 	and	r5,r5,r3
180132f4:	003fed06 	br	180132ac <__alt_data_end+0xf80132ac>
180132f8:	0009883a 	mov	r4,zero
180132fc:	000b883a 	mov	r5,zero
18013300:	003fea06 	br	180132ac <__alt_data_end+0xf80132ac>

18013304 <__clzsi2>:
18013304:	00bfffd4 	movui	r2,65535
18013308:	11000536 	bltu	r2,r4,18013320 <__clzsi2+0x1c>
1801330c:	00803fc4 	movi	r2,255
18013310:	11000f36 	bltu	r2,r4,18013350 <__clzsi2+0x4c>
18013314:	00800804 	movi	r2,32
18013318:	0007883a 	mov	r3,zero
1801331c:	00000506 	br	18013334 <__clzsi2+0x30>
18013320:	00804034 	movhi	r2,256
18013324:	10bfffc4 	addi	r2,r2,-1
18013328:	11000c2e 	bgeu	r2,r4,1801335c <__clzsi2+0x58>
1801332c:	00800204 	movi	r2,8
18013330:	00c00604 	movi	r3,24
18013334:	20c8d83a 	srl	r4,r4,r3
18013338:	00c60074 	movhi	r3,6145
1801333c:	18d96c04 	addi	r3,r3,26032
18013340:	1909883a 	add	r4,r3,r4
18013344:	20c00003 	ldbu	r3,0(r4)
18013348:	10c5c83a 	sub	r2,r2,r3
1801334c:	f800283a 	ret
18013350:	00800604 	movi	r2,24
18013354:	00c00204 	movi	r3,8
18013358:	003ff606 	br	18013334 <__alt_data_end+0xf8013334>
1801335c:	00800404 	movi	r2,16
18013360:	1007883a 	mov	r3,r2
18013364:	003ff306 	br	18013334 <__alt_data_end+0xf8013334>

18013368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
18013368:	defffe04 	addi	sp,sp,-8
1801336c:	dfc00115 	stw	ra,4(sp)
18013370:	df000015 	stw	fp,0(sp)
18013374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
18013378:	d0a00d17 	ldw	r2,-32716(gp)
1801337c:	10000326 	beq	r2,zero,1801338c <alt_get_errno+0x24>
18013380:	d0a00d17 	ldw	r2,-32716(gp)
18013384:	103ee83a 	callr	r2
18013388:	00000106 	br	18013390 <alt_get_errno+0x28>
1801338c:	d0a78e04 	addi	r2,gp,-25032
}
18013390:	e037883a 	mov	sp,fp
18013394:	dfc00117 	ldw	ra,4(sp)
18013398:	df000017 	ldw	fp,0(sp)
1801339c:	dec00204 	addi	sp,sp,8
180133a0:	f800283a 	ret

180133a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
180133a4:	defffb04 	addi	sp,sp,-20
180133a8:	dfc00415 	stw	ra,16(sp)
180133ac:	df000315 	stw	fp,12(sp)
180133b0:	df000304 	addi	fp,sp,12
180133b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
180133b8:	e0bfff17 	ldw	r2,-4(fp)
180133bc:	10000816 	blt	r2,zero,180133e0 <close+0x3c>
180133c0:	01400304 	movi	r5,12
180133c4:	e13fff17 	ldw	r4,-4(fp)
180133c8:	8002b640 	call	18002b64 <__mulsi3>
180133cc:	1007883a 	mov	r3,r2
180133d0:	00860074 	movhi	r2,6145
180133d4:	109ca404 	addi	r2,r2,29328
180133d8:	1885883a 	add	r2,r3,r2
180133dc:	00000106 	br	180133e4 <close+0x40>
180133e0:	0005883a 	mov	r2,zero
180133e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
180133e8:	e0bffd17 	ldw	r2,-12(fp)
180133ec:	10001926 	beq	r2,zero,18013454 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
180133f0:	e0bffd17 	ldw	r2,-12(fp)
180133f4:	10800017 	ldw	r2,0(r2)
180133f8:	10800417 	ldw	r2,16(r2)
180133fc:	10000626 	beq	r2,zero,18013418 <close+0x74>
18013400:	e0bffd17 	ldw	r2,-12(fp)
18013404:	10800017 	ldw	r2,0(r2)
18013408:	10800417 	ldw	r2,16(r2)
1801340c:	e13ffd17 	ldw	r4,-12(fp)
18013410:	103ee83a 	callr	r2
18013414:	00000106 	br	1801341c <close+0x78>
18013418:	0005883a 	mov	r2,zero
1801341c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
18013420:	e13fff17 	ldw	r4,-4(fp)
18013424:	8013a8c0 	call	18013a8c <alt_release_fd>
    if (rval < 0)
18013428:	e0bffe17 	ldw	r2,-8(fp)
1801342c:	1000070e 	bge	r2,zero,1801344c <close+0xa8>
    {
      ALT_ERRNO = -rval;
18013430:	80133680 	call	18013368 <alt_get_errno>
18013434:	1007883a 	mov	r3,r2
18013438:	e0bffe17 	ldw	r2,-8(fp)
1801343c:	0085c83a 	sub	r2,zero,r2
18013440:	18800015 	stw	r2,0(r3)
      return -1;
18013444:	00bfffc4 	movi	r2,-1
18013448:	00000706 	br	18013468 <close+0xc4>
    }
    return 0;
1801344c:	0005883a 	mov	r2,zero
18013450:	00000506 	br	18013468 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
18013454:	80133680 	call	18013368 <alt_get_errno>
18013458:	1007883a 	mov	r3,r2
1801345c:	00801444 	movi	r2,81
18013460:	18800015 	stw	r2,0(r3)
    return -1;
18013464:	00bfffc4 	movi	r2,-1
  }
}
18013468:	e037883a 	mov	sp,fp
1801346c:	dfc00117 	ldw	ra,4(sp)
18013470:	df000017 	ldw	fp,0(sp)
18013474:	dec00204 	addi	sp,sp,8
18013478:	f800283a 	ret

1801347c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1801347c:	defffc04 	addi	sp,sp,-16
18013480:	df000315 	stw	fp,12(sp)
18013484:	df000304 	addi	fp,sp,12
18013488:	e13ffd15 	stw	r4,-12(fp)
1801348c:	e17ffe15 	stw	r5,-8(fp)
18013490:	e1bfff15 	stw	r6,-4(fp)
  return len;
18013494:	e0bfff17 	ldw	r2,-4(fp)
}
18013498:	e037883a 	mov	sp,fp
1801349c:	df000017 	ldw	fp,0(sp)
180134a0:	dec00104 	addi	sp,sp,4
180134a4:	f800283a 	ret

180134a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
180134a8:	defffe04 	addi	sp,sp,-8
180134ac:	dfc00115 	stw	ra,4(sp)
180134b0:	df000015 	stw	fp,0(sp)
180134b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
180134b8:	d0a00d17 	ldw	r2,-32716(gp)
180134bc:	10000326 	beq	r2,zero,180134cc <alt_get_errno+0x24>
180134c0:	d0a00d17 	ldw	r2,-32716(gp)
180134c4:	103ee83a 	callr	r2
180134c8:	00000106 	br	180134d0 <alt_get_errno+0x28>
180134cc:	d0a78e04 	addi	r2,gp,-25032
}
180134d0:	e037883a 	mov	sp,fp
180134d4:	dfc00117 	ldw	ra,4(sp)
180134d8:	df000017 	ldw	fp,0(sp)
180134dc:	dec00204 	addi	sp,sp,8
180134e0:	f800283a 	ret

180134e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
180134e4:	defffb04 	addi	sp,sp,-20
180134e8:	dfc00415 	stw	ra,16(sp)
180134ec:	df000315 	stw	fp,12(sp)
180134f0:	df000304 	addi	fp,sp,12
180134f4:	e13ffe15 	stw	r4,-8(fp)
180134f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
180134fc:	e0bffe17 	ldw	r2,-8(fp)
18013500:	10000816 	blt	r2,zero,18013524 <fstat+0x40>
18013504:	01400304 	movi	r5,12
18013508:	e13ffe17 	ldw	r4,-8(fp)
1801350c:	8002b640 	call	18002b64 <__mulsi3>
18013510:	1007883a 	mov	r3,r2
18013514:	00860074 	movhi	r2,6145
18013518:	109ca404 	addi	r2,r2,29328
1801351c:	1885883a 	add	r2,r3,r2
18013520:	00000106 	br	18013528 <fstat+0x44>
18013524:	0005883a 	mov	r2,zero
18013528:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1801352c:	e0bffd17 	ldw	r2,-12(fp)
18013530:	10001026 	beq	r2,zero,18013574 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
18013534:	e0bffd17 	ldw	r2,-12(fp)
18013538:	10800017 	ldw	r2,0(r2)
1801353c:	10800817 	ldw	r2,32(r2)
18013540:	10000726 	beq	r2,zero,18013560 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
18013544:	e0bffd17 	ldw	r2,-12(fp)
18013548:	10800017 	ldw	r2,0(r2)
1801354c:	10800817 	ldw	r2,32(r2)
18013550:	e17fff17 	ldw	r5,-4(fp)
18013554:	e13ffd17 	ldw	r4,-12(fp)
18013558:	103ee83a 	callr	r2
1801355c:	00000a06 	br	18013588 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
18013560:	e0bfff17 	ldw	r2,-4(fp)
18013564:	00c80004 	movi	r3,8192
18013568:	10c00115 	stw	r3,4(r2)
      return 0;
1801356c:	0005883a 	mov	r2,zero
18013570:	00000506 	br	18013588 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
18013574:	80134a80 	call	180134a8 <alt_get_errno>
18013578:	1007883a 	mov	r3,r2
1801357c:	00801444 	movi	r2,81
18013580:	18800015 	stw	r2,0(r3)
    return -1;
18013584:	00bfffc4 	movi	r2,-1
  }
}
18013588:	e037883a 	mov	sp,fp
1801358c:	dfc00117 	ldw	ra,4(sp)
18013590:	df000017 	ldw	fp,0(sp)
18013594:	dec00204 	addi	sp,sp,8
18013598:	f800283a 	ret

1801359c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1801359c:	defffe04 	addi	sp,sp,-8
180135a0:	dfc00115 	stw	ra,4(sp)
180135a4:	df000015 	stw	fp,0(sp)
180135a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
180135ac:	d0a00d17 	ldw	r2,-32716(gp)
180135b0:	10000326 	beq	r2,zero,180135c0 <alt_get_errno+0x24>
180135b4:	d0a00d17 	ldw	r2,-32716(gp)
180135b8:	103ee83a 	callr	r2
180135bc:	00000106 	br	180135c4 <alt_get_errno+0x28>
180135c0:	d0a78e04 	addi	r2,gp,-25032
}
180135c4:	e037883a 	mov	sp,fp
180135c8:	dfc00117 	ldw	ra,4(sp)
180135cc:	df000017 	ldw	fp,0(sp)
180135d0:	dec00204 	addi	sp,sp,8
180135d4:	f800283a 	ret

180135d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
180135d8:	deffed04 	addi	sp,sp,-76
180135dc:	dfc01215 	stw	ra,72(sp)
180135e0:	df001115 	stw	fp,68(sp)
180135e4:	df001104 	addi	fp,sp,68
180135e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
180135ec:	e0bfff17 	ldw	r2,-4(fp)
180135f0:	10000816 	blt	r2,zero,18013614 <isatty+0x3c>
180135f4:	01400304 	movi	r5,12
180135f8:	e13fff17 	ldw	r4,-4(fp)
180135fc:	8002b640 	call	18002b64 <__mulsi3>
18013600:	1007883a 	mov	r3,r2
18013604:	00860074 	movhi	r2,6145
18013608:	109ca404 	addi	r2,r2,29328
1801360c:	1885883a 	add	r2,r3,r2
18013610:	00000106 	br	18013618 <isatty+0x40>
18013614:	0005883a 	mov	r2,zero
18013618:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1801361c:	e0bfef17 	ldw	r2,-68(fp)
18013620:	10000e26 	beq	r2,zero,1801365c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
18013624:	e0bfef17 	ldw	r2,-68(fp)
18013628:	10800017 	ldw	r2,0(r2)
1801362c:	10800817 	ldw	r2,32(r2)
18013630:	1000021e 	bne	r2,zero,1801363c <isatty+0x64>
    {
      return 1;
18013634:	00800044 	movi	r2,1
18013638:	00000d06 	br	18013670 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1801363c:	e0bff004 	addi	r2,fp,-64
18013640:	100b883a 	mov	r5,r2
18013644:	e13fff17 	ldw	r4,-4(fp)
18013648:	80134e40 	call	180134e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1801364c:	e0bff117 	ldw	r2,-60(fp)
18013650:	10880020 	cmpeqi	r2,r2,8192
18013654:	10803fcc 	andi	r2,r2,255
18013658:	00000506 	br	18013670 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1801365c:	801359c0 	call	1801359c <alt_get_errno>
18013660:	1007883a 	mov	r3,r2
18013664:	00801444 	movi	r2,81
18013668:	18800015 	stw	r2,0(r3)
    return 0;
1801366c:	0005883a 	mov	r2,zero
  }
}
18013670:	e037883a 	mov	sp,fp
18013674:	dfc00117 	ldw	ra,4(sp)
18013678:	df000017 	ldw	fp,0(sp)
1801367c:	dec00204 	addi	sp,sp,8
18013680:	f800283a 	ret

18013684 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
18013684:	defffc04 	addi	sp,sp,-16
18013688:	df000315 	stw	fp,12(sp)
1801368c:	df000304 	addi	fp,sp,12
18013690:	e13ffd15 	stw	r4,-12(fp)
18013694:	e17ffe15 	stw	r5,-8(fp)
18013698:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1801369c:	e0fffe17 	ldw	r3,-8(fp)
180136a0:	e0bffd17 	ldw	r2,-12(fp)
180136a4:	18800c26 	beq	r3,r2,180136d8 <alt_load_section+0x54>
  {
    while( to != end )
180136a8:	00000806 	br	180136cc <alt_load_section+0x48>
    {
      *to++ = *from++;
180136ac:	e0bffe17 	ldw	r2,-8(fp)
180136b0:	10c00104 	addi	r3,r2,4
180136b4:	e0fffe15 	stw	r3,-8(fp)
180136b8:	e0fffd17 	ldw	r3,-12(fp)
180136bc:	19000104 	addi	r4,r3,4
180136c0:	e13ffd15 	stw	r4,-12(fp)
180136c4:	18c00017 	ldw	r3,0(r3)
180136c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
180136cc:	e0fffe17 	ldw	r3,-8(fp)
180136d0:	e0bfff17 	ldw	r2,-4(fp)
180136d4:	18bff51e 	bne	r3,r2,180136ac <__alt_data_end+0xf80136ac>
    {
      *to++ = *from++;
    }
  }
}
180136d8:	0001883a 	nop
180136dc:	e037883a 	mov	sp,fp
180136e0:	df000017 	ldw	fp,0(sp)
180136e4:	dec00104 	addi	sp,sp,4
180136e8:	f800283a 	ret

180136ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
180136ec:	defffe04 	addi	sp,sp,-8
180136f0:	dfc00115 	stw	ra,4(sp)
180136f4:	df000015 	stw	fp,0(sp)
180136f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
180136fc:	018600b4 	movhi	r6,6146
18013700:	31a12e04 	addi	r6,r6,-31560
18013704:	01460074 	movhi	r5,6145
18013708:	2959b904 	addi	r5,r5,26340
1801370c:	010600b4 	movhi	r4,6146
18013710:	21212e04 	addi	r4,r4,-31560
18013714:	80136840 	call	18013684 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
18013718:	01860034 	movhi	r6,6144
1801371c:	31808c04 	addi	r6,r6,560
18013720:	01460034 	movhi	r5,6144
18013724:	29400804 	addi	r5,r5,32
18013728:	01060034 	movhi	r4,6144
1801372c:	21000804 	addi	r4,r4,32
18013730:	80136840 	call	18013684 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
18013734:	01860074 	movhi	r6,6145
18013738:	3199b904 	addi	r6,r6,26340
1801373c:	01460074 	movhi	r5,6145
18013740:	2956e204 	addi	r5,r5,23432
18013744:	01060074 	movhi	r4,6145
18013748:	2116e204 	addi	r4,r4,23432
1801374c:	80136840 	call	18013684 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
18013750:	8014ad00 	call	18014ad0 <alt_dcache_flush_all>
  alt_icache_flush_all();
18013754:	8014c900 	call	18014c90 <alt_icache_flush_all>
}
18013758:	0001883a 	nop
1801375c:	e037883a 	mov	sp,fp
18013760:	dfc00117 	ldw	ra,4(sp)
18013764:	df000017 	ldw	fp,0(sp)
18013768:	dec00204 	addi	sp,sp,8
1801376c:	f800283a 	ret

18013770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
18013770:	defffe04 	addi	sp,sp,-8
18013774:	dfc00115 	stw	ra,4(sp)
18013778:	df000015 	stw	fp,0(sp)
1801377c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
18013780:	d0a00d17 	ldw	r2,-32716(gp)
18013784:	10000326 	beq	r2,zero,18013794 <alt_get_errno+0x24>
18013788:	d0a00d17 	ldw	r2,-32716(gp)
1801378c:	103ee83a 	callr	r2
18013790:	00000106 	br	18013798 <alt_get_errno+0x28>
18013794:	d0a78e04 	addi	r2,gp,-25032
}
18013798:	e037883a 	mov	sp,fp
1801379c:	dfc00117 	ldw	ra,4(sp)
180137a0:	df000017 	ldw	fp,0(sp)
180137a4:	dec00204 	addi	sp,sp,8
180137a8:	f800283a 	ret

180137ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
180137ac:	defff904 	addi	sp,sp,-28
180137b0:	dfc00615 	stw	ra,24(sp)
180137b4:	df000515 	stw	fp,20(sp)
180137b8:	df000504 	addi	fp,sp,20
180137bc:	e13ffd15 	stw	r4,-12(fp)
180137c0:	e17ffe15 	stw	r5,-8(fp)
180137c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
180137c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
180137cc:	e0bffd17 	ldw	r2,-12(fp)
180137d0:	10000816 	blt	r2,zero,180137f4 <lseek+0x48>
180137d4:	01400304 	movi	r5,12
180137d8:	e13ffd17 	ldw	r4,-12(fp)
180137dc:	8002b640 	call	18002b64 <__mulsi3>
180137e0:	1007883a 	mov	r3,r2
180137e4:	00860074 	movhi	r2,6145
180137e8:	109ca404 	addi	r2,r2,29328
180137ec:	1885883a 	add	r2,r3,r2
180137f0:	00000106 	br	180137f8 <lseek+0x4c>
180137f4:	0005883a 	mov	r2,zero
180137f8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
180137fc:	e0bffc17 	ldw	r2,-16(fp)
18013800:	10001026 	beq	r2,zero,18013844 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
18013804:	e0bffc17 	ldw	r2,-16(fp)
18013808:	10800017 	ldw	r2,0(r2)
1801380c:	10800717 	ldw	r2,28(r2)
18013810:	10000926 	beq	r2,zero,18013838 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
18013814:	e0bffc17 	ldw	r2,-16(fp)
18013818:	10800017 	ldw	r2,0(r2)
1801381c:	10800717 	ldw	r2,28(r2)
18013820:	e1bfff17 	ldw	r6,-4(fp)
18013824:	e17ffe17 	ldw	r5,-8(fp)
18013828:	e13ffc17 	ldw	r4,-16(fp)
1801382c:	103ee83a 	callr	r2
18013830:	e0bffb15 	stw	r2,-20(fp)
18013834:	00000506 	br	1801384c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
18013838:	00bfde84 	movi	r2,-134
1801383c:	e0bffb15 	stw	r2,-20(fp)
18013840:	00000206 	br	1801384c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
18013844:	00bfebc4 	movi	r2,-81
18013848:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1801384c:	e0bffb17 	ldw	r2,-20(fp)
18013850:	1000070e 	bge	r2,zero,18013870 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
18013854:	80137700 	call	18013770 <alt_get_errno>
18013858:	1007883a 	mov	r3,r2
1801385c:	e0bffb17 	ldw	r2,-20(fp)
18013860:	0085c83a 	sub	r2,zero,r2
18013864:	18800015 	stw	r2,0(r3)
    rc = -1;
18013868:	00bfffc4 	movi	r2,-1
1801386c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
18013870:	e0bffb17 	ldw	r2,-20(fp)
}
18013874:	e037883a 	mov	sp,fp
18013878:	dfc00117 	ldw	ra,4(sp)
1801387c:	df000017 	ldw	fp,0(sp)
18013880:	dec00204 	addi	sp,sp,8
18013884:	f800283a 	ret

18013888 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
18013888:	defffd04 	addi	sp,sp,-12
1801388c:	dfc00215 	stw	ra,8(sp)
18013890:	df000115 	stw	fp,4(sp)
18013894:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
18013898:	0009883a 	mov	r4,zero
1801389c:	8013d600 	call	18013d60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
180138a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
180138a4:	8013d980 	call	18013d98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
180138a8:	01860074 	movhi	r6,6145
180138ac:	3199af04 	addi	r6,r6,26300
180138b0:	01460074 	movhi	r5,6145
180138b4:	2959af04 	addi	r5,r5,26300
180138b8:	01060074 	movhi	r4,6145
180138bc:	2119af04 	addi	r4,r4,26300
180138c0:	80150340 	call	18015034 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
180138c4:	8014bd00 	call	18014bd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
180138c8:	01060074 	movhi	r4,6145
180138cc:	21130c04 	addi	r4,r4,19504
180138d0:	80157f40 	call	180157f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
180138d4:	d0a78f17 	ldw	r2,-25028(gp)
180138d8:	d0e79017 	ldw	r3,-25024(gp)
180138dc:	d1279117 	ldw	r4,-25020(gp)
180138e0:	200d883a 	mov	r6,r4
180138e4:	180b883a 	mov	r5,r3
180138e8:	1009883a 	mov	r4,r2
180138ec:	80003cc0 	call	180003cc <main>
180138f0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
180138f4:	01000044 	movi	r4,1
180138f8:	80133a40 	call	180133a4 <close>
  exit (result);
180138fc:	e13fff17 	ldw	r4,-4(fp)
18013900:	80158080 	call	18015808 <exit>

18013904 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
18013904:	defffe04 	addi	sp,sp,-8
18013908:	df000115 	stw	fp,4(sp)
1801390c:	df000104 	addi	fp,sp,4
18013910:	e13fff15 	stw	r4,-4(fp)
}
18013914:	0001883a 	nop
18013918:	e037883a 	mov	sp,fp
1801391c:	df000017 	ldw	fp,0(sp)
18013920:	dec00104 	addi	sp,sp,4
18013924:	f800283a 	ret

18013928 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
18013928:	defffe04 	addi	sp,sp,-8
1801392c:	df000115 	stw	fp,4(sp)
18013930:	df000104 	addi	fp,sp,4
18013934:	e13fff15 	stw	r4,-4(fp)
}
18013938:	0001883a 	nop
1801393c:	e037883a 	mov	sp,fp
18013940:	df000017 	ldw	fp,0(sp)
18013944:	dec00104 	addi	sp,sp,4
18013948:	f800283a 	ret

1801394c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1801394c:	defffe04 	addi	sp,sp,-8
18013950:	dfc00115 	stw	ra,4(sp)
18013954:	df000015 	stw	fp,0(sp)
18013958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1801395c:	d0a00d17 	ldw	r2,-32716(gp)
18013960:	10000326 	beq	r2,zero,18013970 <alt_get_errno+0x24>
18013964:	d0a00d17 	ldw	r2,-32716(gp)
18013968:	103ee83a 	callr	r2
1801396c:	00000106 	br	18013974 <alt_get_errno+0x28>
18013970:	d0a78e04 	addi	r2,gp,-25032
}
18013974:	e037883a 	mov	sp,fp
18013978:	dfc00117 	ldw	ra,4(sp)
1801397c:	df000017 	ldw	fp,0(sp)
18013980:	dec00204 	addi	sp,sp,8
18013984:	f800283a 	ret

18013988 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
18013988:	defff904 	addi	sp,sp,-28
1801398c:	dfc00615 	stw	ra,24(sp)
18013990:	df000515 	stw	fp,20(sp)
18013994:	df000504 	addi	fp,sp,20
18013998:	e13ffd15 	stw	r4,-12(fp)
1801399c:	e17ffe15 	stw	r5,-8(fp)
180139a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
180139a4:	e0bffd17 	ldw	r2,-12(fp)
180139a8:	10000816 	blt	r2,zero,180139cc <read+0x44>
180139ac:	01400304 	movi	r5,12
180139b0:	e13ffd17 	ldw	r4,-12(fp)
180139b4:	8002b640 	call	18002b64 <__mulsi3>
180139b8:	1007883a 	mov	r3,r2
180139bc:	00860074 	movhi	r2,6145
180139c0:	109ca404 	addi	r2,r2,29328
180139c4:	1885883a 	add	r2,r3,r2
180139c8:	00000106 	br	180139d0 <read+0x48>
180139cc:	0005883a 	mov	r2,zero
180139d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
180139d4:	e0bffb17 	ldw	r2,-20(fp)
180139d8:	10002226 	beq	r2,zero,18013a64 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
180139dc:	e0bffb17 	ldw	r2,-20(fp)
180139e0:	10800217 	ldw	r2,8(r2)
180139e4:	108000cc 	andi	r2,r2,3
180139e8:	10800060 	cmpeqi	r2,r2,1
180139ec:	1000181e 	bne	r2,zero,18013a50 <read+0xc8>
        (fd->dev->read))
180139f0:	e0bffb17 	ldw	r2,-20(fp)
180139f4:	10800017 	ldw	r2,0(r2)
180139f8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
180139fc:	10001426 	beq	r2,zero,18013a50 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
18013a00:	e0bffb17 	ldw	r2,-20(fp)
18013a04:	10800017 	ldw	r2,0(r2)
18013a08:	10800517 	ldw	r2,20(r2)
18013a0c:	e0ffff17 	ldw	r3,-4(fp)
18013a10:	180d883a 	mov	r6,r3
18013a14:	e17ffe17 	ldw	r5,-8(fp)
18013a18:	e13ffb17 	ldw	r4,-20(fp)
18013a1c:	103ee83a 	callr	r2
18013a20:	e0bffc15 	stw	r2,-16(fp)
18013a24:	e0bffc17 	ldw	r2,-16(fp)
18013a28:	1000070e 	bge	r2,zero,18013a48 <read+0xc0>
        {
          ALT_ERRNO = -rval;
18013a2c:	801394c0 	call	1801394c <alt_get_errno>
18013a30:	1007883a 	mov	r3,r2
18013a34:	e0bffc17 	ldw	r2,-16(fp)
18013a38:	0085c83a 	sub	r2,zero,r2
18013a3c:	18800015 	stw	r2,0(r3)
          return -1;
18013a40:	00bfffc4 	movi	r2,-1
18013a44:	00000c06 	br	18013a78 <read+0xf0>
        }
        return rval;
18013a48:	e0bffc17 	ldw	r2,-16(fp)
18013a4c:	00000a06 	br	18013a78 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
18013a50:	801394c0 	call	1801394c <alt_get_errno>
18013a54:	1007883a 	mov	r3,r2
18013a58:	00800344 	movi	r2,13
18013a5c:	18800015 	stw	r2,0(r3)
18013a60:	00000406 	br	18013a74 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
18013a64:	801394c0 	call	1801394c <alt_get_errno>
18013a68:	1007883a 	mov	r3,r2
18013a6c:	00801444 	movi	r2,81
18013a70:	18800015 	stw	r2,0(r3)
  }
  return -1;
18013a74:	00bfffc4 	movi	r2,-1
}
18013a78:	e037883a 	mov	sp,fp
18013a7c:	dfc00117 	ldw	ra,4(sp)
18013a80:	df000017 	ldw	fp,0(sp)
18013a84:	dec00204 	addi	sp,sp,8
18013a88:	f800283a 	ret

18013a8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
18013a8c:	defffc04 	addi	sp,sp,-16
18013a90:	dfc00315 	stw	ra,12(sp)
18013a94:	df000215 	stw	fp,8(sp)
18013a98:	dc000115 	stw	r16,4(sp)
18013a9c:	df000204 	addi	fp,sp,8
18013aa0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
18013aa4:	e0bffe17 	ldw	r2,-8(fp)
18013aa8:	108000d0 	cmplti	r2,r2,3
18013aac:	1000111e 	bne	r2,zero,18013af4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
18013ab0:	04060074 	movhi	r16,6145
18013ab4:	841ca404 	addi	r16,r16,29328
18013ab8:	e0bffe17 	ldw	r2,-8(fp)
18013abc:	01400304 	movi	r5,12
18013ac0:	1009883a 	mov	r4,r2
18013ac4:	8002b640 	call	18002b64 <__mulsi3>
18013ac8:	8085883a 	add	r2,r16,r2
18013acc:	10800204 	addi	r2,r2,8
18013ad0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
18013ad4:	04060074 	movhi	r16,6145
18013ad8:	841ca404 	addi	r16,r16,29328
18013adc:	e0bffe17 	ldw	r2,-8(fp)
18013ae0:	01400304 	movi	r5,12
18013ae4:	1009883a 	mov	r4,r2
18013ae8:	8002b640 	call	18002b64 <__mulsi3>
18013aec:	8085883a 	add	r2,r16,r2
18013af0:	10000015 	stw	zero,0(r2)
  }
}
18013af4:	0001883a 	nop
18013af8:	e6ffff04 	addi	sp,fp,-4
18013afc:	dfc00217 	ldw	ra,8(sp)
18013b00:	df000117 	ldw	fp,4(sp)
18013b04:	dc000017 	ldw	r16,0(sp)
18013b08:	dec00304 	addi	sp,sp,12
18013b0c:	f800283a 	ret

18013b10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
18013b10:	defff904 	addi	sp,sp,-28
18013b14:	df000615 	stw	fp,24(sp)
18013b18:	df000604 	addi	fp,sp,24
18013b1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18013b20:	0005303a 	rdctl	r2,status
18013b24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
18013b28:	e0fffe17 	ldw	r3,-8(fp)
18013b2c:	00bfff84 	movi	r2,-2
18013b30:	1884703a 	and	r2,r3,r2
18013b34:	1001703a 	wrctl	status,r2
  
  return context;
18013b38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
18013b3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
18013b40:	d0a00e17 	ldw	r2,-32712(gp)
18013b44:	10c000c4 	addi	r3,r2,3
18013b48:	00bfff04 	movi	r2,-4
18013b4c:	1884703a 	and	r2,r3,r2
18013b50:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
18013b54:	d0e00e17 	ldw	r3,-32712(gp)
18013b58:	e0bfff17 	ldw	r2,-4(fp)
18013b5c:	1887883a 	add	r3,r3,r2
18013b60:	00880034 	movhi	r2,8192
18013b64:	10800004 	addi	r2,r2,0
18013b68:	10c0062e 	bgeu	r2,r3,18013b84 <sbrk+0x74>
18013b6c:	e0bffb17 	ldw	r2,-20(fp)
18013b70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
18013b74:	e0bffa17 	ldw	r2,-24(fp)
18013b78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
18013b7c:	00bfffc4 	movi	r2,-1
18013b80:	00000b06 	br	18013bb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
18013b84:	d0a00e17 	ldw	r2,-32712(gp)
18013b88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
18013b8c:	d0e00e17 	ldw	r3,-32712(gp)
18013b90:	e0bfff17 	ldw	r2,-4(fp)
18013b94:	1885883a 	add	r2,r3,r2
18013b98:	d0a00e15 	stw	r2,-32712(gp)
18013b9c:	e0bffb17 	ldw	r2,-20(fp)
18013ba0:	e0bffc15 	stw	r2,-16(fp)
18013ba4:	e0bffc17 	ldw	r2,-16(fp)
18013ba8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
18013bac:	e0bffd17 	ldw	r2,-12(fp)
} 
18013bb0:	e037883a 	mov	sp,fp
18013bb4:	df000017 	ldw	fp,0(sp)
18013bb8:	dec00104 	addi	sp,sp,4
18013bbc:	f800283a 	ret

18013bc0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
18013bc0:	defffd04 	addi	sp,sp,-12
18013bc4:	dfc00215 	stw	ra,8(sp)
18013bc8:	df000115 	stw	fp,4(sp)
18013bcc:	df000104 	addi	fp,sp,4
18013bd0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
18013bd4:	e13fff17 	ldw	r4,-4(fp)
18013bd8:	80149780 	call	18014978 <alt_busy_sleep>
}
18013bdc:	e037883a 	mov	sp,fp
18013be0:	dfc00117 	ldw	ra,4(sp)
18013be4:	df000017 	ldw	fp,0(sp)
18013be8:	dec00204 	addi	sp,sp,8
18013bec:	f800283a 	ret

18013bf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
18013bf0:	defffe04 	addi	sp,sp,-8
18013bf4:	dfc00115 	stw	ra,4(sp)
18013bf8:	df000015 	stw	fp,0(sp)
18013bfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
18013c00:	d0a00d17 	ldw	r2,-32716(gp)
18013c04:	10000326 	beq	r2,zero,18013c14 <alt_get_errno+0x24>
18013c08:	d0a00d17 	ldw	r2,-32716(gp)
18013c0c:	103ee83a 	callr	r2
18013c10:	00000106 	br	18013c18 <alt_get_errno+0x28>
18013c14:	d0a78e04 	addi	r2,gp,-25032
}
18013c18:	e037883a 	mov	sp,fp
18013c1c:	dfc00117 	ldw	ra,4(sp)
18013c20:	df000017 	ldw	fp,0(sp)
18013c24:	dec00204 	addi	sp,sp,8
18013c28:	f800283a 	ret

18013c2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
18013c2c:	defff904 	addi	sp,sp,-28
18013c30:	dfc00615 	stw	ra,24(sp)
18013c34:	df000515 	stw	fp,20(sp)
18013c38:	df000504 	addi	fp,sp,20
18013c3c:	e13ffd15 	stw	r4,-12(fp)
18013c40:	e17ffe15 	stw	r5,-8(fp)
18013c44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
18013c48:	e0bffd17 	ldw	r2,-12(fp)
18013c4c:	10000816 	blt	r2,zero,18013c70 <write+0x44>
18013c50:	01400304 	movi	r5,12
18013c54:	e13ffd17 	ldw	r4,-12(fp)
18013c58:	8002b640 	call	18002b64 <__mulsi3>
18013c5c:	1007883a 	mov	r3,r2
18013c60:	00860074 	movhi	r2,6145
18013c64:	109ca404 	addi	r2,r2,29328
18013c68:	1885883a 	add	r2,r3,r2
18013c6c:	00000106 	br	18013c74 <write+0x48>
18013c70:	0005883a 	mov	r2,zero
18013c74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
18013c78:	e0bffb17 	ldw	r2,-20(fp)
18013c7c:	10002126 	beq	r2,zero,18013d04 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
18013c80:	e0bffb17 	ldw	r2,-20(fp)
18013c84:	10800217 	ldw	r2,8(r2)
18013c88:	108000cc 	andi	r2,r2,3
18013c8c:	10001826 	beq	r2,zero,18013cf0 <write+0xc4>
18013c90:	e0bffb17 	ldw	r2,-20(fp)
18013c94:	10800017 	ldw	r2,0(r2)
18013c98:	10800617 	ldw	r2,24(r2)
18013c9c:	10001426 	beq	r2,zero,18013cf0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
18013ca0:	e0bffb17 	ldw	r2,-20(fp)
18013ca4:	10800017 	ldw	r2,0(r2)
18013ca8:	10800617 	ldw	r2,24(r2)
18013cac:	e0ffff17 	ldw	r3,-4(fp)
18013cb0:	180d883a 	mov	r6,r3
18013cb4:	e17ffe17 	ldw	r5,-8(fp)
18013cb8:	e13ffb17 	ldw	r4,-20(fp)
18013cbc:	103ee83a 	callr	r2
18013cc0:	e0bffc15 	stw	r2,-16(fp)
18013cc4:	e0bffc17 	ldw	r2,-16(fp)
18013cc8:	1000070e 	bge	r2,zero,18013ce8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
18013ccc:	8013bf00 	call	18013bf0 <alt_get_errno>
18013cd0:	1007883a 	mov	r3,r2
18013cd4:	e0bffc17 	ldw	r2,-16(fp)
18013cd8:	0085c83a 	sub	r2,zero,r2
18013cdc:	18800015 	stw	r2,0(r3)
        return -1;
18013ce0:	00bfffc4 	movi	r2,-1
18013ce4:	00000c06 	br	18013d18 <write+0xec>
      }
      return rval;
18013ce8:	e0bffc17 	ldw	r2,-16(fp)
18013cec:	00000a06 	br	18013d18 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
18013cf0:	8013bf00 	call	18013bf0 <alt_get_errno>
18013cf4:	1007883a 	mov	r3,r2
18013cf8:	00800344 	movi	r2,13
18013cfc:	18800015 	stw	r2,0(r3)
18013d00:	00000406 	br	18013d14 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
18013d04:	8013bf00 	call	18013bf0 <alt_get_errno>
18013d08:	1007883a 	mov	r3,r2
18013d0c:	00801444 	movi	r2,81
18013d10:	18800015 	stw	r2,0(r3)
  }
  return -1;
18013d14:	00bfffc4 	movi	r2,-1
}
18013d18:	e037883a 	mov	sp,fp
18013d1c:	dfc00117 	ldw	ra,4(sp)
18013d20:	df000017 	ldw	fp,0(sp)
18013d24:	dec00204 	addi	sp,sp,8
18013d28:	f800283a 	ret

18013d2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
18013d2c:	defffd04 	addi	sp,sp,-12
18013d30:	dfc00215 	stw	ra,8(sp)
18013d34:	df000115 	stw	fp,4(sp)
18013d38:	df000104 	addi	fp,sp,4
18013d3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
18013d40:	d1600a04 	addi	r5,gp,-32728
18013d44:	e13fff17 	ldw	r4,-4(fp)
18013d48:	8014b2c0 	call	18014b2c <alt_dev_llist_insert>
}
18013d4c:	e037883a 	mov	sp,fp
18013d50:	dfc00117 	ldw	ra,4(sp)
18013d54:	df000017 	ldw	fp,0(sp)
18013d58:	dec00204 	addi	sp,sp,8
18013d5c:	f800283a 	ret

18013d60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
18013d60:	defffd04 	addi	sp,sp,-12
18013d64:	dfc00215 	stw	ra,8(sp)
18013d68:	df000115 	stw	fp,4(sp)
18013d6c:	df000104 	addi	fp,sp,4
18013d70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
18013d74:	80154d80 	call	180154d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
18013d78:	00800044 	movi	r2,1
18013d7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
18013d80:	0001883a 	nop
18013d84:	e037883a 	mov	sp,fp
18013d88:	dfc00117 	ldw	ra,4(sp)
18013d8c:	df000017 	ldw	fp,0(sp)
18013d90:	dec00204 	addi	sp,sp,8
18013d94:	f800283a 	ret

18013d98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
18013d98:	defffe04 	addi	sp,sp,-8
18013d9c:	dfc00115 	stw	ra,4(sp)
18013da0:	df000015 	stw	fp,0(sp)
18013da4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
18013da8:	01800144 	movi	r6,5
18013dac:	000b883a 	mov	r5,zero
18013db0:	01060074 	movhi	r4,6145
18013db4:	211d0e04 	addi	r4,r4,29752
18013db8:	8013f480 	call	18013f48 <altera_avalon_jtag_uart_init>
18013dbc:	01060074 	movhi	r4,6145
18013dc0:	211d0404 	addi	r4,r4,29712
18013dc4:	8013d2c0 	call	18013d2c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
18013dc8:	0001883a 	nop
}
18013dcc:	0001883a 	nop
18013dd0:	e037883a 	mov	sp,fp
18013dd4:	dfc00117 	ldw	ra,4(sp)
18013dd8:	df000017 	ldw	fp,0(sp)
18013ddc:	dec00204 	addi	sp,sp,8
18013de0:	f800283a 	ret

18013de4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
18013de4:	defffa04 	addi	sp,sp,-24
18013de8:	dfc00515 	stw	ra,20(sp)
18013dec:	df000415 	stw	fp,16(sp)
18013df0:	df000404 	addi	fp,sp,16
18013df4:	e13ffd15 	stw	r4,-12(fp)
18013df8:	e17ffe15 	stw	r5,-8(fp)
18013dfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
18013e00:	e0bffd17 	ldw	r2,-12(fp)
18013e04:	10800017 	ldw	r2,0(r2)
18013e08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
18013e0c:	e0bffc17 	ldw	r2,-16(fp)
18013e10:	10c00a04 	addi	r3,r2,40
18013e14:	e0bffd17 	ldw	r2,-12(fp)
18013e18:	10800217 	ldw	r2,8(r2)
18013e1c:	100f883a 	mov	r7,r2
18013e20:	e1bfff17 	ldw	r6,-4(fp)
18013e24:	e17ffe17 	ldw	r5,-8(fp)
18013e28:	1809883a 	mov	r4,r3
18013e2c:	801440c0 	call	1801440c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
18013e30:	e037883a 	mov	sp,fp
18013e34:	dfc00117 	ldw	ra,4(sp)
18013e38:	df000017 	ldw	fp,0(sp)
18013e3c:	dec00204 	addi	sp,sp,8
18013e40:	f800283a 	ret

18013e44 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
18013e44:	defffa04 	addi	sp,sp,-24
18013e48:	dfc00515 	stw	ra,20(sp)
18013e4c:	df000415 	stw	fp,16(sp)
18013e50:	df000404 	addi	fp,sp,16
18013e54:	e13ffd15 	stw	r4,-12(fp)
18013e58:	e17ffe15 	stw	r5,-8(fp)
18013e5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
18013e60:	e0bffd17 	ldw	r2,-12(fp)
18013e64:	10800017 	ldw	r2,0(r2)
18013e68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
18013e6c:	e0bffc17 	ldw	r2,-16(fp)
18013e70:	10c00a04 	addi	r3,r2,40
18013e74:	e0bffd17 	ldw	r2,-12(fp)
18013e78:	10800217 	ldw	r2,8(r2)
18013e7c:	100f883a 	mov	r7,r2
18013e80:	e1bfff17 	ldw	r6,-4(fp)
18013e84:	e17ffe17 	ldw	r5,-8(fp)
18013e88:	1809883a 	mov	r4,r3
18013e8c:	80146280 	call	18014628 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
18013e90:	e037883a 	mov	sp,fp
18013e94:	dfc00117 	ldw	ra,4(sp)
18013e98:	df000017 	ldw	fp,0(sp)
18013e9c:	dec00204 	addi	sp,sp,8
18013ea0:	f800283a 	ret

18013ea4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
18013ea4:	defffc04 	addi	sp,sp,-16
18013ea8:	dfc00315 	stw	ra,12(sp)
18013eac:	df000215 	stw	fp,8(sp)
18013eb0:	df000204 	addi	fp,sp,8
18013eb4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
18013eb8:	e0bfff17 	ldw	r2,-4(fp)
18013ebc:	10800017 	ldw	r2,0(r2)
18013ec0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
18013ec4:	e0bffe17 	ldw	r2,-8(fp)
18013ec8:	10c00a04 	addi	r3,r2,40
18013ecc:	e0bfff17 	ldw	r2,-4(fp)
18013ed0:	10800217 	ldw	r2,8(r2)
18013ed4:	100b883a 	mov	r5,r2
18013ed8:	1809883a 	mov	r4,r3
18013edc:	80142b40 	call	180142b4 <altera_avalon_jtag_uart_close>
}
18013ee0:	e037883a 	mov	sp,fp
18013ee4:	dfc00117 	ldw	ra,4(sp)
18013ee8:	df000017 	ldw	fp,0(sp)
18013eec:	dec00204 	addi	sp,sp,8
18013ef0:	f800283a 	ret

18013ef4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
18013ef4:	defffa04 	addi	sp,sp,-24
18013ef8:	dfc00515 	stw	ra,20(sp)
18013efc:	df000415 	stw	fp,16(sp)
18013f00:	df000404 	addi	fp,sp,16
18013f04:	e13ffd15 	stw	r4,-12(fp)
18013f08:	e17ffe15 	stw	r5,-8(fp)
18013f0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
18013f10:	e0bffd17 	ldw	r2,-12(fp)
18013f14:	10800017 	ldw	r2,0(r2)
18013f18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
18013f1c:	e0bffc17 	ldw	r2,-16(fp)
18013f20:	10800a04 	addi	r2,r2,40
18013f24:	e1bfff17 	ldw	r6,-4(fp)
18013f28:	e17ffe17 	ldw	r5,-8(fp)
18013f2c:	1009883a 	mov	r4,r2
18013f30:	801431c0 	call	1801431c <altera_avalon_jtag_uart_ioctl>
}
18013f34:	e037883a 	mov	sp,fp
18013f38:	dfc00117 	ldw	ra,4(sp)
18013f3c:	df000017 	ldw	fp,0(sp)
18013f40:	dec00204 	addi	sp,sp,8
18013f44:	f800283a 	ret

18013f48 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
18013f48:	defffa04 	addi	sp,sp,-24
18013f4c:	dfc00515 	stw	ra,20(sp)
18013f50:	df000415 	stw	fp,16(sp)
18013f54:	df000404 	addi	fp,sp,16
18013f58:	e13ffd15 	stw	r4,-12(fp)
18013f5c:	e17ffe15 	stw	r5,-8(fp)
18013f60:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
18013f64:	e0bffd17 	ldw	r2,-12(fp)
18013f68:	00c00044 	movi	r3,1
18013f6c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
18013f70:	e0bffd17 	ldw	r2,-12(fp)
18013f74:	10800017 	ldw	r2,0(r2)
18013f78:	10800104 	addi	r2,r2,4
18013f7c:	1007883a 	mov	r3,r2
18013f80:	e0bffd17 	ldw	r2,-12(fp)
18013f84:	10800817 	ldw	r2,32(r2)
18013f88:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
18013f8c:	e0bffe17 	ldw	r2,-8(fp)
18013f90:	e0ffff17 	ldw	r3,-4(fp)
18013f94:	d8000015 	stw	zero,0(sp)
18013f98:	e1fffd17 	ldw	r7,-12(fp)
18013f9c:	01860074 	movhi	r6,6145
18013fa0:	31900204 	addi	r6,r6,16392
18013fa4:	180b883a 	mov	r5,r3
18013fa8:	1009883a 	mov	r4,r2
18013fac:	8014cb00 	call	18014cb0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
18013fb0:	e0bffd17 	ldw	r2,-12(fp)
18013fb4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
18013fb8:	e0bffd17 	ldw	r2,-12(fp)
18013fbc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
18013fc0:	d0e79317 	ldw	r3,-25012(gp)
18013fc4:	e1fffd17 	ldw	r7,-12(fp)
18013fc8:	01860074 	movhi	r6,6145
18013fcc:	31908504 	addi	r6,r6,16916
18013fd0:	180b883a 	mov	r5,r3
18013fd4:	1009883a 	mov	r4,r2
18013fd8:	801484c0 	call	1801484c <alt_alarm_start>
18013fdc:	1000040e 	bge	r2,zero,18013ff0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
18013fe0:	e0fffd17 	ldw	r3,-12(fp)
18013fe4:	00a00034 	movhi	r2,32768
18013fe8:	10bfffc4 	addi	r2,r2,-1
18013fec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
18013ff0:	0001883a 	nop
18013ff4:	e037883a 	mov	sp,fp
18013ff8:	dfc00117 	ldw	ra,4(sp)
18013ffc:	df000017 	ldw	fp,0(sp)
18014000:	dec00204 	addi	sp,sp,8
18014004:	f800283a 	ret

18014008 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
18014008:	defff804 	addi	sp,sp,-32
1801400c:	df000715 	stw	fp,28(sp)
18014010:	df000704 	addi	fp,sp,28
18014014:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
18014018:	e0bfff17 	ldw	r2,-4(fp)
1801401c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
18014020:	e0bffb17 	ldw	r2,-20(fp)
18014024:	10800017 	ldw	r2,0(r2)
18014028:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1801402c:	e0bffc17 	ldw	r2,-16(fp)
18014030:	10800104 	addi	r2,r2,4
18014034:	10800037 	ldwio	r2,0(r2)
18014038:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1801403c:	e0bffd17 	ldw	r2,-12(fp)
18014040:	1080c00c 	andi	r2,r2,768
18014044:	10006d26 	beq	r2,zero,180141fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
18014048:	e0bffd17 	ldw	r2,-12(fp)
1801404c:	1080400c 	andi	r2,r2,256
18014050:	10003526 	beq	r2,zero,18014128 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
18014054:	00800074 	movhi	r2,1
18014058:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1801405c:	e0bffb17 	ldw	r2,-20(fp)
18014060:	10800a17 	ldw	r2,40(r2)
18014064:	10800044 	addi	r2,r2,1
18014068:	1081ffcc 	andi	r2,r2,2047
1801406c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
18014070:	e0bffb17 	ldw	r2,-20(fp)
18014074:	10c00b17 	ldw	r3,44(r2)
18014078:	e0bffe17 	ldw	r2,-8(fp)
1801407c:	18801526 	beq	r3,r2,180140d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
18014080:	e0bffc17 	ldw	r2,-16(fp)
18014084:	10800037 	ldwio	r2,0(r2)
18014088:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1801408c:	e0bff917 	ldw	r2,-28(fp)
18014090:	10a0000c 	andi	r2,r2,32768
18014094:	10001126 	beq	r2,zero,180140dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
18014098:	e0bffb17 	ldw	r2,-20(fp)
1801409c:	10800a17 	ldw	r2,40(r2)
180140a0:	e0fff917 	ldw	r3,-28(fp)
180140a4:	1809883a 	mov	r4,r3
180140a8:	e0fffb17 	ldw	r3,-20(fp)
180140ac:	1885883a 	add	r2,r3,r2
180140b0:	10800e04 	addi	r2,r2,56
180140b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
180140b8:	e0bffb17 	ldw	r2,-20(fp)
180140bc:	10800a17 	ldw	r2,40(r2)
180140c0:	10800044 	addi	r2,r2,1
180140c4:	10c1ffcc 	andi	r3,r2,2047
180140c8:	e0bffb17 	ldw	r2,-20(fp)
180140cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
180140d0:	003fe206 	br	1801405c <__alt_data_end+0xf801405c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
180140d4:	0001883a 	nop
180140d8:	00000106 	br	180140e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
180140dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
180140e0:	e0bff917 	ldw	r2,-28(fp)
180140e4:	10bfffec 	andhi	r2,r2,65535
180140e8:	10000f26 	beq	r2,zero,18014128 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
180140ec:	e0bffb17 	ldw	r2,-20(fp)
180140f0:	10c00817 	ldw	r3,32(r2)
180140f4:	00bfff84 	movi	r2,-2
180140f8:	1886703a 	and	r3,r3,r2
180140fc:	e0bffb17 	ldw	r2,-20(fp)
18014100:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
18014104:	e0bffc17 	ldw	r2,-16(fp)
18014108:	10800104 	addi	r2,r2,4
1801410c:	1007883a 	mov	r3,r2
18014110:	e0bffb17 	ldw	r2,-20(fp)
18014114:	10800817 	ldw	r2,32(r2)
18014118:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1801411c:	e0bffc17 	ldw	r2,-16(fp)
18014120:	10800104 	addi	r2,r2,4
18014124:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
18014128:	e0bffd17 	ldw	r2,-12(fp)
1801412c:	1080800c 	andi	r2,r2,512
18014130:	103fbe26 	beq	r2,zero,1801402c <__alt_data_end+0xf801402c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
18014134:	e0bffd17 	ldw	r2,-12(fp)
18014138:	1004d43a 	srli	r2,r2,16
1801413c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
18014140:	00001406 	br	18014194 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
18014144:	e0bffc17 	ldw	r2,-16(fp)
18014148:	e0fffb17 	ldw	r3,-20(fp)
1801414c:	18c00d17 	ldw	r3,52(r3)
18014150:	e13ffb17 	ldw	r4,-20(fp)
18014154:	20c7883a 	add	r3,r4,r3
18014158:	18c20e04 	addi	r3,r3,2104
1801415c:	18c00003 	ldbu	r3,0(r3)
18014160:	18c03fcc 	andi	r3,r3,255
18014164:	18c0201c 	xori	r3,r3,128
18014168:	18ffe004 	addi	r3,r3,-128
1801416c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
18014170:	e0bffb17 	ldw	r2,-20(fp)
18014174:	10800d17 	ldw	r2,52(r2)
18014178:	10800044 	addi	r2,r2,1
1801417c:	10c1ffcc 	andi	r3,r2,2047
18014180:	e0bffb17 	ldw	r2,-20(fp)
18014184:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
18014188:	e0bffa17 	ldw	r2,-24(fp)
1801418c:	10bfffc4 	addi	r2,r2,-1
18014190:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
18014194:	e0bffa17 	ldw	r2,-24(fp)
18014198:	10000526 	beq	r2,zero,180141b0 <altera_avalon_jtag_uart_irq+0x1a8>
1801419c:	e0bffb17 	ldw	r2,-20(fp)
180141a0:	10c00d17 	ldw	r3,52(r2)
180141a4:	e0bffb17 	ldw	r2,-20(fp)
180141a8:	10800c17 	ldw	r2,48(r2)
180141ac:	18bfe51e 	bne	r3,r2,18014144 <__alt_data_end+0xf8014144>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
180141b0:	e0bffa17 	ldw	r2,-24(fp)
180141b4:	103f9d26 	beq	r2,zero,1801402c <__alt_data_end+0xf801402c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
180141b8:	e0bffb17 	ldw	r2,-20(fp)
180141bc:	10c00817 	ldw	r3,32(r2)
180141c0:	00bfff44 	movi	r2,-3
180141c4:	1886703a 	and	r3,r3,r2
180141c8:	e0bffb17 	ldw	r2,-20(fp)
180141cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
180141d0:	e0bffb17 	ldw	r2,-20(fp)
180141d4:	10800017 	ldw	r2,0(r2)
180141d8:	10800104 	addi	r2,r2,4
180141dc:	1007883a 	mov	r3,r2
180141e0:	e0bffb17 	ldw	r2,-20(fp)
180141e4:	10800817 	ldw	r2,32(r2)
180141e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
180141ec:	e0bffc17 	ldw	r2,-16(fp)
180141f0:	10800104 	addi	r2,r2,4
180141f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
180141f8:	003f8c06 	br	1801402c <__alt_data_end+0xf801402c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
180141fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
18014200:	0001883a 	nop
18014204:	e037883a 	mov	sp,fp
18014208:	df000017 	ldw	fp,0(sp)
1801420c:	dec00104 	addi	sp,sp,4
18014210:	f800283a 	ret

18014214 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
18014214:	defff804 	addi	sp,sp,-32
18014218:	df000715 	stw	fp,28(sp)
1801421c:	df000704 	addi	fp,sp,28
18014220:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
18014224:	e0bffb17 	ldw	r2,-20(fp)
18014228:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1801422c:	e0bff917 	ldw	r2,-28(fp)
18014230:	10800017 	ldw	r2,0(r2)
18014234:	10800104 	addi	r2,r2,4
18014238:	10800037 	ldwio	r2,0(r2)
1801423c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
18014240:	e0bffa17 	ldw	r2,-24(fp)
18014244:	1081000c 	andi	r2,r2,1024
18014248:	10000b26 	beq	r2,zero,18014278 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1801424c:	e0bff917 	ldw	r2,-28(fp)
18014250:	10800017 	ldw	r2,0(r2)
18014254:	10800104 	addi	r2,r2,4
18014258:	1007883a 	mov	r3,r2
1801425c:	e0bff917 	ldw	r2,-28(fp)
18014260:	10800817 	ldw	r2,32(r2)
18014264:	10810014 	ori	r2,r2,1024
18014268:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1801426c:	e0bff917 	ldw	r2,-28(fp)
18014270:	10000915 	stw	zero,36(r2)
18014274:	00000a06 	br	180142a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
18014278:	e0bff917 	ldw	r2,-28(fp)
1801427c:	10c00917 	ldw	r3,36(r2)
18014280:	00a00034 	movhi	r2,32768
18014284:	10bfff04 	addi	r2,r2,-4
18014288:	10c00536 	bltu	r2,r3,180142a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1801428c:	e0bff917 	ldw	r2,-28(fp)
18014290:	10800917 	ldw	r2,36(r2)
18014294:	10c00044 	addi	r3,r2,1
18014298:	e0bff917 	ldw	r2,-28(fp)
1801429c:	10c00915 	stw	r3,36(r2)
180142a0:	d0a79317 	ldw	r2,-25012(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
180142a4:	e037883a 	mov	sp,fp
180142a8:	df000017 	ldw	fp,0(sp)
180142ac:	dec00104 	addi	sp,sp,4
180142b0:	f800283a 	ret

180142b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
180142b4:	defffd04 	addi	sp,sp,-12
180142b8:	df000215 	stw	fp,8(sp)
180142bc:	df000204 	addi	fp,sp,8
180142c0:	e13ffe15 	stw	r4,-8(fp)
180142c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
180142c8:	00000506 	br	180142e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
180142cc:	e0bfff17 	ldw	r2,-4(fp)
180142d0:	1090000c 	andi	r2,r2,16384
180142d4:	10000226 	beq	r2,zero,180142e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
180142d8:	00bffd44 	movi	r2,-11
180142dc:	00000b06 	br	1801430c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
180142e0:	e0bffe17 	ldw	r2,-8(fp)
180142e4:	10c00d17 	ldw	r3,52(r2)
180142e8:	e0bffe17 	ldw	r2,-8(fp)
180142ec:	10800c17 	ldw	r2,48(r2)
180142f0:	18800526 	beq	r3,r2,18014308 <altera_avalon_jtag_uart_close+0x54>
180142f4:	e0bffe17 	ldw	r2,-8(fp)
180142f8:	10c00917 	ldw	r3,36(r2)
180142fc:	e0bffe17 	ldw	r2,-8(fp)
18014300:	10800117 	ldw	r2,4(r2)
18014304:	18bff136 	bltu	r3,r2,180142cc <__alt_data_end+0xf80142cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
18014308:	0005883a 	mov	r2,zero
}
1801430c:	e037883a 	mov	sp,fp
18014310:	df000017 	ldw	fp,0(sp)
18014314:	dec00104 	addi	sp,sp,4
18014318:	f800283a 	ret

1801431c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1801431c:	defffa04 	addi	sp,sp,-24
18014320:	df000515 	stw	fp,20(sp)
18014324:	df000504 	addi	fp,sp,20
18014328:	e13ffd15 	stw	r4,-12(fp)
1801432c:	e17ffe15 	stw	r5,-8(fp)
18014330:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
18014334:	00bff9c4 	movi	r2,-25
18014338:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1801433c:	e0bffe17 	ldw	r2,-8(fp)
18014340:	10da8060 	cmpeqi	r3,r2,27137
18014344:	1800031e 	bne	r3,zero,18014354 <altera_avalon_jtag_uart_ioctl+0x38>
18014348:	109a80a0 	cmpeqi	r2,r2,27138
1801434c:	1000181e 	bne	r2,zero,180143b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
18014350:	00002906 	br	180143f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
18014354:	e0bffd17 	ldw	r2,-12(fp)
18014358:	10c00117 	ldw	r3,4(r2)
1801435c:	00a00034 	movhi	r2,32768
18014360:	10bfffc4 	addi	r2,r2,-1
18014364:	18802126 	beq	r3,r2,180143ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
18014368:	e0bfff17 	ldw	r2,-4(fp)
1801436c:	10800017 	ldw	r2,0(r2)
18014370:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
18014374:	e0bffc17 	ldw	r2,-16(fp)
18014378:	10800090 	cmplti	r2,r2,2
1801437c:	1000061e 	bne	r2,zero,18014398 <altera_avalon_jtag_uart_ioctl+0x7c>
18014380:	e0fffc17 	ldw	r3,-16(fp)
18014384:	00a00034 	movhi	r2,32768
18014388:	10bfffc4 	addi	r2,r2,-1
1801438c:	18800226 	beq	r3,r2,18014398 <altera_avalon_jtag_uart_ioctl+0x7c>
18014390:	e0bffc17 	ldw	r2,-16(fp)
18014394:	00000206 	br	180143a0 <altera_avalon_jtag_uart_ioctl+0x84>
18014398:	00a00034 	movhi	r2,32768
1801439c:	10bfff84 	addi	r2,r2,-2
180143a0:	e0fffd17 	ldw	r3,-12(fp)
180143a4:	18800115 	stw	r2,4(r3)
      rc = 0;
180143a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
180143ac:	00000f06 	br	180143ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
180143b0:	e0bffd17 	ldw	r2,-12(fp)
180143b4:	10c00117 	ldw	r3,4(r2)
180143b8:	00a00034 	movhi	r2,32768
180143bc:	10bfffc4 	addi	r2,r2,-1
180143c0:	18800c26 	beq	r3,r2,180143f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
180143c4:	e0bffd17 	ldw	r2,-12(fp)
180143c8:	10c00917 	ldw	r3,36(r2)
180143cc:	e0bffd17 	ldw	r2,-12(fp)
180143d0:	10800117 	ldw	r2,4(r2)
180143d4:	1885803a 	cmpltu	r2,r3,r2
180143d8:	10c03fcc 	andi	r3,r2,255
180143dc:	e0bfff17 	ldw	r2,-4(fp)
180143e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
180143e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
180143e8:	00000206 	br	180143f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
180143ec:	0001883a 	nop
180143f0:	00000106 	br	180143f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
180143f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
180143f8:	e0bffb17 	ldw	r2,-20(fp)
}
180143fc:	e037883a 	mov	sp,fp
18014400:	df000017 	ldw	fp,0(sp)
18014404:	dec00104 	addi	sp,sp,4
18014408:	f800283a 	ret

1801440c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1801440c:	defff304 	addi	sp,sp,-52
18014410:	dfc00c15 	stw	ra,48(sp)
18014414:	df000b15 	stw	fp,44(sp)
18014418:	df000b04 	addi	fp,sp,44
1801441c:	e13ffc15 	stw	r4,-16(fp)
18014420:	e17ffd15 	stw	r5,-12(fp)
18014424:	e1bffe15 	stw	r6,-8(fp)
18014428:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1801442c:	e0bffd17 	ldw	r2,-12(fp)
18014430:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
18014434:	00004706 	br	18014554 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
18014438:	e0bffc17 	ldw	r2,-16(fp)
1801443c:	10800a17 	ldw	r2,40(r2)
18014440:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
18014444:	e0bffc17 	ldw	r2,-16(fp)
18014448:	10800b17 	ldw	r2,44(r2)
1801444c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
18014450:	e0fff717 	ldw	r3,-36(fp)
18014454:	e0bff817 	ldw	r2,-32(fp)
18014458:	18800536 	bltu	r3,r2,18014470 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1801445c:	e0fff717 	ldw	r3,-36(fp)
18014460:	e0bff817 	ldw	r2,-32(fp)
18014464:	1885c83a 	sub	r2,r3,r2
18014468:	e0bff615 	stw	r2,-40(fp)
1801446c:	00000406 	br	18014480 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
18014470:	00c20004 	movi	r3,2048
18014474:	e0bff817 	ldw	r2,-32(fp)
18014478:	1885c83a 	sub	r2,r3,r2
1801447c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
18014480:	e0bff617 	ldw	r2,-40(fp)
18014484:	10001e26 	beq	r2,zero,18014500 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
18014488:	e0fffe17 	ldw	r3,-8(fp)
1801448c:	e0bff617 	ldw	r2,-40(fp)
18014490:	1880022e 	bgeu	r3,r2,1801449c <altera_avalon_jtag_uart_read+0x90>
        n = space;
18014494:	e0bffe17 	ldw	r2,-8(fp)
18014498:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1801449c:	e0bffc17 	ldw	r2,-16(fp)
180144a0:	10c00e04 	addi	r3,r2,56
180144a4:	e0bff817 	ldw	r2,-32(fp)
180144a8:	1885883a 	add	r2,r3,r2
180144ac:	e1bff617 	ldw	r6,-40(fp)
180144b0:	100b883a 	mov	r5,r2
180144b4:	e13ff517 	ldw	r4,-44(fp)
180144b8:	800ab7c0 	call	1800ab7c <memcpy>
      ptr   += n;
180144bc:	e0fff517 	ldw	r3,-44(fp)
180144c0:	e0bff617 	ldw	r2,-40(fp)
180144c4:	1885883a 	add	r2,r3,r2
180144c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
180144cc:	e0fffe17 	ldw	r3,-8(fp)
180144d0:	e0bff617 	ldw	r2,-40(fp)
180144d4:	1885c83a 	sub	r2,r3,r2
180144d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
180144dc:	e0fff817 	ldw	r3,-32(fp)
180144e0:	e0bff617 	ldw	r2,-40(fp)
180144e4:	1885883a 	add	r2,r3,r2
180144e8:	10c1ffcc 	andi	r3,r2,2047
180144ec:	e0bffc17 	ldw	r2,-16(fp)
180144f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
180144f4:	e0bffe17 	ldw	r2,-8(fp)
180144f8:	00bfcf16 	blt	zero,r2,18014438 <__alt_data_end+0xf8014438>
180144fc:	00000106 	br	18014504 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
18014500:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
18014504:	e0fff517 	ldw	r3,-44(fp)
18014508:	e0bffd17 	ldw	r2,-12(fp)
1801450c:	1880141e 	bne	r3,r2,18014560 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
18014510:	e0bfff17 	ldw	r2,-4(fp)
18014514:	1090000c 	andi	r2,r2,16384
18014518:	1000131e 	bne	r2,zero,18014568 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1801451c:	0001883a 	nop
18014520:	e0bffc17 	ldw	r2,-16(fp)
18014524:	10c00a17 	ldw	r3,40(r2)
18014528:	e0bff717 	ldw	r2,-36(fp)
1801452c:	1880051e 	bne	r3,r2,18014544 <altera_avalon_jtag_uart_read+0x138>
18014530:	e0bffc17 	ldw	r2,-16(fp)
18014534:	10c00917 	ldw	r3,36(r2)
18014538:	e0bffc17 	ldw	r2,-16(fp)
1801453c:	10800117 	ldw	r2,4(r2)
18014540:	18bff736 	bltu	r3,r2,18014520 <__alt_data_end+0xf8014520>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
18014544:	e0bffc17 	ldw	r2,-16(fp)
18014548:	10c00a17 	ldw	r3,40(r2)
1801454c:	e0bff717 	ldw	r2,-36(fp)
18014550:	18800726 	beq	r3,r2,18014570 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
18014554:	e0bffe17 	ldw	r2,-8(fp)
18014558:	00bfb716 	blt	zero,r2,18014438 <__alt_data_end+0xf8014438>
1801455c:	00000506 	br	18014574 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
18014560:	0001883a 	nop
18014564:	00000306 	br	18014574 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
18014568:	0001883a 	nop
1801456c:	00000106 	br	18014574 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
18014570:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
18014574:	e0fff517 	ldw	r3,-44(fp)
18014578:	e0bffd17 	ldw	r2,-12(fp)
1801457c:	18801826 	beq	r3,r2,180145e0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18014580:	0005303a 	rdctl	r2,status
18014584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
18014588:	e0fffb17 	ldw	r3,-20(fp)
1801458c:	00bfff84 	movi	r2,-2
18014590:	1884703a 	and	r2,r3,r2
18014594:	1001703a 	wrctl	status,r2
  
  return context;
18014598:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1801459c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
180145a0:	e0bffc17 	ldw	r2,-16(fp)
180145a4:	10800817 	ldw	r2,32(r2)
180145a8:	10c00054 	ori	r3,r2,1
180145ac:	e0bffc17 	ldw	r2,-16(fp)
180145b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
180145b4:	e0bffc17 	ldw	r2,-16(fp)
180145b8:	10800017 	ldw	r2,0(r2)
180145bc:	10800104 	addi	r2,r2,4
180145c0:	1007883a 	mov	r3,r2
180145c4:	e0bffc17 	ldw	r2,-16(fp)
180145c8:	10800817 	ldw	r2,32(r2)
180145cc:	18800035 	stwio	r2,0(r3)
180145d0:	e0bffa17 	ldw	r2,-24(fp)
180145d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
180145d8:	e0bff917 	ldw	r2,-28(fp)
180145dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
180145e0:	e0fff517 	ldw	r3,-44(fp)
180145e4:	e0bffd17 	ldw	r2,-12(fp)
180145e8:	18800426 	beq	r3,r2,180145fc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
180145ec:	e0fff517 	ldw	r3,-44(fp)
180145f0:	e0bffd17 	ldw	r2,-12(fp)
180145f4:	1885c83a 	sub	r2,r3,r2
180145f8:	00000606 	br	18014614 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
180145fc:	e0bfff17 	ldw	r2,-4(fp)
18014600:	1090000c 	andi	r2,r2,16384
18014604:	10000226 	beq	r2,zero,18014610 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
18014608:	00bffd44 	movi	r2,-11
1801460c:	00000106 	br	18014614 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
18014610:	00bffec4 	movi	r2,-5
}
18014614:	e037883a 	mov	sp,fp
18014618:	dfc00117 	ldw	ra,4(sp)
1801461c:	df000017 	ldw	fp,0(sp)
18014620:	dec00204 	addi	sp,sp,8
18014624:	f800283a 	ret

18014628 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
18014628:	defff304 	addi	sp,sp,-52
1801462c:	dfc00c15 	stw	ra,48(sp)
18014630:	df000b15 	stw	fp,44(sp)
18014634:	df000b04 	addi	fp,sp,44
18014638:	e13ffc15 	stw	r4,-16(fp)
1801463c:	e17ffd15 	stw	r5,-12(fp)
18014640:	e1bffe15 	stw	r6,-8(fp)
18014644:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
18014648:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1801464c:	e0bffd17 	ldw	r2,-12(fp)
18014650:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
18014654:	00003706 	br	18014734 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
18014658:	e0bffc17 	ldw	r2,-16(fp)
1801465c:	10800c17 	ldw	r2,48(r2)
18014660:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
18014664:	e0bffc17 	ldw	r2,-16(fp)
18014668:	10800d17 	ldw	r2,52(r2)
1801466c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
18014670:	e0fff917 	ldw	r3,-28(fp)
18014674:	e0bff517 	ldw	r2,-44(fp)
18014678:	1880062e 	bgeu	r3,r2,18014694 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1801467c:	e0fff517 	ldw	r3,-44(fp)
18014680:	e0bff917 	ldw	r2,-28(fp)
18014684:	1885c83a 	sub	r2,r3,r2
18014688:	10bfffc4 	addi	r2,r2,-1
1801468c:	e0bff615 	stw	r2,-40(fp)
18014690:	00000b06 	br	180146c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
18014694:	e0bff517 	ldw	r2,-44(fp)
18014698:	10000526 	beq	r2,zero,180146b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1801469c:	00c20004 	movi	r3,2048
180146a0:	e0bff917 	ldw	r2,-28(fp)
180146a4:	1885c83a 	sub	r2,r3,r2
180146a8:	e0bff615 	stw	r2,-40(fp)
180146ac:	00000406 	br	180146c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
180146b0:	00c1ffc4 	movi	r3,2047
180146b4:	e0bff917 	ldw	r2,-28(fp)
180146b8:	1885c83a 	sub	r2,r3,r2
180146bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
180146c0:	e0bff617 	ldw	r2,-40(fp)
180146c4:	10001e26 	beq	r2,zero,18014740 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
180146c8:	e0fffe17 	ldw	r3,-8(fp)
180146cc:	e0bff617 	ldw	r2,-40(fp)
180146d0:	1880022e 	bgeu	r3,r2,180146dc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
180146d4:	e0bffe17 	ldw	r2,-8(fp)
180146d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
180146dc:	e0bffc17 	ldw	r2,-16(fp)
180146e0:	10c20e04 	addi	r3,r2,2104
180146e4:	e0bff917 	ldw	r2,-28(fp)
180146e8:	1885883a 	add	r2,r3,r2
180146ec:	e1bff617 	ldw	r6,-40(fp)
180146f0:	e17ffd17 	ldw	r5,-12(fp)
180146f4:	1009883a 	mov	r4,r2
180146f8:	800ab7c0 	call	1800ab7c <memcpy>
      ptr   += n;
180146fc:	e0fffd17 	ldw	r3,-12(fp)
18014700:	e0bff617 	ldw	r2,-40(fp)
18014704:	1885883a 	add	r2,r3,r2
18014708:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1801470c:	e0fffe17 	ldw	r3,-8(fp)
18014710:	e0bff617 	ldw	r2,-40(fp)
18014714:	1885c83a 	sub	r2,r3,r2
18014718:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1801471c:	e0fff917 	ldw	r3,-28(fp)
18014720:	e0bff617 	ldw	r2,-40(fp)
18014724:	1885883a 	add	r2,r3,r2
18014728:	10c1ffcc 	andi	r3,r2,2047
1801472c:	e0bffc17 	ldw	r2,-16(fp)
18014730:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
18014734:	e0bffe17 	ldw	r2,-8(fp)
18014738:	00bfc716 	blt	zero,r2,18014658 <__alt_data_end+0xf8014658>
1801473c:	00000106 	br	18014744 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
18014740:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18014744:	0005303a 	rdctl	r2,status
18014748:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1801474c:	e0fffb17 	ldw	r3,-20(fp)
18014750:	00bfff84 	movi	r2,-2
18014754:	1884703a 	and	r2,r3,r2
18014758:	1001703a 	wrctl	status,r2
  
  return context;
1801475c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
18014760:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
18014764:	e0bffc17 	ldw	r2,-16(fp)
18014768:	10800817 	ldw	r2,32(r2)
1801476c:	10c00094 	ori	r3,r2,2
18014770:	e0bffc17 	ldw	r2,-16(fp)
18014774:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
18014778:	e0bffc17 	ldw	r2,-16(fp)
1801477c:	10800017 	ldw	r2,0(r2)
18014780:	10800104 	addi	r2,r2,4
18014784:	1007883a 	mov	r3,r2
18014788:	e0bffc17 	ldw	r2,-16(fp)
1801478c:	10800817 	ldw	r2,32(r2)
18014790:	18800035 	stwio	r2,0(r3)
18014794:	e0bffa17 	ldw	r2,-24(fp)
18014798:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1801479c:	e0bff817 	ldw	r2,-32(fp)
180147a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
180147a4:	e0bffe17 	ldw	r2,-8(fp)
180147a8:	0080100e 	bge	zero,r2,180147ec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
180147ac:	e0bfff17 	ldw	r2,-4(fp)
180147b0:	1090000c 	andi	r2,r2,16384
180147b4:	1000101e 	bne	r2,zero,180147f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
180147b8:	0001883a 	nop
180147bc:	e0bffc17 	ldw	r2,-16(fp)
180147c0:	10c00d17 	ldw	r3,52(r2)
180147c4:	e0bff517 	ldw	r2,-44(fp)
180147c8:	1880051e 	bne	r3,r2,180147e0 <altera_avalon_jtag_uart_write+0x1b8>
180147cc:	e0bffc17 	ldw	r2,-16(fp)
180147d0:	10c00917 	ldw	r3,36(r2)
180147d4:	e0bffc17 	ldw	r2,-16(fp)
180147d8:	10800117 	ldw	r2,4(r2)
180147dc:	18bff736 	bltu	r3,r2,180147bc <__alt_data_end+0xf80147bc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
180147e0:	e0bffc17 	ldw	r2,-16(fp)
180147e4:	10800917 	ldw	r2,36(r2)
180147e8:	1000051e 	bne	r2,zero,18014800 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
180147ec:	e0bffe17 	ldw	r2,-8(fp)
180147f0:	00bfd016 	blt	zero,r2,18014734 <__alt_data_end+0xf8014734>
180147f4:	00000306 	br	18014804 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
180147f8:	0001883a 	nop
180147fc:	00000106 	br	18014804 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
18014800:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
18014804:	e0fffd17 	ldw	r3,-12(fp)
18014808:	e0bff717 	ldw	r2,-36(fp)
1801480c:	18800426 	beq	r3,r2,18014820 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
18014810:	e0fffd17 	ldw	r3,-12(fp)
18014814:	e0bff717 	ldw	r2,-36(fp)
18014818:	1885c83a 	sub	r2,r3,r2
1801481c:	00000606 	br	18014838 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
18014820:	e0bfff17 	ldw	r2,-4(fp)
18014824:	1090000c 	andi	r2,r2,16384
18014828:	10000226 	beq	r2,zero,18014834 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1801482c:	00bffd44 	movi	r2,-11
18014830:	00000106 	br	18014838 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
18014834:	00bffec4 	movi	r2,-5
}
18014838:	e037883a 	mov	sp,fp
1801483c:	dfc00117 	ldw	ra,4(sp)
18014840:	df000017 	ldw	fp,0(sp)
18014844:	dec00204 	addi	sp,sp,8
18014848:	f800283a 	ret

1801484c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1801484c:	defff504 	addi	sp,sp,-44
18014850:	df000a15 	stw	fp,40(sp)
18014854:	df000a04 	addi	fp,sp,40
18014858:	e13ffc15 	stw	r4,-16(fp)
1801485c:	e17ffd15 	stw	r5,-12(fp)
18014860:	e1bffe15 	stw	r6,-8(fp)
18014864:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
18014868:	e03ff615 	stw	zero,-40(fp)
1801486c:	d0a79317 	ldw	r2,-25012(gp)
  
  if (alt_ticks_per_second ())
18014870:	10003c26 	beq	r2,zero,18014964 <alt_alarm_start+0x118>
  {
    if (alarm)
18014874:	e0bffc17 	ldw	r2,-16(fp)
18014878:	10003826 	beq	r2,zero,1801495c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1801487c:	e0bffc17 	ldw	r2,-16(fp)
18014880:	e0fffe17 	ldw	r3,-8(fp)
18014884:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
18014888:	e0bffc17 	ldw	r2,-16(fp)
1801488c:	e0ffff17 	ldw	r3,-4(fp)
18014890:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18014894:	0005303a 	rdctl	r2,status
18014898:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1801489c:	e0fff917 	ldw	r3,-28(fp)
180148a0:	00bfff84 	movi	r2,-2
180148a4:	1884703a 	and	r2,r3,r2
180148a8:	1001703a 	wrctl	status,r2
  
  return context;
180148ac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
180148b0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
180148b4:	d0a79417 	ldw	r2,-25008(gp)
      
      current_nticks = alt_nticks();
180148b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
180148bc:	e0fffd17 	ldw	r3,-12(fp)
180148c0:	e0bff617 	ldw	r2,-40(fp)
180148c4:	1885883a 	add	r2,r3,r2
180148c8:	10c00044 	addi	r3,r2,1
180148cc:	e0bffc17 	ldw	r2,-16(fp)
180148d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
180148d4:	e0bffc17 	ldw	r2,-16(fp)
180148d8:	10c00217 	ldw	r3,8(r2)
180148dc:	e0bff617 	ldw	r2,-40(fp)
180148e0:	1880042e 	bgeu	r3,r2,180148f4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
180148e4:	e0bffc17 	ldw	r2,-16(fp)
180148e8:	00c00044 	movi	r3,1
180148ec:	10c00405 	stb	r3,16(r2)
180148f0:	00000206 	br	180148fc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
180148f4:	e0bffc17 	ldw	r2,-16(fp)
180148f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
180148fc:	e0bffc17 	ldw	r2,-16(fp)
18014900:	d0e01004 	addi	r3,gp,-32704
18014904:	e0fffa15 	stw	r3,-24(fp)
18014908:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1801490c:	e0bffb17 	ldw	r2,-20(fp)
18014910:	e0fffa17 	ldw	r3,-24(fp)
18014914:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
18014918:	e0bffa17 	ldw	r2,-24(fp)
1801491c:	10c00017 	ldw	r3,0(r2)
18014920:	e0bffb17 	ldw	r2,-20(fp)
18014924:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
18014928:	e0bffa17 	ldw	r2,-24(fp)
1801492c:	10800017 	ldw	r2,0(r2)
18014930:	e0fffb17 	ldw	r3,-20(fp)
18014934:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
18014938:	e0bffa17 	ldw	r2,-24(fp)
1801493c:	e0fffb17 	ldw	r3,-20(fp)
18014940:	10c00015 	stw	r3,0(r2)
18014944:	e0bff817 	ldw	r2,-32(fp)
18014948:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1801494c:	e0bff717 	ldw	r2,-36(fp)
18014950:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
18014954:	0005883a 	mov	r2,zero
18014958:	00000306 	br	18014968 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1801495c:	00bffa84 	movi	r2,-22
18014960:	00000106 	br	18014968 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
18014964:	00bfde84 	movi	r2,-134
  }
}
18014968:	e037883a 	mov	sp,fp
1801496c:	df000017 	ldw	fp,0(sp)
18014970:	dec00104 	addi	sp,sp,4
18014974:	f800283a 	ret

18014978 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
18014978:	defffa04 	addi	sp,sp,-24
1801497c:	dfc00515 	stw	ra,20(sp)
18014980:	df000415 	stw	fp,16(sp)
18014984:	df000404 	addi	fp,sp,16
18014988:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1801498c:	00800244 	movi	r2,9
18014990:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
18014994:	014003f4 	movhi	r5,15
18014998:	29509004 	addi	r5,r5,16960
1801499c:	e13ffd17 	ldw	r4,-12(fp)
180149a0:	8002b640 	call	18002b64 <__mulsi3>
180149a4:	100b883a 	mov	r5,r2
180149a8:	0100bef4 	movhi	r4,763
180149ac:	213c2004 	addi	r4,r4,-3968
180149b0:	8002aa80 	call	18002aa8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
180149b4:	100b883a 	mov	r5,r2
180149b8:	01200034 	movhi	r4,32768
180149bc:	213fffc4 	addi	r4,r4,-1
180149c0:	8002aa80 	call	18002aa8 <__udivsi3>
180149c4:	100b883a 	mov	r5,r2
180149c8:	e13fff17 	ldw	r4,-4(fp)
180149cc:	8002aa80 	call	18002aa8 <__udivsi3>
180149d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
180149d4:	e0bffe17 	ldw	r2,-8(fp)
180149d8:	10002a26 	beq	r2,zero,18014a84 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
180149dc:	e03ffc15 	stw	zero,-16(fp)
180149e0:	00001706 	br	18014a40 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
180149e4:	00a00034 	movhi	r2,32768
180149e8:	10bfffc4 	addi	r2,r2,-1
180149ec:	10bfffc4 	addi	r2,r2,-1
180149f0:	103ffe1e 	bne	r2,zero,180149ec <__alt_data_end+0xf80149ec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
180149f4:	014003f4 	movhi	r5,15
180149f8:	29509004 	addi	r5,r5,16960
180149fc:	e13ffd17 	ldw	r4,-12(fp)
18014a00:	8002b640 	call	18002b64 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
18014a04:	100b883a 	mov	r5,r2
18014a08:	0100bef4 	movhi	r4,763
18014a0c:	213c2004 	addi	r4,r4,-3968
18014a10:	8002aa80 	call	18002aa8 <__udivsi3>
18014a14:	100b883a 	mov	r5,r2
18014a18:	01200034 	movhi	r4,32768
18014a1c:	213fffc4 	addi	r4,r4,-1
18014a20:	8002aa80 	call	18002aa8 <__udivsi3>
18014a24:	1007883a 	mov	r3,r2
18014a28:	e0bfff17 	ldw	r2,-4(fp)
18014a2c:	10c5c83a 	sub	r2,r2,r3
18014a30:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
18014a34:	e0bffc17 	ldw	r2,-16(fp)
18014a38:	10800044 	addi	r2,r2,1
18014a3c:	e0bffc15 	stw	r2,-16(fp)
18014a40:	e0fffc17 	ldw	r3,-16(fp)
18014a44:	e0bffe17 	ldw	r2,-8(fp)
18014a48:	18bfe616 	blt	r3,r2,180149e4 <__alt_data_end+0xf80149e4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
18014a4c:	014003f4 	movhi	r5,15
18014a50:	29509004 	addi	r5,r5,16960
18014a54:	e13ffd17 	ldw	r4,-12(fp)
18014a58:	8002b640 	call	18002b64 <__mulsi3>
18014a5c:	100b883a 	mov	r5,r2
18014a60:	0100bef4 	movhi	r4,763
18014a64:	213c2004 	addi	r4,r4,-3968
18014a68:	8002aa80 	call	18002aa8 <__udivsi3>
18014a6c:	e17fff17 	ldw	r5,-4(fp)
18014a70:	1009883a 	mov	r4,r2
18014a74:	8002b640 	call	18002b64 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
18014a78:	10bfffc4 	addi	r2,r2,-1
18014a7c:	103ffe1e 	bne	r2,zero,18014a78 <__alt_data_end+0xf8014a78>
18014a80:	00000d06 	br	18014ab8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
18014a84:	014003f4 	movhi	r5,15
18014a88:	29509004 	addi	r5,r5,16960
18014a8c:	e13ffd17 	ldw	r4,-12(fp)
18014a90:	8002b640 	call	18002b64 <__mulsi3>
18014a94:	100b883a 	mov	r5,r2
18014a98:	0100bef4 	movhi	r4,763
18014a9c:	213c2004 	addi	r4,r4,-3968
18014aa0:	8002aa80 	call	18002aa8 <__udivsi3>
18014aa4:	e17fff17 	ldw	r5,-4(fp)
18014aa8:	1009883a 	mov	r4,r2
18014aac:	8002b640 	call	18002b64 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
18014ab0:	10bfffc4 	addi	r2,r2,-1
18014ab4:	00bffe16 	blt	zero,r2,18014ab0 <__alt_data_end+0xf8014ab0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
18014ab8:	0005883a 	mov	r2,zero
}
18014abc:	e037883a 	mov	sp,fp
18014ac0:	dfc00117 	ldw	ra,4(sp)
18014ac4:	df000017 	ldw	fp,0(sp)
18014ac8:	dec00204 	addi	sp,sp,8
18014acc:	f800283a 	ret

18014ad0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
18014ad0:	deffff04 	addi	sp,sp,-4
18014ad4:	df000015 	stw	fp,0(sp)
18014ad8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
18014adc:	0001883a 	nop
18014ae0:	e037883a 	mov	sp,fp
18014ae4:	df000017 	ldw	fp,0(sp)
18014ae8:	dec00104 	addi	sp,sp,4
18014aec:	f800283a 	ret

18014af0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
18014af0:	defffe04 	addi	sp,sp,-8
18014af4:	dfc00115 	stw	ra,4(sp)
18014af8:	df000015 	stw	fp,0(sp)
18014afc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
18014b00:	d0a00d17 	ldw	r2,-32716(gp)
18014b04:	10000326 	beq	r2,zero,18014b14 <alt_get_errno+0x24>
18014b08:	d0a00d17 	ldw	r2,-32716(gp)
18014b0c:	103ee83a 	callr	r2
18014b10:	00000106 	br	18014b18 <alt_get_errno+0x28>
18014b14:	d0a78e04 	addi	r2,gp,-25032
}
18014b18:	e037883a 	mov	sp,fp
18014b1c:	dfc00117 	ldw	ra,4(sp)
18014b20:	df000017 	ldw	fp,0(sp)
18014b24:	dec00204 	addi	sp,sp,8
18014b28:	f800283a 	ret

18014b2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
18014b2c:	defffa04 	addi	sp,sp,-24
18014b30:	dfc00515 	stw	ra,20(sp)
18014b34:	df000415 	stw	fp,16(sp)
18014b38:	df000404 	addi	fp,sp,16
18014b3c:	e13ffe15 	stw	r4,-8(fp)
18014b40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
18014b44:	e0bffe17 	ldw	r2,-8(fp)
18014b48:	10000326 	beq	r2,zero,18014b58 <alt_dev_llist_insert+0x2c>
18014b4c:	e0bffe17 	ldw	r2,-8(fp)
18014b50:	10800217 	ldw	r2,8(r2)
18014b54:	1000061e 	bne	r2,zero,18014b70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
18014b58:	8014af00 	call	18014af0 <alt_get_errno>
18014b5c:	1007883a 	mov	r3,r2
18014b60:	00800584 	movi	r2,22
18014b64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
18014b68:	00bffa84 	movi	r2,-22
18014b6c:	00001306 	br	18014bbc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
18014b70:	e0bffe17 	ldw	r2,-8(fp)
18014b74:	e0ffff17 	ldw	r3,-4(fp)
18014b78:	e0fffc15 	stw	r3,-16(fp)
18014b7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
18014b80:	e0bffd17 	ldw	r2,-12(fp)
18014b84:	e0fffc17 	ldw	r3,-16(fp)
18014b88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
18014b8c:	e0bffc17 	ldw	r2,-16(fp)
18014b90:	10c00017 	ldw	r3,0(r2)
18014b94:	e0bffd17 	ldw	r2,-12(fp)
18014b98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
18014b9c:	e0bffc17 	ldw	r2,-16(fp)
18014ba0:	10800017 	ldw	r2,0(r2)
18014ba4:	e0fffd17 	ldw	r3,-12(fp)
18014ba8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
18014bac:	e0bffc17 	ldw	r2,-16(fp)
18014bb0:	e0fffd17 	ldw	r3,-12(fp)
18014bb4:	10c00015 	stw	r3,0(r2)

  return 0;  
18014bb8:	0005883a 	mov	r2,zero
}
18014bbc:	e037883a 	mov	sp,fp
18014bc0:	dfc00117 	ldw	ra,4(sp)
18014bc4:	df000017 	ldw	fp,0(sp)
18014bc8:	dec00204 	addi	sp,sp,8
18014bcc:	f800283a 	ret

18014bd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
18014bd0:	defffd04 	addi	sp,sp,-12
18014bd4:	dfc00215 	stw	ra,8(sp)
18014bd8:	df000115 	stw	fp,4(sp)
18014bdc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
18014be0:	00860074 	movhi	r2,6145
18014be4:	1096e104 	addi	r2,r2,23428
18014be8:	e0bfff15 	stw	r2,-4(fp)
18014bec:	00000606 	br	18014c08 <_do_ctors+0x38>
        (*ctor) (); 
18014bf0:	e0bfff17 	ldw	r2,-4(fp)
18014bf4:	10800017 	ldw	r2,0(r2)
18014bf8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
18014bfc:	e0bfff17 	ldw	r2,-4(fp)
18014c00:	10bfff04 	addi	r2,r2,-4
18014c04:	e0bfff15 	stw	r2,-4(fp)
18014c08:	e0ffff17 	ldw	r3,-4(fp)
18014c0c:	00860074 	movhi	r2,6145
18014c10:	1096e204 	addi	r2,r2,23432
18014c14:	18bff62e 	bgeu	r3,r2,18014bf0 <__alt_data_end+0xf8014bf0>
        (*ctor) (); 
}
18014c18:	0001883a 	nop
18014c1c:	e037883a 	mov	sp,fp
18014c20:	dfc00117 	ldw	ra,4(sp)
18014c24:	df000017 	ldw	fp,0(sp)
18014c28:	dec00204 	addi	sp,sp,8
18014c2c:	f800283a 	ret

18014c30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
18014c30:	defffd04 	addi	sp,sp,-12
18014c34:	dfc00215 	stw	ra,8(sp)
18014c38:	df000115 	stw	fp,4(sp)
18014c3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
18014c40:	00860074 	movhi	r2,6145
18014c44:	1096e104 	addi	r2,r2,23428
18014c48:	e0bfff15 	stw	r2,-4(fp)
18014c4c:	00000606 	br	18014c68 <_do_dtors+0x38>
        (*dtor) (); 
18014c50:	e0bfff17 	ldw	r2,-4(fp)
18014c54:	10800017 	ldw	r2,0(r2)
18014c58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
18014c5c:	e0bfff17 	ldw	r2,-4(fp)
18014c60:	10bfff04 	addi	r2,r2,-4
18014c64:	e0bfff15 	stw	r2,-4(fp)
18014c68:	e0ffff17 	ldw	r3,-4(fp)
18014c6c:	00860074 	movhi	r2,6145
18014c70:	1096e204 	addi	r2,r2,23432
18014c74:	18bff62e 	bgeu	r3,r2,18014c50 <__alt_data_end+0xf8014c50>
        (*dtor) (); 
}
18014c78:	0001883a 	nop
18014c7c:	e037883a 	mov	sp,fp
18014c80:	dfc00117 	ldw	ra,4(sp)
18014c84:	df000017 	ldw	fp,0(sp)
18014c88:	dec00204 	addi	sp,sp,8
18014c8c:	f800283a 	ret

18014c90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
18014c90:	deffff04 	addi	sp,sp,-4
18014c94:	df000015 	stw	fp,0(sp)
18014c98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
18014c9c:	0001883a 	nop
18014ca0:	e037883a 	mov	sp,fp
18014ca4:	df000017 	ldw	fp,0(sp)
18014ca8:	dec00104 	addi	sp,sp,4
18014cac:	f800283a 	ret

18014cb0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
18014cb0:	defff904 	addi	sp,sp,-28
18014cb4:	dfc00615 	stw	ra,24(sp)
18014cb8:	df000515 	stw	fp,20(sp)
18014cbc:	df000504 	addi	fp,sp,20
18014cc0:	e13ffc15 	stw	r4,-16(fp)
18014cc4:	e17ffd15 	stw	r5,-12(fp)
18014cc8:	e1bffe15 	stw	r6,-8(fp)
18014ccc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
18014cd0:	e0800217 	ldw	r2,8(fp)
18014cd4:	d8800015 	stw	r2,0(sp)
18014cd8:	e1ffff17 	ldw	r7,-4(fp)
18014cdc:	e1bffe17 	ldw	r6,-8(fp)
18014ce0:	e17ffd17 	ldw	r5,-12(fp)
18014ce4:	e13ffc17 	ldw	r4,-16(fp)
18014ce8:	8014e600 	call	18014e60 <alt_iic_isr_register>
}  
18014cec:	e037883a 	mov	sp,fp
18014cf0:	dfc00117 	ldw	ra,4(sp)
18014cf4:	df000017 	ldw	fp,0(sp)
18014cf8:	dec00204 	addi	sp,sp,8
18014cfc:	f800283a 	ret

18014d00 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
18014d00:	defff904 	addi	sp,sp,-28
18014d04:	df000615 	stw	fp,24(sp)
18014d08:	df000604 	addi	fp,sp,24
18014d0c:	e13ffe15 	stw	r4,-8(fp)
18014d10:	e17fff15 	stw	r5,-4(fp)
18014d14:	e0bfff17 	ldw	r2,-4(fp)
18014d18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18014d1c:	0005303a 	rdctl	r2,status
18014d20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
18014d24:	e0fffb17 	ldw	r3,-20(fp)
18014d28:	00bfff84 	movi	r2,-2
18014d2c:	1884703a 	and	r2,r3,r2
18014d30:	1001703a 	wrctl	status,r2
  
  return context;
18014d34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
18014d38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
18014d3c:	00c00044 	movi	r3,1
18014d40:	e0bffa17 	ldw	r2,-24(fp)
18014d44:	1884983a 	sll	r2,r3,r2
18014d48:	1007883a 	mov	r3,r2
18014d4c:	d0a79217 	ldw	r2,-25016(gp)
18014d50:	1884b03a 	or	r2,r3,r2
18014d54:	d0a79215 	stw	r2,-25016(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
18014d58:	d0a79217 	ldw	r2,-25016(gp)
18014d5c:	100170fa 	wrctl	ienable,r2
18014d60:	e0bffc17 	ldw	r2,-16(fp)
18014d64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
18014d68:	e0bffd17 	ldw	r2,-12(fp)
18014d6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
18014d70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
18014d74:	0001883a 	nop
}
18014d78:	e037883a 	mov	sp,fp
18014d7c:	df000017 	ldw	fp,0(sp)
18014d80:	dec00104 	addi	sp,sp,4
18014d84:	f800283a 	ret

18014d88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
18014d88:	defff904 	addi	sp,sp,-28
18014d8c:	df000615 	stw	fp,24(sp)
18014d90:	df000604 	addi	fp,sp,24
18014d94:	e13ffe15 	stw	r4,-8(fp)
18014d98:	e17fff15 	stw	r5,-4(fp)
18014d9c:	e0bfff17 	ldw	r2,-4(fp)
18014da0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18014da4:	0005303a 	rdctl	r2,status
18014da8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
18014dac:	e0fffb17 	ldw	r3,-20(fp)
18014db0:	00bfff84 	movi	r2,-2
18014db4:	1884703a 	and	r2,r3,r2
18014db8:	1001703a 	wrctl	status,r2
  
  return context;
18014dbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
18014dc0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
18014dc4:	00c00044 	movi	r3,1
18014dc8:	e0bffa17 	ldw	r2,-24(fp)
18014dcc:	1884983a 	sll	r2,r3,r2
18014dd0:	0084303a 	nor	r2,zero,r2
18014dd4:	1007883a 	mov	r3,r2
18014dd8:	d0a79217 	ldw	r2,-25016(gp)
18014ddc:	1884703a 	and	r2,r3,r2
18014de0:	d0a79215 	stw	r2,-25016(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
18014de4:	d0a79217 	ldw	r2,-25016(gp)
18014de8:	100170fa 	wrctl	ienable,r2
18014dec:	e0bffc17 	ldw	r2,-16(fp)
18014df0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
18014df4:	e0bffd17 	ldw	r2,-12(fp)
18014df8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
18014dfc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
18014e00:	0001883a 	nop
}
18014e04:	e037883a 	mov	sp,fp
18014e08:	df000017 	ldw	fp,0(sp)
18014e0c:	dec00104 	addi	sp,sp,4
18014e10:	f800283a 	ret

18014e14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
18014e14:	defffc04 	addi	sp,sp,-16
18014e18:	df000315 	stw	fp,12(sp)
18014e1c:	df000304 	addi	fp,sp,12
18014e20:	e13ffe15 	stw	r4,-8(fp)
18014e24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
18014e28:	000530fa 	rdctl	r2,ienable
18014e2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
18014e30:	00c00044 	movi	r3,1
18014e34:	e0bfff17 	ldw	r2,-4(fp)
18014e38:	1884983a 	sll	r2,r3,r2
18014e3c:	1007883a 	mov	r3,r2
18014e40:	e0bffd17 	ldw	r2,-12(fp)
18014e44:	1884703a 	and	r2,r3,r2
18014e48:	1004c03a 	cmpne	r2,r2,zero
18014e4c:	10803fcc 	andi	r2,r2,255
}
18014e50:	e037883a 	mov	sp,fp
18014e54:	df000017 	ldw	fp,0(sp)
18014e58:	dec00104 	addi	sp,sp,4
18014e5c:	f800283a 	ret

18014e60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
18014e60:	defff504 	addi	sp,sp,-44
18014e64:	dfc00a15 	stw	ra,40(sp)
18014e68:	df000915 	stw	fp,36(sp)
18014e6c:	df000904 	addi	fp,sp,36
18014e70:	e13ffc15 	stw	r4,-16(fp)
18014e74:	e17ffd15 	stw	r5,-12(fp)
18014e78:	e1bffe15 	stw	r6,-8(fp)
18014e7c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
18014e80:	00bffa84 	movi	r2,-22
18014e84:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
18014e88:	e0bffd17 	ldw	r2,-12(fp)
18014e8c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
18014e90:	e0bff817 	ldw	r2,-32(fp)
18014e94:	10800808 	cmpgei	r2,r2,32
18014e98:	1000271e 	bne	r2,zero,18014f38 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18014e9c:	0005303a 	rdctl	r2,status
18014ea0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
18014ea4:	e0fffb17 	ldw	r3,-20(fp)
18014ea8:	00bfff84 	movi	r2,-2
18014eac:	1884703a 	and	r2,r3,r2
18014eb0:	1001703a 	wrctl	status,r2
  
  return context;
18014eb4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
18014eb8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
18014ebc:	008600b4 	movhi	r2,6146
18014ec0:	10a8bc04 	addi	r2,r2,-23824
18014ec4:	e0fff817 	ldw	r3,-32(fp)
18014ec8:	180690fa 	slli	r3,r3,3
18014ecc:	10c5883a 	add	r2,r2,r3
18014ed0:	e0fffe17 	ldw	r3,-8(fp)
18014ed4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
18014ed8:	008600b4 	movhi	r2,6146
18014edc:	10a8bc04 	addi	r2,r2,-23824
18014ee0:	e0fff817 	ldw	r3,-32(fp)
18014ee4:	180690fa 	slli	r3,r3,3
18014ee8:	10c5883a 	add	r2,r2,r3
18014eec:	10800104 	addi	r2,r2,4
18014ef0:	e0ffff17 	ldw	r3,-4(fp)
18014ef4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
18014ef8:	e0bffe17 	ldw	r2,-8(fp)
18014efc:	10000526 	beq	r2,zero,18014f14 <alt_iic_isr_register+0xb4>
18014f00:	e0bff817 	ldw	r2,-32(fp)
18014f04:	100b883a 	mov	r5,r2
18014f08:	e13ffc17 	ldw	r4,-16(fp)
18014f0c:	8014d000 	call	18014d00 <alt_ic_irq_enable>
18014f10:	00000406 	br	18014f24 <alt_iic_isr_register+0xc4>
18014f14:	e0bff817 	ldw	r2,-32(fp)
18014f18:	100b883a 	mov	r5,r2
18014f1c:	e13ffc17 	ldw	r4,-16(fp)
18014f20:	8014d880 	call	18014d88 <alt_ic_irq_disable>
18014f24:	e0bff715 	stw	r2,-36(fp)
18014f28:	e0bffa17 	ldw	r2,-24(fp)
18014f2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
18014f30:	e0bff917 	ldw	r2,-28(fp)
18014f34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
18014f38:	e0bff717 	ldw	r2,-36(fp)
}
18014f3c:	e037883a 	mov	sp,fp
18014f40:	dfc00117 	ldw	ra,4(sp)
18014f44:	df000017 	ldw	fp,0(sp)
18014f48:	dec00204 	addi	sp,sp,8
18014f4c:	f800283a 	ret

18014f50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
18014f50:	defff804 	addi	sp,sp,-32
18014f54:	dfc00715 	stw	ra,28(sp)
18014f58:	df000615 	stw	fp,24(sp)
18014f5c:	dc000515 	stw	r16,20(sp)
18014f60:	df000604 	addi	fp,sp,24
18014f64:	e13ffb15 	stw	r4,-20(fp)
18014f68:	e17ffc15 	stw	r5,-16(fp)
18014f6c:	e1bffd15 	stw	r6,-12(fp)
18014f70:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
18014f74:	e1bffe17 	ldw	r6,-8(fp)
18014f78:	e17ffd17 	ldw	r5,-12(fp)
18014f7c:	e13ffc17 	ldw	r4,-16(fp)
18014f80:	80151d80 	call	180151d8 <open>
18014f84:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
18014f88:	e0bffa17 	ldw	r2,-24(fp)
18014f8c:	10002216 	blt	r2,zero,18015018 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
18014f90:	04060074 	movhi	r16,6145
18014f94:	841ca404 	addi	r16,r16,29328
18014f98:	e0bffa17 	ldw	r2,-24(fp)
18014f9c:	01400304 	movi	r5,12
18014fa0:	1009883a 	mov	r4,r2
18014fa4:	8002b640 	call	18002b64 <__mulsi3>
18014fa8:	8085883a 	add	r2,r16,r2
18014fac:	10c00017 	ldw	r3,0(r2)
18014fb0:	e0bffb17 	ldw	r2,-20(fp)
18014fb4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
18014fb8:	04060074 	movhi	r16,6145
18014fbc:	841ca404 	addi	r16,r16,29328
18014fc0:	e0bffa17 	ldw	r2,-24(fp)
18014fc4:	01400304 	movi	r5,12
18014fc8:	1009883a 	mov	r4,r2
18014fcc:	8002b640 	call	18002b64 <__mulsi3>
18014fd0:	8085883a 	add	r2,r16,r2
18014fd4:	10800104 	addi	r2,r2,4
18014fd8:	10c00017 	ldw	r3,0(r2)
18014fdc:	e0bffb17 	ldw	r2,-20(fp)
18014fe0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
18014fe4:	04060074 	movhi	r16,6145
18014fe8:	841ca404 	addi	r16,r16,29328
18014fec:	e0bffa17 	ldw	r2,-24(fp)
18014ff0:	01400304 	movi	r5,12
18014ff4:	1009883a 	mov	r4,r2
18014ff8:	8002b640 	call	18002b64 <__mulsi3>
18014ffc:	8085883a 	add	r2,r16,r2
18015000:	10800204 	addi	r2,r2,8
18015004:	10c00017 	ldw	r3,0(r2)
18015008:	e0bffb17 	ldw	r2,-20(fp)
1801500c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
18015010:	e13ffa17 	ldw	r4,-24(fp)
18015014:	8013a8c0 	call	18013a8c <alt_release_fd>
  }
} 
18015018:	0001883a 	nop
1801501c:	e6ffff04 	addi	sp,fp,-4
18015020:	dfc00217 	ldw	ra,8(sp)
18015024:	df000117 	ldw	fp,4(sp)
18015028:	dc000017 	ldw	r16,0(sp)
1801502c:	dec00304 	addi	sp,sp,12
18015030:	f800283a 	ret

18015034 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
18015034:	defffb04 	addi	sp,sp,-20
18015038:	dfc00415 	stw	ra,16(sp)
1801503c:	df000315 	stw	fp,12(sp)
18015040:	df000304 	addi	fp,sp,12
18015044:	e13ffd15 	stw	r4,-12(fp)
18015048:	e17ffe15 	stw	r5,-8(fp)
1801504c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
18015050:	01c07fc4 	movi	r7,511
18015054:	01800044 	movi	r6,1
18015058:	e17ffd17 	ldw	r5,-12(fp)
1801505c:	01060074 	movhi	r4,6145
18015060:	211ca704 	addi	r4,r4,29340
18015064:	8014f500 	call	18014f50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
18015068:	01c07fc4 	movi	r7,511
1801506c:	000d883a 	mov	r6,zero
18015070:	e17ffe17 	ldw	r5,-8(fp)
18015074:	01060074 	movhi	r4,6145
18015078:	211ca404 	addi	r4,r4,29328
1801507c:	8014f500 	call	18014f50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
18015080:	01c07fc4 	movi	r7,511
18015084:	01800044 	movi	r6,1
18015088:	e17fff17 	ldw	r5,-4(fp)
1801508c:	01060074 	movhi	r4,6145
18015090:	211caa04 	addi	r4,r4,29352
18015094:	8014f500 	call	18014f50 <alt_open_fd>
}  
18015098:	0001883a 	nop
1801509c:	e037883a 	mov	sp,fp
180150a0:	dfc00117 	ldw	ra,4(sp)
180150a4:	df000017 	ldw	fp,0(sp)
180150a8:	dec00204 	addi	sp,sp,8
180150ac:	f800283a 	ret

180150b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
180150b0:	defffe04 	addi	sp,sp,-8
180150b4:	dfc00115 	stw	ra,4(sp)
180150b8:	df000015 	stw	fp,0(sp)
180150bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
180150c0:	d0a00d17 	ldw	r2,-32716(gp)
180150c4:	10000326 	beq	r2,zero,180150d4 <alt_get_errno+0x24>
180150c8:	d0a00d17 	ldw	r2,-32716(gp)
180150cc:	103ee83a 	callr	r2
180150d0:	00000106 	br	180150d8 <alt_get_errno+0x28>
180150d4:	d0a78e04 	addi	r2,gp,-25032
}
180150d8:	e037883a 	mov	sp,fp
180150dc:	dfc00117 	ldw	ra,4(sp)
180150e0:	df000017 	ldw	fp,0(sp)
180150e4:	dec00204 	addi	sp,sp,8
180150e8:	f800283a 	ret

180150ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
180150ec:	defffb04 	addi	sp,sp,-20
180150f0:	dfc00415 	stw	ra,16(sp)
180150f4:	df000315 	stw	fp,12(sp)
180150f8:	dc000215 	stw	r16,8(sp)
180150fc:	df000304 	addi	fp,sp,12
18015100:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
18015104:	e0bffe17 	ldw	r2,-8(fp)
18015108:	10800217 	ldw	r2,8(r2)
1801510c:	10d00034 	orhi	r3,r2,16384
18015110:	e0bffe17 	ldw	r2,-8(fp)
18015114:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
18015118:	e03ffd15 	stw	zero,-12(fp)
1801511c:	00002306 	br	180151ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
18015120:	04060074 	movhi	r16,6145
18015124:	841ca404 	addi	r16,r16,29328
18015128:	e0bffd17 	ldw	r2,-12(fp)
1801512c:	01400304 	movi	r5,12
18015130:	1009883a 	mov	r4,r2
18015134:	8002b640 	call	18002b64 <__mulsi3>
18015138:	8085883a 	add	r2,r16,r2
1801513c:	10c00017 	ldw	r3,0(r2)
18015140:	e0bffe17 	ldw	r2,-8(fp)
18015144:	10800017 	ldw	r2,0(r2)
18015148:	1880151e 	bne	r3,r2,180151a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1801514c:	04060074 	movhi	r16,6145
18015150:	841ca404 	addi	r16,r16,29328
18015154:	e0bffd17 	ldw	r2,-12(fp)
18015158:	01400304 	movi	r5,12
1801515c:	1009883a 	mov	r4,r2
18015160:	8002b640 	call	18002b64 <__mulsi3>
18015164:	8085883a 	add	r2,r16,r2
18015168:	10800204 	addi	r2,r2,8
1801516c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
18015170:	10000b0e 	bge	r2,zero,180151a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
18015174:	01400304 	movi	r5,12
18015178:	e13ffd17 	ldw	r4,-12(fp)
1801517c:	8002b640 	call	18002b64 <__mulsi3>
18015180:	1007883a 	mov	r3,r2
18015184:	00860074 	movhi	r2,6145
18015188:	109ca404 	addi	r2,r2,29328
1801518c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
18015190:	e0bffe17 	ldw	r2,-8(fp)
18015194:	18800226 	beq	r3,r2,180151a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
18015198:	00bffcc4 	movi	r2,-13
1801519c:	00000806 	br	180151c0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
180151a0:	e0bffd17 	ldw	r2,-12(fp)
180151a4:	10800044 	addi	r2,r2,1
180151a8:	e0bffd15 	stw	r2,-12(fp)
180151ac:	d0a00c17 	ldw	r2,-32720(gp)
180151b0:	1007883a 	mov	r3,r2
180151b4:	e0bffd17 	ldw	r2,-12(fp)
180151b8:	18bfd92e 	bgeu	r3,r2,18015120 <__alt_data_end+0xf8015120>
    }
  }
  
  /* The device is not locked */
 
  return 0;
180151bc:	0005883a 	mov	r2,zero
}
180151c0:	e6ffff04 	addi	sp,fp,-4
180151c4:	dfc00217 	ldw	ra,8(sp)
180151c8:	df000117 	ldw	fp,4(sp)
180151cc:	dc000017 	ldw	r16,0(sp)
180151d0:	dec00304 	addi	sp,sp,12
180151d4:	f800283a 	ret

180151d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
180151d8:	defff604 	addi	sp,sp,-40
180151dc:	dfc00915 	stw	ra,36(sp)
180151e0:	df000815 	stw	fp,32(sp)
180151e4:	df000804 	addi	fp,sp,32
180151e8:	e13ffd15 	stw	r4,-12(fp)
180151ec:	e17ffe15 	stw	r5,-8(fp)
180151f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
180151f4:	00bfffc4 	movi	r2,-1
180151f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
180151fc:	00bffb44 	movi	r2,-19
18015200:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
18015204:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
18015208:	d1600a04 	addi	r5,gp,-32728
1801520c:	e13ffd17 	ldw	r4,-12(fp)
18015210:	80154fc0 	call	180154fc <alt_find_dev>
18015214:	e0bff815 	stw	r2,-32(fp)
18015218:	e0bff817 	ldw	r2,-32(fp)
1801521c:	1000051e 	bne	r2,zero,18015234 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
18015220:	e13ffd17 	ldw	r4,-12(fp)
18015224:	801558c0 	call	1801558c <alt_find_file>
18015228:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1801522c:	00800044 	movi	r2,1
18015230:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
18015234:	e0bff817 	ldw	r2,-32(fp)
18015238:	10002b26 	beq	r2,zero,180152e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1801523c:	e13ff817 	ldw	r4,-32(fp)
18015240:	80156940 	call	18015694 <alt_get_fd>
18015244:	e0bff915 	stw	r2,-28(fp)
18015248:	e0bff917 	ldw	r2,-28(fp)
1801524c:	1000030e 	bge	r2,zero,1801525c <open+0x84>
    {
      status = index;
18015250:	e0bff917 	ldw	r2,-28(fp)
18015254:	e0bffa15 	stw	r2,-24(fp)
18015258:	00002506 	br	180152f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1801525c:	01400304 	movi	r5,12
18015260:	e13ff917 	ldw	r4,-28(fp)
18015264:	8002b640 	call	18002b64 <__mulsi3>
18015268:	1007883a 	mov	r3,r2
1801526c:	00860074 	movhi	r2,6145
18015270:	109ca404 	addi	r2,r2,29328
18015274:	1885883a 	add	r2,r3,r2
18015278:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1801527c:	e0fffe17 	ldw	r3,-8(fp)
18015280:	00900034 	movhi	r2,16384
18015284:	10bfffc4 	addi	r2,r2,-1
18015288:	1886703a 	and	r3,r3,r2
1801528c:	e0bffc17 	ldw	r2,-16(fp)
18015290:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
18015294:	e0bffb17 	ldw	r2,-20(fp)
18015298:	1000051e 	bne	r2,zero,180152b0 <open+0xd8>
1801529c:	e13ffc17 	ldw	r4,-16(fp)
180152a0:	80150ec0 	call	180150ec <alt_file_locked>
180152a4:	e0bffa15 	stw	r2,-24(fp)
180152a8:	e0bffa17 	ldw	r2,-24(fp)
180152ac:	10001016 	blt	r2,zero,180152f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
180152b0:	e0bff817 	ldw	r2,-32(fp)
180152b4:	10800317 	ldw	r2,12(r2)
180152b8:	10000826 	beq	r2,zero,180152dc <open+0x104>
180152bc:	e0bff817 	ldw	r2,-32(fp)
180152c0:	10800317 	ldw	r2,12(r2)
180152c4:	e1ffff17 	ldw	r7,-4(fp)
180152c8:	e1bffe17 	ldw	r6,-8(fp)
180152cc:	e17ffd17 	ldw	r5,-12(fp)
180152d0:	e13ffc17 	ldw	r4,-16(fp)
180152d4:	103ee83a 	callr	r2
180152d8:	00000106 	br	180152e0 <open+0x108>
180152dc:	0005883a 	mov	r2,zero
180152e0:	e0bffa15 	stw	r2,-24(fp)
180152e4:	00000206 	br	180152f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
180152e8:	00bffb44 	movi	r2,-19
180152ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
180152f0:	e0bffa17 	ldw	r2,-24(fp)
180152f4:	1000090e 	bge	r2,zero,1801531c <open+0x144>
  {
    alt_release_fd (index);  
180152f8:	e13ff917 	ldw	r4,-28(fp)
180152fc:	8013a8c0 	call	18013a8c <alt_release_fd>
    ALT_ERRNO = -status;
18015300:	80150b00 	call	180150b0 <alt_get_errno>
18015304:	1007883a 	mov	r3,r2
18015308:	e0bffa17 	ldw	r2,-24(fp)
1801530c:	0085c83a 	sub	r2,zero,r2
18015310:	18800015 	stw	r2,0(r3)
    return -1;
18015314:	00bfffc4 	movi	r2,-1
18015318:	00000106 	br	18015320 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1801531c:	e0bff917 	ldw	r2,-28(fp)
}
18015320:	e037883a 	mov	sp,fp
18015324:	dfc00117 	ldw	ra,4(sp)
18015328:	df000017 	ldw	fp,0(sp)
1801532c:	dec00204 	addi	sp,sp,8
18015330:	f800283a 	ret

18015334 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
18015334:	defffa04 	addi	sp,sp,-24
18015338:	df000515 	stw	fp,20(sp)
1801533c:	df000504 	addi	fp,sp,20
18015340:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
18015344:	0005303a 	rdctl	r2,status
18015348:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1801534c:	e0fffc17 	ldw	r3,-16(fp)
18015350:	00bfff84 	movi	r2,-2
18015354:	1884703a 	and	r2,r3,r2
18015358:	1001703a 	wrctl	status,r2
  
  return context;
1801535c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
18015360:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
18015364:	e0bfff17 	ldw	r2,-4(fp)
18015368:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1801536c:	e0bffd17 	ldw	r2,-12(fp)
18015370:	10800017 	ldw	r2,0(r2)
18015374:	e0fffd17 	ldw	r3,-12(fp)
18015378:	18c00117 	ldw	r3,4(r3)
1801537c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
18015380:	e0bffd17 	ldw	r2,-12(fp)
18015384:	10800117 	ldw	r2,4(r2)
18015388:	e0fffd17 	ldw	r3,-12(fp)
1801538c:	18c00017 	ldw	r3,0(r3)
18015390:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
18015394:	e0bffd17 	ldw	r2,-12(fp)
18015398:	e0fffd17 	ldw	r3,-12(fp)
1801539c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
180153a0:	e0bffd17 	ldw	r2,-12(fp)
180153a4:	e0fffd17 	ldw	r3,-12(fp)
180153a8:	10c00015 	stw	r3,0(r2)
180153ac:	e0bffb17 	ldw	r2,-20(fp)
180153b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
180153b4:	e0bffe17 	ldw	r2,-8(fp)
180153b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
180153bc:	0001883a 	nop
180153c0:	e037883a 	mov	sp,fp
180153c4:	df000017 	ldw	fp,0(sp)
180153c8:	dec00104 	addi	sp,sp,4
180153cc:	f800283a 	ret

180153d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
180153d0:	defffb04 	addi	sp,sp,-20
180153d4:	dfc00415 	stw	ra,16(sp)
180153d8:	df000315 	stw	fp,12(sp)
180153dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
180153e0:	d0a01017 	ldw	r2,-32704(gp)
180153e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
180153e8:	d0a79417 	ldw	r2,-25008(gp)
180153ec:	10800044 	addi	r2,r2,1
180153f0:	d0a79415 	stw	r2,-25008(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
180153f4:	00002e06 	br	180154b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
180153f8:	e0bffd17 	ldw	r2,-12(fp)
180153fc:	10800017 	ldw	r2,0(r2)
18015400:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
18015404:	e0bffd17 	ldw	r2,-12(fp)
18015408:	10800403 	ldbu	r2,16(r2)
1801540c:	10803fcc 	andi	r2,r2,255
18015410:	10000426 	beq	r2,zero,18015424 <alt_tick+0x54>
18015414:	d0a79417 	ldw	r2,-25008(gp)
18015418:	1000021e 	bne	r2,zero,18015424 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1801541c:	e0bffd17 	ldw	r2,-12(fp)
18015420:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
18015424:	e0bffd17 	ldw	r2,-12(fp)
18015428:	10800217 	ldw	r2,8(r2)
1801542c:	d0e79417 	ldw	r3,-25008(gp)
18015430:	18801d36 	bltu	r3,r2,180154a8 <alt_tick+0xd8>
18015434:	e0bffd17 	ldw	r2,-12(fp)
18015438:	10800403 	ldbu	r2,16(r2)
1801543c:	10803fcc 	andi	r2,r2,255
18015440:	1000191e 	bne	r2,zero,180154a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
18015444:	e0bffd17 	ldw	r2,-12(fp)
18015448:	10800317 	ldw	r2,12(r2)
1801544c:	e0fffd17 	ldw	r3,-12(fp)
18015450:	18c00517 	ldw	r3,20(r3)
18015454:	1809883a 	mov	r4,r3
18015458:	103ee83a 	callr	r2
1801545c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
18015460:	e0bfff17 	ldw	r2,-4(fp)
18015464:	1000031e 	bne	r2,zero,18015474 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
18015468:	e13ffd17 	ldw	r4,-12(fp)
1801546c:	80153340 	call	18015334 <alt_alarm_stop>
18015470:	00000d06 	br	180154a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
18015474:	e0bffd17 	ldw	r2,-12(fp)
18015478:	10c00217 	ldw	r3,8(r2)
1801547c:	e0bfff17 	ldw	r2,-4(fp)
18015480:	1887883a 	add	r3,r3,r2
18015484:	e0bffd17 	ldw	r2,-12(fp)
18015488:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1801548c:	e0bffd17 	ldw	r2,-12(fp)
18015490:	10c00217 	ldw	r3,8(r2)
18015494:	d0a79417 	ldw	r2,-25008(gp)
18015498:	1880032e 	bgeu	r3,r2,180154a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1801549c:	e0bffd17 	ldw	r2,-12(fp)
180154a0:	00c00044 	movi	r3,1
180154a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
180154a8:	e0bffe17 	ldw	r2,-8(fp)
180154ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
180154b0:	e0fffd17 	ldw	r3,-12(fp)
180154b4:	d0a01004 	addi	r2,gp,-32704
180154b8:	18bfcf1e 	bne	r3,r2,180153f8 <__alt_data_end+0xf80153f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
180154bc:	0001883a 	nop
}
180154c0:	0001883a 	nop
180154c4:	e037883a 	mov	sp,fp
180154c8:	dfc00117 	ldw	ra,4(sp)
180154cc:	df000017 	ldw	fp,0(sp)
180154d0:	dec00204 	addi	sp,sp,8
180154d4:	f800283a 	ret

180154d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
180154d8:	deffff04 	addi	sp,sp,-4
180154dc:	df000015 	stw	fp,0(sp)
180154e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
180154e4:	000170fa 	wrctl	ienable,zero
}
180154e8:	0001883a 	nop
180154ec:	e037883a 	mov	sp,fp
180154f0:	df000017 	ldw	fp,0(sp)
180154f4:	dec00104 	addi	sp,sp,4
180154f8:	f800283a 	ret

180154fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
180154fc:	defffa04 	addi	sp,sp,-24
18015500:	dfc00515 	stw	ra,20(sp)
18015504:	df000415 	stw	fp,16(sp)
18015508:	df000404 	addi	fp,sp,16
1801550c:	e13ffe15 	stw	r4,-8(fp)
18015510:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
18015514:	e0bfff17 	ldw	r2,-4(fp)
18015518:	10800017 	ldw	r2,0(r2)
1801551c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
18015520:	e13ffe17 	ldw	r4,-8(fp)
18015524:	8002e0c0 	call	18002e0c <strlen>
18015528:	10800044 	addi	r2,r2,1
1801552c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
18015530:	00000d06 	br	18015568 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
18015534:	e0bffc17 	ldw	r2,-16(fp)
18015538:	10800217 	ldw	r2,8(r2)
1801553c:	e0fffd17 	ldw	r3,-12(fp)
18015540:	180d883a 	mov	r6,r3
18015544:	e17ffe17 	ldw	r5,-8(fp)
18015548:	1009883a 	mov	r4,r2
1801554c:	80158400 	call	18015840 <memcmp>
18015550:	1000021e 	bne	r2,zero,1801555c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
18015554:	e0bffc17 	ldw	r2,-16(fp)
18015558:	00000706 	br	18015578 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1801555c:	e0bffc17 	ldw	r2,-16(fp)
18015560:	10800017 	ldw	r2,0(r2)
18015564:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
18015568:	e0fffc17 	ldw	r3,-16(fp)
1801556c:	e0bfff17 	ldw	r2,-4(fp)
18015570:	18bff01e 	bne	r3,r2,18015534 <__alt_data_end+0xf8015534>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
18015574:	0005883a 	mov	r2,zero
}
18015578:	e037883a 	mov	sp,fp
1801557c:	dfc00117 	ldw	ra,4(sp)
18015580:	df000017 	ldw	fp,0(sp)
18015584:	dec00204 	addi	sp,sp,8
18015588:	f800283a 	ret

1801558c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1801558c:	defffb04 	addi	sp,sp,-20
18015590:	dfc00415 	stw	ra,16(sp)
18015594:	df000315 	stw	fp,12(sp)
18015598:	df000304 	addi	fp,sp,12
1801559c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
180155a0:	d0a00817 	ldw	r2,-32736(gp)
180155a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
180155a8:	00003106 	br	18015670 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
180155ac:	e0bffd17 	ldw	r2,-12(fp)
180155b0:	10800217 	ldw	r2,8(r2)
180155b4:	1009883a 	mov	r4,r2
180155b8:	8002e0c0 	call	18002e0c <strlen>
180155bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
180155c0:	e0bffd17 	ldw	r2,-12(fp)
180155c4:	10c00217 	ldw	r3,8(r2)
180155c8:	e0bffe17 	ldw	r2,-8(fp)
180155cc:	10bfffc4 	addi	r2,r2,-1
180155d0:	1885883a 	add	r2,r3,r2
180155d4:	10800003 	ldbu	r2,0(r2)
180155d8:	10803fcc 	andi	r2,r2,255
180155dc:	1080201c 	xori	r2,r2,128
180155e0:	10bfe004 	addi	r2,r2,-128
180155e4:	10800bd8 	cmpnei	r2,r2,47
180155e8:	1000031e 	bne	r2,zero,180155f8 <alt_find_file+0x6c>
    {
      len -= 1;
180155ec:	e0bffe17 	ldw	r2,-8(fp)
180155f0:	10bfffc4 	addi	r2,r2,-1
180155f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
180155f8:	e0bffe17 	ldw	r2,-8(fp)
180155fc:	e0ffff17 	ldw	r3,-4(fp)
18015600:	1885883a 	add	r2,r3,r2
18015604:	10800003 	ldbu	r2,0(r2)
18015608:	10803fcc 	andi	r2,r2,255
1801560c:	1080201c 	xori	r2,r2,128
18015610:	10bfe004 	addi	r2,r2,-128
18015614:	10800be0 	cmpeqi	r2,r2,47
18015618:	1000081e 	bne	r2,zero,1801563c <alt_find_file+0xb0>
1801561c:	e0bffe17 	ldw	r2,-8(fp)
18015620:	e0ffff17 	ldw	r3,-4(fp)
18015624:	1885883a 	add	r2,r3,r2
18015628:	10800003 	ldbu	r2,0(r2)
1801562c:	10803fcc 	andi	r2,r2,255
18015630:	1080201c 	xori	r2,r2,128
18015634:	10bfe004 	addi	r2,r2,-128
18015638:	10000a1e 	bne	r2,zero,18015664 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1801563c:	e0bffd17 	ldw	r2,-12(fp)
18015640:	10800217 	ldw	r2,8(r2)
18015644:	e0fffe17 	ldw	r3,-8(fp)
18015648:	180d883a 	mov	r6,r3
1801564c:	e17fff17 	ldw	r5,-4(fp)
18015650:	1009883a 	mov	r4,r2
18015654:	80158400 	call	18015840 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
18015658:	1000021e 	bne	r2,zero,18015664 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1801565c:	e0bffd17 	ldw	r2,-12(fp)
18015660:	00000706 	br	18015680 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
18015664:	e0bffd17 	ldw	r2,-12(fp)
18015668:	10800017 	ldw	r2,0(r2)
1801566c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
18015670:	e0fffd17 	ldw	r3,-12(fp)
18015674:	d0a00804 	addi	r2,gp,-32736
18015678:	18bfcc1e 	bne	r3,r2,180155ac <__alt_data_end+0xf80155ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1801567c:	0005883a 	mov	r2,zero
}
18015680:	e037883a 	mov	sp,fp
18015684:	dfc00117 	ldw	ra,4(sp)
18015688:	df000017 	ldw	fp,0(sp)
1801568c:	dec00204 	addi	sp,sp,8
18015690:	f800283a 	ret

18015694 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
18015694:	defffa04 	addi	sp,sp,-24
18015698:	dfc00515 	stw	ra,20(sp)
1801569c:	df000415 	stw	fp,16(sp)
180156a0:	dc000315 	stw	r16,12(sp)
180156a4:	df000404 	addi	fp,sp,16
180156a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
180156ac:	00bffa04 	movi	r2,-24
180156b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
180156b4:	e03ffc15 	stw	zero,-16(fp)
180156b8:	00001d06 	br	18015730 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
180156bc:	04060074 	movhi	r16,6145
180156c0:	841ca404 	addi	r16,r16,29328
180156c4:	e0bffc17 	ldw	r2,-16(fp)
180156c8:	01400304 	movi	r5,12
180156cc:	1009883a 	mov	r4,r2
180156d0:	8002b640 	call	18002b64 <__mulsi3>
180156d4:	8085883a 	add	r2,r16,r2
180156d8:	10800017 	ldw	r2,0(r2)
180156dc:	1000111e 	bne	r2,zero,18015724 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
180156e0:	04060074 	movhi	r16,6145
180156e4:	841ca404 	addi	r16,r16,29328
180156e8:	e0bffc17 	ldw	r2,-16(fp)
180156ec:	01400304 	movi	r5,12
180156f0:	1009883a 	mov	r4,r2
180156f4:	8002b640 	call	18002b64 <__mulsi3>
180156f8:	8085883a 	add	r2,r16,r2
180156fc:	e0fffe17 	ldw	r3,-8(fp)
18015700:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
18015704:	d0e00c17 	ldw	r3,-32720(gp)
18015708:	e0bffc17 	ldw	r2,-16(fp)
1801570c:	1880020e 	bge	r3,r2,18015718 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
18015710:	e0bffc17 	ldw	r2,-16(fp)
18015714:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
18015718:	e0bffc17 	ldw	r2,-16(fp)
1801571c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
18015720:	00000606 	br	1801573c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
18015724:	e0bffc17 	ldw	r2,-16(fp)
18015728:	10800044 	addi	r2,r2,1
1801572c:	e0bffc15 	stw	r2,-16(fp)
18015730:	e0bffc17 	ldw	r2,-16(fp)
18015734:	10800810 	cmplti	r2,r2,32
18015738:	103fe01e 	bne	r2,zero,180156bc <__alt_data_end+0xf80156bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1801573c:	e0bffd17 	ldw	r2,-12(fp)
}
18015740:	e6ffff04 	addi	sp,fp,-4
18015744:	dfc00217 	ldw	ra,8(sp)
18015748:	df000117 	ldw	fp,4(sp)
1801574c:	dc000017 	ldw	r16,0(sp)
18015750:	dec00304 	addi	sp,sp,12
18015754:	f800283a 	ret

18015758 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
18015758:	defffe04 	addi	sp,sp,-8
1801575c:	df000115 	stw	fp,4(sp)
18015760:	df000104 	addi	fp,sp,4
18015764:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
18015768:	e0bfff17 	ldw	r2,-4(fp)
1801576c:	10bffe84 	addi	r2,r2,-6
18015770:	10c00428 	cmpgeui	r3,r2,16
18015774:	18001a1e 	bne	r3,zero,180157e0 <alt_exception_cause_generated_bad_addr+0x88>
18015778:	100690ba 	slli	r3,r2,2
1801577c:	00860074 	movhi	r2,6145
18015780:	1095e404 	addi	r2,r2,22416
18015784:	1885883a 	add	r2,r3,r2
18015788:	10800017 	ldw	r2,0(r2)
1801578c:	1000683a 	jmp	r2
18015790:	180157d0 	cmplti	zero,r3,1375
18015794:	180157d0 	cmplti	zero,r3,1375
18015798:	180157e0 	cmpeqi	zero,r3,1375
1801579c:	180157e0 	cmpeqi	zero,r3,1375
180157a0:	180157e0 	cmpeqi	zero,r3,1375
180157a4:	180157d0 	cmplti	zero,r3,1375
180157a8:	180157d8 	cmpnei	zero,r3,1375
180157ac:	180157e0 	cmpeqi	zero,r3,1375
180157b0:	180157d0 	cmplti	zero,r3,1375
180157b4:	180157d0 	cmplti	zero,r3,1375
180157b8:	180157e0 	cmpeqi	zero,r3,1375
180157bc:	180157d0 	cmplti	zero,r3,1375
180157c0:	180157d8 	cmpnei	zero,r3,1375
180157c4:	180157e0 	cmpeqi	zero,r3,1375
180157c8:	180157e0 	cmpeqi	zero,r3,1375
180157cc:	180157d0 	cmplti	zero,r3,1375
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
180157d0:	00800044 	movi	r2,1
180157d4:	00000306 	br	180157e4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
180157d8:	0005883a 	mov	r2,zero
180157dc:	00000106 	br	180157e4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
180157e0:	0005883a 	mov	r2,zero
  }
}
180157e4:	e037883a 	mov	sp,fp
180157e8:	df000017 	ldw	fp,0(sp)
180157ec:	dec00104 	addi	sp,sp,4
180157f0:	f800283a 	ret

180157f4 <atexit>:
180157f4:	200b883a 	mov	r5,r4
180157f8:	000f883a 	mov	r7,zero
180157fc:	000d883a 	mov	r6,zero
18015800:	0009883a 	mov	r4,zero
18015804:	80158bc1 	jmpi	180158bc <__register_exitproc>

18015808 <exit>:
18015808:	defffe04 	addi	sp,sp,-8
1801580c:	000b883a 	mov	r5,zero
18015810:	dc000015 	stw	r16,0(sp)
18015814:	dfc00115 	stw	ra,4(sp)
18015818:	2021883a 	mov	r16,r4
1801581c:	80159d40 	call	180159d4 <__call_exitprocs>
18015820:	008600b4 	movhi	r2,6146
18015824:	10a11e04 	addi	r2,r2,-31624
18015828:	11000017 	ldw	r4,0(r2)
1801582c:	20800f17 	ldw	r2,60(r4)
18015830:	10000126 	beq	r2,zero,18015838 <exit+0x30>
18015834:	103ee83a 	callr	r2
18015838:	8009883a 	mov	r4,r16
1801583c:	8015b540 	call	18015b54 <_exit>

18015840 <memcmp>:
18015840:	01c000c4 	movi	r7,3
18015844:	3980192e 	bgeu	r7,r6,180158ac <memcmp+0x6c>
18015848:	2144b03a 	or	r2,r4,r5
1801584c:	11c4703a 	and	r2,r2,r7
18015850:	10000f26 	beq	r2,zero,18015890 <memcmp+0x50>
18015854:	20800003 	ldbu	r2,0(r4)
18015858:	28c00003 	ldbu	r3,0(r5)
1801585c:	10c0151e 	bne	r2,r3,180158b4 <memcmp+0x74>
18015860:	31bfff84 	addi	r6,r6,-2
18015864:	01ffffc4 	movi	r7,-1
18015868:	00000406 	br	1801587c <memcmp+0x3c>
1801586c:	20800003 	ldbu	r2,0(r4)
18015870:	28c00003 	ldbu	r3,0(r5)
18015874:	31bfffc4 	addi	r6,r6,-1
18015878:	10c00e1e 	bne	r2,r3,180158b4 <memcmp+0x74>
1801587c:	21000044 	addi	r4,r4,1
18015880:	29400044 	addi	r5,r5,1
18015884:	31fff91e 	bne	r6,r7,1801586c <__alt_data_end+0xf801586c>
18015888:	0005883a 	mov	r2,zero
1801588c:	f800283a 	ret
18015890:	20c00017 	ldw	r3,0(r4)
18015894:	28800017 	ldw	r2,0(r5)
18015898:	18bfee1e 	bne	r3,r2,18015854 <__alt_data_end+0xf8015854>
1801589c:	31bfff04 	addi	r6,r6,-4
180158a0:	21000104 	addi	r4,r4,4
180158a4:	29400104 	addi	r5,r5,4
180158a8:	39bff936 	bltu	r7,r6,18015890 <__alt_data_end+0xf8015890>
180158ac:	303fe91e 	bne	r6,zero,18015854 <__alt_data_end+0xf8015854>
180158b0:	003ff506 	br	18015888 <__alt_data_end+0xf8015888>
180158b4:	10c5c83a 	sub	r2,r2,r3
180158b8:	f800283a 	ret

180158bc <__register_exitproc>:
180158bc:	defffa04 	addi	sp,sp,-24
180158c0:	dc000315 	stw	r16,12(sp)
180158c4:	040600b4 	movhi	r16,6146
180158c8:	84211e04 	addi	r16,r16,-31624
180158cc:	80c00017 	ldw	r3,0(r16)
180158d0:	dc400415 	stw	r17,16(sp)
180158d4:	dfc00515 	stw	ra,20(sp)
180158d8:	18805217 	ldw	r2,328(r3)
180158dc:	2023883a 	mov	r17,r4
180158e0:	10003726 	beq	r2,zero,180159c0 <__register_exitproc+0x104>
180158e4:	10c00117 	ldw	r3,4(r2)
180158e8:	010007c4 	movi	r4,31
180158ec:	20c00e16 	blt	r4,r3,18015928 <__register_exitproc+0x6c>
180158f0:	1a000044 	addi	r8,r3,1
180158f4:	8800221e 	bne	r17,zero,18015980 <__register_exitproc+0xc4>
180158f8:	18c00084 	addi	r3,r3,2
180158fc:	18c7883a 	add	r3,r3,r3
18015900:	18c7883a 	add	r3,r3,r3
18015904:	12000115 	stw	r8,4(r2)
18015908:	10c7883a 	add	r3,r2,r3
1801590c:	19400015 	stw	r5,0(r3)
18015910:	0005883a 	mov	r2,zero
18015914:	dfc00517 	ldw	ra,20(sp)
18015918:	dc400417 	ldw	r17,16(sp)
1801591c:	dc000317 	ldw	r16,12(sp)
18015920:	dec00604 	addi	sp,sp,24
18015924:	f800283a 	ret
18015928:	00800034 	movhi	r2,0
1801592c:	10800004 	addi	r2,r2,0
18015930:	10002626 	beq	r2,zero,180159cc <__register_exitproc+0x110>
18015934:	01006404 	movi	r4,400
18015938:	d9400015 	stw	r5,0(sp)
1801593c:	d9800115 	stw	r6,4(sp)
18015940:	d9c00215 	stw	r7,8(sp)
18015944:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0+0x10000000>
18015948:	d9400017 	ldw	r5,0(sp)
1801594c:	d9800117 	ldw	r6,4(sp)
18015950:	d9c00217 	ldw	r7,8(sp)
18015954:	10001d26 	beq	r2,zero,180159cc <__register_exitproc+0x110>
18015958:	81000017 	ldw	r4,0(r16)
1801595c:	10000115 	stw	zero,4(r2)
18015960:	02000044 	movi	r8,1
18015964:	22405217 	ldw	r9,328(r4)
18015968:	0007883a 	mov	r3,zero
1801596c:	12400015 	stw	r9,0(r2)
18015970:	20805215 	stw	r2,328(r4)
18015974:	10006215 	stw	zero,392(r2)
18015978:	10006315 	stw	zero,396(r2)
1801597c:	883fde26 	beq	r17,zero,180158f8 <__alt_data_end+0xf80158f8>
18015980:	18c9883a 	add	r4,r3,r3
18015984:	2109883a 	add	r4,r4,r4
18015988:	1109883a 	add	r4,r2,r4
1801598c:	21802215 	stw	r6,136(r4)
18015990:	01800044 	movi	r6,1
18015994:	12406217 	ldw	r9,392(r2)
18015998:	30cc983a 	sll	r6,r6,r3
1801599c:	4992b03a 	or	r9,r9,r6
180159a0:	12406215 	stw	r9,392(r2)
180159a4:	21c04215 	stw	r7,264(r4)
180159a8:	01000084 	movi	r4,2
180159ac:	893fd21e 	bne	r17,r4,180158f8 <__alt_data_end+0xf80158f8>
180159b0:	11006317 	ldw	r4,396(r2)
180159b4:	218cb03a 	or	r6,r4,r6
180159b8:	11806315 	stw	r6,396(r2)
180159bc:	003fce06 	br	180158f8 <__alt_data_end+0xf80158f8>
180159c0:	18805304 	addi	r2,r3,332
180159c4:	18805215 	stw	r2,328(r3)
180159c8:	003fc606 	br	180158e4 <__alt_data_end+0xf80158e4>
180159cc:	00bfffc4 	movi	r2,-1
180159d0:	003fd006 	br	18015914 <__alt_data_end+0xf8015914>

180159d4 <__call_exitprocs>:
180159d4:	defff504 	addi	sp,sp,-44
180159d8:	df000915 	stw	fp,36(sp)
180159dc:	dd400615 	stw	r21,24(sp)
180159e0:	dc800315 	stw	r18,12(sp)
180159e4:	dfc00a15 	stw	ra,40(sp)
180159e8:	ddc00815 	stw	r23,32(sp)
180159ec:	dd800715 	stw	r22,28(sp)
180159f0:	dd000515 	stw	r20,20(sp)
180159f4:	dcc00415 	stw	r19,16(sp)
180159f8:	dc400215 	stw	r17,8(sp)
180159fc:	dc000115 	stw	r16,4(sp)
18015a00:	d9000015 	stw	r4,0(sp)
18015a04:	2839883a 	mov	fp,r5
18015a08:	04800044 	movi	r18,1
18015a0c:	057fffc4 	movi	r21,-1
18015a10:	008600b4 	movhi	r2,6146
18015a14:	10a11e04 	addi	r2,r2,-31624
18015a18:	12000017 	ldw	r8,0(r2)
18015a1c:	45005217 	ldw	r20,328(r8)
18015a20:	44c05204 	addi	r19,r8,328
18015a24:	a0001c26 	beq	r20,zero,18015a98 <__call_exitprocs+0xc4>
18015a28:	a0800117 	ldw	r2,4(r20)
18015a2c:	15ffffc4 	addi	r23,r2,-1
18015a30:	b8000d16 	blt	r23,zero,18015a68 <__call_exitprocs+0x94>
18015a34:	14000044 	addi	r16,r2,1
18015a38:	8421883a 	add	r16,r16,r16
18015a3c:	8421883a 	add	r16,r16,r16
18015a40:	84402004 	addi	r17,r16,128
18015a44:	a463883a 	add	r17,r20,r17
18015a48:	a421883a 	add	r16,r20,r16
18015a4c:	e0001e26 	beq	fp,zero,18015ac8 <__call_exitprocs+0xf4>
18015a50:	80804017 	ldw	r2,256(r16)
18015a54:	e0801c26 	beq	fp,r2,18015ac8 <__call_exitprocs+0xf4>
18015a58:	bdffffc4 	addi	r23,r23,-1
18015a5c:	843fff04 	addi	r16,r16,-4
18015a60:	8c7fff04 	addi	r17,r17,-4
18015a64:	bd7ff91e 	bne	r23,r21,18015a4c <__alt_data_end+0xf8015a4c>
18015a68:	00800034 	movhi	r2,0
18015a6c:	10800004 	addi	r2,r2,0
18015a70:	10000926 	beq	r2,zero,18015a98 <__call_exitprocs+0xc4>
18015a74:	a0800117 	ldw	r2,4(r20)
18015a78:	1000301e 	bne	r2,zero,18015b3c <__call_exitprocs+0x168>
18015a7c:	a0800017 	ldw	r2,0(r20)
18015a80:	10003226 	beq	r2,zero,18015b4c <__call_exitprocs+0x178>
18015a84:	a009883a 	mov	r4,r20
18015a88:	98800015 	stw	r2,0(r19)
18015a8c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0+0x10000000>
18015a90:	9d000017 	ldw	r20,0(r19)
18015a94:	a03fe41e 	bne	r20,zero,18015a28 <__alt_data_end+0xf8015a28>
18015a98:	dfc00a17 	ldw	ra,40(sp)
18015a9c:	df000917 	ldw	fp,36(sp)
18015aa0:	ddc00817 	ldw	r23,32(sp)
18015aa4:	dd800717 	ldw	r22,28(sp)
18015aa8:	dd400617 	ldw	r21,24(sp)
18015aac:	dd000517 	ldw	r20,20(sp)
18015ab0:	dcc00417 	ldw	r19,16(sp)
18015ab4:	dc800317 	ldw	r18,12(sp)
18015ab8:	dc400217 	ldw	r17,8(sp)
18015abc:	dc000117 	ldw	r16,4(sp)
18015ac0:	dec00b04 	addi	sp,sp,44
18015ac4:	f800283a 	ret
18015ac8:	a0800117 	ldw	r2,4(r20)
18015acc:	80c00017 	ldw	r3,0(r16)
18015ad0:	10bfffc4 	addi	r2,r2,-1
18015ad4:	15c01426 	beq	r2,r23,18015b28 <__call_exitprocs+0x154>
18015ad8:	80000015 	stw	zero,0(r16)
18015adc:	183fde26 	beq	r3,zero,18015a58 <__alt_data_end+0xf8015a58>
18015ae0:	95c8983a 	sll	r4,r18,r23
18015ae4:	a0806217 	ldw	r2,392(r20)
18015ae8:	a5800117 	ldw	r22,4(r20)
18015aec:	2084703a 	and	r2,r4,r2
18015af0:	10000b26 	beq	r2,zero,18015b20 <__call_exitprocs+0x14c>
18015af4:	a0806317 	ldw	r2,396(r20)
18015af8:	2088703a 	and	r4,r4,r2
18015afc:	20000c1e 	bne	r4,zero,18015b30 <__call_exitprocs+0x15c>
18015b00:	89400017 	ldw	r5,0(r17)
18015b04:	d9000017 	ldw	r4,0(sp)
18015b08:	183ee83a 	callr	r3
18015b0c:	a0800117 	ldw	r2,4(r20)
18015b10:	15bfbf1e 	bne	r2,r22,18015a10 <__alt_data_end+0xf8015a10>
18015b14:	98800017 	ldw	r2,0(r19)
18015b18:	153fcf26 	beq	r2,r20,18015a58 <__alt_data_end+0xf8015a58>
18015b1c:	003fbc06 	br	18015a10 <__alt_data_end+0xf8015a10>
18015b20:	183ee83a 	callr	r3
18015b24:	003ff906 	br	18015b0c <__alt_data_end+0xf8015b0c>
18015b28:	a5c00115 	stw	r23,4(r20)
18015b2c:	003feb06 	br	18015adc <__alt_data_end+0xf8015adc>
18015b30:	89000017 	ldw	r4,0(r17)
18015b34:	183ee83a 	callr	r3
18015b38:	003ff406 	br	18015b0c <__alt_data_end+0xf8015b0c>
18015b3c:	a0800017 	ldw	r2,0(r20)
18015b40:	a027883a 	mov	r19,r20
18015b44:	1029883a 	mov	r20,r2
18015b48:	003fb606 	br	18015a24 <__alt_data_end+0xf8015a24>
18015b4c:	0005883a 	mov	r2,zero
18015b50:	003ffb06 	br	18015b40 <__alt_data_end+0xf8015b40>

18015b54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
18015b54:	defffd04 	addi	sp,sp,-12
18015b58:	df000215 	stw	fp,8(sp)
18015b5c:	df000204 	addi	fp,sp,8
18015b60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
18015b64:	0001883a 	nop
18015b68:	e0bfff17 	ldw	r2,-4(fp)
18015b6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
18015b70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
18015b74:	10000226 	beq	r2,zero,18015b80 <_exit+0x2c>
    ALT_SIM_FAIL();
18015b78:	002af070 	cmpltui	zero,zero,43969
18015b7c:	00000106 	br	18015b84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
18015b80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
18015b84:	003fff06 	br	18015b84 <__alt_data_end+0xf8015b84>

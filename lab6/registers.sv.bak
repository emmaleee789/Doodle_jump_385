`include "SLC3_2.sv"
import SLC3_2::*;

module Reg #(N = 16) (
    input logic Clk, Reset,
    input logic LD_R,
    input logic [N-1:0] data_in,
    output logic [N-1:0] data_out
);
    always_ff @ (posedge Clk)
    begin
        if (LD_R)
            data_out <= data_in;
    end
endmodule


// module PCmodule (
//     //.*, .Clk(Clk), .LD_PC(LD_PC), .GatePC(GatePC)
//     input logic Clk, Reset,
//     input logic LD_PC, GatePC, 
//     input logic [1:0] PCMUX,
//     input logic [15:0] bus, 
//     output logic [15:0] PCout
// );
//     /* opJSR(PCoffset11): R7 <- PC; PC <- PC + SEXT(PCoffset11) */
//     //opJSR ldpc(.PCoffset11(2'b01));
//     // mux_4_1 [15:0] PCmux (
//     //     .data_in0(PC+1), .data_in1(), .data_in2(), .data_in3(PC), 
//     //     .sel(PCMUX[1:0]), .data_out(PCout)
//     // );
//     always_ff @ (posedge Clk)
//     begin
//         logic [15:0] PC;
//         PC <= PCout;
//         if (Reset)
//             PCout <= 16'b0;
//         else if (!LD_PC)
//             PCMUX <= 2'b11;
//     end

// endmodule


// module IRmodule (
//     input logic Clk, Reset,
//     input logic LD_IR,
//     input logic [15:0] IRin,
//     output logic [15:0] IRout
// );
//     always_ff @ (posedge Clk)
//     begin
//         if (LD_IR)
//             IRout <= IRin;
//     end
// endmodule

// module MDRmodule (
//     input logic Clk, Reset, 
//     input logic LD_MDR, GateMDR, 
//     input logic [15:0] MDRin,
//     output logic [15:0] MDRout
// );
//     always_ff @ (posedge Clk)
//     begin
//         if (LD_MDR)
//             MDRout <= MDRin;
//     end
// endmodule


// module MARmodule (
//     input logic Clk, Reset,
//     input logic LD_MAR,
//     input logic [15:0] MARin,
//     output logic [15:0] MARout
// );
//     always_ff @ (posedge Clk)
//     begin
//         if (LD_MAR)
//             MARout <= MAR;
//     end
// endmodule


module shift_reg (
    input logic X, Reset, Clk,
    input logic[7:0] A, B,
    input logic Clr_Ld, Shift, Add, Sub
    output logic X2, 
    output logic [7:0] A2, B2
);

    // assign X2 = X;
    // assign A2 = A;
    // assign B2 = B;
    // logic tempX;
    // logic [7:0] tempA, tempB;

    always_ff @ (posedge Clk)
    begin
        if (Reset) begin    
            X2 <= 1'b0;
            A2 <= 8'b0;
            B2 <= B;
        end else if (Add) begin
            X2 <= 1'b0;
            A2 <= A;
            B2 <= B;
        end else if (Sub) begin
        end 
        if (Shift)
            begin
                A2 <= {X,    A[7:1]};
				B2 <= {A[0], B[7:1]};
            end
    end
endmodule



// module SHIFT8 (
// 	input logic[7:0] A, B,
// 	input logic X,
// 	output logic[7:0] A2, B2 
// );
// 	assign B2[6:0] = B[7:1];
// 	assign B2[7] = A[0];
// 	assign A2[6:0] = A[7:1];
// 	assign A2[7] = X;
// endmodule

lab9_app.elf:     file format elf32-littlenios2
lab9_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x18000230

Program Header:
    LOAD off    0x00001000 vaddr 0x18000000 paddr 0x18000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x18000020 paddr 0x18000020 align 2**12
         filesz 0x0000febc memsz 0x0000febc flags r-x
    LOAD off    0x00010edc vaddr 0x1800fedc paddr 0x18011e20 align 2**12
         filesz 0x00001f44 memsz 0x00001f44 flags rw-
    LOAD off    0x00013d64 vaddr 0x18013d64 paddr 0x18013d64 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  18000000  18000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  18000020  18000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f908  18000230  18000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a4  1800fb38  1800fb38  00010b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f44  1800fedc  18011e20  00010edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  18013d64  18013d64  00013d64  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012e20  2**0
                  CONTENTS
  7 .sdram        00000000  18013ec4  18013ec4  00012e20  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012e20  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e90  00000000  00000000  00012e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00021499  00000000  00000000  00013cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008a07  00000000  00000000  00035171  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aeee  00000000  00000000  0003db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002024  00000000  00000000  00048a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003853  00000000  00000000  0004aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016a11  00000000  00000000  0004e2df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00064cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000016c8  00000000  00000000  00064d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000694fa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000694fd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00069509  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006950a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006950b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006950f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00069513  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00069517  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00069522  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006952d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00069538  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  00069540  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1a  00000000  00000000  00069573  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007aa83  00000000  00000000  0006e48d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
18000000 l    d  .entry	00000000 .entry
18000020 l    d  .exceptions	00000000 .exceptions
18000230 l    d  .text	00000000 .text
1800fb38 l    d  .rodata	00000000 .rodata
1800fedc l    d  .rwdata	00000000 .rwdata
18013d64 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
18013ec4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_app_bsp//obj/HAL/src/crt0.o
18000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
18011dd8 l     O .rwdata	00000004 vga_ctrl
1800fedc l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 palette_test.c
18011ddc l     O .rwdata	00000004 vga_ctrl
1801004c l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
18011de0 l     O .rwdata	00000004 vga_ctrl
180101bc l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1800fc22 l     O .rodata	00000010 zeroes.4389
1800fc32 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
18003104 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 findfp.c
180049b4 l     F .text	00000008 __fp_unlock
180049c8 l     F .text	0000019c __sinit.part.1
18004b64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1801032c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
18010770 l     O .rwdata	00000020 lc_ctype_charset
18010750 l     O .rwdata	00000020 lc_message_charset
18010790 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1800fc64 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1800fd88 l     O .rodata	00000010 zeroes.4333
1800fd98 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1800d318 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1800d42c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1800d458 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1800d54c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1800d634 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1800d720 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1800d8fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
18011e10 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1800dba0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1800dcdc l     F .text	00000034 alt_dev_reg
18010d78 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1800dfb8 l     F .text	0000020c altera_avalon_jtag_uart_irq
1800e1c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1800eaa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1800ef00 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1800f060 l     F .text	0000003c alt_get_errno
1800f09c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
18013d98 g     O .bss	00000004 alt_instruction_exception_handler
1800708c g     F .text	00000074 _mprec_log10
18007178 g     F .text	0000008c __any_on
18009d54 g     F .text	00000054 _isatty_r
1800fc70 g     O .rodata	00000028 __mprec_tinytens
1800d838 g     F .text	0000007c alt_main
18000b9c g     F .text	000000c0 _puts_r
18013dc4 g     O .bss	00000100 alt_irq
18009a7c g     F .text	00000060 _lseek_r
18011e20 g       *ABS*	00000000 __flash_rwdata_start
1800bcf0 g     F .text	00000088 .hidden __eqdf2
18013ec4 g       *ABS*	00000000 __alt_heap_start
18007908 g     F .text	0000005c __sseek
18004d14 g     F .text	00000010 __sinit
180053b4 g     F .text	0000007c _setlocale_r
18004b6c g     F .text	00000078 __sfmoreglue
1800d8d8 g     F .text	00000024 __malloc_unlock
18000748 g     F .text	00000278 textVGAColorScreenSaver
18005ec8 g     F .text	0000015c memmove
18004cfc g     F .text	00000018 _cleanup
1800614c g     F .text	000000a8 _Balloc
1800bd78 g     F .text	000000dc .hidden __gtdf2
1800f488 g     F .text	00000024 altera_nios2_gen2_irq_init
18000000 g     F .entry	0000000c __reset
18000020 g       *ABS*	00000000 __flash_exceptions_start
18009cf8 g     F .text	0000005c _fstat_r
18013d7c g     O .bss	00000004 errno
18007884 g     F .text	00000008 __seofread
18007c18 g     F .text	000013a0 ___svfiprintf_internal_r
18013d84 g     O .bss	00000004 alt_argv
18019dd8 g       *ABS*	00000000 _gp
1800db70 g     F .text	00000030 usleep
1800045c g     F .text	000000a0 textVGAColorClr
18010bf8 g     O .rwdata	00000180 alt_fd_list
1800f4ac g     F .text	00000090 alt_find_dev
18005d80 g     F .text	00000148 memcpy
180049bc g     F .text	0000000c _cleanup_r
1800d130 g     F .text	000000dc .hidden __floatsidf
1800efe4 g     F .text	0000007c alt_io_redirect
1800be54 g     F .text	000000f4 .hidden __ltdf2
1800fb38 g       *ABS*	00000000 __DTOR_END__
18000c5c g     F .text	00000014 puts
1800f708 g     F .text	0000009c alt_exception_cause_generated_bad_addr
18007768 g     F .text	00000074 __fpclassifyd
18006fe8 g     F .text	000000a4 __ratio
1800e3bc g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
18000ab8 g     F .text	00000064 .hidden __udivsi3
1800d588 g     F .text	000000ac isatty
1800fcc0 g     O .rodata	000000c8 __mprec_tens
18005430 g     F .text	0000000c __locale_charset
18013d78 g     O .bss	00000004 __malloc_top_pad
18011dec g     O .rwdata	00000004 __mb_cur_max
18005460 g     F .text	0000000c _localeconv_r
18006580 g     F .text	0000003c __i2b
18004d64 g     F .text	000004c8 __sfvwrite_r
180077dc g     F .text	00000054 _sbrk_r
18009c98 g     F .text	00000060 _read_r
18011e08 g     O .rwdata	00000004 alt_max_fd
1800929c g     F .text	000000f0 _fclose_r
18009618 g     F .text	00000030 fflush
18013d74 g     O .bss	00000004 __malloc_max_sbrked_mem
1800aa74 g     F .text	000008ac .hidden __adddf3
18006d90 g     F .text	0000010c __b2d
1800a4b0 g     F .text	000005c4 .hidden __umoddi3
1800d75c g     F .text	000000dc lseek
18011de4 g     O .rwdata	00000004 _global_impure_ptr
18007204 g     F .text	00000564 _realloc_r
18013ec4 g       *ABS*	00000000 __bss_end
1800ee10 g     F .text	000000f0 alt_iic_isr_register
1800f380 g     F .text	00000108 alt_tick
18009eb4 g     F .text	000005fc .hidden __udivdi3
1800fc98 g     O .rodata	00000028 __mprec_bigtens
18006364 g     F .text	00000104 __s2b
1800d20c g     F .text	000000a8 .hidden __floatunsidf
18006ad0 g     F .text	00000060 __mcmp
18004d34 g     F .text	00000018 __fp_lock_all
1800edc4 g     F .text	0000004c alt_ic_irq_enabled
1800f2e4 g     F .text	0000009c alt_alarm_stop
18013d8c g     O .bss	00000004 alt_irq_active
180000fc g     F .exceptions	000000d4 alt_irq_handler
18010bd0 g     O .rwdata	00000028 alt_dev_null
1800ea80 g     F .text	00000020 alt_dcache_flush_all
18006468 g     F .text	00000068 __hi0bits
1800d0b0 g     F .text	00000080 .hidden __fixdfsi
18011e20 g       *ABS*	00000000 __ram_rwdata_end
18011e00 g     O .rwdata	00000008 alt_dev_list
1800dbdc g     F .text	00000100 write
1800fedc g       *ABS*	00000000 __ram_rodata_end
1800d494 g     F .text	000000b8 fstat
1800be54 g     F .text	000000f4 .hidden __ledf2
18006848 g     F .text	00000140 __pow5mult
18013d6c g     O .bss	00000004 __nlocale_changed
18000b1c g     F .text	00000058 .hidden __umodsi3
18013ec4 g       *ABS*	00000000 end
1800def8 g     F .text	000000c0 altera_avalon_jtag_uart_init
180001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
1800fb38 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
1800d2b4 g     F .text	00000064 .hidden __clzsi2
1800e5d8 g     F .text	00000224 altera_avalon_jtag_uart_write
18004d24 g     F .text	00000004 __sfp_lock_acquire
18005c9c g     F .text	000000e4 memchr
18000cec g     F .text	00000058 _sprintf_r
1800976c g     F .text	00000310 _free_r
1800543c g     F .text	00000010 __locale_mb_cur_max
1800f984 g     F .text	00000180 __call_exitprocs
18013d68 g     O .bss	00000004 __mlocale_changed
18011df0 g     O .rwdata	00000004 __malloc_sbrk_base
18000230 g     F .text	0000003c _start
18013d90 g     O .bss	00000004 _alt_tick_rate
18000c88 g     F .text	00000064 rand
18006988 g     F .text	00000148 __lshift
18013d94 g     O .bss	00000004 _alt_nticks
1800d938 g     F .text	00000104 read
1800dd48 g     F .text	0000004c alt_sys_init
18007a48 g     F .text	000001d0 __ssprint_r
1800f86c g     F .text	00000118 __register_exitproc
180065bc g     F .text	0000028c __multiply
1800e264 g     F .text	00000068 altera_avalon_jtag_uart_close
18000b74 g     F .text	00000028 .hidden __mulsi3
1800fedc g       *ABS*	00000000 __ram_rwdata_start
1800fb38 g       *ABS*	00000000 __ram_rodata_start
18013d9c g     O .bss	00000028 __malloc_current_mallinfo
18006e9c g     F .text	0000014c __d2b
1800dd94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1800f644 g     F .text	000000c4 alt_get_fd
1800e928 g     F .text	00000158 alt_busy_sleep
1800916c g     F .text	00000054 _close_r
1800f7f0 g     F .text	0000007c memcmp
1800de54 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
18013ec4 g       *ABS*	00000000 __alt_stack_base
1800dea4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
18009018 g     F .text	00000154 __swsetup_r
1800b320 g     F .text	000009d0 .hidden __divdf3
18004be4 g     F .text	00000118 __sfp
18007100 g     F .text	00000078 __copybits
180107c8 g     O .rwdata	00000408 __malloc_av_
18004d30 g     F .text	00000004 __sinit_lock_release
1800bf48 g     F .text	0000086c .hidden __muldf3
18007830 g     F .text	00000054 __sread
1800f53c g     F .text	00000108 alt_find_file
1800eadc g     F .text	000000a4 alt_dev_llist_insert
1800d8b4 g     F .text	00000024 __malloc_lock
1800dac0 g     F .text	000000b0 sbrk
18000e48 g     F .text	000022bc ___svfprintf_internal_r
180095bc g     F .text	0000005c _fflush_r
180091c0 g     F .text	000000dc _calloc_r
18013d64 g       *ABS*	00000000 __bss_start
18006024 g     F .text	00000128 memset
1800026c g     F .text	00000030 main
18013d88 g     O .bss	00000004 alt_envp
18013d70 g     O .bss	00000004 __malloc_max_total_mem
1800ddf4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
18000c70 g     F .text	00000018 srand
18007964 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
1800938c g     F .text	00000014 fclose
1800332c g     F .text	00001688 _dtoa_r
18005490 g     F .text	0000080c _malloc_r
18011e0c g     O .rwdata	00000004 alt_errno
1800522c g     F .text	000000c4 _fwalk
180009c0 g     F .text	00000084 .hidden __divsi3
18000618 g     F .text	00000130 setColorPalette
18009648 g     F .text	00000124 _malloc_trim_r
1800fb38 g       *ABS*	00000000 __CTOR_END__
1800796c g     F .text	000000dc strcmp
1800fb38 g       *ABS*	00000000 __flash_rodata_start
1800fb38 g       *ABS*	00000000 __DTOR_LIST__
1800bcf0 g     F .text	00000088 .hidden __nedf2
1800dd10 g     F .text	00000038 alt_irq_init
1800da3c g     F .text	00000084 alt_release_fd
18000d44 g     F .text	0000006c sprintf
1800fda8 g     O .rodata	00000100 .hidden __clz_tab
18013d64 g     O .bss	00000004 _PathLocale
1800f7a4 g     F .text	00000014 atexit
18008fb8 g     F .text	00000060 _write_r
1800546c g     F .text	00000018 setlocale
18011de8 g     O .rwdata	00000004 _impure_ptr
18013d80 g     O .bss	00000004 alt_argc
180093a0 g     F .text	0000021c __sflush_r
1800ebe0 g     F .text	00000060 _do_dtors
18005458 g     F .text	00000008 __locale_cjk_lang
18000020 g       .exceptions	00000000 alt_irq_entry
18006d2c g     F .text	00000064 __ulp
18004d4c g     F .text	00000018 __fp_unlock_all
18011df8 g     O .rwdata	00000008 alt_fs_list
18000020 g       *ABS*	00000000 __ram_exceptions_start
18005484 g     F .text	0000000c localeconv
1800ec60 g     F .text	00000050 alt_ic_isr_register
18011e20 g       *ABS*	00000000 _edata
18013ec4 g       *ABS*	00000000 _end
18000230 g       *ABS*	00000000 __ram_exceptions_end
1800e2cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
180004fc g     F .text	0000011c textVGADrawColorText
1800ed38 g     F .text	0000008c alt_ic_irq_disable
1800788c g     F .text	0000007c __swrite
18011df4 g     O .rwdata	00000004 __malloc_trim_threshold
1800544c g     F .text	0000000c __locale_msgcharset
1800f7b8 g     F .text	00000038 exit
180052f0 g     F .text	000000c4 _fwalk_reent
18006b30 g     F .text	000001fc __mdiff
18000a44 g     F .text	00000074 .hidden __modsi3
20000000 g       *ABS*	00000000 __alt_data_end
18000020 g     F .exceptions	00000000 alt_exception
18004d28 g     F .text	00000004 __sfp_lock_release
18000000 g       *ABS*	00000000 __alt_mem_sdram
1800fb04 g     F .text	00000034 _exit
1800e7fc g     F .text	0000012c alt_alarm_start
18009da8 g     F .text	0000010c .hidden __muldi3
18009adc g     F .text	000001bc __smakebuf_r
18000db0 g     F .text	00000098 strlen
1800f188 g     F .text	0000015c open
1800bd78 g     F .text	000000dc .hidden __gedf2
1800ec40 g     F .text	00000020 alt_icache_flush_all
18011e14 g     O .rwdata	00000004 alt_priority_mask
1800ecb0 g     F .text	00000088 alt_ic_irq_enable
1800c7b4 g     F .text	000008fc .hidden __subdf3
180064d0 g     F .text	000000b0 __lo0bits
18011e18 g     O .rwdata	00000008 alt_alarm_list
1800eb80 g     F .text	00000060 _do_ctors
1800d354 g     F .text	000000d8 close
1800029c g     F .text	000001c0 paletteTest
1800d69c g     F .text	00000084 alt_load
18004d2c g     F .text	00000004 __sinit_lock_acquire
1800621c g     F .text	00000148 __multadd
180061f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

18000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
18000000:	00460034 	movhi	at,6144
    ori r1, r1, %lo(_start)
18000004:	08408c14 	ori	at,at,560
    jmp r1
18000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

18000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
18000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
18000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
18000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
18000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
18000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
18000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
18000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
18000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
18000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
18000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
18000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
18000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
18000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
18000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
18000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
18000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
18000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
18000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1800007c:	10000326 	beq	r2,zero,1800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
18000080:	20000226 	beq	r4,zero,1800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
18000084:	80000fc0 	call	180000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
18000088:	00000706 	br	180000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
18000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
18000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
18000098:	80001d00 	call	180001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1800009c:	1000021e 	bne	r2,zero,180000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
180000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
180000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
180000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
180000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
180000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
180000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
180000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
180000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
180000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
180000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
180000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
180000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
180000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
180000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
180000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
180000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
180000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
180000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
180000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
180000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
180000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
180000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
180000f8:	ef80083a 	eret

180000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
180000fc:	defff904 	addi	sp,sp,-28
18000100:	dfc00615 	stw	ra,24(sp)
18000104:	df000515 	stw	fp,20(sp)
18000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
18000110:	0005313a 	rdctl	r2,ipending
18000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
18000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
18000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
18000124:	00800044 	movi	r2,1
18000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1800012c:	e0fffb17 	ldw	r3,-20(fp)
18000130:	e0bffc17 	ldw	r2,-16(fp)
18000134:	1884703a 	and	r2,r3,r2
18000138:	10001426 	beq	r2,zero,1800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1800013c:	00860074 	movhi	r2,6145
18000140:	108f7104 	addi	r2,r2,15812
18000144:	e0fffd17 	ldw	r3,-12(fp)
18000148:	180690fa 	slli	r3,r3,3
1800014c:	10c5883a 	add	r2,r2,r3
18000150:	10c00017 	ldw	r3,0(r2)
18000154:	00860074 	movhi	r2,6145
18000158:	108f7104 	addi	r2,r2,15812
1800015c:	e13ffd17 	ldw	r4,-12(fp)
18000160:	200890fa 	slli	r4,r4,3
18000164:	1105883a 	add	r2,r2,r4
18000168:	10800104 	addi	r2,r2,4
1800016c:	10800017 	ldw	r2,0(r2)
18000170:	1009883a 	mov	r4,r2
18000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
18000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1800017c:	0005313a 	rdctl	r2,ipending
18000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
18000184:	e0bfff17 	ldw	r2,-4(fp)
18000188:	00000706 	br	180001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1800018c:	e0bffc17 	ldw	r2,-16(fp)
18000190:	1085883a 	add	r2,r2,r2
18000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
18000198:	e0bffd17 	ldw	r2,-12(fp)
1800019c:	10800044 	addi	r2,r2,1
180001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
180001a4:	003fe106 	br	1800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
180001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
180001ac:	e0bffb17 	ldw	r2,-20(fp)
180001b0:	103fdb1e 	bne	r2,zero,18000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
180001b4:	0001883a 	nop
}
180001b8:	0001883a 	nop
180001bc:	e037883a 	mov	sp,fp
180001c0:	dfc00117 	ldw	ra,4(sp)
180001c4:	df000017 	ldw	fp,0(sp)
180001c8:	dec00204 	addi	sp,sp,8
180001cc:	f800283a 	ret

180001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
180001d0:	defffb04 	addi	sp,sp,-20
180001d4:	dfc00415 	stw	ra,16(sp)
180001d8:	df000315 	stw	fp,12(sp)
180001dc:	df000304 	addi	fp,sp,12
180001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
180001e4:	00bfffc4 	movi	r2,-1
180001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
180001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
180001f0:	d0a7f017 	ldw	r2,-24640(gp)
180001f4:	10000726 	beq	r2,zero,18000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
180001f8:	d0a7f017 	ldw	r2,-24640(gp)
180001fc:	e0fffd17 	ldw	r3,-12(fp)
18000200:	e1bffe17 	ldw	r6,-8(fp)
18000204:	e17fff17 	ldw	r5,-4(fp)
18000208:	1809883a 	mov	r4,r3
1800020c:	103ee83a 	callr	r2
18000210:	00000206 	br	1800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
18000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
18000218:	0005883a 	mov	r2,zero
}
1800021c:	e037883a 	mov	sp,fp
18000220:	dfc00117 	ldw	ra,4(sp)
18000224:	df000017 	ldw	fp,0(sp)
18000228:	dec00204 	addi	sp,sp,8
1800022c:	f800283a 	ret

Disassembly of section .text:

18000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
18000230:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
18000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
18000238:	06860074 	movhi	gp,6145
    ori gp, gp, %lo(_gp)
1800023c:	d6a77614 	ori	gp,gp,40408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
18000240:	00860074 	movhi	r2,6145
    ori r2, r2, %lo(__bss_start)
18000244:	108f5914 	ori	r2,r2,15716

    movhi r3, %hi(__bss_end)
18000248:	00c60074 	movhi	r3,6145
    ori r3, r3, %lo(__bss_end)
1800024c:	18cfb114 	ori	r3,r3,16068

    beq r2, r3, 1f
18000250:	10c00326 	beq	r2,r3,18000260 <_start+0x30>

0:
    stw zero, (r2)
18000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
18000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1800025c:	10fffd36 	bltu	r2,r3,18000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
18000260:	800d69c0 	call	1800d69c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
18000264:	800d8380 	call	1800d838 <alt_main>

18000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
18000268:	003fff06 	br	18000268 <__alt_data_end+0xf8000268>

1800026c <main>:

//#include "text_mode_vga.h"
#include "text_mode_vga_color.h"
#include "palette_test.h"

int main() {
1800026c:	defffe04 	addi	sp,sp,-8
18000270:	dfc00115 	stw	ra,4(sp)
18000274:	df000015 	stw	fp,0(sp)
18000278:	d839883a 	mov	fp,sp

	paletteTest();
1800027c:	800029c0 	call	1800029c <paletteTest>
    textVGAColorScreenSaver();
18000280:	80007480 	call	18000748 <textVGAColorScreenSaver>

    return 0;
18000284:	0005883a 	mov	r2,zero
}
18000288:	e037883a 	mov	sp,fp
1800028c:	dfc00117 	ldw	ra,4(sp)
18000290:	df000017 	ldw	fp,0(sp)
18000294:	dec00204 	addi	sp,sp,8
18000298:	f800283a 	ret

1800029c <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
1800029c:	defffa04 	addi	sp,sp,-24
180002a0:	dfc00515 	stw	ra,20(sp)
180002a4:	df000415 	stw	fp,16(sp)
180002a8:	dc400315 	stw	r17,12(sp)
180002ac:	dc000215 	stw	r16,8(sp)
180002b0:	df000404 	addi	fp,sp,16
	printf("paletteTest\n");
180002b4:	01060074 	movhi	r4,6145
180002b8:	213ece04 	addi	r4,r4,-1224
180002bc:	8000c5c0 	call	18000c5c <puts>
	textVGAColorClr();
180002c0:	800045c0 	call	1800045c <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
180002c4:	00800044 	movi	r2,1
180002c8:	d8800015 	stw	r2,0(sp)
180002cc:	000f883a 	mov	r7,zero
180002d0:	000d883a 	mov	r6,zero
180002d4:	000b883a 	mov	r5,zero
180002d8:	01060074 	movhi	r4,6145
180002dc:	213ed104 	addi	r4,r4,-1212
180002e0:	80004fc0 	call	180004fc <textVGADrawColorText>
//	setColorPalette(0,0,0,15);
//	setColorPalette(1,15,0,0);
//	printf(" PALETTE 0 & 1\n");
//	printf(" %u %u\n", vga_ctrl->PALETTE[0]/2%4096, vga_ctrl->PALETTE[0]/8192);

	for (int i = 0; i < 100; i ++)
180002e4:	e03ffd15 	stw	zero,-12(fp)
180002e8:	00005106 	br	18000430 <paletteTest+0x194>
	{
		usleep (20000);
180002ec:	01138804 	movi	r4,20000
180002f0:	800db700 	call	1800db70 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
180002f4:	8000c880 	call	18000c88 <rand>
180002f8:	1007883a 	mov	r3,r2
180002fc:	00a00034 	movhi	r2,32768
18000300:	108003c4 	addi	r2,r2,15
18000304:	1884703a 	and	r2,r3,r2
18000308:	1000040e 	bge	r2,zero,1800031c <paletteTest+0x80>
1800030c:	10bfffc4 	addi	r2,r2,-1
18000310:	00fffc04 	movi	r3,-16
18000314:	10c4b03a 	or	r2,r2,r3
18000318:	10800044 	addi	r2,r2,1
1800031c:	14003fcc 	andi	r16,r2,255
18000320:	8000c880 	call	18000c88 <rand>
18000324:	1007883a 	mov	r3,r2
18000328:	00a00034 	movhi	r2,32768
1800032c:	108003c4 	addi	r2,r2,15
18000330:	1884703a 	and	r2,r3,r2
18000334:	1000040e 	bge	r2,zero,18000348 <paletteTest+0xac>
18000338:	10bfffc4 	addi	r2,r2,-1
1800033c:	00fffc04 	movi	r3,-16
18000340:	10c4b03a 	or	r2,r2,r3
18000344:	10800044 	addi	r2,r2,1
18000348:	14403fcc 	andi	r17,r2,255
1800034c:	8000c880 	call	18000c88 <rand>
18000350:	1007883a 	mov	r3,r2
18000354:	00a00034 	movhi	r2,32768
18000358:	108003c4 	addi	r2,r2,15
1800035c:	1884703a 	and	r2,r3,r2
18000360:	1000040e 	bge	r2,zero,18000374 <paletteTest+0xd8>
18000364:	10bfffc4 	addi	r2,r2,-1
18000368:	00fffc04 	movi	r3,-16
1800036c:	10c4b03a 	or	r2,r2,r3
18000370:	10800044 	addi	r2,r2,1
18000374:	10803fcc 	andi	r2,r2,255
18000378:	100f883a 	mov	r7,r2
1800037c:	880d883a 	mov	r6,r17
18000380:	800b883a 	mov	r5,r16
18000384:	0009883a 	mov	r4,zero
18000388:	80006180 	call	18000618 <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
1800038c:	8000c880 	call	18000c88 <rand>
18000390:	1007883a 	mov	r3,r2
18000394:	00a00034 	movhi	r2,32768
18000398:	108003c4 	addi	r2,r2,15
1800039c:	1884703a 	and	r2,r3,r2
180003a0:	1000040e 	bge	r2,zero,180003b4 <paletteTest+0x118>
180003a4:	10bfffc4 	addi	r2,r2,-1
180003a8:	00fffc04 	movi	r3,-16
180003ac:	10c4b03a 	or	r2,r2,r3
180003b0:	10800044 	addi	r2,r2,1
180003b4:	14003fcc 	andi	r16,r2,255
180003b8:	8000c880 	call	18000c88 <rand>
180003bc:	1007883a 	mov	r3,r2
180003c0:	00a00034 	movhi	r2,32768
180003c4:	108003c4 	addi	r2,r2,15
180003c8:	1884703a 	and	r2,r3,r2
180003cc:	1000040e 	bge	r2,zero,180003e0 <paletteTest+0x144>
180003d0:	10bfffc4 	addi	r2,r2,-1
180003d4:	00fffc04 	movi	r3,-16
180003d8:	10c4b03a 	or	r2,r2,r3
180003dc:	10800044 	addi	r2,r2,1
180003e0:	14403fcc 	andi	r17,r2,255
180003e4:	8000c880 	call	18000c88 <rand>
180003e8:	1007883a 	mov	r3,r2
180003ec:	00a00034 	movhi	r2,32768
180003f0:	108003c4 	addi	r2,r2,15
180003f4:	1884703a 	and	r2,r3,r2
180003f8:	1000040e 	bge	r2,zero,1800040c <paletteTest+0x170>
180003fc:	10bfffc4 	addi	r2,r2,-1
18000400:	00fffc04 	movi	r3,-16
18000404:	10c4b03a 	or	r2,r2,r3
18000408:	10800044 	addi	r2,r2,1
1800040c:	10803fcc 	andi	r2,r2,255
18000410:	100f883a 	mov	r7,r2
18000414:	880d883a 	mov	r6,r17
18000418:	800b883a 	mov	r5,r16
1800041c:	01000044 	movi	r4,1
18000420:	80006180 	call	18000618 <setColorPalette>
//	setColorPalette(0,0,0,15);
//	setColorPalette(1,15,0,0);
//	printf(" PALETTE 0 & 1\n");
//	printf(" %u %u\n", vga_ctrl->PALETTE[0]/2%4096, vga_ctrl->PALETTE[0]/8192);

	for (int i = 0; i < 100; i ++)
18000424:	e0bffd17 	ldw	r2,-12(fp)
18000428:	10800044 	addi	r2,r2,1
1800042c:	e0bffd15 	stw	r2,-12(fp)
18000430:	e0bffd17 	ldw	r2,-12(fp)
18000434:	10801910 	cmplti	r2,r2,100
18000438:	103fac1e 	bne	r2,zero,180002ec <__alt_data_end+0xf80002ec>

	}
//	printf(" PALETTE 0 & 1\n");
//	printf(" %u %u\n", vga_ctrl->PALETTE[0]/2%4096, vga_ctrl->PALETTE[0]/8192);

}
1800043c:	0001883a 	nop
18000440:	e6fffe04 	addi	sp,fp,-8
18000444:	dfc00317 	ldw	ra,12(sp)
18000448:	df000217 	ldw	fp,8(sp)
1800044c:	dc400117 	ldw	r17,4(sp)
18000450:	dc000017 	ldw	r16,0(sp)
18000454:	dec00404 	addi	sp,sp,16
18000458:	f800283a 	ret

1800045c <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
1800045c:	defffc04 	addi	sp,sp,-16
18000460:	dfc00315 	stw	ra,12(sp)
18000464:	df000215 	stw	fp,8(sp)
18000468:	df000204 	addi	fp,sp,8
	printf("  textVGAColorClr\n");
1800046c:	01060074 	movhi	r4,6145
18000470:	213edd04 	addi	r4,r4,-1164
18000474:	8000c5c0 	call	18000c5c <puts>
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
18000478:	e03ffe15 	stw	zero,-8(fp)
1800047c:	00000706 	br	1800049c <textVGAColorClr+0x40>
	{
		vga_ctrl->VRAM[i] = 0x00;
18000480:	d0e00217 	ldw	r3,-32760(gp)
18000484:	e0bffe17 	ldw	r2,-8(fp)
18000488:	1885883a 	add	r2,r3,r2
1800048c:	10000005 	stb	zero,0(r2)
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	printf("  textVGAColorClr\n");
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
18000490:	e0bffe17 	ldw	r2,-8(fp)
18000494:	10800044 	addi	r2,r2,1
18000498:	e0bffe15 	stw	r2,-8(fp)
1800049c:	e0bffe17 	ldw	r2,-8(fp)
180004a0:	1084b010 	cmplti	r2,r2,4800
180004a4:	103ff61e 	bne	r2,zero,18000480 <__alt_data_end+0xf8000480>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
	for (int i = 0; i<8; i++)
180004a8:	e03fff15 	stw	zero,-4(fp)
180004ac:	00000a06 	br	180004d8 <textVGAColorClr+0x7c>
	{
		vga_ctrl->PALETTE[i] = 0x00000000;
180004b0:	d0e00217 	ldw	r3,-32760(gp)
180004b4:	e0bfff17 	ldw	r2,-4(fp)
180004b8:	10820004 	addi	r2,r2,2048
180004bc:	1085883a 	add	r2,r2,r2
180004c0:	1085883a 	add	r2,r2,r2
180004c4:	1885883a 	add	r2,r3,r2
180004c8:	10000015 	stw	zero,0(r2)
	printf("  textVGAColorClr\n");
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
	for (int i = 0; i<8; i++)
180004cc:	e0bfff17 	ldw	r2,-4(fp)
180004d0:	10800044 	addi	r2,r2,1
180004d4:	e0bfff15 	stw	r2,-4(fp)
180004d8:	e0bfff17 	ldw	r2,-4(fp)
180004dc:	10800210 	cmplti	r2,r2,8
180004e0:	103ff31e 	bne	r2,zero,180004b0 <__alt_data_end+0xf80004b0>
	{
		vga_ctrl->PALETTE[i] = 0x00000000;
	}
}
180004e4:	0001883a 	nop
180004e8:	e037883a 	mov	sp,fp
180004ec:	dfc00117 	ldw	ra,4(sp)
180004f0:	df000017 	ldw	fp,0(sp)
180004f4:	dec00204 	addi	sp,sp,8
180004f8:	f800283a 	ret

180004fc <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
180004fc:	defff704 	addi	sp,sp,-36
18000500:	dfc00815 	stw	ra,32(sp)
18000504:	df000715 	stw	fp,28(sp)
18000508:	dc000615 	stw	r16,24(sp)
1800050c:	df000704 	addi	fp,sp,28
18000510:	e13ffa15 	stw	r4,-24(fp)
18000514:	e17ffb15 	stw	r5,-20(fp)
18000518:	e1bffc15 	stw	r6,-16(fp)
1800051c:	3807883a 	mov	r3,r7
18000520:	e0800217 	ldw	r2,8(fp)
18000524:	e0fffd05 	stb	r3,-12(fp)
18000528:	e0bffe05 	stb	r2,-8(fp)
	printf("  textVGADrawColorText\n");
1800052c:	01060074 	movhi	r4,6145
18000530:	213ee204 	addi	r4,r4,-1144
18000534:	8000c5c0 	call	18000c5c <puts>
	int i = 0;
18000538:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
1800053c:	00002706 	br	180005dc <textVGADrawColorText+0xe0>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
18000540:	d4200217 	ldw	r16,-32760(gp)
18000544:	01401404 	movi	r5,80
18000548:	e13ffc17 	ldw	r4,-16(fp)
1800054c:	8000b740 	call	18000b74 <__mulsi3>
18000550:	1007883a 	mov	r3,r2
18000554:	e0bffb17 	ldw	r2,-20(fp)
18000558:	1887883a 	add	r3,r3,r2
1800055c:	e0bff917 	ldw	r2,-28(fp)
18000560:	1885883a 	add	r2,r3,r2
18000564:	1085883a 	add	r2,r2,r2
18000568:	1009883a 	mov	r4,r2
1800056c:	e0bffe03 	ldbu	r2,-8(fp)
18000570:	1004913a 	slli	r2,r2,4
18000574:	1007883a 	mov	r3,r2
18000578:	e0bffd03 	ldbu	r2,-12(fp)
1800057c:	1884b03a 	or	r2,r3,r2
18000580:	1007883a 	mov	r3,r2
18000584:	8105883a 	add	r2,r16,r4
18000588:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
1800058c:	d4200217 	ldw	r16,-32760(gp)
18000590:	01401404 	movi	r5,80
18000594:	e13ffc17 	ldw	r4,-16(fp)
18000598:	8000b740 	call	18000b74 <__mulsi3>
1800059c:	1007883a 	mov	r3,r2
180005a0:	e0bffb17 	ldw	r2,-20(fp)
180005a4:	1887883a 	add	r3,r3,r2
180005a8:	e0bff917 	ldw	r2,-28(fp)
180005ac:	1885883a 	add	r2,r3,r2
180005b0:	1085883a 	add	r2,r2,r2
180005b4:	10800044 	addi	r2,r2,1
180005b8:	e0fff917 	ldw	r3,-28(fp)
180005bc:	e13ffa17 	ldw	r4,-24(fp)
180005c0:	20c7883a 	add	r3,r4,r3
180005c4:	18c00003 	ldbu	r3,0(r3)
180005c8:	8085883a 	add	r2,r16,r2
180005cc:	10c00005 	stb	r3,0(r2)
		i++;
180005d0:	e0bff917 	ldw	r2,-28(fp)
180005d4:	10800044 	addi	r2,r2,1
180005d8:	e0bff915 	stw	r2,-28(fp)

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	printf("  textVGADrawColorText\n");
	int i = 0;
	while (str[i]!=0)
180005dc:	e0bff917 	ldw	r2,-28(fp)
180005e0:	e0fffa17 	ldw	r3,-24(fp)
180005e4:	1885883a 	add	r2,r3,r2
180005e8:	10800003 	ldbu	r2,0(r2)
180005ec:	10803fcc 	andi	r2,r2,255
180005f0:	1080201c 	xori	r2,r2,128
180005f4:	10bfe004 	addi	r2,r2,-128
180005f8:	103fd11e 	bne	r2,zero,18000540 <__alt_data_end+0xf8000540>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
180005fc:	0001883a 	nop
18000600:	e6ffff04 	addi	sp,fp,-4
18000604:	dfc00217 	ldw	ra,8(sp)
18000608:	df000117 	ldw	fp,4(sp)
1800060c:	dc000017 	ldw	r16,0(sp)
18000610:	dec00304 	addi	sp,sp,12
18000614:	f800283a 	ret

18000618 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
18000618:	defff904 	addi	sp,sp,-28
1800061c:	df000615 	stw	fp,24(sp)
18000620:	df000604 	addi	fp,sp,24
18000624:	2011883a 	mov	r8,r4
18000628:	2809883a 	mov	r4,r5
1800062c:	3007883a 	mov	r3,r6
18000630:	3805883a 	mov	r2,r7
18000634:	e23ffc05 	stb	r8,-16(fp)
18000638:	e13ffd05 	stb	r4,-12(fp)
1800063c:	e0fffe05 	stb	r3,-8(fp)
18000640:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	int color_word_index;  // from 0 to 7
	int inside_index;	   // the index inside a word, from 0 to 1
	color_word_index = color / 2;
18000644:	e0bffc03 	ldbu	r2,-16(fp)
18000648:	1004d07a 	srli	r2,r2,1
1800064c:	10803fcc 	andi	r2,r2,255
18000650:	e0bffa15 	stw	r2,-24(fp)
	inside_index = color % 2;
18000654:	e0bffc03 	ldbu	r2,-16(fp)
18000658:	1080004c 	andi	r2,r2,1
1800065c:	e0bffb15 	stw	r2,-20(fp)
	if (0 == inside_index)
18000660:	e0bffb17 	ldw	r2,-20(fp)
18000664:	10001b1e 	bne	r2,zero,180006d4 <setColorPalette+0xbc>
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE000) | (red << 9 | green << 5 | blue << 1);
18000668:	d1200217 	ldw	r4,-32760(gp)
1800066c:	d0e00217 	ldw	r3,-32760(gp)
18000670:	e0bffa17 	ldw	r2,-24(fp)
18000674:	10820004 	addi	r2,r2,2048
18000678:	1085883a 	add	r2,r2,r2
1800067c:	1085883a 	add	r2,r2,r2
18000680:	1885883a 	add	r2,r3,r2
18000684:	10c00017 	ldw	r3,0(r2)
18000688:	00808034 	movhi	r2,512
1800068c:	10b80004 	addi	r2,r2,-8192
18000690:	1886703a 	and	r3,r3,r2
18000694:	e0bffd03 	ldbu	r2,-12(fp)
18000698:	100a927a 	slli	r5,r2,9
1800069c:	e0bffe03 	ldbu	r2,-8(fp)
180006a0:	1004917a 	slli	r2,r2,5
180006a4:	288ab03a 	or	r5,r5,r2
180006a8:	e0bfff03 	ldbu	r2,-4(fp)
180006ac:	1085883a 	add	r2,r2,r2
180006b0:	2884b03a 	or	r2,r5,r2
180006b4:	1886b03a 	or	r3,r3,r2
180006b8:	e0bffa17 	ldw	r2,-24(fp)
180006bc:	10820004 	addi	r2,r2,2048
180006c0:	1085883a 	add	r2,r2,r2
180006c4:	1085883a 	add	r2,r2,r2
180006c8:	2085883a 	add	r2,r4,r2
180006cc:	10c00015 	stw	r3,0(r2)
	else
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE) | (red << 21 | green << 17 | blue << 13);
}
180006d0:	00001806 	br	18000734 <setColorPalette+0x11c>
	color_word_index = color / 2;
	inside_index = color % 2;
	if (0 == inside_index)
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE000) | (red << 9 | green << 5 | blue << 1);
	else
		vga_ctrl->PALETTE[color_word_index] = (vga_ctrl->PALETTE[color_word_index] & 0x1FFE) | (red << 21 | green << 17 | blue << 13);
180006d4:	d1200217 	ldw	r4,-32760(gp)
180006d8:	d0e00217 	ldw	r3,-32760(gp)
180006dc:	e0bffa17 	ldw	r2,-24(fp)
180006e0:	10820004 	addi	r2,r2,2048
180006e4:	1085883a 	add	r2,r2,r2
180006e8:	1085883a 	add	r2,r2,r2
180006ec:	1885883a 	add	r2,r3,r2
180006f0:	10800017 	ldw	r2,0(r2)
180006f4:	1087ff8c 	andi	r2,r2,8190
180006f8:	e0fffd03 	ldbu	r3,-12(fp)
180006fc:	180a957a 	slli	r5,r3,21
18000700:	e0fffe03 	ldbu	r3,-8(fp)
18000704:	1806947a 	slli	r3,r3,17
18000708:	28cab03a 	or	r5,r5,r3
1800070c:	e0ffff03 	ldbu	r3,-4(fp)
18000710:	1806937a 	slli	r3,r3,13
18000714:	28c6b03a 	or	r3,r5,r3
18000718:	10c6b03a 	or	r3,r2,r3
1800071c:	e0bffa17 	ldw	r2,-24(fp)
18000720:	10820004 	addi	r2,r2,2048
18000724:	1085883a 	add	r2,r2,r2
18000728:	1085883a 	add	r2,r2,r2
1800072c:	2085883a 	add	r2,r4,r2
18000730:	10c00015 	stw	r3,0(r2)
}
18000734:	0001883a 	nop
18000738:	e037883a 	mov	sp,fp
1800073c:	df000017 	ldw	fp,0(sp)
18000740:	dec00104 	addi	sp,sp,4
18000744:	f800283a 	ret

18000748 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
18000748:	deffe004 	addi	sp,sp,-128
1800074c:	dfc01f15 	stw	ra,124(sp)
18000750:	df001e15 	stw	fp,120(sp)
18000754:	dcc01d15 	stw	r19,116(sp)
18000758:	dc801c15 	stw	r18,112(sp)
1800075c:	dc401b15 	stw	r17,108(sp)
18000760:	dc001a15 	stw	r16,104(sp)
18000764:	df001e04 	addi	fp,sp,120
	printf("textVGAColorScreenSaver\n");
18000768:	01060074 	movhi	r4,6145
1800076c:	213ee804 	addi	r4,r4,-1120
18000770:	8000c5c0 	call	18000c5c <puts>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
18000774:	800045c0 	call	1800045c <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
18000778:	e03fe515 	stw	zero,-108(fp)
1800077c:	00002806 	br	18000820 <textVGAColorScreenSaver+0xd8>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
18000780:	e0bfe517 	ldw	r2,-108(fp)
18000784:	14403fcc 	andi	r17,r2,255
18000788:	04060074 	movhi	r16,6145
1800078c:	84006f04 	addi	r16,r16,444
18000790:	e0bfe517 	ldw	r2,-108(fp)
18000794:	014005c4 	movi	r5,23
18000798:	1009883a 	mov	r4,r2
1800079c:	8000b740 	call	18000b74 <__mulsi3>
180007a0:	8085883a 	add	r2,r16,r2
180007a4:	10800504 	addi	r2,r2,20
180007a8:	10800003 	ldbu	r2,0(r2)
180007ac:	14803fcc 	andi	r18,r2,255
180007b0:	04060074 	movhi	r16,6145
180007b4:	84006f04 	addi	r16,r16,444
180007b8:	e0bfe517 	ldw	r2,-108(fp)
180007bc:	014005c4 	movi	r5,23
180007c0:	1009883a 	mov	r4,r2
180007c4:	8000b740 	call	18000b74 <__mulsi3>
180007c8:	8085883a 	add	r2,r16,r2
180007cc:	10800544 	addi	r2,r2,21
180007d0:	10800003 	ldbu	r2,0(r2)
180007d4:	14c03fcc 	andi	r19,r2,255
180007d8:	04060074 	movhi	r16,6145
180007dc:	84006f04 	addi	r16,r16,444
180007e0:	e0bfe517 	ldw	r2,-108(fp)
180007e4:	014005c4 	movi	r5,23
180007e8:	1009883a 	mov	r4,r2
180007ec:	8000b740 	call	18000b74 <__mulsi3>
180007f0:	8085883a 	add	r2,r16,r2
180007f4:	10800584 	addi	r2,r2,22
180007f8:	10800003 	ldbu	r2,0(r2)
180007fc:	10803fcc 	andi	r2,r2,255
18000800:	100f883a 	mov	r7,r2
18000804:	980d883a 	mov	r6,r19
18000808:	900b883a 	mov	r5,r18
1800080c:	8809883a 	mov	r4,r17
18000810:	80006180 	call	18000618 <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
18000814:	e0bfe517 	ldw	r2,-108(fp)
18000818:	10800044 	addi	r2,r2,1
1800081c:	e0bfe515 	stw	r2,-108(fp)
18000820:	e0bfe517 	ldw	r2,-108(fp)
18000824:	10800410 	cmplti	r2,r2,16
18000828:	103fd51e 	bne	r2,zero,18000780 <__alt_data_end+0xf8000780>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
1800082c:	8000c880 	call	18000c88 <rand>
18000830:	1007883a 	mov	r3,r2
18000834:	00a00034 	movhi	r2,32768
18000838:	108003c4 	addi	r2,r2,15
1800083c:	1884703a 	and	r2,r3,r2
18000840:	1000040e 	bge	r2,zero,18000854 <textVGAColorScreenSaver+0x10c>
18000844:	10bfffc4 	addi	r2,r2,-1
18000848:	00fffc04 	movi	r3,-16
1800084c:	10c4b03a 	or	r2,r2,r3
18000850:	10800044 	addi	r2,r2,1
18000854:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
18000858:	8000c880 	call	18000c88 <rand>
1800085c:	1007883a 	mov	r3,r2
18000860:	00a00034 	movhi	r2,32768
18000864:	108003c4 	addi	r2,r2,15
18000868:	1884703a 	and	r2,r3,r2
1800086c:	1000040e 	bge	r2,zero,18000880 <textVGAColorScreenSaver+0x138>
18000870:	10bfffc4 	addi	r2,r2,-1
18000874:	00fffc04 	movi	r3,-16
18000878:	10c4b03a 	or	r2,r2,r3
1800087c:	10800044 	addi	r2,r2,1
18000880:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
18000884:	00001606 	br	180008e0 <textVGAColorScreenSaver+0x198>
		{
			fg = rand() % 16;
18000888:	8000c880 	call	18000c88 <rand>
1800088c:	1007883a 	mov	r3,r2
18000890:	00a00034 	movhi	r2,32768
18000894:	108003c4 	addi	r2,r2,15
18000898:	1884703a 	and	r2,r3,r2
1800089c:	1000040e 	bge	r2,zero,180008b0 <textVGAColorScreenSaver+0x168>
180008a0:	10bfffc4 	addi	r2,r2,-1
180008a4:	00fffc04 	movi	r3,-16
180008a8:	10c4b03a 	or	r2,r2,r3
180008ac:	10800044 	addi	r2,r2,1
180008b0:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
180008b4:	8000c880 	call	18000c88 <rand>
180008b8:	1007883a 	mov	r3,r2
180008bc:	00a00034 	movhi	r2,32768
180008c0:	108003c4 	addi	r2,r2,15
180008c4:	1884703a 	and	r2,r3,r2
180008c8:	1000040e 	bge	r2,zero,180008dc <textVGAColorScreenSaver+0x194>
180008cc:	10bfffc4 	addi	r2,r2,-1
180008d0:	00fffc04 	movi	r3,-16
180008d4:	10c4b03a 	or	r2,r2,r3
180008d8:	10800044 	addi	r2,r2,1
180008dc:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
180008e0:	e0ffe317 	ldw	r3,-116(fp)
180008e4:	e0bfe417 	ldw	r2,-112(fp)
180008e8:	18bfe726 	beq	r3,r2,18000888 <__alt_data_end+0xf8000888>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
180008ec:	014005c4 	movi	r5,23
180008f0:	e13fe317 	ldw	r4,-116(fp)
180008f4:	8000b740 	call	18000b74 <__mulsi3>
180008f8:	1007883a 	mov	r3,r2
180008fc:	00860074 	movhi	r2,6145
18000900:	10806f04 	addi	r2,r2,444
18000904:	18a1883a 	add	r16,r3,r2
18000908:	014005c4 	movi	r5,23
1800090c:	e13fe417 	ldw	r4,-112(fp)
18000910:	8000b740 	call	18000b74 <__mulsi3>
18000914:	1007883a 	mov	r3,r2
18000918:	00860074 	movhi	r2,6145
1800091c:	10806f04 	addi	r2,r2,444
18000920:	1887883a 	add	r3,r3,r2
18000924:	e0bfe804 	addi	r2,fp,-96
18000928:	180f883a 	mov	r7,r3
1800092c:	800d883a 	mov	r6,r16
18000930:	01460074 	movhi	r5,6145
18000934:	297eee04 	addi	r5,r5,-1096
18000938:	1009883a 	mov	r4,r2
1800093c:	8000d440 	call	18000d44 <sprintf>
		x = rand() % (80-strlen(color_string));
18000940:	8000c880 	call	18000c88 <rand>
18000944:	1021883a 	mov	r16,r2
18000948:	e0bfe804 	addi	r2,fp,-96
1800094c:	1009883a 	mov	r4,r2
18000950:	8000db00 	call	18000db0 <strlen>
18000954:	1007883a 	mov	r3,r2
18000958:	00801404 	movi	r2,80
1800095c:	10c5c83a 	sub	r2,r2,r3
18000960:	100b883a 	mov	r5,r2
18000964:	8009883a 	mov	r4,r16
18000968:	8000b1c0 	call	18000b1c <__umodsi3>
1800096c:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
18000970:	8000c880 	call	18000c88 <rand>
18000974:	01400784 	movi	r5,30
18000978:	1009883a 	mov	r4,r2
1800097c:	8000a440 	call	18000a44 <__modsi3>
18000980:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
18000984:	e0bfe417 	ldw	r2,-112(fp)
18000988:	11003fcc 	andi	r4,r2,255
1800098c:	e0bfe317 	ldw	r2,-116(fp)
18000990:	10803fcc 	andi	r2,r2,255
18000994:	e0ffe804 	addi	r3,fp,-96
18000998:	d8800015 	stw	r2,0(sp)
1800099c:	200f883a 	mov	r7,r4
180009a0:	e1bfe717 	ldw	r6,-100(fp)
180009a4:	e17fe617 	ldw	r5,-104(fp)
180009a8:	1809883a 	mov	r4,r3
180009ac:	80004fc0 	call	180004fc <textVGADrawColorText>
		usleep (100000);
180009b0:	010000b4 	movhi	r4,2
180009b4:	2121a804 	addi	r4,r4,-31072
180009b8:	800db700 	call	1800db70 <usleep>
	}
180009bc:	003f9b06 	br	1800082c <__alt_data_end+0xf800082c>

180009c0 <__divsi3>:
180009c0:	20001b16 	blt	r4,zero,18000a30 <__divsi3+0x70>
180009c4:	000f883a 	mov	r7,zero
180009c8:	28001616 	blt	r5,zero,18000a24 <__divsi3+0x64>
180009cc:	200d883a 	mov	r6,r4
180009d0:	29001a2e 	bgeu	r5,r4,18000a3c <__divsi3+0x7c>
180009d4:	00800804 	movi	r2,32
180009d8:	00c00044 	movi	r3,1
180009dc:	00000106 	br	180009e4 <__divsi3+0x24>
180009e0:	10000d26 	beq	r2,zero,18000a18 <__divsi3+0x58>
180009e4:	294b883a 	add	r5,r5,r5
180009e8:	10bfffc4 	addi	r2,r2,-1
180009ec:	18c7883a 	add	r3,r3,r3
180009f0:	293ffb36 	bltu	r5,r4,180009e0 <__alt_data_end+0xf80009e0>
180009f4:	0005883a 	mov	r2,zero
180009f8:	18000726 	beq	r3,zero,18000a18 <__divsi3+0x58>
180009fc:	0005883a 	mov	r2,zero
18000a00:	31400236 	bltu	r6,r5,18000a0c <__divsi3+0x4c>
18000a04:	314dc83a 	sub	r6,r6,r5
18000a08:	10c4b03a 	or	r2,r2,r3
18000a0c:	1806d07a 	srli	r3,r3,1
18000a10:	280ad07a 	srli	r5,r5,1
18000a14:	183ffa1e 	bne	r3,zero,18000a00 <__alt_data_end+0xf8000a00>
18000a18:	38000126 	beq	r7,zero,18000a20 <__divsi3+0x60>
18000a1c:	0085c83a 	sub	r2,zero,r2
18000a20:	f800283a 	ret
18000a24:	014bc83a 	sub	r5,zero,r5
18000a28:	39c0005c 	xori	r7,r7,1
18000a2c:	003fe706 	br	180009cc <__alt_data_end+0xf80009cc>
18000a30:	0109c83a 	sub	r4,zero,r4
18000a34:	01c00044 	movi	r7,1
18000a38:	003fe306 	br	180009c8 <__alt_data_end+0xf80009c8>
18000a3c:	00c00044 	movi	r3,1
18000a40:	003fee06 	br	180009fc <__alt_data_end+0xf80009fc>

18000a44 <__modsi3>:
18000a44:	20001716 	blt	r4,zero,18000aa4 <__modsi3+0x60>
18000a48:	000f883a 	mov	r7,zero
18000a4c:	2005883a 	mov	r2,r4
18000a50:	28001216 	blt	r5,zero,18000a9c <__modsi3+0x58>
18000a54:	2900162e 	bgeu	r5,r4,18000ab0 <__modsi3+0x6c>
18000a58:	01800804 	movi	r6,32
18000a5c:	00c00044 	movi	r3,1
18000a60:	00000106 	br	18000a68 <__modsi3+0x24>
18000a64:	30000a26 	beq	r6,zero,18000a90 <__modsi3+0x4c>
18000a68:	294b883a 	add	r5,r5,r5
18000a6c:	31bfffc4 	addi	r6,r6,-1
18000a70:	18c7883a 	add	r3,r3,r3
18000a74:	293ffb36 	bltu	r5,r4,18000a64 <__alt_data_end+0xf8000a64>
18000a78:	18000526 	beq	r3,zero,18000a90 <__modsi3+0x4c>
18000a7c:	1806d07a 	srli	r3,r3,1
18000a80:	11400136 	bltu	r2,r5,18000a88 <__modsi3+0x44>
18000a84:	1145c83a 	sub	r2,r2,r5
18000a88:	280ad07a 	srli	r5,r5,1
18000a8c:	183ffb1e 	bne	r3,zero,18000a7c <__alt_data_end+0xf8000a7c>
18000a90:	38000126 	beq	r7,zero,18000a98 <__modsi3+0x54>
18000a94:	0085c83a 	sub	r2,zero,r2
18000a98:	f800283a 	ret
18000a9c:	014bc83a 	sub	r5,zero,r5
18000aa0:	003fec06 	br	18000a54 <__alt_data_end+0xf8000a54>
18000aa4:	0109c83a 	sub	r4,zero,r4
18000aa8:	01c00044 	movi	r7,1
18000aac:	003fe706 	br	18000a4c <__alt_data_end+0xf8000a4c>
18000ab0:	00c00044 	movi	r3,1
18000ab4:	003ff106 	br	18000a7c <__alt_data_end+0xf8000a7c>

18000ab8 <__udivsi3>:
18000ab8:	200d883a 	mov	r6,r4
18000abc:	2900152e 	bgeu	r5,r4,18000b14 <__udivsi3+0x5c>
18000ac0:	28001416 	blt	r5,zero,18000b14 <__udivsi3+0x5c>
18000ac4:	00800804 	movi	r2,32
18000ac8:	00c00044 	movi	r3,1
18000acc:	00000206 	br	18000ad8 <__udivsi3+0x20>
18000ad0:	10000e26 	beq	r2,zero,18000b0c <__udivsi3+0x54>
18000ad4:	28000516 	blt	r5,zero,18000aec <__udivsi3+0x34>
18000ad8:	294b883a 	add	r5,r5,r5
18000adc:	10bfffc4 	addi	r2,r2,-1
18000ae0:	18c7883a 	add	r3,r3,r3
18000ae4:	293ffa36 	bltu	r5,r4,18000ad0 <__alt_data_end+0xf8000ad0>
18000ae8:	18000826 	beq	r3,zero,18000b0c <__udivsi3+0x54>
18000aec:	0005883a 	mov	r2,zero
18000af0:	31400236 	bltu	r6,r5,18000afc <__udivsi3+0x44>
18000af4:	314dc83a 	sub	r6,r6,r5
18000af8:	10c4b03a 	or	r2,r2,r3
18000afc:	1806d07a 	srli	r3,r3,1
18000b00:	280ad07a 	srli	r5,r5,1
18000b04:	183ffa1e 	bne	r3,zero,18000af0 <__alt_data_end+0xf8000af0>
18000b08:	f800283a 	ret
18000b0c:	0005883a 	mov	r2,zero
18000b10:	f800283a 	ret
18000b14:	00c00044 	movi	r3,1
18000b18:	003ff406 	br	18000aec <__alt_data_end+0xf8000aec>

18000b1c <__umodsi3>:
18000b1c:	2005883a 	mov	r2,r4
18000b20:	2900122e 	bgeu	r5,r4,18000b6c <__umodsi3+0x50>
18000b24:	28001116 	blt	r5,zero,18000b6c <__umodsi3+0x50>
18000b28:	01800804 	movi	r6,32
18000b2c:	00c00044 	movi	r3,1
18000b30:	00000206 	br	18000b3c <__umodsi3+0x20>
18000b34:	30000c26 	beq	r6,zero,18000b68 <__umodsi3+0x4c>
18000b38:	28000516 	blt	r5,zero,18000b50 <__umodsi3+0x34>
18000b3c:	294b883a 	add	r5,r5,r5
18000b40:	31bfffc4 	addi	r6,r6,-1
18000b44:	18c7883a 	add	r3,r3,r3
18000b48:	293ffa36 	bltu	r5,r4,18000b34 <__alt_data_end+0xf8000b34>
18000b4c:	18000626 	beq	r3,zero,18000b68 <__umodsi3+0x4c>
18000b50:	1806d07a 	srli	r3,r3,1
18000b54:	11400136 	bltu	r2,r5,18000b5c <__umodsi3+0x40>
18000b58:	1145c83a 	sub	r2,r2,r5
18000b5c:	280ad07a 	srli	r5,r5,1
18000b60:	183ffb1e 	bne	r3,zero,18000b50 <__alt_data_end+0xf8000b50>
18000b64:	f800283a 	ret
18000b68:	f800283a 	ret
18000b6c:	00c00044 	movi	r3,1
18000b70:	003ff706 	br	18000b50 <__alt_data_end+0xf8000b50>

18000b74 <__mulsi3>:
18000b74:	0005883a 	mov	r2,zero
18000b78:	20000726 	beq	r4,zero,18000b98 <__mulsi3+0x24>
18000b7c:	20c0004c 	andi	r3,r4,1
18000b80:	2008d07a 	srli	r4,r4,1
18000b84:	18000126 	beq	r3,zero,18000b8c <__mulsi3+0x18>
18000b88:	1145883a 	add	r2,r2,r5
18000b8c:	294b883a 	add	r5,r5,r5
18000b90:	203ffa1e 	bne	r4,zero,18000b7c <__alt_data_end+0xf8000b7c>
18000b94:	f800283a 	ret
18000b98:	f800283a 	ret

18000b9c <_puts_r>:
18000b9c:	defff604 	addi	sp,sp,-40
18000ba0:	dc000715 	stw	r16,28(sp)
18000ba4:	2021883a 	mov	r16,r4
18000ba8:	2809883a 	mov	r4,r5
18000bac:	dc400815 	stw	r17,32(sp)
18000bb0:	dfc00915 	stw	ra,36(sp)
18000bb4:	2823883a 	mov	r17,r5
18000bb8:	8000db00 	call	18000db0 <strlen>
18000bbc:	10c00044 	addi	r3,r2,1
18000bc0:	d8800115 	stw	r2,4(sp)
18000bc4:	00860074 	movhi	r2,6145
18000bc8:	10bef704 	addi	r2,r2,-1060
18000bcc:	d8800215 	stw	r2,8(sp)
18000bd0:	00800044 	movi	r2,1
18000bd4:	d8800315 	stw	r2,12(sp)
18000bd8:	00800084 	movi	r2,2
18000bdc:	dc400015 	stw	r17,0(sp)
18000be0:	d8c00615 	stw	r3,24(sp)
18000be4:	dec00415 	stw	sp,16(sp)
18000be8:	d8800515 	stw	r2,20(sp)
18000bec:	80000226 	beq	r16,zero,18000bf8 <_puts_r+0x5c>
18000bf0:	80800e17 	ldw	r2,56(r16)
18000bf4:	10001426 	beq	r2,zero,18000c48 <_puts_r+0xac>
18000bf8:	81400217 	ldw	r5,8(r16)
18000bfc:	2880030b 	ldhu	r2,12(r5)
18000c00:	10c8000c 	andi	r3,r2,8192
18000c04:	1800061e 	bne	r3,zero,18000c20 <_puts_r+0x84>
18000c08:	29001917 	ldw	r4,100(r5)
18000c0c:	00f7ffc4 	movi	r3,-8193
18000c10:	10880014 	ori	r2,r2,8192
18000c14:	20c6703a 	and	r3,r4,r3
18000c18:	2880030d 	sth	r2,12(r5)
18000c1c:	28c01915 	stw	r3,100(r5)
18000c20:	d9800404 	addi	r6,sp,16
18000c24:	8009883a 	mov	r4,r16
18000c28:	8004d640 	call	18004d64 <__sfvwrite_r>
18000c2c:	1000091e 	bne	r2,zero,18000c54 <_puts_r+0xb8>
18000c30:	00800284 	movi	r2,10
18000c34:	dfc00917 	ldw	ra,36(sp)
18000c38:	dc400817 	ldw	r17,32(sp)
18000c3c:	dc000717 	ldw	r16,28(sp)
18000c40:	dec00a04 	addi	sp,sp,40
18000c44:	f800283a 	ret
18000c48:	8009883a 	mov	r4,r16
18000c4c:	8004d140 	call	18004d14 <__sinit>
18000c50:	003fe906 	br	18000bf8 <__alt_data_end+0xf8000bf8>
18000c54:	00bfffc4 	movi	r2,-1
18000c58:	003ff606 	br	18000c34 <__alt_data_end+0xf8000c34>

18000c5c <puts>:
18000c5c:	00860074 	movhi	r2,6145
18000c60:	10877a04 	addi	r2,r2,7656
18000c64:	200b883a 	mov	r5,r4
18000c68:	11000017 	ldw	r4,0(r2)
18000c6c:	8000b9c1 	jmpi	18000b9c <_puts_r>

18000c70 <srand>:
18000c70:	00860074 	movhi	r2,6145
18000c74:	10877a04 	addi	r2,r2,7656
18000c78:	10800017 	ldw	r2,0(r2)
18000c7c:	11002915 	stw	r4,164(r2)
18000c80:	10002a15 	stw	zero,168(r2)
18000c84:	f800283a 	ret

18000c88 <rand>:
18000c88:	00860074 	movhi	r2,6145
18000c8c:	defffe04 	addi	sp,sp,-8
18000c90:	10877a04 	addi	r2,r2,7656
18000c94:	dc000015 	stw	r16,0(sp)
18000c98:	14000017 	ldw	r16,0(r2)
18000c9c:	dfc00115 	stw	ra,4(sp)
18000ca0:	01932574 	movhi	r6,19605
18000ca4:	81002917 	ldw	r4,164(r16)
18000ca8:	81402a17 	ldw	r5,168(r16)
18000cac:	01d614b4 	movhi	r7,22610
18000cb0:	319fcb44 	addi	r6,r6,32557
18000cb4:	39fd0b44 	addi	r7,r7,-3027
18000cb8:	8009da80 	call	18009da8 <__muldi3>
18000cbc:	11000044 	addi	r4,r2,1
18000cc0:	2085803a 	cmpltu	r2,r4,r2
18000cc4:	10c7883a 	add	r3,r2,r3
18000cc8:	00a00034 	movhi	r2,32768
18000ccc:	10bfffc4 	addi	r2,r2,-1
18000cd0:	1884703a 	and	r2,r3,r2
18000cd4:	81002915 	stw	r4,164(r16)
18000cd8:	80c02a15 	stw	r3,168(r16)
18000cdc:	dfc00117 	ldw	ra,4(sp)
18000ce0:	dc000017 	ldw	r16,0(sp)
18000ce4:	dec00204 	addi	sp,sp,8
18000ce8:	f800283a 	ret

18000cec <_sprintf_r>:
18000cec:	deffe404 	addi	sp,sp,-112
18000cf0:	2807883a 	mov	r3,r5
18000cf4:	dfc01a15 	stw	ra,104(sp)
18000cf8:	d9c01b15 	stw	r7,108(sp)
18000cfc:	00a00034 	movhi	r2,32768
18000d00:	10bfffc4 	addi	r2,r2,-1
18000d04:	02008204 	movi	r8,520
18000d08:	d8800215 	stw	r2,8(sp)
18000d0c:	d8800515 	stw	r2,20(sp)
18000d10:	d9c01b04 	addi	r7,sp,108
18000d14:	d80b883a 	mov	r5,sp
18000d18:	00bfffc4 	movi	r2,-1
18000d1c:	d8c00015 	stw	r3,0(sp)
18000d20:	d8c00415 	stw	r3,16(sp)
18000d24:	da00030d 	sth	r8,12(sp)
18000d28:	d880038d 	sth	r2,14(sp)
18000d2c:	8000e480 	call	18000e48 <___svfprintf_internal_r>
18000d30:	d8c00017 	ldw	r3,0(sp)
18000d34:	18000005 	stb	zero,0(r3)
18000d38:	dfc01a17 	ldw	ra,104(sp)
18000d3c:	dec01c04 	addi	sp,sp,112
18000d40:	f800283a 	ret

18000d44 <sprintf>:
18000d44:	deffe304 	addi	sp,sp,-116
18000d48:	2007883a 	mov	r3,r4
18000d4c:	dfc01a15 	stw	ra,104(sp)
18000d50:	d9801b15 	stw	r6,108(sp)
18000d54:	d9c01c15 	stw	r7,112(sp)
18000d58:	01060074 	movhi	r4,6145
18000d5c:	21077a04 	addi	r4,r4,7656
18000d60:	21000017 	ldw	r4,0(r4)
18000d64:	00a00034 	movhi	r2,32768
18000d68:	10bfffc4 	addi	r2,r2,-1
18000d6c:	280d883a 	mov	r6,r5
18000d70:	02008204 	movi	r8,520
18000d74:	d8800215 	stw	r2,8(sp)
18000d78:	d8800515 	stw	r2,20(sp)
18000d7c:	d9c01b04 	addi	r7,sp,108
18000d80:	d80b883a 	mov	r5,sp
18000d84:	00bfffc4 	movi	r2,-1
18000d88:	d8c00015 	stw	r3,0(sp)
18000d8c:	d8c00415 	stw	r3,16(sp)
18000d90:	da00030d 	sth	r8,12(sp)
18000d94:	d880038d 	sth	r2,14(sp)
18000d98:	8000e480 	call	18000e48 <___svfprintf_internal_r>
18000d9c:	d8c00017 	ldw	r3,0(sp)
18000da0:	18000005 	stb	zero,0(r3)
18000da4:	dfc01a17 	ldw	ra,104(sp)
18000da8:	dec01d04 	addi	sp,sp,116
18000dac:	f800283a 	ret

18000db0 <strlen>:
18000db0:	208000cc 	andi	r2,r4,3
18000db4:	10002026 	beq	r2,zero,18000e38 <strlen+0x88>
18000db8:	20800007 	ldb	r2,0(r4)
18000dbc:	10002026 	beq	r2,zero,18000e40 <strlen+0x90>
18000dc0:	2005883a 	mov	r2,r4
18000dc4:	00000206 	br	18000dd0 <strlen+0x20>
18000dc8:	10c00007 	ldb	r3,0(r2)
18000dcc:	18001826 	beq	r3,zero,18000e30 <strlen+0x80>
18000dd0:	10800044 	addi	r2,r2,1
18000dd4:	10c000cc 	andi	r3,r2,3
18000dd8:	183ffb1e 	bne	r3,zero,18000dc8 <__alt_data_end+0xf8000dc8>
18000ddc:	10c00017 	ldw	r3,0(r2)
18000de0:	01ffbff4 	movhi	r7,65279
18000de4:	39ffbfc4 	addi	r7,r7,-257
18000de8:	00ca303a 	nor	r5,zero,r3
18000dec:	01a02074 	movhi	r6,32897
18000df0:	19c7883a 	add	r3,r3,r7
18000df4:	31a02004 	addi	r6,r6,-32640
18000df8:	1946703a 	and	r3,r3,r5
18000dfc:	1986703a 	and	r3,r3,r6
18000e00:	1800091e 	bne	r3,zero,18000e28 <strlen+0x78>
18000e04:	10800104 	addi	r2,r2,4
18000e08:	10c00017 	ldw	r3,0(r2)
18000e0c:	19cb883a 	add	r5,r3,r7
18000e10:	00c6303a 	nor	r3,zero,r3
18000e14:	28c6703a 	and	r3,r5,r3
18000e18:	1986703a 	and	r3,r3,r6
18000e1c:	183ff926 	beq	r3,zero,18000e04 <__alt_data_end+0xf8000e04>
18000e20:	00000106 	br	18000e28 <strlen+0x78>
18000e24:	10800044 	addi	r2,r2,1
18000e28:	10c00007 	ldb	r3,0(r2)
18000e2c:	183ffd1e 	bne	r3,zero,18000e24 <__alt_data_end+0xf8000e24>
18000e30:	1105c83a 	sub	r2,r2,r4
18000e34:	f800283a 	ret
18000e38:	2005883a 	mov	r2,r4
18000e3c:	003fe706 	br	18000ddc <__alt_data_end+0xf8000ddc>
18000e40:	0005883a 	mov	r2,zero
18000e44:	f800283a 	ret

18000e48 <___svfprintf_internal_r>:
18000e48:	deffb704 	addi	sp,sp,-292
18000e4c:	dfc04815 	stw	ra,288(sp)
18000e50:	ddc04615 	stw	r23,280(sp)
18000e54:	d9402d15 	stw	r5,180(sp)
18000e58:	d9003915 	stw	r4,228(sp)
18000e5c:	302f883a 	mov	r23,r6
18000e60:	d9c02e15 	stw	r7,184(sp)
18000e64:	df004715 	stw	fp,284(sp)
18000e68:	dd804515 	stw	r22,276(sp)
18000e6c:	dd404415 	stw	r21,272(sp)
18000e70:	dd004315 	stw	r20,268(sp)
18000e74:	dcc04215 	stw	r19,264(sp)
18000e78:	dc804115 	stw	r18,260(sp)
18000e7c:	dc404015 	stw	r17,256(sp)
18000e80:	dc003f15 	stw	r16,252(sp)
18000e84:	80054600 	call	18005460 <_localeconv_r>
18000e88:	10800017 	ldw	r2,0(r2)
18000e8c:	1009883a 	mov	r4,r2
18000e90:	d8803415 	stw	r2,208(sp)
18000e94:	8000db00 	call	18000db0 <strlen>
18000e98:	d8c02d17 	ldw	r3,180(sp)
18000e9c:	d8803815 	stw	r2,224(sp)
18000ea0:	1880030b 	ldhu	r2,12(r3)
18000ea4:	1080200c 	andi	r2,r2,128
18000ea8:	10000226 	beq	r2,zero,18000eb4 <___svfprintf_internal_r+0x6c>
18000eac:	18800417 	ldw	r2,16(r3)
18000eb0:	1006b126 	beq	r2,zero,18002978 <___svfprintf_internal_r+0x1b30>
18000eb4:	dcc03917 	ldw	r19,228(sp)
18000eb8:	d8c00404 	addi	r3,sp,16
18000ebc:	05460074 	movhi	r21,6145
18000ec0:	d9001e04 	addi	r4,sp,120
18000ec4:	ad7f0884 	addi	r21,r21,-990
18000ec8:	d8c01e15 	stw	r3,120(sp)
18000ecc:	d8002015 	stw	zero,128(sp)
18000ed0:	d8001f15 	stw	zero,124(sp)
18000ed4:	d8003315 	stw	zero,204(sp)
18000ed8:	d8003615 	stw	zero,216(sp)
18000edc:	d8003715 	stw	zero,220(sp)
18000ee0:	1811883a 	mov	r8,r3
18000ee4:	d8003a15 	stw	zero,232(sp)
18000ee8:	d8003b15 	stw	zero,236(sp)
18000eec:	d8002f15 	stw	zero,188(sp)
18000ef0:	d9002815 	stw	r4,160(sp)
18000ef4:	b8800007 	ldb	r2,0(r23)
18000ef8:	10027726 	beq	r2,zero,180018d8 <___svfprintf_internal_r+0xa90>
18000efc:	00c00944 	movi	r3,37
18000f00:	b823883a 	mov	r17,r23
18000f04:	10c0021e 	bne	r2,r3,18000f10 <___svfprintf_internal_r+0xc8>
18000f08:	00001406 	br	18000f5c <___svfprintf_internal_r+0x114>
18000f0c:	10c00326 	beq	r2,r3,18000f1c <___svfprintf_internal_r+0xd4>
18000f10:	8c400044 	addi	r17,r17,1
18000f14:	88800007 	ldb	r2,0(r17)
18000f18:	103ffc1e 	bne	r2,zero,18000f0c <__alt_data_end+0xf8000f0c>
18000f1c:	8de1c83a 	sub	r16,r17,r23
18000f20:	80000e26 	beq	r16,zero,18000f5c <___svfprintf_internal_r+0x114>
18000f24:	d8c02017 	ldw	r3,128(sp)
18000f28:	d8801f17 	ldw	r2,124(sp)
18000f2c:	45c00015 	stw	r23,0(r8)
18000f30:	1c07883a 	add	r3,r3,r16
18000f34:	10800044 	addi	r2,r2,1
18000f38:	d8c02015 	stw	r3,128(sp)
18000f3c:	44000115 	stw	r16,4(r8)
18000f40:	d8801f15 	stw	r2,124(sp)
18000f44:	00c001c4 	movi	r3,7
18000f48:	18809916 	blt	r3,r2,180011b0 <___svfprintf_internal_r+0x368>
18000f4c:	42000204 	addi	r8,r8,8
18000f50:	d9402f17 	ldw	r5,188(sp)
18000f54:	2c0b883a 	add	r5,r5,r16
18000f58:	d9402f15 	stw	r5,188(sp)
18000f5c:	88800007 	ldb	r2,0(r17)
18000f60:	10009a26 	beq	r2,zero,180011cc <___svfprintf_internal_r+0x384>
18000f64:	8dc00044 	addi	r23,r17,1
18000f68:	8c400047 	ldb	r17,1(r17)
18000f6c:	0021883a 	mov	r16,zero
18000f70:	00bfffc4 	movi	r2,-1
18000f74:	0025883a 	mov	r18,zero
18000f78:	dc002905 	stb	r16,164(sp)
18000f7c:	d8002785 	stb	zero,158(sp)
18000f80:	d8002b05 	stb	zero,172(sp)
18000f84:	d8802a15 	stw	r2,168(sp)
18000f88:	d8003115 	stw	zero,196(sp)
18000f8c:	05001604 	movi	r20,88
18000f90:	05800244 	movi	r22,9
18000f94:	4039883a 	mov	fp,r8
18000f98:	9021883a 	mov	r16,r18
18000f9c:	bdc00044 	addi	r23,r23,1
18000fa0:	88bff804 	addi	r2,r17,-32
18000fa4:	a0831e36 	bltu	r20,r2,18001c20 <___svfprintf_internal_r+0xdd8>
18000fa8:	100490ba 	slli	r2,r2,2
18000fac:	00c60034 	movhi	r3,6144
18000fb0:	18c3f004 	addi	r3,r3,4032
18000fb4:	10c5883a 	add	r2,r2,r3
18000fb8:	10800017 	ldw	r2,0(r2)
18000fbc:	1000683a 	jmp	r2
18000fc0:	18001b68 	cmpgeui	zero,r3,109
18000fc4:	18001c20 	cmpeqi	zero,r3,112
18000fc8:	18001c20 	cmpeqi	zero,r3,112
18000fcc:	18001b5c 	xori	zero,r3,109
18000fd0:	18001c20 	cmpeqi	zero,r3,112
18000fd4:	18001c20 	cmpeqi	zero,r3,112
18000fd8:	18001c20 	cmpeqi	zero,r3,112
18000fdc:	18001c20 	cmpeqi	zero,r3,112
18000fe0:	18001c20 	cmpeqi	zero,r3,112
18000fe4:	18001c20 	cmpeqi	zero,r3,112
18000fe8:	18001228 	cmpgeui	zero,r3,72
18000fec:	18001a6c 	andhi	zero,r3,105
18000ff0:	18001c20 	cmpeqi	zero,r3,112
18000ff4:	18001134 	orhi	zero,r3,68
18000ff8:	1800124c 	andi	zero,r3,73
18000ffc:	18001c20 	cmpeqi	zero,r3,112
18001000:	180012d8 	cmpnei	zero,r3,75
18001004:	1800129c 	xori	zero,r3,74
18001008:	1800129c 	xori	zero,r3,74
1800100c:	1800129c 	xori	zero,r3,74
18001010:	1800129c 	xori	zero,r3,74
18001014:	1800129c 	xori	zero,r3,74
18001018:	1800129c 	xori	zero,r3,74
1800101c:	1800129c 	xori	zero,r3,74
18001020:	1800129c 	xori	zero,r3,74
18001024:	1800129c 	xori	zero,r3,74
18001028:	18001c20 	cmpeqi	zero,r3,112
1800102c:	18001c20 	cmpeqi	zero,r3,112
18001030:	18001c20 	cmpeqi	zero,r3,112
18001034:	18001c20 	cmpeqi	zero,r3,112
18001038:	18001c20 	cmpeqi	zero,r3,112
1800103c:	18001c20 	cmpeqi	zero,r3,112
18001040:	18001c20 	cmpeqi	zero,r3,112
18001044:	18001c20 	cmpeqi	zero,r3,112
18001048:	18001c20 	cmpeqi	zero,r3,112
1800104c:	18001c20 	cmpeqi	zero,r3,112
18001050:	1800139c 	xori	zero,r3,78
18001054:	180012e4 	muli	zero,r3,75
18001058:	18001c20 	cmpeqi	zero,r3,112
1800105c:	180012e4 	muli	zero,r3,75
18001060:	18001c20 	cmpeqi	zero,r3,112
18001064:	18001c20 	cmpeqi	zero,r3,112
18001068:	18001c20 	cmpeqi	zero,r3,112
1800106c:	18001c20 	cmpeqi	zero,r3,112
18001070:	18001390 	cmplti	zero,r3,78
18001074:	18001c20 	cmpeqi	zero,r3,112
18001078:	18001c20 	cmpeqi	zero,r3,112
1800107c:	18001464 	muli	zero,r3,81
18001080:	18001c20 	cmpeqi	zero,r3,112
18001084:	18001c20 	cmpeqi	zero,r3,112
18001088:	18001c20 	cmpeqi	zero,r3,112
1800108c:	18001c20 	cmpeqi	zero,r3,112
18001090:	18001c20 	cmpeqi	zero,r3,112
18001094:	180018e0 	cmpeqi	zero,r3,99
18001098:	18001c20 	cmpeqi	zero,r3,112
1800109c:	18001c20 	cmpeqi	zero,r3,112
180010a0:	1800194c 	andi	zero,r3,101
180010a4:	18001c20 	cmpeqi	zero,r3,112
180010a8:	18001c20 	cmpeqi	zero,r3,112
180010ac:	18001c20 	cmpeqi	zero,r3,112
180010b0:	18001c20 	cmpeqi	zero,r3,112
180010b4:	18001c20 	cmpeqi	zero,r3,112
180010b8:	18001c20 	cmpeqi	zero,r3,112
180010bc:	18001c20 	cmpeqi	zero,r3,112
180010c0:	18001c20 	cmpeqi	zero,r3,112
180010c4:	18001c20 	cmpeqi	zero,r3,112
180010c8:	18001c20 	cmpeqi	zero,r3,112
180010cc:	18001a08 	cmpgei	zero,r3,104
180010d0:	18001b88 	cmpgei	zero,r3,110
180010d4:	180012e4 	muli	zero,r3,75
180010d8:	180012e4 	muli	zero,r3,75
180010dc:	180012e4 	muli	zero,r3,75
180010e0:	18001bfc 	xorhi	zero,r3,111
180010e4:	18001b88 	cmpgei	zero,r3,110
180010e8:	18001c20 	cmpeqi	zero,r3,112
180010ec:	18001c20 	cmpeqi	zero,r3,112
180010f0:	18001ba8 	cmpgeui	zero,r3,110
180010f4:	18001c20 	cmpeqi	zero,r3,112
180010f8:	18001bbc 	xorhi	zero,r3,110
180010fc:	18001a4c 	andi	zero,r3,105
18001100:	18001140 	call	11800114 <__alt_mem_onchip_memory2_0+0x11800114>
18001104:	18001a84 	addi	zero,r3,106
18001108:	18001c20 	cmpeqi	zero,r3,112
1800110c:	18001a90 	cmplti	zero,r3,106
18001110:	18001c20 	cmpeqi	zero,r3,112
18001114:	18001af4 	orhi	zero,r3,107
18001118:	18001c20 	cmpeqi	zero,r3,112
1800111c:	18001c20 	cmpeqi	zero,r3,112
18001120:	18001b14 	ori	zero,r3,108
18001124:	d8c03117 	ldw	r3,196(sp)
18001128:	d8802e15 	stw	r2,184(sp)
1800112c:	00c7c83a 	sub	r3,zero,r3
18001130:	d8c03115 	stw	r3,196(sp)
18001134:	84000114 	ori	r16,r16,4
18001138:	bc400007 	ldb	r17,0(r23)
1800113c:	003f9706 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001140:	00800c04 	movi	r2,48
18001144:	d8802705 	stb	r2,156(sp)
18001148:	00801e04 	movi	r2,120
1800114c:	d8802745 	stb	r2,157(sp)
18001150:	d9002a17 	ldw	r4,168(sp)
18001154:	d8802e17 	ldw	r2,184(sp)
18001158:	d8002785 	stb	zero,158(sp)
1800115c:	e011883a 	mov	r8,fp
18001160:	10c00104 	addi	r3,r2,4
18001164:	15000017 	ldw	r20,0(r2)
18001168:	002d883a 	mov	r22,zero
1800116c:	80800094 	ori	r2,r16,2
18001170:	2002b616 	blt	r4,zero,18001c4c <___svfprintf_internal_r+0xe04>
18001174:	00bfdfc4 	movi	r2,-129
18001178:	80a4703a 	and	r18,r16,r2
1800117c:	d8c02e15 	stw	r3,184(sp)
18001180:	94800094 	ori	r18,r18,2
18001184:	a002a01e 	bne	r20,zero,18001c08 <___svfprintf_internal_r+0xdc0>
18001188:	01460074 	movhi	r5,6145
1800118c:	297f0104 	addi	r5,r5,-1020
18001190:	d9403a15 	stw	r5,232(sp)
18001194:	04401e04 	movi	r17,120
18001198:	d8c02a17 	ldw	r3,168(sp)
1800119c:	0039883a 	mov	fp,zero
180011a0:	1801e626 	beq	r3,zero,1800193c <___svfprintf_internal_r+0xaf4>
180011a4:	0029883a 	mov	r20,zero
180011a8:	002d883a 	mov	r22,zero
180011ac:	00020506 	br	180019c4 <___svfprintf_internal_r+0xb7c>
180011b0:	d9402d17 	ldw	r5,180(sp)
180011b4:	d9801e04 	addi	r6,sp,120
180011b8:	9809883a 	mov	r4,r19
180011bc:	8007a480 	call	18007a48 <__ssprint_r>
180011c0:	1000081e 	bne	r2,zero,180011e4 <___svfprintf_internal_r+0x39c>
180011c4:	da000404 	addi	r8,sp,16
180011c8:	003f6106 	br	18000f50 <__alt_data_end+0xf8000f50>
180011cc:	d8802017 	ldw	r2,128(sp)
180011d0:	10000426 	beq	r2,zero,180011e4 <___svfprintf_internal_r+0x39c>
180011d4:	d9402d17 	ldw	r5,180(sp)
180011d8:	d9003917 	ldw	r4,228(sp)
180011dc:	d9801e04 	addi	r6,sp,120
180011e0:	8007a480 	call	18007a48 <__ssprint_r>
180011e4:	d8802d17 	ldw	r2,180(sp)
180011e8:	10c0030b 	ldhu	r3,12(r2)
180011ec:	d8802f17 	ldw	r2,188(sp)
180011f0:	18c0100c 	andi	r3,r3,64
180011f4:	1806251e 	bne	r3,zero,18002a8c <___svfprintf_internal_r+0x1c44>
180011f8:	dfc04817 	ldw	ra,288(sp)
180011fc:	df004717 	ldw	fp,284(sp)
18001200:	ddc04617 	ldw	r23,280(sp)
18001204:	dd804517 	ldw	r22,276(sp)
18001208:	dd404417 	ldw	r21,272(sp)
1800120c:	dd004317 	ldw	r20,268(sp)
18001210:	dcc04217 	ldw	r19,264(sp)
18001214:	dc804117 	ldw	r18,260(sp)
18001218:	dc404017 	ldw	r17,256(sp)
1800121c:	dc003f17 	ldw	r16,252(sp)
18001220:	dec04904 	addi	sp,sp,292
18001224:	f800283a 	ret
18001228:	d9002e17 	ldw	r4,184(sp)
1800122c:	d9402e17 	ldw	r5,184(sp)
18001230:	21000017 	ldw	r4,0(r4)
18001234:	28800104 	addi	r2,r5,4
18001238:	d9003115 	stw	r4,196(sp)
1800123c:	203fb916 	blt	r4,zero,18001124 <__alt_data_end+0xf8001124>
18001240:	d8802e15 	stw	r2,184(sp)
18001244:	bc400007 	ldb	r17,0(r23)
18001248:	003f5406 	br	18000f9c <__alt_data_end+0xf8000f9c>
1800124c:	bc400007 	ldb	r17,0(r23)
18001250:	01000a84 	movi	r4,42
18001254:	b8c00044 	addi	r3,r23,1
18001258:	89076926 	beq	r17,r4,18003000 <___svfprintf_internal_r+0x21b8>
1800125c:	8cbff404 	addi	r18,r17,-48
18001260:	b486b936 	bltu	r22,r18,18002d48 <___svfprintf_internal_r+0x1f00>
18001264:	0009883a 	mov	r4,zero
18001268:	1823883a 	mov	r17,r3
1800126c:	01400284 	movi	r5,10
18001270:	8000b740 	call	18000b74 <__mulsi3>
18001274:	88c00007 	ldb	r3,0(r17)
18001278:	1489883a 	add	r4,r2,r18
1800127c:	8dc00044 	addi	r23,r17,1
18001280:	1cbff404 	addi	r18,r3,-48
18001284:	b823883a 	mov	r17,r23
18001288:	b4bff82e 	bgeu	r22,r18,1800126c <__alt_data_end+0xf800126c>
1800128c:	1823883a 	mov	r17,r3
18001290:	20060416 	blt	r4,zero,18002aa4 <___svfprintf_internal_r+0x1c5c>
18001294:	d9002a15 	stw	r4,168(sp)
18001298:	003f4106 	br	18000fa0 <__alt_data_end+0xf8000fa0>
1800129c:	8cbff404 	addi	r18,r17,-48
180012a0:	d8003115 	stw	zero,196(sp)
180012a4:	0009883a 	mov	r4,zero
180012a8:	b823883a 	mov	r17,r23
180012ac:	01400284 	movi	r5,10
180012b0:	8000b740 	call	18000b74 <__mulsi3>
180012b4:	88c00007 	ldb	r3,0(r17)
180012b8:	9089883a 	add	r4,r18,r2
180012bc:	bdc00044 	addi	r23,r23,1
180012c0:	1cbff404 	addi	r18,r3,-48
180012c4:	b823883a 	mov	r17,r23
180012c8:	b4bff82e 	bgeu	r22,r18,180012ac <__alt_data_end+0xf80012ac>
180012cc:	1823883a 	mov	r17,r3
180012d0:	d9003115 	stw	r4,196(sp)
180012d4:	003f3206 	br	18000fa0 <__alt_data_end+0xf8000fa0>
180012d8:	84002014 	ori	r16,r16,128
180012dc:	bc400007 	ldb	r17,0(r23)
180012e0:	003f2e06 	br	18000f9c <__alt_data_end+0xf8000f9c>
180012e4:	8025883a 	mov	r18,r16
180012e8:	dc002903 	ldbu	r16,164(sp)
180012ec:	e011883a 	mov	r8,fp
180012f0:	84003fcc 	andi	r16,r16,255
180012f4:	8007721e 	bne	r16,zero,180030c0 <___svfprintf_internal_r+0x2278>
180012f8:	9080020c 	andi	r2,r18,8
180012fc:	1004a526 	beq	r2,zero,18002594 <___svfprintf_internal_r+0x174c>
18001300:	d9002e17 	ldw	r4,184(sp)
18001304:	d9402e17 	ldw	r5,184(sp)
18001308:	d8802e17 	ldw	r2,184(sp)
1800130c:	21000017 	ldw	r4,0(r4)
18001310:	29400117 	ldw	r5,4(r5)
18001314:	10800204 	addi	r2,r2,8
18001318:	d9003615 	stw	r4,216(sp)
1800131c:	d9403715 	stw	r5,220(sp)
18001320:	d8802e15 	stw	r2,184(sp)
18001324:	d9003617 	ldw	r4,216(sp)
18001328:	d9403717 	ldw	r5,220(sp)
1800132c:	da003e15 	stw	r8,248(sp)
18001330:	04000044 	movi	r16,1
18001334:	80077680 	call	18007768 <__fpclassifyd>
18001338:	da003e17 	ldw	r8,248(sp)
1800133c:	1404731e 	bne	r2,r16,1800250c <___svfprintf_internal_r+0x16c4>
18001340:	d9003617 	ldw	r4,216(sp)
18001344:	d9403717 	ldw	r5,220(sp)
18001348:	000d883a 	mov	r6,zero
1800134c:	000f883a 	mov	r7,zero
18001350:	800be540 	call	1800be54 <__ledf2>
18001354:	da003e17 	ldw	r8,248(sp)
18001358:	10061b16 	blt	r2,zero,18002bc8 <___svfprintf_internal_r+0x1d80>
1800135c:	df002783 	ldbu	fp,158(sp)
18001360:	008011c4 	movi	r2,71
18001364:	1445810e 	bge	r2,r17,1800296c <___svfprintf_internal_r+0x1b24>
18001368:	04060074 	movhi	r16,6145
1800136c:	843ef904 	addi	r16,r16,-1052
18001370:	00c000c4 	movi	r3,3
18001374:	00bfdfc4 	movi	r2,-129
18001378:	d8c02915 	stw	r3,164(sp)
1800137c:	90a4703a 	and	r18,r18,r2
18001380:	d8c02b15 	stw	r3,172(sp)
18001384:	d8002a15 	stw	zero,168(sp)
18001388:	d8003215 	stw	zero,200(sp)
1800138c:	00006c06 	br	18001540 <___svfprintf_internal_r+0x6f8>
18001390:	84000214 	ori	r16,r16,8
18001394:	bc400007 	ldb	r17,0(r23)
18001398:	003f0006 	br	18000f9c <__alt_data_end+0xf8000f9c>
1800139c:	8025883a 	mov	r18,r16
180013a0:	dc002903 	ldbu	r16,164(sp)
180013a4:	e011883a 	mov	r8,fp
180013a8:	84003fcc 	andi	r16,r16,255
180013ac:	80073f1e 	bne	r16,zero,180030ac <___svfprintf_internal_r+0x2264>
180013b0:	94800414 	ori	r18,r18,16
180013b4:	9080080c 	andi	r2,r18,32
180013b8:	1003bb26 	beq	r2,zero,180022a8 <___svfprintf_internal_r+0x1460>
180013bc:	d9002e17 	ldw	r4,184(sp)
180013c0:	20800117 	ldw	r2,4(r4)
180013c4:	25000017 	ldw	r20,0(r4)
180013c8:	21000204 	addi	r4,r4,8
180013cc:	d9002e15 	stw	r4,184(sp)
180013d0:	102d883a 	mov	r22,r2
180013d4:	1003bd16 	blt	r2,zero,180022cc <___svfprintf_internal_r+0x1484>
180013d8:	d9002a17 	ldw	r4,168(sp)
180013dc:	df002783 	ldbu	fp,158(sp)
180013e0:	2003d016 	blt	r4,zero,18002324 <___svfprintf_internal_r+0x14dc>
180013e4:	00ffdfc4 	movi	r3,-129
180013e8:	a584b03a 	or	r2,r20,r22
180013ec:	90e4703a 	and	r18,r18,r3
180013f0:	10015026 	beq	r2,zero,18001934 <___svfprintf_internal_r+0xaec>
180013f4:	b0037026 	beq	r22,zero,180021b8 <___svfprintf_internal_r+0x1370>
180013f8:	dc402915 	stw	r17,164(sp)
180013fc:	dc001e04 	addi	r16,sp,120
18001400:	b023883a 	mov	r17,r22
18001404:	402d883a 	mov	r22,r8
18001408:	a009883a 	mov	r4,r20
1800140c:	880b883a 	mov	r5,r17
18001410:	01800284 	movi	r6,10
18001414:	000f883a 	mov	r7,zero
18001418:	800a4b00 	call	1800a4b0 <__umoddi3>
1800141c:	10800c04 	addi	r2,r2,48
18001420:	843fffc4 	addi	r16,r16,-1
18001424:	a009883a 	mov	r4,r20
18001428:	880b883a 	mov	r5,r17
1800142c:	80800005 	stb	r2,0(r16)
18001430:	01800284 	movi	r6,10
18001434:	000f883a 	mov	r7,zero
18001438:	8009eb40 	call	18009eb4 <__udivdi3>
1800143c:	1029883a 	mov	r20,r2
18001440:	10c4b03a 	or	r2,r2,r3
18001444:	1823883a 	mov	r17,r3
18001448:	103fef1e 	bne	r2,zero,18001408 <__alt_data_end+0xf8001408>
1800144c:	d8c02817 	ldw	r3,160(sp)
18001450:	dc402917 	ldw	r17,164(sp)
18001454:	b011883a 	mov	r8,r22
18001458:	1c07c83a 	sub	r3,r3,r16
1800145c:	d8c02b15 	stw	r3,172(sp)
18001460:	00003106 	br	18001528 <___svfprintf_internal_r+0x6e0>
18001464:	8025883a 	mov	r18,r16
18001468:	dc002903 	ldbu	r16,164(sp)
1800146c:	e011883a 	mov	r8,fp
18001470:	84003fcc 	andi	r16,r16,255
18001474:	80070a1e 	bne	r16,zero,180030a0 <___svfprintf_internal_r+0x2258>
18001478:	94800414 	ori	r18,r18,16
1800147c:	9080080c 	andi	r2,r18,32
18001480:	1002f626 	beq	r2,zero,1800205c <___svfprintf_internal_r+0x1214>
18001484:	d9002e17 	ldw	r4,184(sp)
18001488:	d9402a17 	ldw	r5,168(sp)
1800148c:	d8002785 	stb	zero,158(sp)
18001490:	20800204 	addi	r2,r4,8
18001494:	25000017 	ldw	r20,0(r4)
18001498:	25800117 	ldw	r22,4(r4)
1800149c:	28043716 	blt	r5,zero,1800257c <___svfprintf_internal_r+0x1734>
180014a0:	013fdfc4 	movi	r4,-129
180014a4:	a586b03a 	or	r3,r20,r22
180014a8:	d8802e15 	stw	r2,184(sp)
180014ac:	9124703a 	and	r18,r18,r4
180014b0:	1802f71e 	bne	r3,zero,18002090 <___svfprintf_internal_r+0x1248>
180014b4:	d9402a17 	ldw	r5,168(sp)
180014b8:	0039883a 	mov	fp,zero
180014bc:	2806df26 	beq	r5,zero,1800303c <___svfprintf_internal_r+0x21f4>
180014c0:	0029883a 	mov	r20,zero
180014c4:	002d883a 	mov	r22,zero
180014c8:	dc001e04 	addi	r16,sp,120
180014cc:	a006d0fa 	srli	r3,r20,3
180014d0:	b008977a 	slli	r4,r22,29
180014d4:	b02cd0fa 	srli	r22,r22,3
180014d8:	a50001cc 	andi	r20,r20,7
180014dc:	a0800c04 	addi	r2,r20,48
180014e0:	843fffc4 	addi	r16,r16,-1
180014e4:	20e8b03a 	or	r20,r4,r3
180014e8:	80800005 	stb	r2,0(r16)
180014ec:	a586b03a 	or	r3,r20,r22
180014f0:	183ff61e 	bne	r3,zero,180014cc <__alt_data_end+0xf80014cc>
180014f4:	90c0004c 	andi	r3,r18,1
180014f8:	18013f26 	beq	r3,zero,180019f8 <___svfprintf_internal_r+0xbb0>
180014fc:	10803fcc 	andi	r2,r2,255
18001500:	1080201c 	xori	r2,r2,128
18001504:	10bfe004 	addi	r2,r2,-128
18001508:	00c00c04 	movi	r3,48
1800150c:	10c13a26 	beq	r2,r3,180019f8 <___svfprintf_internal_r+0xbb0>
18001510:	80ffffc5 	stb	r3,-1(r16)
18001514:	d8c02817 	ldw	r3,160(sp)
18001518:	80bfffc4 	addi	r2,r16,-1
1800151c:	1021883a 	mov	r16,r2
18001520:	1887c83a 	sub	r3,r3,r2
18001524:	d8c02b15 	stw	r3,172(sp)
18001528:	d8802b17 	ldw	r2,172(sp)
1800152c:	d9002a17 	ldw	r4,168(sp)
18001530:	1100010e 	bge	r2,r4,18001538 <___svfprintf_internal_r+0x6f0>
18001534:	2005883a 	mov	r2,r4
18001538:	d8802915 	stw	r2,164(sp)
1800153c:	d8003215 	stw	zero,200(sp)
18001540:	e7003fcc 	andi	fp,fp,255
18001544:	e700201c 	xori	fp,fp,128
18001548:	e73fe004 	addi	fp,fp,-128
1800154c:	e0000326 	beq	fp,zero,1800155c <___svfprintf_internal_r+0x714>
18001550:	d8c02917 	ldw	r3,164(sp)
18001554:	18c00044 	addi	r3,r3,1
18001558:	d8c02915 	stw	r3,164(sp)
1800155c:	90c0008c 	andi	r3,r18,2
18001560:	d8c02c15 	stw	r3,176(sp)
18001564:	18000326 	beq	r3,zero,18001574 <___svfprintf_internal_r+0x72c>
18001568:	d8c02917 	ldw	r3,164(sp)
1800156c:	18c00084 	addi	r3,r3,2
18001570:	d8c02915 	stw	r3,164(sp)
18001574:	90c0210c 	andi	r3,r18,132
18001578:	d8c03015 	stw	r3,192(sp)
1800157c:	1801c31e 	bne	r3,zero,18001c8c <___svfprintf_internal_r+0xe44>
18001580:	d9003117 	ldw	r4,196(sp)
18001584:	d8c02917 	ldw	r3,164(sp)
18001588:	20e9c83a 	sub	r20,r4,r3
1800158c:	0501bf0e 	bge	zero,r20,18001c8c <___svfprintf_internal_r+0xe44>
18001590:	02400404 	movi	r9,16
18001594:	d8c02017 	ldw	r3,128(sp)
18001598:	d8801f17 	ldw	r2,124(sp)
1800159c:	4d053d0e 	bge	r9,r20,18002a94 <___svfprintf_internal_r+0x1c4c>
180015a0:	01460074 	movhi	r5,6145
180015a4:	297f0c84 	addi	r5,r5,-974
180015a8:	dc403c15 	stw	r17,240(sp)
180015ac:	d9403515 	stw	r5,212(sp)
180015b0:	a023883a 	mov	r17,r20
180015b4:	482d883a 	mov	r22,r9
180015b8:	9029883a 	mov	r20,r18
180015bc:	070001c4 	movi	fp,7
180015c0:	8025883a 	mov	r18,r16
180015c4:	dc002d17 	ldw	r16,180(sp)
180015c8:	00000306 	br	180015d8 <___svfprintf_internal_r+0x790>
180015cc:	8c7ffc04 	addi	r17,r17,-16
180015d0:	42000204 	addi	r8,r8,8
180015d4:	b440130e 	bge	r22,r17,18001624 <___svfprintf_internal_r+0x7dc>
180015d8:	01060074 	movhi	r4,6145
180015dc:	18c00404 	addi	r3,r3,16
180015e0:	10800044 	addi	r2,r2,1
180015e4:	213f0c84 	addi	r4,r4,-974
180015e8:	41000015 	stw	r4,0(r8)
180015ec:	45800115 	stw	r22,4(r8)
180015f0:	d8c02015 	stw	r3,128(sp)
180015f4:	d8801f15 	stw	r2,124(sp)
180015f8:	e0bff40e 	bge	fp,r2,180015cc <__alt_data_end+0xf80015cc>
180015fc:	d9801e04 	addi	r6,sp,120
18001600:	800b883a 	mov	r5,r16
18001604:	9809883a 	mov	r4,r19
18001608:	8007a480 	call	18007a48 <__ssprint_r>
1800160c:	103ef51e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001610:	8c7ffc04 	addi	r17,r17,-16
18001614:	d8c02017 	ldw	r3,128(sp)
18001618:	d8801f17 	ldw	r2,124(sp)
1800161c:	da000404 	addi	r8,sp,16
18001620:	b47fed16 	blt	r22,r17,180015d8 <__alt_data_end+0xf80015d8>
18001624:	9021883a 	mov	r16,r18
18001628:	a025883a 	mov	r18,r20
1800162c:	8829883a 	mov	r20,r17
18001630:	dc403c17 	ldw	r17,240(sp)
18001634:	d9403517 	ldw	r5,212(sp)
18001638:	a0c7883a 	add	r3,r20,r3
1800163c:	10800044 	addi	r2,r2,1
18001640:	41400015 	stw	r5,0(r8)
18001644:	45000115 	stw	r20,4(r8)
18001648:	d8c02015 	stw	r3,128(sp)
1800164c:	d8801f15 	stw	r2,124(sp)
18001650:	010001c4 	movi	r4,7
18001654:	2082c116 	blt	r4,r2,1800215c <___svfprintf_internal_r+0x1314>
18001658:	df002787 	ldb	fp,158(sp)
1800165c:	42000204 	addi	r8,r8,8
18001660:	e0000c26 	beq	fp,zero,18001694 <___svfprintf_internal_r+0x84c>
18001664:	d8801f17 	ldw	r2,124(sp)
18001668:	d9002784 	addi	r4,sp,158
1800166c:	18c00044 	addi	r3,r3,1
18001670:	10800044 	addi	r2,r2,1
18001674:	41000015 	stw	r4,0(r8)
18001678:	01000044 	movi	r4,1
1800167c:	41000115 	stw	r4,4(r8)
18001680:	d8c02015 	stw	r3,128(sp)
18001684:	d8801f15 	stw	r2,124(sp)
18001688:	010001c4 	movi	r4,7
1800168c:	20825a16 	blt	r4,r2,18001ff8 <___svfprintf_internal_r+0x11b0>
18001690:	42000204 	addi	r8,r8,8
18001694:	d8802c17 	ldw	r2,176(sp)
18001698:	10000c26 	beq	r2,zero,180016cc <___svfprintf_internal_r+0x884>
1800169c:	d8801f17 	ldw	r2,124(sp)
180016a0:	d9002704 	addi	r4,sp,156
180016a4:	18c00084 	addi	r3,r3,2
180016a8:	10800044 	addi	r2,r2,1
180016ac:	41000015 	stw	r4,0(r8)
180016b0:	01000084 	movi	r4,2
180016b4:	41000115 	stw	r4,4(r8)
180016b8:	d8c02015 	stw	r3,128(sp)
180016bc:	d8801f15 	stw	r2,124(sp)
180016c0:	010001c4 	movi	r4,7
180016c4:	20825416 	blt	r4,r2,18002018 <___svfprintf_internal_r+0x11d0>
180016c8:	42000204 	addi	r8,r8,8
180016cc:	d9003017 	ldw	r4,192(sp)
180016d0:	00802004 	movi	r2,128
180016d4:	2081b926 	beq	r4,r2,18001dbc <___svfprintf_internal_r+0xf74>
180016d8:	d9402a17 	ldw	r5,168(sp)
180016dc:	d8802b17 	ldw	r2,172(sp)
180016e0:	28adc83a 	sub	r22,r5,r2
180016e4:	05802f0e 	bge	zero,r22,180017a4 <___svfprintf_internal_r+0x95c>
180016e8:	07000404 	movi	fp,16
180016ec:	d8801f17 	ldw	r2,124(sp)
180016f0:	e583e20e 	bge	fp,r22,1800267c <___svfprintf_internal_r+0x1834>
180016f4:	01460074 	movhi	r5,6145
180016f8:	297f0884 	addi	r5,r5,-990
180016fc:	dc402a15 	stw	r17,168(sp)
18001700:	d9402c15 	stw	r5,176(sp)
18001704:	b023883a 	mov	r17,r22
18001708:	050001c4 	movi	r20,7
1800170c:	902d883a 	mov	r22,r18
18001710:	8025883a 	mov	r18,r16
18001714:	dc002d17 	ldw	r16,180(sp)
18001718:	00000306 	br	18001728 <___svfprintf_internal_r+0x8e0>
1800171c:	8c7ffc04 	addi	r17,r17,-16
18001720:	42000204 	addi	r8,r8,8
18001724:	e440110e 	bge	fp,r17,1800176c <___svfprintf_internal_r+0x924>
18001728:	18c00404 	addi	r3,r3,16
1800172c:	10800044 	addi	r2,r2,1
18001730:	45400015 	stw	r21,0(r8)
18001734:	47000115 	stw	fp,4(r8)
18001738:	d8c02015 	stw	r3,128(sp)
1800173c:	d8801f15 	stw	r2,124(sp)
18001740:	a0bff60e 	bge	r20,r2,1800171c <__alt_data_end+0xf800171c>
18001744:	d9801e04 	addi	r6,sp,120
18001748:	800b883a 	mov	r5,r16
1800174c:	9809883a 	mov	r4,r19
18001750:	8007a480 	call	18007a48 <__ssprint_r>
18001754:	103ea31e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001758:	8c7ffc04 	addi	r17,r17,-16
1800175c:	d8c02017 	ldw	r3,128(sp)
18001760:	d8801f17 	ldw	r2,124(sp)
18001764:	da000404 	addi	r8,sp,16
18001768:	e47fef16 	blt	fp,r17,18001728 <__alt_data_end+0xf8001728>
1800176c:	9021883a 	mov	r16,r18
18001770:	b025883a 	mov	r18,r22
18001774:	882d883a 	mov	r22,r17
18001778:	dc402a17 	ldw	r17,168(sp)
1800177c:	d9002c17 	ldw	r4,176(sp)
18001780:	1d87883a 	add	r3,r3,r22
18001784:	10800044 	addi	r2,r2,1
18001788:	41000015 	stw	r4,0(r8)
1800178c:	45800115 	stw	r22,4(r8)
18001790:	d8c02015 	stw	r3,128(sp)
18001794:	d8801f15 	stw	r2,124(sp)
18001798:	010001c4 	movi	r4,7
1800179c:	20820e16 	blt	r4,r2,18001fd8 <___svfprintf_internal_r+0x1190>
180017a0:	42000204 	addi	r8,r8,8
180017a4:	9080400c 	andi	r2,r18,256
180017a8:	10013a1e 	bne	r2,zero,18001c94 <___svfprintf_internal_r+0xe4c>
180017ac:	d9402b17 	ldw	r5,172(sp)
180017b0:	d8801f17 	ldw	r2,124(sp)
180017b4:	44000015 	stw	r16,0(r8)
180017b8:	1947883a 	add	r3,r3,r5
180017bc:	10800044 	addi	r2,r2,1
180017c0:	41400115 	stw	r5,4(r8)
180017c4:	d8c02015 	stw	r3,128(sp)
180017c8:	d8801f15 	stw	r2,124(sp)
180017cc:	010001c4 	movi	r4,7
180017d0:	2081f316 	blt	r4,r2,18001fa0 <___svfprintf_internal_r+0x1158>
180017d4:	42000204 	addi	r8,r8,8
180017d8:	9480010c 	andi	r18,r18,4
180017dc:	90003226 	beq	r18,zero,180018a8 <___svfprintf_internal_r+0xa60>
180017e0:	d9403117 	ldw	r5,196(sp)
180017e4:	d8802917 	ldw	r2,164(sp)
180017e8:	28a1c83a 	sub	r16,r5,r2
180017ec:	04002e0e 	bge	zero,r16,180018a8 <___svfprintf_internal_r+0xa60>
180017f0:	04400404 	movi	r17,16
180017f4:	d8801f17 	ldw	r2,124(sp)
180017f8:	8c04db0e 	bge	r17,r16,18002b68 <___svfprintf_internal_r+0x1d20>
180017fc:	01460074 	movhi	r5,6145
18001800:	297f0c84 	addi	r5,r5,-974
18001804:	d9403515 	stw	r5,212(sp)
18001808:	048001c4 	movi	r18,7
1800180c:	dd002d17 	ldw	r20,180(sp)
18001810:	00000306 	br	18001820 <___svfprintf_internal_r+0x9d8>
18001814:	843ffc04 	addi	r16,r16,-16
18001818:	42000204 	addi	r8,r8,8
1800181c:	8c00130e 	bge	r17,r16,1800186c <___svfprintf_internal_r+0xa24>
18001820:	01060074 	movhi	r4,6145
18001824:	18c00404 	addi	r3,r3,16
18001828:	10800044 	addi	r2,r2,1
1800182c:	213f0c84 	addi	r4,r4,-974
18001830:	41000015 	stw	r4,0(r8)
18001834:	44400115 	stw	r17,4(r8)
18001838:	d8c02015 	stw	r3,128(sp)
1800183c:	d8801f15 	stw	r2,124(sp)
18001840:	90bff40e 	bge	r18,r2,18001814 <__alt_data_end+0xf8001814>
18001844:	d9801e04 	addi	r6,sp,120
18001848:	a00b883a 	mov	r5,r20
1800184c:	9809883a 	mov	r4,r19
18001850:	8007a480 	call	18007a48 <__ssprint_r>
18001854:	103e631e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001858:	843ffc04 	addi	r16,r16,-16
1800185c:	d8c02017 	ldw	r3,128(sp)
18001860:	d8801f17 	ldw	r2,124(sp)
18001864:	da000404 	addi	r8,sp,16
18001868:	8c3fed16 	blt	r17,r16,18001820 <__alt_data_end+0xf8001820>
1800186c:	d9403517 	ldw	r5,212(sp)
18001870:	1c07883a 	add	r3,r3,r16
18001874:	10800044 	addi	r2,r2,1
18001878:	41400015 	stw	r5,0(r8)
1800187c:	44000115 	stw	r16,4(r8)
18001880:	d8c02015 	stw	r3,128(sp)
18001884:	d8801f15 	stw	r2,124(sp)
18001888:	010001c4 	movi	r4,7
1800188c:	2080060e 	bge	r4,r2,180018a8 <___svfprintf_internal_r+0xa60>
18001890:	d9402d17 	ldw	r5,180(sp)
18001894:	d9801e04 	addi	r6,sp,120
18001898:	9809883a 	mov	r4,r19
1800189c:	8007a480 	call	18007a48 <__ssprint_r>
180018a0:	103e501e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
180018a4:	d8c02017 	ldw	r3,128(sp)
180018a8:	d8803117 	ldw	r2,196(sp)
180018ac:	d9002917 	ldw	r4,164(sp)
180018b0:	1100010e 	bge	r2,r4,180018b8 <___svfprintf_internal_r+0xa70>
180018b4:	2005883a 	mov	r2,r4
180018b8:	d9402f17 	ldw	r5,188(sp)
180018bc:	288b883a 	add	r5,r5,r2
180018c0:	d9402f15 	stw	r5,188(sp)
180018c4:	1801be1e 	bne	r3,zero,18001fc0 <___svfprintf_internal_r+0x1178>
180018c8:	b8800007 	ldb	r2,0(r23)
180018cc:	d8001f15 	stw	zero,124(sp)
180018d0:	da000404 	addi	r8,sp,16
180018d4:	103d891e 	bne	r2,zero,18000efc <__alt_data_end+0xf8000efc>
180018d8:	b823883a 	mov	r17,r23
180018dc:	003d9f06 	br	18000f5c <__alt_data_end+0xf8000f5c>
180018e0:	8025883a 	mov	r18,r16
180018e4:	dc002903 	ldbu	r16,164(sp)
180018e8:	e011883a 	mov	r8,fp
180018ec:	84003fcc 	andi	r16,r16,255
180018f0:	8005e61e 	bne	r16,zero,1800308c <___svfprintf_internal_r+0x2244>
180018f4:	94800414 	ori	r18,r18,16
180018f8:	9080080c 	andi	r2,r18,32
180018fc:	10022026 	beq	r2,zero,18002180 <___svfprintf_internal_r+0x1338>
18001900:	d9002e17 	ldw	r4,184(sp)
18001904:	d9402a17 	ldw	r5,168(sp)
18001908:	d8002785 	stb	zero,158(sp)
1800190c:	20c00204 	addi	r3,r4,8
18001910:	25000017 	ldw	r20,0(r4)
18001914:	25800117 	ldw	r22,4(r4)
18001918:	2803ad16 	blt	r5,zero,180027d0 <___svfprintf_internal_r+0x1988>
1800191c:	013fdfc4 	movi	r4,-129
18001920:	a584b03a 	or	r2,r20,r22
18001924:	d8c02e15 	stw	r3,184(sp)
18001928:	9124703a 	and	r18,r18,r4
1800192c:	0039883a 	mov	fp,zero
18001930:	103eb01e 	bne	r2,zero,180013f4 <__alt_data_end+0xf80013f4>
18001934:	d8802a17 	ldw	r2,168(sp)
18001938:	1002e71e 	bne	r2,zero,180024d8 <___svfprintf_internal_r+0x1690>
1800193c:	d8002a15 	stw	zero,168(sp)
18001940:	d8002b15 	stw	zero,172(sp)
18001944:	dc001e04 	addi	r16,sp,120
18001948:	003ef706 	br	18001528 <__alt_data_end+0xf8001528>
1800194c:	8025883a 	mov	r18,r16
18001950:	dc002903 	ldbu	r16,164(sp)
18001954:	e011883a 	mov	r8,fp
18001958:	84003fcc 	andi	r16,r16,255
1800195c:	8005c81e 	bne	r16,zero,18003080 <___svfprintf_internal_r+0x2238>
18001960:	01060074 	movhi	r4,6145
18001964:	213efc04 	addi	r4,r4,-1040
18001968:	d9003a15 	stw	r4,232(sp)
1800196c:	9080080c 	andi	r2,r18,32
18001970:	10007226 	beq	r2,zero,18001b3c <___svfprintf_internal_r+0xcf4>
18001974:	d9402e17 	ldw	r5,184(sp)
18001978:	2d000017 	ldw	r20,0(r5)
1800197c:	2d800117 	ldw	r22,4(r5)
18001980:	29400204 	addi	r5,r5,8
18001984:	d9402e15 	stw	r5,184(sp)
18001988:	9080004c 	andi	r2,r18,1
1800198c:	1001aa26 	beq	r2,zero,18002038 <___svfprintf_internal_r+0x11f0>
18001990:	a584b03a 	or	r2,r20,r22
18001994:	10032526 	beq	r2,zero,1800262c <___svfprintf_internal_r+0x17e4>
18001998:	d8c02a17 	ldw	r3,168(sp)
1800199c:	00800c04 	movi	r2,48
180019a0:	d8802705 	stb	r2,156(sp)
180019a4:	dc402745 	stb	r17,157(sp)
180019a8:	d8002785 	stb	zero,158(sp)
180019ac:	90800094 	ori	r2,r18,2
180019b0:	1804a316 	blt	r3,zero,18002c40 <___svfprintf_internal_r+0x1df8>
180019b4:	00bfdfc4 	movi	r2,-129
180019b8:	90a4703a 	and	r18,r18,r2
180019bc:	94800094 	ori	r18,r18,2
180019c0:	0039883a 	mov	fp,zero
180019c4:	d9003a17 	ldw	r4,232(sp)
180019c8:	dc001e04 	addi	r16,sp,120
180019cc:	a08003cc 	andi	r2,r20,15
180019d0:	b006973a 	slli	r3,r22,28
180019d4:	2085883a 	add	r2,r4,r2
180019d8:	a028d13a 	srli	r20,r20,4
180019dc:	10800003 	ldbu	r2,0(r2)
180019e0:	b02cd13a 	srli	r22,r22,4
180019e4:	843fffc4 	addi	r16,r16,-1
180019e8:	1d28b03a 	or	r20,r3,r20
180019ec:	80800005 	stb	r2,0(r16)
180019f0:	a584b03a 	or	r2,r20,r22
180019f4:	103ff51e 	bne	r2,zero,180019cc <__alt_data_end+0xf80019cc>
180019f8:	d8c02817 	ldw	r3,160(sp)
180019fc:	1c07c83a 	sub	r3,r3,r16
18001a00:	d8c02b15 	stw	r3,172(sp)
18001a04:	003ec806 	br	18001528 <__alt_data_end+0xf8001528>
18001a08:	d8c02e17 	ldw	r3,184(sp)
18001a0c:	d9002e17 	ldw	r4,184(sp)
18001a10:	8025883a 	mov	r18,r16
18001a14:	18800017 	ldw	r2,0(r3)
18001a18:	21000104 	addi	r4,r4,4
18001a1c:	00c00044 	movi	r3,1
18001a20:	e011883a 	mov	r8,fp
18001a24:	d8c02915 	stw	r3,164(sp)
18001a28:	d8002785 	stb	zero,158(sp)
18001a2c:	d8801405 	stb	r2,80(sp)
18001a30:	d9002e15 	stw	r4,184(sp)
18001a34:	d8c02b15 	stw	r3,172(sp)
18001a38:	d8002a15 	stw	zero,168(sp)
18001a3c:	d8003215 	stw	zero,200(sp)
18001a40:	dc001404 	addi	r16,sp,80
18001a44:	0039883a 	mov	fp,zero
18001a48:	003ec406 	br	1800155c <__alt_data_end+0xf800155c>
18001a4c:	8025883a 	mov	r18,r16
18001a50:	dc002903 	ldbu	r16,164(sp)
18001a54:	e011883a 	mov	r8,fp
18001a58:	84003fcc 	andi	r16,r16,255
18001a5c:	803e8726 	beq	r16,zero,1800147c <__alt_data_end+0xf800147c>
18001a60:	d8c02b03 	ldbu	r3,172(sp)
18001a64:	d8c02785 	stb	r3,158(sp)
18001a68:	003e8406 	br	1800147c <__alt_data_end+0xf800147c>
18001a6c:	00c00044 	movi	r3,1
18001a70:	d8c02905 	stb	r3,164(sp)
18001a74:	00c00ac4 	movi	r3,43
18001a78:	d8c02b05 	stb	r3,172(sp)
18001a7c:	bc400007 	ldb	r17,0(r23)
18001a80:	003d4606 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001a84:	84000814 	ori	r16,r16,32
18001a88:	bc400007 	ldb	r17,0(r23)
18001a8c:	003d4306 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001a90:	d8802e17 	ldw	r2,184(sp)
18001a94:	8025883a 	mov	r18,r16
18001a98:	d8002785 	stb	zero,158(sp)
18001a9c:	14000017 	ldw	r16,0(r2)
18001aa0:	e011883a 	mov	r8,fp
18001aa4:	15000104 	addi	r20,r2,4
18001aa8:	80042126 	beq	r16,zero,18002b30 <___svfprintf_internal_r+0x1ce8>
18001aac:	d8c02a17 	ldw	r3,168(sp)
18001ab0:	1803ee16 	blt	r3,zero,18002a6c <___svfprintf_internal_r+0x1c24>
18001ab4:	180d883a 	mov	r6,r3
18001ab8:	000b883a 	mov	r5,zero
18001abc:	8009883a 	mov	r4,r16
18001ac0:	df003e15 	stw	fp,248(sp)
18001ac4:	8005c9c0 	call	18005c9c <memchr>
18001ac8:	da003e17 	ldw	r8,248(sp)
18001acc:	10046a26 	beq	r2,zero,18002c78 <___svfprintf_internal_r+0x1e30>
18001ad0:	1405c83a 	sub	r2,r2,r16
18001ad4:	d8802b15 	stw	r2,172(sp)
18001ad8:	1003ea16 	blt	r2,zero,18002a84 <___svfprintf_internal_r+0x1c3c>
18001adc:	df002783 	ldbu	fp,158(sp)
18001ae0:	d8802915 	stw	r2,164(sp)
18001ae4:	dd002e15 	stw	r20,184(sp)
18001ae8:	d8002a15 	stw	zero,168(sp)
18001aec:	d8003215 	stw	zero,200(sp)
18001af0:	003e9306 	br	18001540 <__alt_data_end+0xf8001540>
18001af4:	8025883a 	mov	r18,r16
18001af8:	dc002903 	ldbu	r16,164(sp)
18001afc:	e011883a 	mov	r8,fp
18001b00:	84003fcc 	andi	r16,r16,255
18001b04:	803f7c26 	beq	r16,zero,180018f8 <__alt_data_end+0xf80018f8>
18001b08:	d8c02b03 	ldbu	r3,172(sp)
18001b0c:	d8c02785 	stb	r3,158(sp)
18001b10:	003f7906 	br	180018f8 <__alt_data_end+0xf80018f8>
18001b14:	8025883a 	mov	r18,r16
18001b18:	dc002903 	ldbu	r16,164(sp)
18001b1c:	e011883a 	mov	r8,fp
18001b20:	84003fcc 	andi	r16,r16,255
18001b24:	8005741e 	bne	r16,zero,180030f8 <___svfprintf_internal_r+0x22b0>
18001b28:	01060074 	movhi	r4,6145
18001b2c:	213f0104 	addi	r4,r4,-1020
18001b30:	d9003a15 	stw	r4,232(sp)
18001b34:	9080080c 	andi	r2,r18,32
18001b38:	103f8e1e 	bne	r2,zero,18001974 <__alt_data_end+0xf8001974>
18001b3c:	9080040c 	andi	r2,r18,16
18001b40:	1002a726 	beq	r2,zero,180025e0 <___svfprintf_internal_r+0x1798>
18001b44:	d8802e17 	ldw	r2,184(sp)
18001b48:	002d883a 	mov	r22,zero
18001b4c:	15000017 	ldw	r20,0(r2)
18001b50:	10800104 	addi	r2,r2,4
18001b54:	d8802e15 	stw	r2,184(sp)
18001b58:	003f8b06 	br	18001988 <__alt_data_end+0xf8001988>
18001b5c:	84000054 	ori	r16,r16,1
18001b60:	bc400007 	ldb	r17,0(r23)
18001b64:	003d0d06 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001b68:	d8802b07 	ldb	r2,172(sp)
18001b6c:	1002a41e 	bne	r2,zero,18002600 <___svfprintf_internal_r+0x17b8>
18001b70:	00c00044 	movi	r3,1
18001b74:	d8c02905 	stb	r3,164(sp)
18001b78:	00c00804 	movi	r3,32
18001b7c:	d8c02b05 	stb	r3,172(sp)
18001b80:	bc400007 	ldb	r17,0(r23)
18001b84:	003d0506 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001b88:	8025883a 	mov	r18,r16
18001b8c:	dc002903 	ldbu	r16,164(sp)
18001b90:	e011883a 	mov	r8,fp
18001b94:	84003fcc 	andi	r16,r16,255
18001b98:	803e0626 	beq	r16,zero,180013b4 <__alt_data_end+0xf80013b4>
18001b9c:	d8c02b03 	ldbu	r3,172(sp)
18001ba0:	d8c02785 	stb	r3,158(sp)
18001ba4:	003e0306 	br	180013b4 <__alt_data_end+0xf80013b4>
18001ba8:	bc400007 	ldb	r17,0(r23)
18001bac:	00801b04 	movi	r2,108
18001bb0:	88830a26 	beq	r17,r2,180027dc <___svfprintf_internal_r+0x1994>
18001bb4:	84000414 	ori	r16,r16,16
18001bb8:	003cf806 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001bbc:	8025883a 	mov	r18,r16
18001bc0:	dc002903 	ldbu	r16,164(sp)
18001bc4:	e011883a 	mov	r8,fp
18001bc8:	84003fcc 	andi	r16,r16,255
18001bcc:	8005471e 	bne	r16,zero,180030ec <___svfprintf_internal_r+0x22a4>
18001bd0:	9080080c 	andi	r2,r18,32
18001bd4:	10028c26 	beq	r2,zero,18002608 <___svfprintf_internal_r+0x17c0>
18001bd8:	d9002e17 	ldw	r4,184(sp)
18001bdc:	d9402f17 	ldw	r5,188(sp)
18001be0:	20800017 	ldw	r2,0(r4)
18001be4:	2807d7fa 	srai	r3,r5,31
18001be8:	21000104 	addi	r4,r4,4
18001bec:	d9002e15 	stw	r4,184(sp)
18001bf0:	11400015 	stw	r5,0(r2)
18001bf4:	10c00115 	stw	r3,4(r2)
18001bf8:	003cbe06 	br	18000ef4 <__alt_data_end+0xf8000ef4>
18001bfc:	84001014 	ori	r16,r16,64
18001c00:	bc400007 	ldb	r17,0(r23)
18001c04:	003ce506 	br	18000f9c <__alt_data_end+0xf8000f9c>
18001c08:	01060074 	movhi	r4,6145
18001c0c:	213f0104 	addi	r4,r4,-1020
18001c10:	0039883a 	mov	fp,zero
18001c14:	d9003a15 	stw	r4,232(sp)
18001c18:	04401e04 	movi	r17,120
18001c1c:	003f6906 	br	180019c4 <__alt_data_end+0xf80019c4>
18001c20:	8025883a 	mov	r18,r16
18001c24:	dc002903 	ldbu	r16,164(sp)
18001c28:	e011883a 	mov	r8,fp
18001c2c:	84003fcc 	andi	r16,r16,255
18001c30:	8005261e 	bne	r16,zero,180030cc <___svfprintf_internal_r+0x2284>
18001c34:	883d6526 	beq	r17,zero,180011cc <__alt_data_end+0xf80011cc>
18001c38:	00c00044 	movi	r3,1
18001c3c:	d8c02915 	stw	r3,164(sp)
18001c40:	dc401405 	stb	r17,80(sp)
18001c44:	d8002785 	stb	zero,158(sp)
18001c48:	003f7a06 	br	18001a34 <__alt_data_end+0xf8001a34>
18001c4c:	01060074 	movhi	r4,6145
18001c50:	213f0104 	addi	r4,r4,-1020
18001c54:	d9003a15 	stw	r4,232(sp)
18001c58:	d8c02e15 	stw	r3,184(sp)
18001c5c:	1025883a 	mov	r18,r2
18001c60:	04401e04 	movi	r17,120
18001c64:	a584b03a 	or	r2,r20,r22
18001c68:	1000fa1e 	bne	r2,zero,18002054 <___svfprintf_internal_r+0x120c>
18001c6c:	0039883a 	mov	fp,zero
18001c70:	00800084 	movi	r2,2
18001c74:	10803fcc 	andi	r2,r2,255
18001c78:	00c00044 	movi	r3,1
18001c7c:	10c21626 	beq	r2,r3,180024d8 <___svfprintf_internal_r+0x1690>
18001c80:	00c00084 	movi	r3,2
18001c84:	10fe0e1e 	bne	r2,r3,180014c0 <__alt_data_end+0xf80014c0>
18001c88:	003d4606 	br	180011a4 <__alt_data_end+0xf80011a4>
18001c8c:	d8c02017 	ldw	r3,128(sp)
18001c90:	003e7306 	br	18001660 <__alt_data_end+0xf8001660>
18001c94:	00801944 	movi	r2,101
18001c98:	14407c0e 	bge	r2,r17,18001e8c <___svfprintf_internal_r+0x1044>
18001c9c:	d9003617 	ldw	r4,216(sp)
18001ca0:	d9403717 	ldw	r5,220(sp)
18001ca4:	000d883a 	mov	r6,zero
18001ca8:	000f883a 	mov	r7,zero
18001cac:	d8c03d15 	stw	r3,244(sp)
18001cb0:	da003e15 	stw	r8,248(sp)
18001cb4:	800bcf00 	call	1800bcf0 <__eqdf2>
18001cb8:	d8c03d17 	ldw	r3,244(sp)
18001cbc:	da003e17 	ldw	r8,248(sp)
18001cc0:	1000f51e 	bne	r2,zero,18002098 <___svfprintf_internal_r+0x1250>
18001cc4:	d8801f17 	ldw	r2,124(sp)
18001cc8:	01060074 	movhi	r4,6145
18001ccc:	213f0804 	addi	r4,r4,-992
18001cd0:	18c00044 	addi	r3,r3,1
18001cd4:	10800044 	addi	r2,r2,1
18001cd8:	41000015 	stw	r4,0(r8)
18001cdc:	01000044 	movi	r4,1
18001ce0:	41000115 	stw	r4,4(r8)
18001ce4:	d8c02015 	stw	r3,128(sp)
18001ce8:	d8801f15 	stw	r2,124(sp)
18001cec:	010001c4 	movi	r4,7
18001cf0:	20826616 	blt	r4,r2,1800268c <___svfprintf_internal_r+0x1844>
18001cf4:	42000204 	addi	r8,r8,8
18001cf8:	d8802617 	ldw	r2,152(sp)
18001cfc:	d9403317 	ldw	r5,204(sp)
18001d00:	11400216 	blt	r2,r5,18001d0c <___svfprintf_internal_r+0xec4>
18001d04:	9080004c 	andi	r2,r18,1
18001d08:	103eb326 	beq	r2,zero,180017d8 <__alt_data_end+0xf80017d8>
18001d0c:	d8803817 	ldw	r2,224(sp)
18001d10:	d9003417 	ldw	r4,208(sp)
18001d14:	d9403817 	ldw	r5,224(sp)
18001d18:	1887883a 	add	r3,r3,r2
18001d1c:	d8801f17 	ldw	r2,124(sp)
18001d20:	41000015 	stw	r4,0(r8)
18001d24:	41400115 	stw	r5,4(r8)
18001d28:	10800044 	addi	r2,r2,1
18001d2c:	d8c02015 	stw	r3,128(sp)
18001d30:	d8801f15 	stw	r2,124(sp)
18001d34:	010001c4 	movi	r4,7
18001d38:	2082af16 	blt	r4,r2,180027f8 <___svfprintf_internal_r+0x19b0>
18001d3c:	42000204 	addi	r8,r8,8
18001d40:	d8803317 	ldw	r2,204(sp)
18001d44:	143fffc4 	addi	r16,r2,-1
18001d48:	043ea30e 	bge	zero,r16,180017d8 <__alt_data_end+0xf80017d8>
18001d4c:	04400404 	movi	r17,16
18001d50:	d8801f17 	ldw	r2,124(sp)
18001d54:	8c00860e 	bge	r17,r16,18001f70 <___svfprintf_internal_r+0x1128>
18001d58:	01460074 	movhi	r5,6145
18001d5c:	297f0884 	addi	r5,r5,-990
18001d60:	d9402c15 	stw	r5,176(sp)
18001d64:	058001c4 	movi	r22,7
18001d68:	dd002d17 	ldw	r20,180(sp)
18001d6c:	00000306 	br	18001d7c <___svfprintf_internal_r+0xf34>
18001d70:	42000204 	addi	r8,r8,8
18001d74:	843ffc04 	addi	r16,r16,-16
18001d78:	8c00800e 	bge	r17,r16,18001f7c <___svfprintf_internal_r+0x1134>
18001d7c:	18c00404 	addi	r3,r3,16
18001d80:	10800044 	addi	r2,r2,1
18001d84:	45400015 	stw	r21,0(r8)
18001d88:	44400115 	stw	r17,4(r8)
18001d8c:	d8c02015 	stw	r3,128(sp)
18001d90:	d8801f15 	stw	r2,124(sp)
18001d94:	b0bff60e 	bge	r22,r2,18001d70 <__alt_data_end+0xf8001d70>
18001d98:	d9801e04 	addi	r6,sp,120
18001d9c:	a00b883a 	mov	r5,r20
18001da0:	9809883a 	mov	r4,r19
18001da4:	8007a480 	call	18007a48 <__ssprint_r>
18001da8:	103d0e1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001dac:	d8c02017 	ldw	r3,128(sp)
18001db0:	d8801f17 	ldw	r2,124(sp)
18001db4:	da000404 	addi	r8,sp,16
18001db8:	003fee06 	br	18001d74 <__alt_data_end+0xf8001d74>
18001dbc:	d9403117 	ldw	r5,196(sp)
18001dc0:	d8802917 	ldw	r2,164(sp)
18001dc4:	28adc83a 	sub	r22,r5,r2
18001dc8:	05be430e 	bge	zero,r22,180016d8 <__alt_data_end+0xf80016d8>
18001dcc:	07000404 	movi	fp,16
18001dd0:	d8801f17 	ldw	r2,124(sp)
18001dd4:	e583a20e 	bge	fp,r22,18002c60 <___svfprintf_internal_r+0x1e18>
18001dd8:	01460074 	movhi	r5,6145
18001ddc:	297f0884 	addi	r5,r5,-990
18001de0:	dc403015 	stw	r17,192(sp)
18001de4:	d9402c15 	stw	r5,176(sp)
18001de8:	b023883a 	mov	r17,r22
18001dec:	050001c4 	movi	r20,7
18001df0:	902d883a 	mov	r22,r18
18001df4:	8025883a 	mov	r18,r16
18001df8:	dc002d17 	ldw	r16,180(sp)
18001dfc:	00000306 	br	18001e0c <___svfprintf_internal_r+0xfc4>
18001e00:	8c7ffc04 	addi	r17,r17,-16
18001e04:	42000204 	addi	r8,r8,8
18001e08:	e440110e 	bge	fp,r17,18001e50 <___svfprintf_internal_r+0x1008>
18001e0c:	18c00404 	addi	r3,r3,16
18001e10:	10800044 	addi	r2,r2,1
18001e14:	45400015 	stw	r21,0(r8)
18001e18:	47000115 	stw	fp,4(r8)
18001e1c:	d8c02015 	stw	r3,128(sp)
18001e20:	d8801f15 	stw	r2,124(sp)
18001e24:	a0bff60e 	bge	r20,r2,18001e00 <__alt_data_end+0xf8001e00>
18001e28:	d9801e04 	addi	r6,sp,120
18001e2c:	800b883a 	mov	r5,r16
18001e30:	9809883a 	mov	r4,r19
18001e34:	8007a480 	call	18007a48 <__ssprint_r>
18001e38:	103cea1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001e3c:	8c7ffc04 	addi	r17,r17,-16
18001e40:	d8c02017 	ldw	r3,128(sp)
18001e44:	d8801f17 	ldw	r2,124(sp)
18001e48:	da000404 	addi	r8,sp,16
18001e4c:	e47fef16 	blt	fp,r17,18001e0c <__alt_data_end+0xf8001e0c>
18001e50:	9021883a 	mov	r16,r18
18001e54:	b025883a 	mov	r18,r22
18001e58:	882d883a 	mov	r22,r17
18001e5c:	dc403017 	ldw	r17,192(sp)
18001e60:	d9002c17 	ldw	r4,176(sp)
18001e64:	1d87883a 	add	r3,r3,r22
18001e68:	10800044 	addi	r2,r2,1
18001e6c:	41000015 	stw	r4,0(r8)
18001e70:	45800115 	stw	r22,4(r8)
18001e74:	d8c02015 	stw	r3,128(sp)
18001e78:	d8801f15 	stw	r2,124(sp)
18001e7c:	010001c4 	movi	r4,7
18001e80:	20819a16 	blt	r4,r2,180024ec <___svfprintf_internal_r+0x16a4>
18001e84:	42000204 	addi	r8,r8,8
18001e88:	003e1306 	br	180016d8 <__alt_data_end+0xf80016d8>
18001e8c:	d9403317 	ldw	r5,204(sp)
18001e90:	00800044 	movi	r2,1
18001e94:	18c00044 	addi	r3,r3,1
18001e98:	1141710e 	bge	r2,r5,18002460 <___svfprintf_internal_r+0x1618>
18001e9c:	dc401f17 	ldw	r17,124(sp)
18001ea0:	00800044 	movi	r2,1
18001ea4:	40800115 	stw	r2,4(r8)
18001ea8:	8c400044 	addi	r17,r17,1
18001eac:	44000015 	stw	r16,0(r8)
18001eb0:	d8c02015 	stw	r3,128(sp)
18001eb4:	dc401f15 	stw	r17,124(sp)
18001eb8:	008001c4 	movi	r2,7
18001ebc:	14417416 	blt	r2,r17,18002490 <___svfprintf_internal_r+0x1648>
18001ec0:	42000204 	addi	r8,r8,8
18001ec4:	d8803817 	ldw	r2,224(sp)
18001ec8:	d9003417 	ldw	r4,208(sp)
18001ecc:	8c400044 	addi	r17,r17,1
18001ed0:	10c7883a 	add	r3,r2,r3
18001ed4:	40800115 	stw	r2,4(r8)
18001ed8:	41000015 	stw	r4,0(r8)
18001edc:	d8c02015 	stw	r3,128(sp)
18001ee0:	dc401f15 	stw	r17,124(sp)
18001ee4:	008001c4 	movi	r2,7
18001ee8:	14417216 	blt	r2,r17,180024b4 <___svfprintf_internal_r+0x166c>
18001eec:	45800204 	addi	r22,r8,8
18001ef0:	d9003617 	ldw	r4,216(sp)
18001ef4:	d9403717 	ldw	r5,220(sp)
18001ef8:	000d883a 	mov	r6,zero
18001efc:	000f883a 	mov	r7,zero
18001f00:	d8c03d15 	stw	r3,244(sp)
18001f04:	800bcf00 	call	1800bcf0 <__eqdf2>
18001f08:	d8c03d17 	ldw	r3,244(sp)
18001f0c:	1000b326 	beq	r2,zero,180021dc <___svfprintf_internal_r+0x1394>
18001f10:	d9403317 	ldw	r5,204(sp)
18001f14:	84000044 	addi	r16,r16,1
18001f18:	8c400044 	addi	r17,r17,1
18001f1c:	28bfffc4 	addi	r2,r5,-1
18001f20:	1887883a 	add	r3,r3,r2
18001f24:	b0800115 	stw	r2,4(r22)
18001f28:	b4000015 	stw	r16,0(r22)
18001f2c:	d8c02015 	stw	r3,128(sp)
18001f30:	dc401f15 	stw	r17,124(sp)
18001f34:	008001c4 	movi	r2,7
18001f38:	1440d216 	blt	r2,r17,18002284 <___svfprintf_internal_r+0x143c>
18001f3c:	b5800204 	addi	r22,r22,8
18001f40:	d9003b17 	ldw	r4,236(sp)
18001f44:	df0022c4 	addi	fp,sp,139
18001f48:	8c400044 	addi	r17,r17,1
18001f4c:	20c7883a 	add	r3,r4,r3
18001f50:	b7000015 	stw	fp,0(r22)
18001f54:	b1000115 	stw	r4,4(r22)
18001f58:	d8c02015 	stw	r3,128(sp)
18001f5c:	dc401f15 	stw	r17,124(sp)
18001f60:	008001c4 	movi	r2,7
18001f64:	14400e16 	blt	r2,r17,18001fa0 <___svfprintf_internal_r+0x1158>
18001f68:	b2000204 	addi	r8,r22,8
18001f6c:	003e1a06 	br	180017d8 <__alt_data_end+0xf80017d8>
18001f70:	01060074 	movhi	r4,6145
18001f74:	213f0884 	addi	r4,r4,-990
18001f78:	d9002c15 	stw	r4,176(sp)
18001f7c:	d9002c17 	ldw	r4,176(sp)
18001f80:	1c07883a 	add	r3,r3,r16
18001f84:	44000115 	stw	r16,4(r8)
18001f88:	41000015 	stw	r4,0(r8)
18001f8c:	10800044 	addi	r2,r2,1
18001f90:	d8c02015 	stw	r3,128(sp)
18001f94:	d8801f15 	stw	r2,124(sp)
18001f98:	010001c4 	movi	r4,7
18001f9c:	20be0d0e 	bge	r4,r2,180017d4 <__alt_data_end+0xf80017d4>
18001fa0:	d9402d17 	ldw	r5,180(sp)
18001fa4:	d9801e04 	addi	r6,sp,120
18001fa8:	9809883a 	mov	r4,r19
18001fac:	8007a480 	call	18007a48 <__ssprint_r>
18001fb0:	103c8c1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001fb4:	d8c02017 	ldw	r3,128(sp)
18001fb8:	da000404 	addi	r8,sp,16
18001fbc:	003e0606 	br	180017d8 <__alt_data_end+0xf80017d8>
18001fc0:	d9402d17 	ldw	r5,180(sp)
18001fc4:	d9801e04 	addi	r6,sp,120
18001fc8:	9809883a 	mov	r4,r19
18001fcc:	8007a480 	call	18007a48 <__ssprint_r>
18001fd0:	103e3d26 	beq	r2,zero,180018c8 <__alt_data_end+0xf80018c8>
18001fd4:	003c8306 	br	180011e4 <__alt_data_end+0xf80011e4>
18001fd8:	d9402d17 	ldw	r5,180(sp)
18001fdc:	d9801e04 	addi	r6,sp,120
18001fe0:	9809883a 	mov	r4,r19
18001fe4:	8007a480 	call	18007a48 <__ssprint_r>
18001fe8:	103c7e1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18001fec:	d8c02017 	ldw	r3,128(sp)
18001ff0:	da000404 	addi	r8,sp,16
18001ff4:	003deb06 	br	180017a4 <__alt_data_end+0xf80017a4>
18001ff8:	d9402d17 	ldw	r5,180(sp)
18001ffc:	d9801e04 	addi	r6,sp,120
18002000:	9809883a 	mov	r4,r19
18002004:	8007a480 	call	18007a48 <__ssprint_r>
18002008:	103c761e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
1800200c:	d8c02017 	ldw	r3,128(sp)
18002010:	da000404 	addi	r8,sp,16
18002014:	003d9f06 	br	18001694 <__alt_data_end+0xf8001694>
18002018:	d9402d17 	ldw	r5,180(sp)
1800201c:	d9801e04 	addi	r6,sp,120
18002020:	9809883a 	mov	r4,r19
18002024:	8007a480 	call	18007a48 <__ssprint_r>
18002028:	103c6e1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
1800202c:	d8c02017 	ldw	r3,128(sp)
18002030:	da000404 	addi	r8,sp,16
18002034:	003da506 	br	180016cc <__alt_data_end+0xf80016cc>
18002038:	d9402a17 	ldw	r5,168(sp)
1800203c:	d8002785 	stb	zero,158(sp)
18002040:	283f0816 	blt	r5,zero,18001c64 <__alt_data_end+0xf8001c64>
18002044:	00ffdfc4 	movi	r3,-129
18002048:	a584b03a 	or	r2,r20,r22
1800204c:	90e4703a 	and	r18,r18,r3
18002050:	103c5126 	beq	r2,zero,18001198 <__alt_data_end+0xf8001198>
18002054:	0039883a 	mov	fp,zero
18002058:	003e5a06 	br	180019c4 <__alt_data_end+0xf80019c4>
1800205c:	9080040c 	andi	r2,r18,16
18002060:	10013d26 	beq	r2,zero,18002558 <___svfprintf_internal_r+0x1710>
18002064:	d8c02e17 	ldw	r3,184(sp)
18002068:	d9002a17 	ldw	r4,168(sp)
1800206c:	d8002785 	stb	zero,158(sp)
18002070:	18800104 	addi	r2,r3,4
18002074:	1d000017 	ldw	r20,0(r3)
18002078:	002d883a 	mov	r22,zero
1800207c:	20013f16 	blt	r4,zero,1800257c <___svfprintf_internal_r+0x1734>
18002080:	00ffdfc4 	movi	r3,-129
18002084:	d8802e15 	stw	r2,184(sp)
18002088:	90e4703a 	and	r18,r18,r3
1800208c:	a03d0926 	beq	r20,zero,180014b4 <__alt_data_end+0xf80014b4>
18002090:	0039883a 	mov	fp,zero
18002094:	003d0c06 	br	180014c8 <__alt_data_end+0xf80014c8>
18002098:	dc402617 	ldw	r17,152(sp)
1800209c:	0441830e 	bge	zero,r17,180026ac <___svfprintf_internal_r+0x1864>
180020a0:	dc403217 	ldw	r17,200(sp)
180020a4:	d8803317 	ldw	r2,204(sp)
180020a8:	1440010e 	bge	r2,r17,180020b0 <___svfprintf_internal_r+0x1268>
180020ac:	1023883a 	mov	r17,r2
180020b0:	04400a0e 	bge	zero,r17,180020dc <___svfprintf_internal_r+0x1294>
180020b4:	d8801f17 	ldw	r2,124(sp)
180020b8:	1c47883a 	add	r3,r3,r17
180020bc:	44000015 	stw	r16,0(r8)
180020c0:	10800044 	addi	r2,r2,1
180020c4:	44400115 	stw	r17,4(r8)
180020c8:	d8c02015 	stw	r3,128(sp)
180020cc:	d8801f15 	stw	r2,124(sp)
180020d0:	010001c4 	movi	r4,7
180020d4:	20827516 	blt	r4,r2,18002aac <___svfprintf_internal_r+0x1c64>
180020d8:	42000204 	addi	r8,r8,8
180020dc:	88027b16 	blt	r17,zero,18002acc <___svfprintf_internal_r+0x1c84>
180020e0:	d9003217 	ldw	r4,200(sp)
180020e4:	2463c83a 	sub	r17,r4,r17
180020e8:	0440990e 	bge	zero,r17,18002350 <___svfprintf_internal_r+0x1508>
180020ec:	05800404 	movi	r22,16
180020f0:	d8801f17 	ldw	r2,124(sp)
180020f4:	b441530e 	bge	r22,r17,18002644 <___svfprintf_internal_r+0x17fc>
180020f8:	01060074 	movhi	r4,6145
180020fc:	213f0884 	addi	r4,r4,-990
18002100:	d9002c15 	stw	r4,176(sp)
18002104:	070001c4 	movi	fp,7
18002108:	dd002d17 	ldw	r20,180(sp)
1800210c:	00000306 	br	1800211c <___svfprintf_internal_r+0x12d4>
18002110:	42000204 	addi	r8,r8,8
18002114:	8c7ffc04 	addi	r17,r17,-16
18002118:	b4414d0e 	bge	r22,r17,18002650 <___svfprintf_internal_r+0x1808>
1800211c:	18c00404 	addi	r3,r3,16
18002120:	10800044 	addi	r2,r2,1
18002124:	45400015 	stw	r21,0(r8)
18002128:	45800115 	stw	r22,4(r8)
1800212c:	d8c02015 	stw	r3,128(sp)
18002130:	d8801f15 	stw	r2,124(sp)
18002134:	e0bff60e 	bge	fp,r2,18002110 <__alt_data_end+0xf8002110>
18002138:	d9801e04 	addi	r6,sp,120
1800213c:	a00b883a 	mov	r5,r20
18002140:	9809883a 	mov	r4,r19
18002144:	8007a480 	call	18007a48 <__ssprint_r>
18002148:	103c261e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
1800214c:	d8c02017 	ldw	r3,128(sp)
18002150:	d8801f17 	ldw	r2,124(sp)
18002154:	da000404 	addi	r8,sp,16
18002158:	003fee06 	br	18002114 <__alt_data_end+0xf8002114>
1800215c:	d9402d17 	ldw	r5,180(sp)
18002160:	d9801e04 	addi	r6,sp,120
18002164:	9809883a 	mov	r4,r19
18002168:	8007a480 	call	18007a48 <__ssprint_r>
1800216c:	103c1d1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002170:	d8c02017 	ldw	r3,128(sp)
18002174:	df002787 	ldb	fp,158(sp)
18002178:	da000404 	addi	r8,sp,16
1800217c:	003d3806 	br	18001660 <__alt_data_end+0xf8001660>
18002180:	9080040c 	andi	r2,r18,16
18002184:	10005c26 	beq	r2,zero,180022f8 <___svfprintf_internal_r+0x14b0>
18002188:	d8c02e17 	ldw	r3,184(sp)
1800218c:	d9002a17 	ldw	r4,168(sp)
18002190:	d8002785 	stb	zero,158(sp)
18002194:	18800104 	addi	r2,r3,4
18002198:	1d000017 	ldw	r20,0(r3)
1800219c:	002d883a 	mov	r22,zero
180021a0:	20005e16 	blt	r4,zero,1800231c <___svfprintf_internal_r+0x14d4>
180021a4:	00ffdfc4 	movi	r3,-129
180021a8:	d8802e15 	stw	r2,184(sp)
180021ac:	90e4703a 	and	r18,r18,r3
180021b0:	0039883a 	mov	fp,zero
180021b4:	a03ddf26 	beq	r20,zero,18001934 <__alt_data_end+0xf8001934>
180021b8:	00800244 	movi	r2,9
180021bc:	153c8e36 	bltu	r2,r20,180013f8 <__alt_data_end+0xf80013f8>
180021c0:	a5000c04 	addi	r20,r20,48
180021c4:	dc001dc4 	addi	r16,sp,119
180021c8:	dd001dc5 	stb	r20,119(sp)
180021cc:	d8c02817 	ldw	r3,160(sp)
180021d0:	1c07c83a 	sub	r3,r3,r16
180021d4:	d8c02b15 	stw	r3,172(sp)
180021d8:	003cd306 	br	18001528 <__alt_data_end+0xf8001528>
180021dc:	d8803317 	ldw	r2,204(sp)
180021e0:	143fffc4 	addi	r16,r2,-1
180021e4:	043f560e 	bge	zero,r16,18001f40 <__alt_data_end+0xf8001f40>
180021e8:	07000404 	movi	fp,16
180021ec:	e403530e 	bge	fp,r16,18002f3c <___svfprintf_internal_r+0x20f4>
180021f0:	01460074 	movhi	r5,6145
180021f4:	297f0884 	addi	r5,r5,-990
180021f8:	d9402c15 	stw	r5,176(sp)
180021fc:	01c001c4 	movi	r7,7
18002200:	dd002d17 	ldw	r20,180(sp)
18002204:	00000306 	br	18002214 <___svfprintf_internal_r+0x13cc>
18002208:	843ffc04 	addi	r16,r16,-16
1800220c:	b5800204 	addi	r22,r22,8
18002210:	e400130e 	bge	fp,r16,18002260 <___svfprintf_internal_r+0x1418>
18002214:	18c00404 	addi	r3,r3,16
18002218:	8c400044 	addi	r17,r17,1
1800221c:	b5400015 	stw	r21,0(r22)
18002220:	b7000115 	stw	fp,4(r22)
18002224:	d8c02015 	stw	r3,128(sp)
18002228:	dc401f15 	stw	r17,124(sp)
1800222c:	3c7ff60e 	bge	r7,r17,18002208 <__alt_data_end+0xf8002208>
18002230:	d9801e04 	addi	r6,sp,120
18002234:	a00b883a 	mov	r5,r20
18002238:	9809883a 	mov	r4,r19
1800223c:	d9c03d15 	stw	r7,244(sp)
18002240:	8007a480 	call	18007a48 <__ssprint_r>
18002244:	d9c03d17 	ldw	r7,244(sp)
18002248:	103be61e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
1800224c:	843ffc04 	addi	r16,r16,-16
18002250:	d8c02017 	ldw	r3,128(sp)
18002254:	dc401f17 	ldw	r17,124(sp)
18002258:	dd800404 	addi	r22,sp,16
1800225c:	e43fed16 	blt	fp,r16,18002214 <__alt_data_end+0xf8002214>
18002260:	d8802c17 	ldw	r2,176(sp)
18002264:	1c07883a 	add	r3,r3,r16
18002268:	8c400044 	addi	r17,r17,1
1800226c:	b0800015 	stw	r2,0(r22)
18002270:	b4000115 	stw	r16,4(r22)
18002274:	d8c02015 	stw	r3,128(sp)
18002278:	dc401f15 	stw	r17,124(sp)
1800227c:	008001c4 	movi	r2,7
18002280:	147f2e0e 	bge	r2,r17,18001f3c <__alt_data_end+0xf8001f3c>
18002284:	d9402d17 	ldw	r5,180(sp)
18002288:	d9801e04 	addi	r6,sp,120
1800228c:	9809883a 	mov	r4,r19
18002290:	8007a480 	call	18007a48 <__ssprint_r>
18002294:	103bd31e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002298:	d8c02017 	ldw	r3,128(sp)
1800229c:	dc401f17 	ldw	r17,124(sp)
180022a0:	dd800404 	addi	r22,sp,16
180022a4:	003f2606 	br	18001f40 <__alt_data_end+0xf8001f40>
180022a8:	9080040c 	andi	r2,r18,16
180022ac:	1000c326 	beq	r2,zero,180025bc <___svfprintf_internal_r+0x1774>
180022b0:	d9402e17 	ldw	r5,184(sp)
180022b4:	2d000017 	ldw	r20,0(r5)
180022b8:	29400104 	addi	r5,r5,4
180022bc:	d9402e15 	stw	r5,184(sp)
180022c0:	a02dd7fa 	srai	r22,r20,31
180022c4:	b005883a 	mov	r2,r22
180022c8:	103c430e 	bge	r2,zero,180013d8 <__alt_data_end+0xf80013d8>
180022cc:	d9402a17 	ldw	r5,168(sp)
180022d0:	0529c83a 	sub	r20,zero,r20
180022d4:	07000b44 	movi	fp,45
180022d8:	a004c03a 	cmpne	r2,r20,zero
180022dc:	05adc83a 	sub	r22,zero,r22
180022e0:	df002785 	stb	fp,158(sp)
180022e4:	b0adc83a 	sub	r22,r22,r2
180022e8:	28022e16 	blt	r5,zero,18002ba4 <___svfprintf_internal_r+0x1d5c>
180022ec:	00bfdfc4 	movi	r2,-129
180022f0:	90a4703a 	and	r18,r18,r2
180022f4:	003c3f06 	br	180013f4 <__alt_data_end+0xf80013f4>
180022f8:	9080100c 	andi	r2,r18,64
180022fc:	d8002785 	stb	zero,158(sp)
18002300:	10012526 	beq	r2,zero,18002798 <___svfprintf_internal_r+0x1950>
18002304:	d9402e17 	ldw	r5,184(sp)
18002308:	d8c02a17 	ldw	r3,168(sp)
1800230c:	002d883a 	mov	r22,zero
18002310:	28800104 	addi	r2,r5,4
18002314:	2d00000b 	ldhu	r20,0(r5)
18002318:	183fa20e 	bge	r3,zero,180021a4 <__alt_data_end+0xf80021a4>
1800231c:	d8802e15 	stw	r2,184(sp)
18002320:	0039883a 	mov	fp,zero
18002324:	a584b03a 	or	r2,r20,r22
18002328:	103c321e 	bne	r2,zero,180013f4 <__alt_data_end+0xf80013f4>
1800232c:	00800044 	movi	r2,1
18002330:	003e5006 	br	18001c74 <__alt_data_end+0xf8001c74>
18002334:	d9402d17 	ldw	r5,180(sp)
18002338:	d9801e04 	addi	r6,sp,120
1800233c:	9809883a 	mov	r4,r19
18002340:	8007a480 	call	18007a48 <__ssprint_r>
18002344:	103ba71e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002348:	d8c02017 	ldw	r3,128(sp)
1800234c:	da000404 	addi	r8,sp,16
18002350:	d9003217 	ldw	r4,200(sp)
18002354:	d8802617 	ldw	r2,152(sp)
18002358:	d9403317 	ldw	r5,204(sp)
1800235c:	8123883a 	add	r17,r16,r4
18002360:	11400216 	blt	r2,r5,1800236c <___svfprintf_internal_r+0x1524>
18002364:	9100004c 	andi	r4,r18,1
18002368:	20000d26 	beq	r4,zero,180023a0 <___svfprintf_internal_r+0x1558>
1800236c:	d9003817 	ldw	r4,224(sp)
18002370:	d9403417 	ldw	r5,208(sp)
18002374:	1907883a 	add	r3,r3,r4
18002378:	d9001f17 	ldw	r4,124(sp)
1800237c:	41400015 	stw	r5,0(r8)
18002380:	d9403817 	ldw	r5,224(sp)
18002384:	21000044 	addi	r4,r4,1
18002388:	d8c02015 	stw	r3,128(sp)
1800238c:	41400115 	stw	r5,4(r8)
18002390:	d9001f15 	stw	r4,124(sp)
18002394:	014001c4 	movi	r5,7
18002398:	2901dc16 	blt	r5,r4,18002b0c <___svfprintf_internal_r+0x1cc4>
1800239c:	42000204 	addi	r8,r8,8
180023a0:	d9003317 	ldw	r4,204(sp)
180023a4:	8121883a 	add	r16,r16,r4
180023a8:	2085c83a 	sub	r2,r4,r2
180023ac:	8461c83a 	sub	r16,r16,r17
180023b0:	1400010e 	bge	r2,r16,180023b8 <___svfprintf_internal_r+0x1570>
180023b4:	1021883a 	mov	r16,r2
180023b8:	04000a0e 	bge	zero,r16,180023e4 <___svfprintf_internal_r+0x159c>
180023bc:	d9001f17 	ldw	r4,124(sp)
180023c0:	1c07883a 	add	r3,r3,r16
180023c4:	44400015 	stw	r17,0(r8)
180023c8:	21000044 	addi	r4,r4,1
180023cc:	44000115 	stw	r16,4(r8)
180023d0:	d8c02015 	stw	r3,128(sp)
180023d4:	d9001f15 	stw	r4,124(sp)
180023d8:	014001c4 	movi	r5,7
180023dc:	2901e616 	blt	r5,r4,18002b78 <___svfprintf_internal_r+0x1d30>
180023e0:	42000204 	addi	r8,r8,8
180023e4:	8001f616 	blt	r16,zero,18002bc0 <___svfprintf_internal_r+0x1d78>
180023e8:	1421c83a 	sub	r16,r2,r16
180023ec:	043cfa0e 	bge	zero,r16,180017d8 <__alt_data_end+0xf80017d8>
180023f0:	04400404 	movi	r17,16
180023f4:	d8801f17 	ldw	r2,124(sp)
180023f8:	8c3edd0e 	bge	r17,r16,18001f70 <__alt_data_end+0xf8001f70>
180023fc:	01460074 	movhi	r5,6145
18002400:	297f0884 	addi	r5,r5,-990
18002404:	d9402c15 	stw	r5,176(sp)
18002408:	058001c4 	movi	r22,7
1800240c:	dd002d17 	ldw	r20,180(sp)
18002410:	00000306 	br	18002420 <___svfprintf_internal_r+0x15d8>
18002414:	42000204 	addi	r8,r8,8
18002418:	843ffc04 	addi	r16,r16,-16
1800241c:	8c3ed70e 	bge	r17,r16,18001f7c <__alt_data_end+0xf8001f7c>
18002420:	18c00404 	addi	r3,r3,16
18002424:	10800044 	addi	r2,r2,1
18002428:	45400015 	stw	r21,0(r8)
1800242c:	44400115 	stw	r17,4(r8)
18002430:	d8c02015 	stw	r3,128(sp)
18002434:	d8801f15 	stw	r2,124(sp)
18002438:	b0bff60e 	bge	r22,r2,18002414 <__alt_data_end+0xf8002414>
1800243c:	d9801e04 	addi	r6,sp,120
18002440:	a00b883a 	mov	r5,r20
18002444:	9809883a 	mov	r4,r19
18002448:	8007a480 	call	18007a48 <__ssprint_r>
1800244c:	103b651e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002450:	d8c02017 	ldw	r3,128(sp)
18002454:	d8801f17 	ldw	r2,124(sp)
18002458:	da000404 	addi	r8,sp,16
1800245c:	003fee06 	br	18002418 <__alt_data_end+0xf8002418>
18002460:	9088703a 	and	r4,r18,r2
18002464:	203e8d1e 	bne	r4,zero,18001e9c <__alt_data_end+0xf8001e9c>
18002468:	dc401f17 	ldw	r17,124(sp)
1800246c:	40800115 	stw	r2,4(r8)
18002470:	44000015 	stw	r16,0(r8)
18002474:	8c400044 	addi	r17,r17,1
18002478:	d8c02015 	stw	r3,128(sp)
1800247c:	dc401f15 	stw	r17,124(sp)
18002480:	008001c4 	movi	r2,7
18002484:	147f7f16 	blt	r2,r17,18002284 <__alt_data_end+0xf8002284>
18002488:	45800204 	addi	r22,r8,8
1800248c:	003eac06 	br	18001f40 <__alt_data_end+0xf8001f40>
18002490:	d9402d17 	ldw	r5,180(sp)
18002494:	d9801e04 	addi	r6,sp,120
18002498:	9809883a 	mov	r4,r19
1800249c:	8007a480 	call	18007a48 <__ssprint_r>
180024a0:	103b501e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
180024a4:	d8c02017 	ldw	r3,128(sp)
180024a8:	dc401f17 	ldw	r17,124(sp)
180024ac:	da000404 	addi	r8,sp,16
180024b0:	003e8406 	br	18001ec4 <__alt_data_end+0xf8001ec4>
180024b4:	d9402d17 	ldw	r5,180(sp)
180024b8:	d9801e04 	addi	r6,sp,120
180024bc:	9809883a 	mov	r4,r19
180024c0:	8007a480 	call	18007a48 <__ssprint_r>
180024c4:	103b471e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
180024c8:	d8c02017 	ldw	r3,128(sp)
180024cc:	dc401f17 	ldw	r17,124(sp)
180024d0:	dd800404 	addi	r22,sp,16
180024d4:	003e8606 	br	18001ef0 <__alt_data_end+0xf8001ef0>
180024d8:	0029883a 	mov	r20,zero
180024dc:	a5000c04 	addi	r20,r20,48
180024e0:	dc001dc4 	addi	r16,sp,119
180024e4:	dd001dc5 	stb	r20,119(sp)
180024e8:	003f3806 	br	180021cc <__alt_data_end+0xf80021cc>
180024ec:	d9402d17 	ldw	r5,180(sp)
180024f0:	d9801e04 	addi	r6,sp,120
180024f4:	9809883a 	mov	r4,r19
180024f8:	8007a480 	call	18007a48 <__ssprint_r>
180024fc:	103b391e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002500:	d8c02017 	ldw	r3,128(sp)
18002504:	da000404 	addi	r8,sp,16
18002508:	003c7306 	br	180016d8 <__alt_data_end+0xf80016d8>
1800250c:	d9003617 	ldw	r4,216(sp)
18002510:	d9403717 	ldw	r5,220(sp)
18002514:	da003e15 	stw	r8,248(sp)
18002518:	80077680 	call	18007768 <__fpclassifyd>
1800251c:	da003e17 	ldw	r8,248(sp)
18002520:	1000bd1e 	bne	r2,zero,18002818 <___svfprintf_internal_r+0x19d0>
18002524:	008011c4 	movi	r2,71
18002528:	14411e0e 	bge	r2,r17,180029a4 <___svfprintf_internal_r+0x1b5c>
1800252c:	04060074 	movhi	r16,6145
18002530:	843efb04 	addi	r16,r16,-1044
18002534:	00c000c4 	movi	r3,3
18002538:	00bfdfc4 	movi	r2,-129
1800253c:	d8c02915 	stw	r3,164(sp)
18002540:	90a4703a 	and	r18,r18,r2
18002544:	df002783 	ldbu	fp,158(sp)
18002548:	d8c02b15 	stw	r3,172(sp)
1800254c:	d8002a15 	stw	zero,168(sp)
18002550:	d8003215 	stw	zero,200(sp)
18002554:	003bfa06 	br	18001540 <__alt_data_end+0xf8001540>
18002558:	9080100c 	andi	r2,r18,64
1800255c:	d8002785 	stb	zero,158(sp)
18002560:	10009426 	beq	r2,zero,180027b4 <___svfprintf_internal_r+0x196c>
18002564:	d9402e17 	ldw	r5,184(sp)
18002568:	d8c02a17 	ldw	r3,168(sp)
1800256c:	002d883a 	mov	r22,zero
18002570:	28800104 	addi	r2,r5,4
18002574:	2d00000b 	ldhu	r20,0(r5)
18002578:	183ec10e 	bge	r3,zero,18002080 <__alt_data_end+0xf8002080>
1800257c:	a586b03a 	or	r3,r20,r22
18002580:	d8802e15 	stw	r2,184(sp)
18002584:	183ec21e 	bne	r3,zero,18002090 <__alt_data_end+0xf8002090>
18002588:	0039883a 	mov	fp,zero
1800258c:	0005883a 	mov	r2,zero
18002590:	003db806 	br	18001c74 <__alt_data_end+0xf8001c74>
18002594:	d8c02e17 	ldw	r3,184(sp)
18002598:	d9002e17 	ldw	r4,184(sp)
1800259c:	d9402e17 	ldw	r5,184(sp)
180025a0:	18c00017 	ldw	r3,0(r3)
180025a4:	21000117 	ldw	r4,4(r4)
180025a8:	29400204 	addi	r5,r5,8
180025ac:	d8c03615 	stw	r3,216(sp)
180025b0:	d9003715 	stw	r4,220(sp)
180025b4:	d9402e15 	stw	r5,184(sp)
180025b8:	003b5a06 	br	18001324 <__alt_data_end+0xf8001324>
180025bc:	9080100c 	andi	r2,r18,64
180025c0:	10010726 	beq	r2,zero,180029e0 <___svfprintf_internal_r+0x1b98>
180025c4:	d8802e17 	ldw	r2,184(sp)
180025c8:	1500000f 	ldh	r20,0(r2)
180025cc:	10800104 	addi	r2,r2,4
180025d0:	d8802e15 	stw	r2,184(sp)
180025d4:	a02dd7fa 	srai	r22,r20,31
180025d8:	b005883a 	mov	r2,r22
180025dc:	003b7d06 	br	180013d4 <__alt_data_end+0xf80013d4>
180025e0:	9080100c 	andi	r2,r18,64
180025e4:	10010526 	beq	r2,zero,180029fc <___svfprintf_internal_r+0x1bb4>
180025e8:	d8c02e17 	ldw	r3,184(sp)
180025ec:	002d883a 	mov	r22,zero
180025f0:	1d00000b 	ldhu	r20,0(r3)
180025f4:	18c00104 	addi	r3,r3,4
180025f8:	d8c02e15 	stw	r3,184(sp)
180025fc:	003ce206 	br	18001988 <__alt_data_end+0xf8001988>
18002600:	bc400007 	ldb	r17,0(r23)
18002604:	003a6506 	br	18000f9c <__alt_data_end+0xf8000f9c>
18002608:	9080040c 	andi	r2,r18,16
1800260c:	10010126 	beq	r2,zero,18002a14 <___svfprintf_internal_r+0x1bcc>
18002610:	d8c02e17 	ldw	r3,184(sp)
18002614:	d9002f17 	ldw	r4,188(sp)
18002618:	18800017 	ldw	r2,0(r3)
1800261c:	18c00104 	addi	r3,r3,4
18002620:	d8c02e15 	stw	r3,184(sp)
18002624:	11000015 	stw	r4,0(r2)
18002628:	003a3206 	br	18000ef4 <__alt_data_end+0xf8000ef4>
1800262c:	d9002a17 	ldw	r4,168(sp)
18002630:	d8002785 	stb	zero,158(sp)
18002634:	203d8d16 	blt	r4,zero,18001c6c <__alt_data_end+0xf8001c6c>
18002638:	00bfdfc4 	movi	r2,-129
1800263c:	90a4703a 	and	r18,r18,r2
18002640:	003ad506 	br	18001198 <__alt_data_end+0xf8001198>
18002644:	01460074 	movhi	r5,6145
18002648:	297f0884 	addi	r5,r5,-990
1800264c:	d9402c15 	stw	r5,176(sp)
18002650:	d9402c17 	ldw	r5,176(sp)
18002654:	1c47883a 	add	r3,r3,r17
18002658:	10800044 	addi	r2,r2,1
1800265c:	41400015 	stw	r5,0(r8)
18002660:	44400115 	stw	r17,4(r8)
18002664:	d8c02015 	stw	r3,128(sp)
18002668:	d8801f15 	stw	r2,124(sp)
1800266c:	010001c4 	movi	r4,7
18002670:	20bf3016 	blt	r4,r2,18002334 <__alt_data_end+0xf8002334>
18002674:	42000204 	addi	r8,r8,8
18002678:	003f3506 	br	18002350 <__alt_data_end+0xf8002350>
1800267c:	01060074 	movhi	r4,6145
18002680:	213f0884 	addi	r4,r4,-990
18002684:	d9002c15 	stw	r4,176(sp)
18002688:	003c3c06 	br	1800177c <__alt_data_end+0xf800177c>
1800268c:	d9402d17 	ldw	r5,180(sp)
18002690:	d9801e04 	addi	r6,sp,120
18002694:	9809883a 	mov	r4,r19
18002698:	8007a480 	call	18007a48 <__ssprint_r>
1800269c:	103ad11e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
180026a0:	d8c02017 	ldw	r3,128(sp)
180026a4:	da000404 	addi	r8,sp,16
180026a8:	003d9306 	br	18001cf8 <__alt_data_end+0xf8001cf8>
180026ac:	d8801f17 	ldw	r2,124(sp)
180026b0:	01460074 	movhi	r5,6145
180026b4:	01000044 	movi	r4,1
180026b8:	18c00044 	addi	r3,r3,1
180026bc:	10800044 	addi	r2,r2,1
180026c0:	297f0804 	addi	r5,r5,-992
180026c4:	41000115 	stw	r4,4(r8)
180026c8:	41400015 	stw	r5,0(r8)
180026cc:	d8c02015 	stw	r3,128(sp)
180026d0:	d8801f15 	stw	r2,124(sp)
180026d4:	010001c4 	movi	r4,7
180026d8:	2080b516 	blt	r4,r2,180029b0 <___svfprintf_internal_r+0x1b68>
180026dc:	42000204 	addi	r8,r8,8
180026e0:	8800041e 	bne	r17,zero,180026f4 <___svfprintf_internal_r+0x18ac>
180026e4:	d8803317 	ldw	r2,204(sp)
180026e8:	1000021e 	bne	r2,zero,180026f4 <___svfprintf_internal_r+0x18ac>
180026ec:	9080004c 	andi	r2,r18,1
180026f0:	103c3926 	beq	r2,zero,180017d8 <__alt_data_end+0xf80017d8>
180026f4:	d9003817 	ldw	r4,224(sp)
180026f8:	d8801f17 	ldw	r2,124(sp)
180026fc:	d9403417 	ldw	r5,208(sp)
18002700:	20c7883a 	add	r3,r4,r3
18002704:	10800044 	addi	r2,r2,1
18002708:	41000115 	stw	r4,4(r8)
1800270c:	41400015 	stw	r5,0(r8)
18002710:	d8c02015 	stw	r3,128(sp)
18002714:	d8801f15 	stw	r2,124(sp)
18002718:	010001c4 	movi	r4,7
1800271c:	20818016 	blt	r4,r2,18002d20 <___svfprintf_internal_r+0x1ed8>
18002720:	42000204 	addi	r8,r8,8
18002724:	0463c83a 	sub	r17,zero,r17
18002728:	0440cb0e 	bge	zero,r17,18002a58 <___svfprintf_internal_r+0x1c10>
1800272c:	05800404 	movi	r22,16
18002730:	b440e80e 	bge	r22,r17,18002ad4 <___svfprintf_internal_r+0x1c8c>
18002734:	01460074 	movhi	r5,6145
18002738:	297f0884 	addi	r5,r5,-990
1800273c:	d9402c15 	stw	r5,176(sp)
18002740:	070001c4 	movi	fp,7
18002744:	dd002d17 	ldw	r20,180(sp)
18002748:	00000306 	br	18002758 <___svfprintf_internal_r+0x1910>
1800274c:	42000204 	addi	r8,r8,8
18002750:	8c7ffc04 	addi	r17,r17,-16
18002754:	b440e20e 	bge	r22,r17,18002ae0 <___svfprintf_internal_r+0x1c98>
18002758:	18c00404 	addi	r3,r3,16
1800275c:	10800044 	addi	r2,r2,1
18002760:	45400015 	stw	r21,0(r8)
18002764:	45800115 	stw	r22,4(r8)
18002768:	d8c02015 	stw	r3,128(sp)
1800276c:	d8801f15 	stw	r2,124(sp)
18002770:	e0bff60e 	bge	fp,r2,1800274c <__alt_data_end+0xf800274c>
18002774:	d9801e04 	addi	r6,sp,120
18002778:	a00b883a 	mov	r5,r20
1800277c:	9809883a 	mov	r4,r19
18002780:	8007a480 	call	18007a48 <__ssprint_r>
18002784:	103a971e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002788:	d8c02017 	ldw	r3,128(sp)
1800278c:	d8801f17 	ldw	r2,124(sp)
18002790:	da000404 	addi	r8,sp,16
18002794:	003fee06 	br	18002750 <__alt_data_end+0xf8002750>
18002798:	d9002e17 	ldw	r4,184(sp)
1800279c:	d9402a17 	ldw	r5,168(sp)
180027a0:	002d883a 	mov	r22,zero
180027a4:	20800104 	addi	r2,r4,4
180027a8:	25000017 	ldw	r20,0(r4)
180027ac:	283e7d0e 	bge	r5,zero,180021a4 <__alt_data_end+0xf80021a4>
180027b0:	003eda06 	br	1800231c <__alt_data_end+0xf800231c>
180027b4:	d9002e17 	ldw	r4,184(sp)
180027b8:	d9402a17 	ldw	r5,168(sp)
180027bc:	002d883a 	mov	r22,zero
180027c0:	20800104 	addi	r2,r4,4
180027c4:	25000017 	ldw	r20,0(r4)
180027c8:	283e2d0e 	bge	r5,zero,18002080 <__alt_data_end+0xf8002080>
180027cc:	003f6b06 	br	1800257c <__alt_data_end+0xf800257c>
180027d0:	d8c02e15 	stw	r3,184(sp)
180027d4:	0039883a 	mov	fp,zero
180027d8:	003ed206 	br	18002324 <__alt_data_end+0xf8002324>
180027dc:	bc400043 	ldbu	r17,1(r23)
180027e0:	84000814 	ori	r16,r16,32
180027e4:	bdc00044 	addi	r23,r23,1
180027e8:	8c403fcc 	andi	r17,r17,255
180027ec:	8c40201c 	xori	r17,r17,128
180027f0:	8c7fe004 	addi	r17,r17,-128
180027f4:	0039e906 	br	18000f9c <__alt_data_end+0xf8000f9c>
180027f8:	d9402d17 	ldw	r5,180(sp)
180027fc:	d9801e04 	addi	r6,sp,120
18002800:	9809883a 	mov	r4,r19
18002804:	8007a480 	call	18007a48 <__ssprint_r>
18002808:	103a761e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
1800280c:	d8c02017 	ldw	r3,128(sp)
18002810:	da000404 	addi	r8,sp,16
18002814:	003d4a06 	br	18001d40 <__alt_data_end+0xf8001d40>
18002818:	d9002a17 	ldw	r4,168(sp)
1800281c:	05bff7c4 	movi	r22,-33
18002820:	00bfffc4 	movi	r2,-1
18002824:	8dac703a 	and	r22,r17,r22
18002828:	20806a26 	beq	r4,r2,180029d4 <___svfprintf_internal_r+0x1b8c>
1800282c:	008011c4 	movi	r2,71
18002830:	b0813726 	beq	r22,r2,18002d10 <___svfprintf_internal_r+0x1ec8>
18002834:	d9003717 	ldw	r4,220(sp)
18002838:	90c04014 	ori	r3,r18,256
1800283c:	d8c02c15 	stw	r3,176(sp)
18002840:	20015d16 	blt	r4,zero,18002db8 <___svfprintf_internal_r+0x1f70>
18002844:	dd003717 	ldw	r20,220(sp)
18002848:	d8002905 	stb	zero,164(sp)
1800284c:	00801984 	movi	r2,102
18002850:	88814026 	beq	r17,r2,18002d54 <___svfprintf_internal_r+0x1f0c>
18002854:	00801184 	movi	r2,70
18002858:	88817126 	beq	r17,r2,18002e20 <___svfprintf_internal_r+0x1fd8>
1800285c:	00801144 	movi	r2,69
18002860:	b0816226 	beq	r22,r2,18002dec <___svfprintf_internal_r+0x1fa4>
18002864:	d8c02a17 	ldw	r3,168(sp)
18002868:	d8802104 	addi	r2,sp,132
1800286c:	d8800315 	stw	r2,12(sp)
18002870:	d9403617 	ldw	r5,216(sp)
18002874:	d8802504 	addi	r2,sp,148
18002878:	d8800215 	stw	r2,8(sp)
1800287c:	d8802604 	addi	r2,sp,152
18002880:	d8c00015 	stw	r3,0(sp)
18002884:	d8800115 	stw	r2,4(sp)
18002888:	01c00084 	movi	r7,2
1800288c:	a00d883a 	mov	r6,r20
18002890:	9809883a 	mov	r4,r19
18002894:	d8c03d15 	stw	r3,244(sp)
18002898:	da003e15 	stw	r8,248(sp)
1800289c:	800332c0 	call	1800332c <_dtoa_r>
180028a0:	1021883a 	mov	r16,r2
180028a4:	008019c4 	movi	r2,103
180028a8:	d8c03d17 	ldw	r3,244(sp)
180028ac:	da003e17 	ldw	r8,248(sp)
180028b0:	8880e726 	beq	r17,r2,18002c50 <___svfprintf_internal_r+0x1e08>
180028b4:	008011c4 	movi	r2,71
180028b8:	8880d426 	beq	r17,r2,18002c0c <___svfprintf_internal_r+0x1dc4>
180028bc:	80f9883a 	add	fp,r16,r3
180028c0:	d9003617 	ldw	r4,216(sp)
180028c4:	000d883a 	mov	r6,zero
180028c8:	000f883a 	mov	r7,zero
180028cc:	a00b883a 	mov	r5,r20
180028d0:	da003e15 	stw	r8,248(sp)
180028d4:	800bcf00 	call	1800bcf0 <__eqdf2>
180028d8:	da003e17 	ldw	r8,248(sp)
180028dc:	1000e426 	beq	r2,zero,18002c70 <___svfprintf_internal_r+0x1e28>
180028e0:	d8802117 	ldw	r2,132(sp)
180028e4:	1700062e 	bgeu	r2,fp,18002900 <___svfprintf_internal_r+0x1ab8>
180028e8:	01000c04 	movi	r4,48
180028ec:	10c00044 	addi	r3,r2,1
180028f0:	d8c02115 	stw	r3,132(sp)
180028f4:	11000005 	stb	r4,0(r2)
180028f8:	d8802117 	ldw	r2,132(sp)
180028fc:	173ffb36 	bltu	r2,fp,180028ec <__alt_data_end+0xf80028ec>
18002900:	1405c83a 	sub	r2,r2,r16
18002904:	d8803315 	stw	r2,204(sp)
18002908:	008011c4 	movi	r2,71
1800290c:	b080c526 	beq	r22,r2,18002c24 <___svfprintf_internal_r+0x1ddc>
18002910:	00801944 	movi	r2,101
18002914:	1441d80e 	bge	r2,r17,18003078 <___svfprintf_internal_r+0x2230>
18002918:	d8c02617 	ldw	r3,152(sp)
1800291c:	00801984 	movi	r2,102
18002920:	d8c03215 	stw	r3,200(sp)
18002924:	88813426 	beq	r17,r2,18002df8 <___svfprintf_internal_r+0x1fb0>
18002928:	d8c03217 	ldw	r3,200(sp)
1800292c:	d9003317 	ldw	r4,204(sp)
18002930:	19012516 	blt	r3,r4,18002dc8 <___svfprintf_internal_r+0x1f80>
18002934:	9480004c 	andi	r18,r18,1
18002938:	9001841e 	bne	r18,zero,18002f4c <___svfprintf_internal_r+0x2104>
1800293c:	1805883a 	mov	r2,r3
18002940:	1801cb16 	blt	r3,zero,18003070 <___svfprintf_internal_r+0x2228>
18002944:	d8c03217 	ldw	r3,200(sp)
18002948:	044019c4 	movi	r17,103
1800294c:	d8c02b15 	stw	r3,172(sp)
18002950:	df002907 	ldb	fp,164(sp)
18002954:	e000a61e 	bne	fp,zero,18002bf0 <___svfprintf_internal_r+0x1da8>
18002958:	df002783 	ldbu	fp,158(sp)
1800295c:	d8802915 	stw	r2,164(sp)
18002960:	dc802c17 	ldw	r18,176(sp)
18002964:	d8002a15 	stw	zero,168(sp)
18002968:	003af506 	br	18001540 <__alt_data_end+0xf8001540>
1800296c:	04060074 	movhi	r16,6145
18002970:	843ef804 	addi	r16,r16,-1056
18002974:	003a7e06 	br	18001370 <__alt_data_end+0xf8001370>
18002978:	d9003917 	ldw	r4,228(sp)
1800297c:	04001004 	movi	r16,64
18002980:	800b883a 	mov	r5,r16
18002984:	80054900 	call	18005490 <_malloc_r>
18002988:	d9002d17 	ldw	r4,180(sp)
1800298c:	20800015 	stw	r2,0(r4)
18002990:	20800415 	stw	r2,16(r4)
18002994:	1001d026 	beq	r2,zero,180030d8 <___svfprintf_internal_r+0x2290>
18002998:	d8802d17 	ldw	r2,180(sp)
1800299c:	14000515 	stw	r16,20(r2)
180029a0:	00394406 	br	18000eb4 <__alt_data_end+0xf8000eb4>
180029a4:	04060074 	movhi	r16,6145
180029a8:	843efa04 	addi	r16,r16,-1048
180029ac:	003ee106 	br	18002534 <__alt_data_end+0xf8002534>
180029b0:	d9402d17 	ldw	r5,180(sp)
180029b4:	d9801e04 	addi	r6,sp,120
180029b8:	9809883a 	mov	r4,r19
180029bc:	8007a480 	call	18007a48 <__ssprint_r>
180029c0:	103a081e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
180029c4:	dc402617 	ldw	r17,152(sp)
180029c8:	d8c02017 	ldw	r3,128(sp)
180029cc:	da000404 	addi	r8,sp,16
180029d0:	003f4306 	br	180026e0 <__alt_data_end+0xf80026e0>
180029d4:	01400184 	movi	r5,6
180029d8:	d9402a15 	stw	r5,168(sp)
180029dc:	003f9506 	br	18002834 <__alt_data_end+0xf8002834>
180029e0:	d8c02e17 	ldw	r3,184(sp)
180029e4:	1d000017 	ldw	r20,0(r3)
180029e8:	18c00104 	addi	r3,r3,4
180029ec:	d8c02e15 	stw	r3,184(sp)
180029f0:	a02dd7fa 	srai	r22,r20,31
180029f4:	b005883a 	mov	r2,r22
180029f8:	003a7606 	br	180013d4 <__alt_data_end+0xf80013d4>
180029fc:	d9002e17 	ldw	r4,184(sp)
18002a00:	002d883a 	mov	r22,zero
18002a04:	25000017 	ldw	r20,0(r4)
18002a08:	21000104 	addi	r4,r4,4
18002a0c:	d9002e15 	stw	r4,184(sp)
18002a10:	003bdd06 	br	18001988 <__alt_data_end+0xf8001988>
18002a14:	9480100c 	andi	r18,r18,64
18002a18:	90006e26 	beq	r18,zero,18002bd4 <___svfprintf_internal_r+0x1d8c>
18002a1c:	d9402e17 	ldw	r5,184(sp)
18002a20:	d8c02f17 	ldw	r3,188(sp)
18002a24:	28800017 	ldw	r2,0(r5)
18002a28:	29400104 	addi	r5,r5,4
18002a2c:	d9402e15 	stw	r5,184(sp)
18002a30:	10c0000d 	sth	r3,0(r2)
18002a34:	00392f06 	br	18000ef4 <__alt_data_end+0xf8000ef4>
18002a38:	d9402d17 	ldw	r5,180(sp)
18002a3c:	d9801e04 	addi	r6,sp,120
18002a40:	9809883a 	mov	r4,r19
18002a44:	8007a480 	call	18007a48 <__ssprint_r>
18002a48:	1039e61e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002a4c:	d8c02017 	ldw	r3,128(sp)
18002a50:	d8801f17 	ldw	r2,124(sp)
18002a54:	da000404 	addi	r8,sp,16
18002a58:	d9403317 	ldw	r5,204(sp)
18002a5c:	10800044 	addi	r2,r2,1
18002a60:	44000015 	stw	r16,0(r8)
18002a64:	28c7883a 	add	r3,r5,r3
18002a68:	003b5506 	br	180017c0 <__alt_data_end+0xf80017c0>
18002a6c:	8009883a 	mov	r4,r16
18002a70:	df003e15 	stw	fp,248(sp)
18002a74:	8000db00 	call	18000db0 <strlen>
18002a78:	d8802b15 	stw	r2,172(sp)
18002a7c:	da003e17 	ldw	r8,248(sp)
18002a80:	103c160e 	bge	r2,zero,18001adc <__alt_data_end+0xf8001adc>
18002a84:	0005883a 	mov	r2,zero
18002a88:	003c1406 	br	18001adc <__alt_data_end+0xf8001adc>
18002a8c:	00bfffc4 	movi	r2,-1
18002a90:	0039d906 	br	180011f8 <__alt_data_end+0xf80011f8>
18002a94:	01060074 	movhi	r4,6145
18002a98:	213f0c84 	addi	r4,r4,-974
18002a9c:	d9003515 	stw	r4,212(sp)
18002aa0:	003ae406 	br	18001634 <__alt_data_end+0xf8001634>
18002aa4:	013fffc4 	movi	r4,-1
18002aa8:	0039fa06 	br	18001294 <__alt_data_end+0xf8001294>
18002aac:	d9402d17 	ldw	r5,180(sp)
18002ab0:	d9801e04 	addi	r6,sp,120
18002ab4:	9809883a 	mov	r4,r19
18002ab8:	8007a480 	call	18007a48 <__ssprint_r>
18002abc:	1039c91e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002ac0:	d8c02017 	ldw	r3,128(sp)
18002ac4:	da000404 	addi	r8,sp,16
18002ac8:	003d8406 	br	180020dc <__alt_data_end+0xf80020dc>
18002acc:	0023883a 	mov	r17,zero
18002ad0:	003d8306 	br	180020e0 <__alt_data_end+0xf80020e0>
18002ad4:	01060074 	movhi	r4,6145
18002ad8:	213f0884 	addi	r4,r4,-990
18002adc:	d9002c15 	stw	r4,176(sp)
18002ae0:	d9002c17 	ldw	r4,176(sp)
18002ae4:	1c47883a 	add	r3,r3,r17
18002ae8:	10800044 	addi	r2,r2,1
18002aec:	41000015 	stw	r4,0(r8)
18002af0:	44400115 	stw	r17,4(r8)
18002af4:	d8c02015 	stw	r3,128(sp)
18002af8:	d8801f15 	stw	r2,124(sp)
18002afc:	010001c4 	movi	r4,7
18002b00:	20bfcd16 	blt	r4,r2,18002a38 <__alt_data_end+0xf8002a38>
18002b04:	42000204 	addi	r8,r8,8
18002b08:	003fd306 	br	18002a58 <__alt_data_end+0xf8002a58>
18002b0c:	d9402d17 	ldw	r5,180(sp)
18002b10:	d9801e04 	addi	r6,sp,120
18002b14:	9809883a 	mov	r4,r19
18002b18:	8007a480 	call	18007a48 <__ssprint_r>
18002b1c:	1039b11e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002b20:	d8802617 	ldw	r2,152(sp)
18002b24:	d8c02017 	ldw	r3,128(sp)
18002b28:	da000404 	addi	r8,sp,16
18002b2c:	003e1c06 	br	180023a0 <__alt_data_end+0xf80023a0>
18002b30:	d8802a17 	ldw	r2,168(sp)
18002b34:	00c00184 	movi	r3,6
18002b38:	1880012e 	bgeu	r3,r2,18002b40 <___svfprintf_internal_r+0x1cf8>
18002b3c:	1805883a 	mov	r2,r3
18002b40:	d8802b15 	stw	r2,172(sp)
18002b44:	1000f316 	blt	r2,zero,18002f14 <___svfprintf_internal_r+0x20cc>
18002b48:	04060074 	movhi	r16,6145
18002b4c:	d8802915 	stw	r2,164(sp)
18002b50:	dd002e15 	stw	r20,184(sp)
18002b54:	d8002a15 	stw	zero,168(sp)
18002b58:	d8003215 	stw	zero,200(sp)
18002b5c:	843f0604 	addi	r16,r16,-1000
18002b60:	0039883a 	mov	fp,zero
18002b64:	003a7d06 	br	1800155c <__alt_data_end+0xf800155c>
18002b68:	01060074 	movhi	r4,6145
18002b6c:	213f0c84 	addi	r4,r4,-974
18002b70:	d9003515 	stw	r4,212(sp)
18002b74:	003b3d06 	br	1800186c <__alt_data_end+0xf800186c>
18002b78:	d9402d17 	ldw	r5,180(sp)
18002b7c:	d9801e04 	addi	r6,sp,120
18002b80:	9809883a 	mov	r4,r19
18002b84:	8007a480 	call	18007a48 <__ssprint_r>
18002b88:	1039961e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002b8c:	d8802617 	ldw	r2,152(sp)
18002b90:	d9403317 	ldw	r5,204(sp)
18002b94:	d8c02017 	ldw	r3,128(sp)
18002b98:	da000404 	addi	r8,sp,16
18002b9c:	2885c83a 	sub	r2,r5,r2
18002ba0:	003e1006 	br	180023e4 <__alt_data_end+0xf80023e4>
18002ba4:	00800044 	movi	r2,1
18002ba8:	10803fcc 	andi	r2,r2,255
18002bac:	00c00044 	movi	r3,1
18002bb0:	10fa1026 	beq	r2,r3,180013f4 <__alt_data_end+0xf80013f4>
18002bb4:	00c00084 	movi	r3,2
18002bb8:	10fb8226 	beq	r2,r3,180019c4 <__alt_data_end+0xf80019c4>
18002bbc:	003a4206 	br	180014c8 <__alt_data_end+0xf80014c8>
18002bc0:	0021883a 	mov	r16,zero
18002bc4:	003e0806 	br	180023e8 <__alt_data_end+0xf80023e8>
18002bc8:	07000b44 	movi	fp,45
18002bcc:	df002785 	stb	fp,158(sp)
18002bd0:	0039e306 	br	18001360 <__alt_data_end+0xf8001360>
18002bd4:	d9002e17 	ldw	r4,184(sp)
18002bd8:	d9402f17 	ldw	r5,188(sp)
18002bdc:	20800017 	ldw	r2,0(r4)
18002be0:	21000104 	addi	r4,r4,4
18002be4:	d9002e15 	stw	r4,184(sp)
18002be8:	11400015 	stw	r5,0(r2)
18002bec:	0038c106 	br	18000ef4 <__alt_data_end+0xf8000ef4>
18002bf0:	00c00b44 	movi	r3,45
18002bf4:	d8c02785 	stb	r3,158(sp)
18002bf8:	d8802915 	stw	r2,164(sp)
18002bfc:	dc802c17 	ldw	r18,176(sp)
18002c00:	d8002a15 	stw	zero,168(sp)
18002c04:	07000b44 	movi	fp,45
18002c08:	003a5106 	br	18001550 <__alt_data_end+0xf8001550>
18002c0c:	9080004c 	andi	r2,r18,1
18002c10:	1000941e 	bne	r2,zero,18002e64 <___svfprintf_internal_r+0x201c>
18002c14:	d8802117 	ldw	r2,132(sp)
18002c18:	1405c83a 	sub	r2,r2,r16
18002c1c:	d8803315 	stw	r2,204(sp)
18002c20:	b441151e 	bne	r22,r17,18003078 <___svfprintf_internal_r+0x2230>
18002c24:	dd802617 	ldw	r22,152(sp)
18002c28:	00bfff44 	movi	r2,-3
18002c2c:	b0801a16 	blt	r22,r2,18002c98 <___svfprintf_internal_r+0x1e50>
18002c30:	d9402a17 	ldw	r5,168(sp)
18002c34:	2d801816 	blt	r5,r22,18002c98 <___svfprintf_internal_r+0x1e50>
18002c38:	dd803215 	stw	r22,200(sp)
18002c3c:	003f3a06 	br	18002928 <__alt_data_end+0xf8002928>
18002c40:	1025883a 	mov	r18,r2
18002c44:	0039883a 	mov	fp,zero
18002c48:	00800084 	movi	r2,2
18002c4c:	003fd606 	br	18002ba8 <__alt_data_end+0xf8002ba8>
18002c50:	9080004c 	andi	r2,r18,1
18002c54:	103f191e 	bne	r2,zero,180028bc <__alt_data_end+0xf80028bc>
18002c58:	d8802117 	ldw	r2,132(sp)
18002c5c:	003f2806 	br	18002900 <__alt_data_end+0xf8002900>
18002c60:	01060074 	movhi	r4,6145
18002c64:	213f0884 	addi	r4,r4,-990
18002c68:	d9002c15 	stw	r4,176(sp)
18002c6c:	003c7c06 	br	18001e60 <__alt_data_end+0xf8001e60>
18002c70:	e005883a 	mov	r2,fp
18002c74:	003f2206 	br	18002900 <__alt_data_end+0xf8002900>
18002c78:	d9002a17 	ldw	r4,168(sp)
18002c7c:	df002783 	ldbu	fp,158(sp)
18002c80:	dd002e15 	stw	r20,184(sp)
18002c84:	d9002915 	stw	r4,164(sp)
18002c88:	d9002b15 	stw	r4,172(sp)
18002c8c:	d8002a15 	stw	zero,168(sp)
18002c90:	d8003215 	stw	zero,200(sp)
18002c94:	003a2a06 	br	18001540 <__alt_data_end+0xf8001540>
18002c98:	8c7fff84 	addi	r17,r17,-2
18002c9c:	b5bfffc4 	addi	r22,r22,-1
18002ca0:	dd802615 	stw	r22,152(sp)
18002ca4:	dc4022c5 	stb	r17,139(sp)
18002ca8:	b000c316 	blt	r22,zero,18002fb8 <___svfprintf_internal_r+0x2170>
18002cac:	00800ac4 	movi	r2,43
18002cb0:	d8802305 	stb	r2,140(sp)
18002cb4:	00800244 	movi	r2,9
18002cb8:	15806e16 	blt	r2,r22,18002e74 <___svfprintf_internal_r+0x202c>
18002cbc:	00800c04 	movi	r2,48
18002cc0:	b5800c04 	addi	r22,r22,48
18002cc4:	d8802345 	stb	r2,141(sp)
18002cc8:	dd802385 	stb	r22,142(sp)
18002ccc:	d88023c4 	addi	r2,sp,143
18002cd0:	df0022c4 	addi	fp,sp,139
18002cd4:	d8c03317 	ldw	r3,204(sp)
18002cd8:	1739c83a 	sub	fp,r2,fp
18002cdc:	d9003317 	ldw	r4,204(sp)
18002ce0:	e0c7883a 	add	r3,fp,r3
18002ce4:	df003b15 	stw	fp,236(sp)
18002ce8:	d8c02b15 	stw	r3,172(sp)
18002cec:	00800044 	movi	r2,1
18002cf0:	1100b70e 	bge	r2,r4,18002fd0 <___svfprintf_internal_r+0x2188>
18002cf4:	d8c02b17 	ldw	r3,172(sp)
18002cf8:	18c00044 	addi	r3,r3,1
18002cfc:	d8c02b15 	stw	r3,172(sp)
18002d00:	1805883a 	mov	r2,r3
18002d04:	1800b016 	blt	r3,zero,18002fc8 <___svfprintf_internal_r+0x2180>
18002d08:	d8003215 	stw	zero,200(sp)
18002d0c:	003f1006 	br	18002950 <__alt_data_end+0xf8002950>
18002d10:	d8802a17 	ldw	r2,168(sp)
18002d14:	103ec71e 	bne	r2,zero,18002834 <__alt_data_end+0xf8002834>
18002d18:	dc002a15 	stw	r16,168(sp)
18002d1c:	003ec506 	br	18002834 <__alt_data_end+0xf8002834>
18002d20:	d9402d17 	ldw	r5,180(sp)
18002d24:	d9801e04 	addi	r6,sp,120
18002d28:	9809883a 	mov	r4,r19
18002d2c:	8007a480 	call	18007a48 <__ssprint_r>
18002d30:	10392c1e 	bne	r2,zero,180011e4 <__alt_data_end+0xf80011e4>
18002d34:	dc402617 	ldw	r17,152(sp)
18002d38:	d8c02017 	ldw	r3,128(sp)
18002d3c:	d8801f17 	ldw	r2,124(sp)
18002d40:	da000404 	addi	r8,sp,16
18002d44:	003e7706 	br	18002724 <__alt_data_end+0xf8002724>
18002d48:	182f883a 	mov	r23,r3
18002d4c:	d8002a15 	stw	zero,168(sp)
18002d50:	00389306 	br	18000fa0 <__alt_data_end+0xf8000fa0>
18002d54:	d8c02a17 	ldw	r3,168(sp)
18002d58:	d8802104 	addi	r2,sp,132
18002d5c:	d8800315 	stw	r2,12(sp)
18002d60:	d9403617 	ldw	r5,216(sp)
18002d64:	d8802504 	addi	r2,sp,148
18002d68:	d8800215 	stw	r2,8(sp)
18002d6c:	d8802604 	addi	r2,sp,152
18002d70:	d8c00015 	stw	r3,0(sp)
18002d74:	9809883a 	mov	r4,r19
18002d78:	d8800115 	stw	r2,4(sp)
18002d7c:	01c000c4 	movi	r7,3
18002d80:	a00d883a 	mov	r6,r20
18002d84:	da003e15 	stw	r8,248(sp)
18002d88:	800332c0 	call	1800332c <_dtoa_r>
18002d8c:	d9002a17 	ldw	r4,168(sp)
18002d90:	da003e17 	ldw	r8,248(sp)
18002d94:	1021883a 	mov	r16,r2
18002d98:	1139883a 	add	fp,r2,r4
18002d9c:	2007883a 	mov	r3,r4
18002da0:	81000007 	ldb	r4,0(r16)
18002da4:	00800c04 	movi	r2,48
18002da8:	20806f26 	beq	r4,r2,18002f68 <___svfprintf_internal_r+0x2120>
18002dac:	d8c02617 	ldw	r3,152(sp)
18002db0:	e0f9883a 	add	fp,fp,r3
18002db4:	003ec206 	br	180028c0 <__alt_data_end+0xf80028c0>
18002db8:	00c00b44 	movi	r3,45
18002dbc:	2520003c 	xorhi	r20,r4,32768
18002dc0:	d8c02905 	stb	r3,164(sp)
18002dc4:	003ea106 	br	1800284c <__alt_data_end+0xf800284c>
18002dc8:	d8c03217 	ldw	r3,200(sp)
18002dcc:	00c0890e 	bge	zero,r3,18002ff4 <___svfprintf_internal_r+0x21ac>
18002dd0:	00800044 	movi	r2,1
18002dd4:	d9003317 	ldw	r4,204(sp)
18002dd8:	1105883a 	add	r2,r2,r4
18002ddc:	d8802b15 	stw	r2,172(sp)
18002de0:	10005f16 	blt	r2,zero,18002f60 <___svfprintf_internal_r+0x2118>
18002de4:	044019c4 	movi	r17,103
18002de8:	003ed906 	br	18002950 <__alt_data_end+0xf8002950>
18002dec:	d9002a17 	ldw	r4,168(sp)
18002df0:	20c00044 	addi	r3,r4,1
18002df4:	003e9c06 	br	18002868 <__alt_data_end+0xf8002868>
18002df8:	d9002a17 	ldw	r4,168(sp)
18002dfc:	00c0680e 	bge	zero,r3,18002fa0 <___svfprintf_internal_r+0x2158>
18002e00:	2000461e 	bne	r4,zero,18002f1c <___svfprintf_internal_r+0x20d4>
18002e04:	9480004c 	andi	r18,r18,1
18002e08:	9000441e 	bne	r18,zero,18002f1c <___svfprintf_internal_r+0x20d4>
18002e0c:	1805883a 	mov	r2,r3
18002e10:	1800a116 	blt	r3,zero,18003098 <___svfprintf_internal_r+0x2250>
18002e14:	d8c03217 	ldw	r3,200(sp)
18002e18:	d8c02b15 	stw	r3,172(sp)
18002e1c:	003ecc06 	br	18002950 <__alt_data_end+0xf8002950>
18002e20:	d9402a17 	ldw	r5,168(sp)
18002e24:	d8802104 	addi	r2,sp,132
18002e28:	d8800315 	stw	r2,12(sp)
18002e2c:	d9400015 	stw	r5,0(sp)
18002e30:	d8802504 	addi	r2,sp,148
18002e34:	d9403617 	ldw	r5,216(sp)
18002e38:	d8800215 	stw	r2,8(sp)
18002e3c:	d8802604 	addi	r2,sp,152
18002e40:	d8800115 	stw	r2,4(sp)
18002e44:	01c000c4 	movi	r7,3
18002e48:	a00d883a 	mov	r6,r20
18002e4c:	9809883a 	mov	r4,r19
18002e50:	da003e15 	stw	r8,248(sp)
18002e54:	800332c0 	call	1800332c <_dtoa_r>
18002e58:	d8c02a17 	ldw	r3,168(sp)
18002e5c:	da003e17 	ldw	r8,248(sp)
18002e60:	1021883a 	mov	r16,r2
18002e64:	00801184 	movi	r2,70
18002e68:	80f9883a 	add	fp,r16,r3
18002e6c:	88bfcc26 	beq	r17,r2,18002da0 <__alt_data_end+0xf8002da0>
18002e70:	003e9306 	br	180028c0 <__alt_data_end+0xf80028c0>
18002e74:	df0022c4 	addi	fp,sp,139
18002e78:	dc002a15 	stw	r16,168(sp)
18002e7c:	9829883a 	mov	r20,r19
18002e80:	e021883a 	mov	r16,fp
18002e84:	4027883a 	mov	r19,r8
18002e88:	b009883a 	mov	r4,r22
18002e8c:	01400284 	movi	r5,10
18002e90:	8000a440 	call	18000a44 <__modsi3>
18002e94:	10800c04 	addi	r2,r2,48
18002e98:	843fffc4 	addi	r16,r16,-1
18002e9c:	b009883a 	mov	r4,r22
18002ea0:	01400284 	movi	r5,10
18002ea4:	80800005 	stb	r2,0(r16)
18002ea8:	80009c00 	call	180009c0 <__divsi3>
18002eac:	102d883a 	mov	r22,r2
18002eb0:	00800244 	movi	r2,9
18002eb4:	15bff416 	blt	r2,r22,18002e88 <__alt_data_end+0xf8002e88>
18002eb8:	9811883a 	mov	r8,r19
18002ebc:	b0800c04 	addi	r2,r22,48
18002ec0:	a027883a 	mov	r19,r20
18002ec4:	8029883a 	mov	r20,r16
18002ec8:	a17fffc4 	addi	r5,r20,-1
18002ecc:	a0bfffc5 	stb	r2,-1(r20)
18002ed0:	dc002a17 	ldw	r16,168(sp)
18002ed4:	2f00782e 	bgeu	r5,fp,180030b8 <___svfprintf_internal_r+0x2270>
18002ed8:	d9c02384 	addi	r7,sp,142
18002edc:	3d0fc83a 	sub	r7,r7,r20
18002ee0:	d9002344 	addi	r4,sp,141
18002ee4:	e1cf883a 	add	r7,fp,r7
18002ee8:	00000106 	br	18002ef0 <___svfprintf_internal_r+0x20a8>
18002eec:	28800003 	ldbu	r2,0(r5)
18002ef0:	20800005 	stb	r2,0(r4)
18002ef4:	21000044 	addi	r4,r4,1
18002ef8:	29400044 	addi	r5,r5,1
18002efc:	21fffb1e 	bne	r4,r7,18002eec <__alt_data_end+0xf8002eec>
18002f00:	d8802304 	addi	r2,sp,140
18002f04:	1505c83a 	sub	r2,r2,r20
18002f08:	d8c02344 	addi	r3,sp,141
18002f0c:	1885883a 	add	r2,r3,r2
18002f10:	003f7006 	br	18002cd4 <__alt_data_end+0xf8002cd4>
18002f14:	0005883a 	mov	r2,zero
18002f18:	003f0b06 	br	18002b48 <__alt_data_end+0xf8002b48>
18002f1c:	d9002a17 	ldw	r4,168(sp)
18002f20:	d8c03217 	ldw	r3,200(sp)
18002f24:	20800044 	addi	r2,r4,1
18002f28:	1885883a 	add	r2,r3,r2
18002f2c:	d8802b15 	stw	r2,172(sp)
18002f30:	103e870e 	bge	r2,zero,18002950 <__alt_data_end+0xf8002950>
18002f34:	0005883a 	mov	r2,zero
18002f38:	003e8506 	br	18002950 <__alt_data_end+0xf8002950>
18002f3c:	01060074 	movhi	r4,6145
18002f40:	213f0884 	addi	r4,r4,-990
18002f44:	d9002c15 	stw	r4,176(sp)
18002f48:	003cc506 	br	18002260 <__alt_data_end+0xf8002260>
18002f4c:	d8c03217 	ldw	r3,200(sp)
18002f50:	18c00044 	addi	r3,r3,1
18002f54:	d8c02b15 	stw	r3,172(sp)
18002f58:	1805883a 	mov	r2,r3
18002f5c:	183fa10e 	bge	r3,zero,18002de4 <__alt_data_end+0xf8002de4>
18002f60:	0005883a 	mov	r2,zero
18002f64:	003f9f06 	br	18002de4 <__alt_data_end+0xf8002de4>
18002f68:	d9003617 	ldw	r4,216(sp)
18002f6c:	000d883a 	mov	r6,zero
18002f70:	000f883a 	mov	r7,zero
18002f74:	a00b883a 	mov	r5,r20
18002f78:	d8c03d15 	stw	r3,244(sp)
18002f7c:	da003e15 	stw	r8,248(sp)
18002f80:	800bcf00 	call	1800bcf0 <__eqdf2>
18002f84:	d8c03d17 	ldw	r3,244(sp)
18002f88:	da003e17 	ldw	r8,248(sp)
18002f8c:	103f8726 	beq	r2,zero,18002dac <__alt_data_end+0xf8002dac>
18002f90:	00800044 	movi	r2,1
18002f94:	10c7c83a 	sub	r3,r2,r3
18002f98:	d8c02615 	stw	r3,152(sp)
18002f9c:	003f8406 	br	18002db0 <__alt_data_end+0xf8002db0>
18002fa0:	20000e1e 	bne	r4,zero,18002fdc <___svfprintf_internal_r+0x2194>
18002fa4:	9480004c 	andi	r18,r18,1
18002fa8:	90000c1e 	bne	r18,zero,18002fdc <___svfprintf_internal_r+0x2194>
18002fac:	00800044 	movi	r2,1
18002fb0:	d8802b15 	stw	r2,172(sp)
18002fb4:	003e6606 	br	18002950 <__alt_data_end+0xf8002950>
18002fb8:	00800b44 	movi	r2,45
18002fbc:	05adc83a 	sub	r22,zero,r22
18002fc0:	d8802305 	stb	r2,140(sp)
18002fc4:	003f3b06 	br	18002cb4 <__alt_data_end+0xf8002cb4>
18002fc8:	0005883a 	mov	r2,zero
18002fcc:	003f4e06 	br	18002d08 <__alt_data_end+0xf8002d08>
18002fd0:	90a4703a 	and	r18,r18,r2
18002fd4:	903f4a26 	beq	r18,zero,18002d00 <__alt_data_end+0xf8002d00>
18002fd8:	003f4606 	br	18002cf4 <__alt_data_end+0xf8002cf4>
18002fdc:	d8c02a17 	ldw	r3,168(sp)
18002fe0:	18c00084 	addi	r3,r3,2
18002fe4:	d8c02b15 	stw	r3,172(sp)
18002fe8:	1805883a 	mov	r2,r3
18002fec:	183e580e 	bge	r3,zero,18002950 <__alt_data_end+0xf8002950>
18002ff0:	003fd006 	br	18002f34 <__alt_data_end+0xf8002f34>
18002ff4:	00800084 	movi	r2,2
18002ff8:	10c5c83a 	sub	r2,r2,r3
18002ffc:	003f7506 	br	18002dd4 <__alt_data_end+0xf8002dd4>
18003000:	d9402e17 	ldw	r5,184(sp)
18003004:	d9002e17 	ldw	r4,184(sp)
18003008:	bc400043 	ldbu	r17,1(r23)
1800300c:	29400017 	ldw	r5,0(r5)
18003010:	20800104 	addi	r2,r4,4
18003014:	d8802e15 	stw	r2,184(sp)
18003018:	d9402a15 	stw	r5,168(sp)
1800301c:	182f883a 	mov	r23,r3
18003020:	283df10e 	bge	r5,zero,180027e8 <__alt_data_end+0xf80027e8>
18003024:	8c403fcc 	andi	r17,r17,255
18003028:	017fffc4 	movi	r5,-1
1800302c:	8c40201c 	xori	r17,r17,128
18003030:	d9402a15 	stw	r5,168(sp)
18003034:	8c7fe004 	addi	r17,r17,-128
18003038:	0037d806 	br	18000f9c <__alt_data_end+0xf8000f9c>
1800303c:	9080004c 	andi	r2,r18,1
18003040:	0039883a 	mov	fp,zero
18003044:	10000726 	beq	r2,zero,18003064 <___svfprintf_internal_r+0x221c>
18003048:	d8c02817 	ldw	r3,160(sp)
1800304c:	dc001dc4 	addi	r16,sp,119
18003050:	00800c04 	movi	r2,48
18003054:	1c07c83a 	sub	r3,r3,r16
18003058:	d8801dc5 	stb	r2,119(sp)
1800305c:	d8c02b15 	stw	r3,172(sp)
18003060:	00393106 	br	18001528 <__alt_data_end+0xf8001528>
18003064:	d8002b15 	stw	zero,172(sp)
18003068:	dc001e04 	addi	r16,sp,120
1800306c:	00392e06 	br	18001528 <__alt_data_end+0xf8001528>
18003070:	0005883a 	mov	r2,zero
18003074:	003e3306 	br	18002944 <__alt_data_end+0xf8002944>
18003078:	dd802617 	ldw	r22,152(sp)
1800307c:	003f0706 	br	18002c9c <__alt_data_end+0xf8002c9c>
18003080:	d8c02b03 	ldbu	r3,172(sp)
18003084:	d8c02785 	stb	r3,158(sp)
18003088:	003a3506 	br	18001960 <__alt_data_end+0xf8001960>
1800308c:	d8c02b03 	ldbu	r3,172(sp)
18003090:	d8c02785 	stb	r3,158(sp)
18003094:	003a1706 	br	180018f4 <__alt_data_end+0xf80018f4>
18003098:	0005883a 	mov	r2,zero
1800309c:	003f5d06 	br	18002e14 <__alt_data_end+0xf8002e14>
180030a0:	d8c02b03 	ldbu	r3,172(sp)
180030a4:	d8c02785 	stb	r3,158(sp)
180030a8:	0038f306 	br	18001478 <__alt_data_end+0xf8001478>
180030ac:	d8c02b03 	ldbu	r3,172(sp)
180030b0:	d8c02785 	stb	r3,158(sp)
180030b4:	0038be06 	br	180013b0 <__alt_data_end+0xf80013b0>
180030b8:	d8802344 	addi	r2,sp,141
180030bc:	003f0506 	br	18002cd4 <__alt_data_end+0xf8002cd4>
180030c0:	d8c02b03 	ldbu	r3,172(sp)
180030c4:	d8c02785 	stb	r3,158(sp)
180030c8:	00388b06 	br	180012f8 <__alt_data_end+0xf80012f8>
180030cc:	d8c02b03 	ldbu	r3,172(sp)
180030d0:	d8c02785 	stb	r3,158(sp)
180030d4:	003ad706 	br	18001c34 <__alt_data_end+0xf8001c34>
180030d8:	d9403917 	ldw	r5,228(sp)
180030dc:	00800304 	movi	r2,12
180030e0:	28800015 	stw	r2,0(r5)
180030e4:	00bfffc4 	movi	r2,-1
180030e8:	00384306 	br	180011f8 <__alt_data_end+0xf80011f8>
180030ec:	d8c02b03 	ldbu	r3,172(sp)
180030f0:	d8c02785 	stb	r3,158(sp)
180030f4:	003ab606 	br	18001bd0 <__alt_data_end+0xf8001bd0>
180030f8:	d8c02b03 	ldbu	r3,172(sp)
180030fc:	d8c02785 	stb	r3,158(sp)
18003100:	003a8906 	br	18001b28 <__alt_data_end+0xf8001b28>

18003104 <quorem>:
18003104:	defff204 	addi	sp,sp,-56
18003108:	ddc00b15 	stw	r23,44(sp)
1800310c:	20800417 	ldw	r2,16(r4)
18003110:	2dc00417 	ldw	r23,16(r5)
18003114:	dfc00d15 	stw	ra,52(sp)
18003118:	df000c15 	stw	fp,48(sp)
1800311c:	dd800a15 	stw	r22,40(sp)
18003120:	dd400915 	stw	r21,36(sp)
18003124:	dd000815 	stw	r20,32(sp)
18003128:	dcc00715 	stw	r19,28(sp)
1800312c:	dc800615 	stw	r18,24(sp)
18003130:	dc400515 	stw	r17,20(sp)
18003134:	dc000415 	stw	r16,16(sp)
18003138:	15c07a16 	blt	r2,r23,18003324 <quorem+0x220>
1800313c:	bdffffc4 	addi	r23,r23,-1
18003140:	bde9883a 	add	r20,r23,r23
18003144:	28c00504 	addi	r3,r5,20
18003148:	a529883a 	add	r20,r20,r20
1800314c:	1d39883a 	add	fp,r3,r20
18003150:	24c00504 	addi	r19,r4,20
18003154:	d9400215 	stw	r5,8(sp)
18003158:	9d29883a 	add	r20,r19,r20
1800315c:	e1400017 	ldw	r5,0(fp)
18003160:	d9000015 	stw	r4,0(sp)
18003164:	a1000017 	ldw	r4,0(r20)
18003168:	29400044 	addi	r5,r5,1
1800316c:	d8c00115 	stw	r3,4(sp)
18003170:	dd000315 	stw	r20,12(sp)
18003174:	8000ab80 	call	18000ab8 <__udivsi3>
18003178:	1025883a 	mov	r18,r2
1800317c:	10003026 	beq	r2,zero,18003240 <quorem+0x13c>
18003180:	dc400117 	ldw	r17,4(sp)
18003184:	9829883a 	mov	r20,r19
18003188:	002d883a 	mov	r22,zero
1800318c:	0021883a 	mov	r16,zero
18003190:	8d400017 	ldw	r21,0(r17)
18003194:	900b883a 	mov	r5,r18
18003198:	8c400104 	addi	r17,r17,4
1800319c:	a93fffcc 	andi	r4,r21,65535
180031a0:	8000b740 	call	18000b74 <__mulsi3>
180031a4:	a808d43a 	srli	r4,r21,16
180031a8:	900b883a 	mov	r5,r18
180031ac:	15ad883a 	add	r22,r2,r22
180031b0:	8000b740 	call	18000b74 <__mulsi3>
180031b4:	a1000017 	ldw	r4,0(r20)
180031b8:	b00cd43a 	srli	r6,r22,16
180031bc:	b0ffffcc 	andi	r3,r22,65535
180031c0:	217fffcc 	andi	r5,r4,65535
180031c4:	2c21883a 	add	r16,r5,r16
180031c8:	80c7c83a 	sub	r3,r16,r3
180031cc:	2008d43a 	srli	r4,r4,16
180031d0:	1185883a 	add	r2,r2,r6
180031d4:	1821d43a 	srai	r16,r3,16
180031d8:	117fffcc 	andi	r5,r2,65535
180031dc:	2149c83a 	sub	r4,r4,r5
180031e0:	2421883a 	add	r16,r4,r16
180031e4:	8008943a 	slli	r4,r16,16
180031e8:	18ffffcc 	andi	r3,r3,65535
180031ec:	102cd43a 	srli	r22,r2,16
180031f0:	20c8b03a 	or	r4,r4,r3
180031f4:	a1000015 	stw	r4,0(r20)
180031f8:	8021d43a 	srai	r16,r16,16
180031fc:	a5000104 	addi	r20,r20,4
18003200:	e47fe32e 	bgeu	fp,r17,18003190 <__alt_data_end+0xf8003190>
18003204:	d8c00317 	ldw	r3,12(sp)
18003208:	18800017 	ldw	r2,0(r3)
1800320c:	10000c1e 	bne	r2,zero,18003240 <quorem+0x13c>
18003210:	18bfff04 	addi	r2,r3,-4
18003214:	9880082e 	bgeu	r19,r2,18003238 <quorem+0x134>
18003218:	18ffff17 	ldw	r3,-4(r3)
1800321c:	18000326 	beq	r3,zero,1800322c <quorem+0x128>
18003220:	00000506 	br	18003238 <quorem+0x134>
18003224:	10c00017 	ldw	r3,0(r2)
18003228:	1800031e 	bne	r3,zero,18003238 <quorem+0x134>
1800322c:	10bfff04 	addi	r2,r2,-4
18003230:	bdffffc4 	addi	r23,r23,-1
18003234:	98bffb36 	bltu	r19,r2,18003224 <__alt_data_end+0xf8003224>
18003238:	d8c00017 	ldw	r3,0(sp)
1800323c:	1dc00415 	stw	r23,16(r3)
18003240:	d9400217 	ldw	r5,8(sp)
18003244:	d9000017 	ldw	r4,0(sp)
18003248:	8006ad00 	call	18006ad0 <__mcmp>
1800324c:	10002816 	blt	r2,zero,180032f0 <quorem+0x1ec>
18003250:	dc400117 	ldw	r17,4(sp)
18003254:	94800044 	addi	r18,r18,1
18003258:	980d883a 	mov	r6,r19
1800325c:	0007883a 	mov	r3,zero
18003260:	31000017 	ldw	r4,0(r6)
18003264:	89400017 	ldw	r5,0(r17)
18003268:	31800104 	addi	r6,r6,4
1800326c:	20bfffcc 	andi	r2,r4,65535
18003270:	10c7883a 	add	r3,r2,r3
18003274:	28bfffcc 	andi	r2,r5,65535
18003278:	1885c83a 	sub	r2,r3,r2
1800327c:	280ad43a 	srli	r5,r5,16
18003280:	2008d43a 	srli	r4,r4,16
18003284:	1007d43a 	srai	r3,r2,16
18003288:	10bfffcc 	andi	r2,r2,65535
1800328c:	2149c83a 	sub	r4,r4,r5
18003290:	20c9883a 	add	r4,r4,r3
18003294:	200a943a 	slli	r5,r4,16
18003298:	8c400104 	addi	r17,r17,4
1800329c:	2007d43a 	srai	r3,r4,16
180032a0:	2884b03a 	or	r2,r5,r2
180032a4:	30bfff15 	stw	r2,-4(r6)
180032a8:	e47fed2e 	bgeu	fp,r17,18003260 <__alt_data_end+0xf8003260>
180032ac:	bdc5883a 	add	r2,r23,r23
180032b0:	1085883a 	add	r2,r2,r2
180032b4:	9887883a 	add	r3,r19,r2
180032b8:	18800017 	ldw	r2,0(r3)
180032bc:	10000c1e 	bne	r2,zero,180032f0 <quorem+0x1ec>
180032c0:	18bfff04 	addi	r2,r3,-4
180032c4:	9880082e 	bgeu	r19,r2,180032e8 <quorem+0x1e4>
180032c8:	18ffff17 	ldw	r3,-4(r3)
180032cc:	18000326 	beq	r3,zero,180032dc <quorem+0x1d8>
180032d0:	00000506 	br	180032e8 <quorem+0x1e4>
180032d4:	10c00017 	ldw	r3,0(r2)
180032d8:	1800031e 	bne	r3,zero,180032e8 <quorem+0x1e4>
180032dc:	10bfff04 	addi	r2,r2,-4
180032e0:	bdffffc4 	addi	r23,r23,-1
180032e4:	98bffb36 	bltu	r19,r2,180032d4 <__alt_data_end+0xf80032d4>
180032e8:	d8c00017 	ldw	r3,0(sp)
180032ec:	1dc00415 	stw	r23,16(r3)
180032f0:	9005883a 	mov	r2,r18
180032f4:	dfc00d17 	ldw	ra,52(sp)
180032f8:	df000c17 	ldw	fp,48(sp)
180032fc:	ddc00b17 	ldw	r23,44(sp)
18003300:	dd800a17 	ldw	r22,40(sp)
18003304:	dd400917 	ldw	r21,36(sp)
18003308:	dd000817 	ldw	r20,32(sp)
1800330c:	dcc00717 	ldw	r19,28(sp)
18003310:	dc800617 	ldw	r18,24(sp)
18003314:	dc400517 	ldw	r17,20(sp)
18003318:	dc000417 	ldw	r16,16(sp)
1800331c:	dec00e04 	addi	sp,sp,56
18003320:	f800283a 	ret
18003324:	0005883a 	mov	r2,zero
18003328:	003ff206 	br	180032f4 <__alt_data_end+0xf80032f4>

1800332c <_dtoa_r>:
1800332c:	20801017 	ldw	r2,64(r4)
18003330:	deffde04 	addi	sp,sp,-136
18003334:	df002015 	stw	fp,128(sp)
18003338:	dcc01b15 	stw	r19,108(sp)
1800333c:	dc801a15 	stw	r18,104(sp)
18003340:	dc401915 	stw	r17,100(sp)
18003344:	dc001815 	stw	r16,96(sp)
18003348:	dfc02115 	stw	ra,132(sp)
1800334c:	ddc01f15 	stw	r23,124(sp)
18003350:	dd801e15 	stw	r22,120(sp)
18003354:	dd401d15 	stw	r21,116(sp)
18003358:	dd001c15 	stw	r20,112(sp)
1800335c:	d9c00315 	stw	r7,12(sp)
18003360:	2039883a 	mov	fp,r4
18003364:	3023883a 	mov	r17,r6
18003368:	2825883a 	mov	r18,r5
1800336c:	dc002417 	ldw	r16,144(sp)
18003370:	3027883a 	mov	r19,r6
18003374:	10000826 	beq	r2,zero,18003398 <_dtoa_r+0x6c>
18003378:	21801117 	ldw	r6,68(r4)
1800337c:	00c00044 	movi	r3,1
18003380:	100b883a 	mov	r5,r2
18003384:	1986983a 	sll	r3,r3,r6
18003388:	11800115 	stw	r6,4(r2)
1800338c:	10c00215 	stw	r3,8(r2)
18003390:	80061f40 	call	180061f4 <_Bfree>
18003394:	e0001015 	stw	zero,64(fp)
18003398:	88002e16 	blt	r17,zero,18003454 <_dtoa_r+0x128>
1800339c:	80000015 	stw	zero,0(r16)
180033a0:	889ffc2c 	andhi	r2,r17,32752
180033a4:	00dffc34 	movhi	r3,32752
180033a8:	10c01c26 	beq	r2,r3,1800341c <_dtoa_r+0xf0>
180033ac:	000d883a 	mov	r6,zero
180033b0:	000f883a 	mov	r7,zero
180033b4:	9009883a 	mov	r4,r18
180033b8:	980b883a 	mov	r5,r19
180033bc:	800bcf00 	call	1800bcf0 <__eqdf2>
180033c0:	10002b1e 	bne	r2,zero,18003470 <_dtoa_r+0x144>
180033c4:	d9c02317 	ldw	r7,140(sp)
180033c8:	00800044 	movi	r2,1
180033cc:	38800015 	stw	r2,0(r7)
180033d0:	d8802517 	ldw	r2,148(sp)
180033d4:	10019e26 	beq	r2,zero,18003a50 <_dtoa_r+0x724>
180033d8:	d8c02517 	ldw	r3,148(sp)
180033dc:	00860074 	movhi	r2,6145
180033e0:	10bf0844 	addi	r2,r2,-991
180033e4:	18800015 	stw	r2,0(r3)
180033e8:	10bfffc4 	addi	r2,r2,-1
180033ec:	dfc02117 	ldw	ra,132(sp)
180033f0:	df002017 	ldw	fp,128(sp)
180033f4:	ddc01f17 	ldw	r23,124(sp)
180033f8:	dd801e17 	ldw	r22,120(sp)
180033fc:	dd401d17 	ldw	r21,116(sp)
18003400:	dd001c17 	ldw	r20,112(sp)
18003404:	dcc01b17 	ldw	r19,108(sp)
18003408:	dc801a17 	ldw	r18,104(sp)
1800340c:	dc401917 	ldw	r17,100(sp)
18003410:	dc001817 	ldw	r16,96(sp)
18003414:	dec02204 	addi	sp,sp,136
18003418:	f800283a 	ret
1800341c:	d8c02317 	ldw	r3,140(sp)
18003420:	0089c3c4 	movi	r2,9999
18003424:	18800015 	stw	r2,0(r3)
18003428:	90017726 	beq	r18,zero,18003a08 <_dtoa_r+0x6dc>
1800342c:	00860074 	movhi	r2,6145
18003430:	10bf1404 	addi	r2,r2,-944
18003434:	d9002517 	ldw	r4,148(sp)
18003438:	203fec26 	beq	r4,zero,180033ec <__alt_data_end+0xf80033ec>
1800343c:	10c000c7 	ldb	r3,3(r2)
18003440:	1801781e 	bne	r3,zero,18003a24 <_dtoa_r+0x6f8>
18003444:	10c000c4 	addi	r3,r2,3
18003448:	d9802517 	ldw	r6,148(sp)
1800344c:	30c00015 	stw	r3,0(r6)
18003450:	003fe606 	br	180033ec <__alt_data_end+0xf80033ec>
18003454:	04e00034 	movhi	r19,32768
18003458:	9cffffc4 	addi	r19,r19,-1
1800345c:	00800044 	movi	r2,1
18003460:	8ce6703a 	and	r19,r17,r19
18003464:	80800015 	stw	r2,0(r16)
18003468:	9823883a 	mov	r17,r19
1800346c:	003fcc06 	br	180033a0 <__alt_data_end+0xf80033a0>
18003470:	d8800204 	addi	r2,sp,8
18003474:	d8800015 	stw	r2,0(sp)
18003478:	d9c00104 	addi	r7,sp,4
1800347c:	900b883a 	mov	r5,r18
18003480:	980d883a 	mov	r6,r19
18003484:	e009883a 	mov	r4,fp
18003488:	8820d53a 	srli	r16,r17,20
1800348c:	8006e9c0 	call	18006e9c <__d2b>
18003490:	d8800915 	stw	r2,36(sp)
18003494:	8001651e 	bne	r16,zero,18003a2c <_dtoa_r+0x700>
18003498:	dd800217 	ldw	r22,8(sp)
1800349c:	dc000117 	ldw	r16,4(sp)
180034a0:	00800804 	movi	r2,32
180034a4:	b421883a 	add	r16,r22,r16
180034a8:	80c10c84 	addi	r3,r16,1074
180034ac:	10c2d10e 	bge	r2,r3,18003ff4 <_dtoa_r+0xcc8>
180034b0:	00801004 	movi	r2,64
180034b4:	81010484 	addi	r4,r16,1042
180034b8:	10c7c83a 	sub	r3,r2,r3
180034bc:	9108d83a 	srl	r4,r18,r4
180034c0:	88e2983a 	sll	r17,r17,r3
180034c4:	2448b03a 	or	r4,r4,r17
180034c8:	800d20c0 	call	1800d20c <__floatunsidf>
180034cc:	017f8434 	movhi	r5,65040
180034d0:	01800044 	movi	r6,1
180034d4:	1009883a 	mov	r4,r2
180034d8:	194b883a 	add	r5,r3,r5
180034dc:	843fffc4 	addi	r16,r16,-1
180034e0:	d9801115 	stw	r6,68(sp)
180034e4:	000d883a 	mov	r6,zero
180034e8:	01cffe34 	movhi	r7,16376
180034ec:	800c7b40 	call	1800c7b4 <__subdf3>
180034f0:	0198dbf4 	movhi	r6,25455
180034f4:	01cff4f4 	movhi	r7,16339
180034f8:	3190d844 	addi	r6,r6,17249
180034fc:	39e1e9c4 	addi	r7,r7,-30809
18003500:	1009883a 	mov	r4,r2
18003504:	180b883a 	mov	r5,r3
18003508:	800bf480 	call	1800bf48 <__muldf3>
1800350c:	01a2d874 	movhi	r6,35681
18003510:	01cff1f4 	movhi	r7,16327
18003514:	31b22cc4 	addi	r6,r6,-14157
18003518:	39e28a04 	addi	r7,r7,-30168
1800351c:	180b883a 	mov	r5,r3
18003520:	1009883a 	mov	r4,r2
18003524:	800aa740 	call	1800aa74 <__adddf3>
18003528:	8009883a 	mov	r4,r16
1800352c:	1029883a 	mov	r20,r2
18003530:	1823883a 	mov	r17,r3
18003534:	800d1300 	call	1800d130 <__floatsidf>
18003538:	019427f4 	movhi	r6,20639
1800353c:	01cff4f4 	movhi	r7,16339
18003540:	319e7ec4 	addi	r6,r6,31227
18003544:	39d104c4 	addi	r7,r7,17427
18003548:	1009883a 	mov	r4,r2
1800354c:	180b883a 	mov	r5,r3
18003550:	800bf480 	call	1800bf48 <__muldf3>
18003554:	100d883a 	mov	r6,r2
18003558:	180f883a 	mov	r7,r3
1800355c:	a009883a 	mov	r4,r20
18003560:	880b883a 	mov	r5,r17
18003564:	800aa740 	call	1800aa74 <__adddf3>
18003568:	1009883a 	mov	r4,r2
1800356c:	180b883a 	mov	r5,r3
18003570:	1029883a 	mov	r20,r2
18003574:	1823883a 	mov	r17,r3
18003578:	800d0b00 	call	1800d0b0 <__fixdfsi>
1800357c:	000d883a 	mov	r6,zero
18003580:	000f883a 	mov	r7,zero
18003584:	a009883a 	mov	r4,r20
18003588:	880b883a 	mov	r5,r17
1800358c:	d8800515 	stw	r2,20(sp)
18003590:	800be540 	call	1800be54 <__ledf2>
18003594:	10028716 	blt	r2,zero,18003fb4 <_dtoa_r+0xc88>
18003598:	d8c00517 	ldw	r3,20(sp)
1800359c:	00800584 	movi	r2,22
180035a0:	10c27536 	bltu	r2,r3,18003f78 <_dtoa_r+0xc4c>
180035a4:	180490fa 	slli	r2,r3,3
180035a8:	00c60074 	movhi	r3,6145
180035ac:	18ff3004 	addi	r3,r3,-832
180035b0:	1885883a 	add	r2,r3,r2
180035b4:	11000017 	ldw	r4,0(r2)
180035b8:	11400117 	ldw	r5,4(r2)
180035bc:	900d883a 	mov	r6,r18
180035c0:	980f883a 	mov	r7,r19
180035c4:	800bd780 	call	1800bd78 <__gedf2>
180035c8:	00828d0e 	bge	zero,r2,18004000 <_dtoa_r+0xcd4>
180035cc:	d9000517 	ldw	r4,20(sp)
180035d0:	d8000e15 	stw	zero,56(sp)
180035d4:	213fffc4 	addi	r4,r4,-1
180035d8:	d9000515 	stw	r4,20(sp)
180035dc:	b42dc83a 	sub	r22,r22,r16
180035e0:	b5bfffc4 	addi	r22,r22,-1
180035e4:	b0026f16 	blt	r22,zero,18003fa4 <_dtoa_r+0xc78>
180035e8:	d8000815 	stw	zero,32(sp)
180035ec:	d9c00517 	ldw	r7,20(sp)
180035f0:	38026416 	blt	r7,zero,18003f84 <_dtoa_r+0xc58>
180035f4:	b1ed883a 	add	r22,r22,r7
180035f8:	d9c00d15 	stw	r7,52(sp)
180035fc:	d8000a15 	stw	zero,40(sp)
18003600:	d9800317 	ldw	r6,12(sp)
18003604:	00800244 	movi	r2,9
18003608:	11811436 	bltu	r2,r6,18003a5c <_dtoa_r+0x730>
1800360c:	00800144 	movi	r2,5
18003610:	1184e10e 	bge	r2,r6,18004998 <_dtoa_r+0x166c>
18003614:	31bfff04 	addi	r6,r6,-4
18003618:	d9800315 	stw	r6,12(sp)
1800361c:	0023883a 	mov	r17,zero
18003620:	d9800317 	ldw	r6,12(sp)
18003624:	008000c4 	movi	r2,3
18003628:	30836726 	beq	r6,r2,180043c8 <_dtoa_r+0x109c>
1800362c:	1183410e 	bge	r2,r6,18004334 <_dtoa_r+0x1008>
18003630:	d9c00317 	ldw	r7,12(sp)
18003634:	00800104 	movi	r2,4
18003638:	38827c26 	beq	r7,r2,1800402c <_dtoa_r+0xd00>
1800363c:	00800144 	movi	r2,5
18003640:	3884c41e 	bne	r7,r2,18004954 <_dtoa_r+0x1628>
18003644:	00800044 	movi	r2,1
18003648:	d8800b15 	stw	r2,44(sp)
1800364c:	d8c00517 	ldw	r3,20(sp)
18003650:	d9002217 	ldw	r4,136(sp)
18003654:	1907883a 	add	r3,r3,r4
18003658:	19800044 	addi	r6,r3,1
1800365c:	d8c00c15 	stw	r3,48(sp)
18003660:	d9800615 	stw	r6,24(sp)
18003664:	0183a40e 	bge	zero,r6,180044f8 <_dtoa_r+0x11cc>
18003668:	d9800617 	ldw	r6,24(sp)
1800366c:	3021883a 	mov	r16,r6
18003670:	e0001115 	stw	zero,68(fp)
18003674:	008005c4 	movi	r2,23
18003678:	1184c92e 	bgeu	r2,r6,180049a0 <_dtoa_r+0x1674>
1800367c:	00c00044 	movi	r3,1
18003680:	00800104 	movi	r2,4
18003684:	1085883a 	add	r2,r2,r2
18003688:	11000504 	addi	r4,r2,20
1800368c:	180b883a 	mov	r5,r3
18003690:	18c00044 	addi	r3,r3,1
18003694:	313ffb2e 	bgeu	r6,r4,18003684 <__alt_data_end+0xf8003684>
18003698:	e1401115 	stw	r5,68(fp)
1800369c:	e009883a 	mov	r4,fp
180036a0:	800614c0 	call	1800614c <_Balloc>
180036a4:	d8800715 	stw	r2,28(sp)
180036a8:	e0801015 	stw	r2,64(fp)
180036ac:	00800384 	movi	r2,14
180036b0:	1400f736 	bltu	r2,r16,18003a90 <_dtoa_r+0x764>
180036b4:	8800f626 	beq	r17,zero,18003a90 <_dtoa_r+0x764>
180036b8:	d9c00517 	ldw	r7,20(sp)
180036bc:	01c39a0e 	bge	zero,r7,18004528 <_dtoa_r+0x11fc>
180036c0:	388003cc 	andi	r2,r7,15
180036c4:	100490fa 	slli	r2,r2,3
180036c8:	382bd13a 	srai	r21,r7,4
180036cc:	00c60074 	movhi	r3,6145
180036d0:	18ff3004 	addi	r3,r3,-832
180036d4:	1885883a 	add	r2,r3,r2
180036d8:	a8c0040c 	andi	r3,r21,16
180036dc:	12400017 	ldw	r9,0(r2)
180036e0:	12000117 	ldw	r8,4(r2)
180036e4:	18037926 	beq	r3,zero,180044cc <_dtoa_r+0x11a0>
180036e8:	00860074 	movhi	r2,6145
180036ec:	10bf2604 	addi	r2,r2,-872
180036f0:	11800817 	ldw	r6,32(r2)
180036f4:	11c00917 	ldw	r7,36(r2)
180036f8:	9009883a 	mov	r4,r18
180036fc:	980b883a 	mov	r5,r19
18003700:	da001715 	stw	r8,92(sp)
18003704:	da401615 	stw	r9,88(sp)
18003708:	800b3200 	call	1800b320 <__divdf3>
1800370c:	da001717 	ldw	r8,92(sp)
18003710:	da401617 	ldw	r9,88(sp)
18003714:	ad4003cc 	andi	r21,r21,15
18003718:	040000c4 	movi	r16,3
1800371c:	1023883a 	mov	r17,r2
18003720:	1829883a 	mov	r20,r3
18003724:	a8001126 	beq	r21,zero,1800376c <_dtoa_r+0x440>
18003728:	05c60074 	movhi	r23,6145
1800372c:	bdff2604 	addi	r23,r23,-872
18003730:	4805883a 	mov	r2,r9
18003734:	4007883a 	mov	r3,r8
18003738:	a980004c 	andi	r6,r21,1
1800373c:	1009883a 	mov	r4,r2
18003740:	a82bd07a 	srai	r21,r21,1
18003744:	180b883a 	mov	r5,r3
18003748:	30000426 	beq	r6,zero,1800375c <_dtoa_r+0x430>
1800374c:	b9800017 	ldw	r6,0(r23)
18003750:	b9c00117 	ldw	r7,4(r23)
18003754:	84000044 	addi	r16,r16,1
18003758:	800bf480 	call	1800bf48 <__muldf3>
1800375c:	bdc00204 	addi	r23,r23,8
18003760:	a83ff51e 	bne	r21,zero,18003738 <__alt_data_end+0xf8003738>
18003764:	1013883a 	mov	r9,r2
18003768:	1811883a 	mov	r8,r3
1800376c:	480d883a 	mov	r6,r9
18003770:	400f883a 	mov	r7,r8
18003774:	8809883a 	mov	r4,r17
18003778:	a00b883a 	mov	r5,r20
1800377c:	800b3200 	call	1800b320 <__divdf3>
18003780:	d8800f15 	stw	r2,60(sp)
18003784:	d8c01015 	stw	r3,64(sp)
18003788:	d8c00e17 	ldw	r3,56(sp)
1800378c:	18000626 	beq	r3,zero,180037a8 <_dtoa_r+0x47c>
18003790:	d9000f17 	ldw	r4,60(sp)
18003794:	d9401017 	ldw	r5,64(sp)
18003798:	000d883a 	mov	r6,zero
1800379c:	01cffc34 	movhi	r7,16368
180037a0:	800be540 	call	1800be54 <__ledf2>
180037a4:	10040b16 	blt	r2,zero,180047d4 <_dtoa_r+0x14a8>
180037a8:	8009883a 	mov	r4,r16
180037ac:	800d1300 	call	1800d130 <__floatsidf>
180037b0:	d9800f17 	ldw	r6,60(sp)
180037b4:	d9c01017 	ldw	r7,64(sp)
180037b8:	1009883a 	mov	r4,r2
180037bc:	180b883a 	mov	r5,r3
180037c0:	800bf480 	call	1800bf48 <__muldf3>
180037c4:	000d883a 	mov	r6,zero
180037c8:	01d00734 	movhi	r7,16412
180037cc:	1009883a 	mov	r4,r2
180037d0:	180b883a 	mov	r5,r3
180037d4:	800aa740 	call	1800aa74 <__adddf3>
180037d8:	1021883a 	mov	r16,r2
180037dc:	d8800617 	ldw	r2,24(sp)
180037e0:	047f3034 	movhi	r17,64704
180037e4:	1c63883a 	add	r17,r3,r17
180037e8:	10031826 	beq	r2,zero,1800444c <_dtoa_r+0x1120>
180037ec:	d8c00517 	ldw	r3,20(sp)
180037f0:	db000617 	ldw	r12,24(sp)
180037f4:	d8c01315 	stw	r3,76(sp)
180037f8:	d9000b17 	ldw	r4,44(sp)
180037fc:	20038f26 	beq	r4,zero,1800463c <_dtoa_r+0x1310>
18003800:	60bfffc4 	addi	r2,r12,-1
18003804:	100490fa 	slli	r2,r2,3
18003808:	00c60074 	movhi	r3,6145
1800380c:	18ff3004 	addi	r3,r3,-832
18003810:	1885883a 	add	r2,r3,r2
18003814:	11800017 	ldw	r6,0(r2)
18003818:	11c00117 	ldw	r7,4(r2)
1800381c:	d8800717 	ldw	r2,28(sp)
18003820:	0009883a 	mov	r4,zero
18003824:	014ff834 	movhi	r5,16352
18003828:	db001615 	stw	r12,88(sp)
1800382c:	15c00044 	addi	r23,r2,1
18003830:	800b3200 	call	1800b320 <__divdf3>
18003834:	800d883a 	mov	r6,r16
18003838:	880f883a 	mov	r7,r17
1800383c:	1009883a 	mov	r4,r2
18003840:	180b883a 	mov	r5,r3
18003844:	800c7b40 	call	1800c7b4 <__subdf3>
18003848:	d9401017 	ldw	r5,64(sp)
1800384c:	d9000f17 	ldw	r4,60(sp)
18003850:	102b883a 	mov	r21,r2
18003854:	d8c01215 	stw	r3,72(sp)
18003858:	800d0b00 	call	1800d0b0 <__fixdfsi>
1800385c:	1009883a 	mov	r4,r2
18003860:	1029883a 	mov	r20,r2
18003864:	800d1300 	call	1800d130 <__floatsidf>
18003868:	d9000f17 	ldw	r4,60(sp)
1800386c:	d9401017 	ldw	r5,64(sp)
18003870:	100d883a 	mov	r6,r2
18003874:	180f883a 	mov	r7,r3
18003878:	800c7b40 	call	1800c7b4 <__subdf3>
1800387c:	1823883a 	mov	r17,r3
18003880:	d8c00717 	ldw	r3,28(sp)
18003884:	d9401217 	ldw	r5,72(sp)
18003888:	a2000c04 	addi	r8,r20,48
1800388c:	1021883a 	mov	r16,r2
18003890:	1a000005 	stb	r8,0(r3)
18003894:	800d883a 	mov	r6,r16
18003898:	880f883a 	mov	r7,r17
1800389c:	a809883a 	mov	r4,r21
180038a0:	4029883a 	mov	r20,r8
180038a4:	800bd780 	call	1800bd78 <__gedf2>
180038a8:	00841d16 	blt	zero,r2,18004920 <_dtoa_r+0x15f4>
180038ac:	800d883a 	mov	r6,r16
180038b0:	880f883a 	mov	r7,r17
180038b4:	0009883a 	mov	r4,zero
180038b8:	014ffc34 	movhi	r5,16368
180038bc:	800c7b40 	call	1800c7b4 <__subdf3>
180038c0:	d9401217 	ldw	r5,72(sp)
180038c4:	100d883a 	mov	r6,r2
180038c8:	180f883a 	mov	r7,r3
180038cc:	a809883a 	mov	r4,r21
180038d0:	800bd780 	call	1800bd78 <__gedf2>
180038d4:	db001617 	ldw	r12,88(sp)
180038d8:	00840e16 	blt	zero,r2,18004914 <_dtoa_r+0x15e8>
180038dc:	00800044 	movi	r2,1
180038e0:	13006b0e 	bge	r2,r12,18003a90 <_dtoa_r+0x764>
180038e4:	d9000717 	ldw	r4,28(sp)
180038e8:	dd800f15 	stw	r22,60(sp)
180038ec:	dcc01015 	stw	r19,64(sp)
180038f0:	2319883a 	add	r12,r4,r12
180038f4:	dcc01217 	ldw	r19,72(sp)
180038f8:	602d883a 	mov	r22,r12
180038fc:	dc801215 	stw	r18,72(sp)
18003900:	b825883a 	mov	r18,r23
18003904:	00000906 	br	1800392c <_dtoa_r+0x600>
18003908:	800c7b40 	call	1800c7b4 <__subdf3>
1800390c:	a80d883a 	mov	r6,r21
18003910:	980f883a 	mov	r7,r19
18003914:	1009883a 	mov	r4,r2
18003918:	180b883a 	mov	r5,r3
1800391c:	800be540 	call	1800be54 <__ledf2>
18003920:	1003e816 	blt	r2,zero,180048c4 <_dtoa_r+0x1598>
18003924:	b825883a 	mov	r18,r23
18003928:	bd83e926 	beq	r23,r22,180048d0 <_dtoa_r+0x15a4>
1800392c:	a809883a 	mov	r4,r21
18003930:	980b883a 	mov	r5,r19
18003934:	000d883a 	mov	r6,zero
18003938:	01d00934 	movhi	r7,16420
1800393c:	800bf480 	call	1800bf48 <__muldf3>
18003940:	000d883a 	mov	r6,zero
18003944:	01d00934 	movhi	r7,16420
18003948:	8009883a 	mov	r4,r16
1800394c:	880b883a 	mov	r5,r17
18003950:	102b883a 	mov	r21,r2
18003954:	1827883a 	mov	r19,r3
18003958:	800bf480 	call	1800bf48 <__muldf3>
1800395c:	180b883a 	mov	r5,r3
18003960:	1009883a 	mov	r4,r2
18003964:	1821883a 	mov	r16,r3
18003968:	1023883a 	mov	r17,r2
1800396c:	800d0b00 	call	1800d0b0 <__fixdfsi>
18003970:	1009883a 	mov	r4,r2
18003974:	1029883a 	mov	r20,r2
18003978:	800d1300 	call	1800d130 <__floatsidf>
1800397c:	8809883a 	mov	r4,r17
18003980:	800b883a 	mov	r5,r16
18003984:	100d883a 	mov	r6,r2
18003988:	180f883a 	mov	r7,r3
1800398c:	800c7b40 	call	1800c7b4 <__subdf3>
18003990:	a5000c04 	addi	r20,r20,48
18003994:	a80d883a 	mov	r6,r21
18003998:	980f883a 	mov	r7,r19
1800399c:	1009883a 	mov	r4,r2
180039a0:	180b883a 	mov	r5,r3
180039a4:	95000005 	stb	r20,0(r18)
180039a8:	1021883a 	mov	r16,r2
180039ac:	1823883a 	mov	r17,r3
180039b0:	800be540 	call	1800be54 <__ledf2>
180039b4:	bdc00044 	addi	r23,r23,1
180039b8:	800d883a 	mov	r6,r16
180039bc:	880f883a 	mov	r7,r17
180039c0:	0009883a 	mov	r4,zero
180039c4:	014ffc34 	movhi	r5,16368
180039c8:	103fcf0e 	bge	r2,zero,18003908 <__alt_data_end+0xf8003908>
180039cc:	d8c01317 	ldw	r3,76(sp)
180039d0:	d8c00515 	stw	r3,20(sp)
180039d4:	d9400917 	ldw	r5,36(sp)
180039d8:	e009883a 	mov	r4,fp
180039dc:	80061f40 	call	180061f4 <_Bfree>
180039e0:	d9000517 	ldw	r4,20(sp)
180039e4:	d9802317 	ldw	r6,140(sp)
180039e8:	d9c02517 	ldw	r7,148(sp)
180039ec:	b8000005 	stb	zero,0(r23)
180039f0:	20800044 	addi	r2,r4,1
180039f4:	30800015 	stw	r2,0(r6)
180039f8:	3802aa26 	beq	r7,zero,180044a4 <_dtoa_r+0x1178>
180039fc:	3dc00015 	stw	r23,0(r7)
18003a00:	d8800717 	ldw	r2,28(sp)
18003a04:	003e7906 	br	180033ec <__alt_data_end+0xf80033ec>
18003a08:	00800434 	movhi	r2,16
18003a0c:	10bfffc4 	addi	r2,r2,-1
18003a10:	88a2703a 	and	r17,r17,r2
18003a14:	883e851e 	bne	r17,zero,1800342c <__alt_data_end+0xf800342c>
18003a18:	00860074 	movhi	r2,6145
18003a1c:	10bf1104 	addi	r2,r2,-956
18003a20:	003e8406 	br	18003434 <__alt_data_end+0xf8003434>
18003a24:	10c00204 	addi	r3,r2,8
18003a28:	003e8706 	br	18003448 <__alt_data_end+0xf8003448>
18003a2c:	01400434 	movhi	r5,16
18003a30:	297fffc4 	addi	r5,r5,-1
18003a34:	994a703a 	and	r5,r19,r5
18003a38:	9009883a 	mov	r4,r18
18003a3c:	843f0044 	addi	r16,r16,-1023
18003a40:	294ffc34 	orhi	r5,r5,16368
18003a44:	dd800217 	ldw	r22,8(sp)
18003a48:	d8001115 	stw	zero,68(sp)
18003a4c:	003ea506 	br	180034e4 <__alt_data_end+0xf80034e4>
18003a50:	00860074 	movhi	r2,6145
18003a54:	10bf0804 	addi	r2,r2,-992
18003a58:	003e6406 	br	180033ec <__alt_data_end+0xf80033ec>
18003a5c:	e0001115 	stw	zero,68(fp)
18003a60:	000b883a 	mov	r5,zero
18003a64:	e009883a 	mov	r4,fp
18003a68:	800614c0 	call	1800614c <_Balloc>
18003a6c:	01bfffc4 	movi	r6,-1
18003a70:	01c00044 	movi	r7,1
18003a74:	d8800715 	stw	r2,28(sp)
18003a78:	d9800c15 	stw	r6,48(sp)
18003a7c:	e0801015 	stw	r2,64(fp)
18003a80:	d8000315 	stw	zero,12(sp)
18003a84:	d9c00b15 	stw	r7,44(sp)
18003a88:	d9800615 	stw	r6,24(sp)
18003a8c:	d8002215 	stw	zero,136(sp)
18003a90:	d8800117 	ldw	r2,4(sp)
18003a94:	10008916 	blt	r2,zero,18003cbc <_dtoa_r+0x990>
18003a98:	d9000517 	ldw	r4,20(sp)
18003a9c:	00c00384 	movi	r3,14
18003aa0:	19008616 	blt	r3,r4,18003cbc <_dtoa_r+0x990>
18003aa4:	200490fa 	slli	r2,r4,3
18003aa8:	00c60074 	movhi	r3,6145
18003aac:	d9802217 	ldw	r6,136(sp)
18003ab0:	18ff3004 	addi	r3,r3,-832
18003ab4:	1885883a 	add	r2,r3,r2
18003ab8:	14000017 	ldw	r16,0(r2)
18003abc:	14400117 	ldw	r17,4(r2)
18003ac0:	30016316 	blt	r6,zero,18004050 <_dtoa_r+0xd24>
18003ac4:	800d883a 	mov	r6,r16
18003ac8:	880f883a 	mov	r7,r17
18003acc:	9009883a 	mov	r4,r18
18003ad0:	980b883a 	mov	r5,r19
18003ad4:	800b3200 	call	1800b320 <__divdf3>
18003ad8:	180b883a 	mov	r5,r3
18003adc:	1009883a 	mov	r4,r2
18003ae0:	800d0b00 	call	1800d0b0 <__fixdfsi>
18003ae4:	1009883a 	mov	r4,r2
18003ae8:	102b883a 	mov	r21,r2
18003aec:	800d1300 	call	1800d130 <__floatsidf>
18003af0:	800d883a 	mov	r6,r16
18003af4:	880f883a 	mov	r7,r17
18003af8:	1009883a 	mov	r4,r2
18003afc:	180b883a 	mov	r5,r3
18003b00:	800bf480 	call	1800bf48 <__muldf3>
18003b04:	100d883a 	mov	r6,r2
18003b08:	180f883a 	mov	r7,r3
18003b0c:	9009883a 	mov	r4,r18
18003b10:	980b883a 	mov	r5,r19
18003b14:	800c7b40 	call	1800c7b4 <__subdf3>
18003b18:	d9c00717 	ldw	r7,28(sp)
18003b1c:	1009883a 	mov	r4,r2
18003b20:	a8800c04 	addi	r2,r21,48
18003b24:	38800005 	stb	r2,0(r7)
18003b28:	3dc00044 	addi	r23,r7,1
18003b2c:	d9c00617 	ldw	r7,24(sp)
18003b30:	01800044 	movi	r6,1
18003b34:	180b883a 	mov	r5,r3
18003b38:	2005883a 	mov	r2,r4
18003b3c:	39803826 	beq	r7,r6,18003c20 <_dtoa_r+0x8f4>
18003b40:	000d883a 	mov	r6,zero
18003b44:	01d00934 	movhi	r7,16420
18003b48:	800bf480 	call	1800bf48 <__muldf3>
18003b4c:	000d883a 	mov	r6,zero
18003b50:	000f883a 	mov	r7,zero
18003b54:	1009883a 	mov	r4,r2
18003b58:	180b883a 	mov	r5,r3
18003b5c:	1025883a 	mov	r18,r2
18003b60:	1827883a 	mov	r19,r3
18003b64:	800bcf00 	call	1800bcf0 <__eqdf2>
18003b68:	103f9a26 	beq	r2,zero,180039d4 <__alt_data_end+0xf80039d4>
18003b6c:	d9c00617 	ldw	r7,24(sp)
18003b70:	d8c00717 	ldw	r3,28(sp)
18003b74:	b829883a 	mov	r20,r23
18003b78:	38bfffc4 	addi	r2,r7,-1
18003b7c:	18ad883a 	add	r22,r3,r2
18003b80:	00000a06 	br	18003bac <_dtoa_r+0x880>
18003b84:	800bf480 	call	1800bf48 <__muldf3>
18003b88:	000d883a 	mov	r6,zero
18003b8c:	000f883a 	mov	r7,zero
18003b90:	1009883a 	mov	r4,r2
18003b94:	180b883a 	mov	r5,r3
18003b98:	1025883a 	mov	r18,r2
18003b9c:	1827883a 	mov	r19,r3
18003ba0:	b829883a 	mov	r20,r23
18003ba4:	800bcf00 	call	1800bcf0 <__eqdf2>
18003ba8:	103f8a26 	beq	r2,zero,180039d4 <__alt_data_end+0xf80039d4>
18003bac:	800d883a 	mov	r6,r16
18003bb0:	880f883a 	mov	r7,r17
18003bb4:	9009883a 	mov	r4,r18
18003bb8:	980b883a 	mov	r5,r19
18003bbc:	800b3200 	call	1800b320 <__divdf3>
18003bc0:	180b883a 	mov	r5,r3
18003bc4:	1009883a 	mov	r4,r2
18003bc8:	800d0b00 	call	1800d0b0 <__fixdfsi>
18003bcc:	1009883a 	mov	r4,r2
18003bd0:	102b883a 	mov	r21,r2
18003bd4:	800d1300 	call	1800d130 <__floatsidf>
18003bd8:	800d883a 	mov	r6,r16
18003bdc:	880f883a 	mov	r7,r17
18003be0:	1009883a 	mov	r4,r2
18003be4:	180b883a 	mov	r5,r3
18003be8:	800bf480 	call	1800bf48 <__muldf3>
18003bec:	100d883a 	mov	r6,r2
18003bf0:	180f883a 	mov	r7,r3
18003bf4:	9009883a 	mov	r4,r18
18003bf8:	980b883a 	mov	r5,r19
18003bfc:	800c7b40 	call	1800c7b4 <__subdf3>
18003c00:	aa000c04 	addi	r8,r21,48
18003c04:	a2000005 	stb	r8,0(r20)
18003c08:	000d883a 	mov	r6,zero
18003c0c:	01d00934 	movhi	r7,16420
18003c10:	1009883a 	mov	r4,r2
18003c14:	180b883a 	mov	r5,r3
18003c18:	a5c00044 	addi	r23,r20,1
18003c1c:	b53fd91e 	bne	r22,r20,18003b84 <__alt_data_end+0xf8003b84>
18003c20:	100d883a 	mov	r6,r2
18003c24:	180f883a 	mov	r7,r3
18003c28:	1009883a 	mov	r4,r2
18003c2c:	180b883a 	mov	r5,r3
18003c30:	800aa740 	call	1800aa74 <__adddf3>
18003c34:	100d883a 	mov	r6,r2
18003c38:	180f883a 	mov	r7,r3
18003c3c:	8009883a 	mov	r4,r16
18003c40:	880b883a 	mov	r5,r17
18003c44:	1027883a 	mov	r19,r2
18003c48:	1825883a 	mov	r18,r3
18003c4c:	800be540 	call	1800be54 <__ledf2>
18003c50:	10000816 	blt	r2,zero,18003c74 <_dtoa_r+0x948>
18003c54:	980d883a 	mov	r6,r19
18003c58:	900f883a 	mov	r7,r18
18003c5c:	8009883a 	mov	r4,r16
18003c60:	880b883a 	mov	r5,r17
18003c64:	800bcf00 	call	1800bcf0 <__eqdf2>
18003c68:	103f5a1e 	bne	r2,zero,180039d4 <__alt_data_end+0xf80039d4>
18003c6c:	ad40004c 	andi	r21,r21,1
18003c70:	a83f5826 	beq	r21,zero,180039d4 <__alt_data_end+0xf80039d4>
18003c74:	bd3fffc3 	ldbu	r20,-1(r23)
18003c78:	b8bfffc4 	addi	r2,r23,-1
18003c7c:	1007883a 	mov	r3,r2
18003c80:	01400e44 	movi	r5,57
18003c84:	d9800717 	ldw	r6,28(sp)
18003c88:	00000506 	br	18003ca0 <_dtoa_r+0x974>
18003c8c:	18ffffc4 	addi	r3,r3,-1
18003c90:	11824726 	beq	r2,r6,180045b0 <_dtoa_r+0x1284>
18003c94:	1d000003 	ldbu	r20,0(r3)
18003c98:	102f883a 	mov	r23,r2
18003c9c:	10bfffc4 	addi	r2,r2,-1
18003ca0:	a1003fcc 	andi	r4,r20,255
18003ca4:	2100201c 	xori	r4,r4,128
18003ca8:	213fe004 	addi	r4,r4,-128
18003cac:	217ff726 	beq	r4,r5,18003c8c <__alt_data_end+0xf8003c8c>
18003cb0:	a2000044 	addi	r8,r20,1
18003cb4:	12000005 	stb	r8,0(r2)
18003cb8:	003f4606 	br	180039d4 <__alt_data_end+0xf80039d4>
18003cbc:	d9000b17 	ldw	r4,44(sp)
18003cc0:	2000c826 	beq	r4,zero,18003fe4 <_dtoa_r+0xcb8>
18003cc4:	d9800317 	ldw	r6,12(sp)
18003cc8:	00c00044 	movi	r3,1
18003ccc:	1980f90e 	bge	r3,r6,180040b4 <_dtoa_r+0xd88>
18003cd0:	d8800617 	ldw	r2,24(sp)
18003cd4:	d8c00a17 	ldw	r3,40(sp)
18003cd8:	157fffc4 	addi	r21,r2,-1
18003cdc:	1d41f316 	blt	r3,r21,180044ac <_dtoa_r+0x1180>
18003ce0:	1d6bc83a 	sub	r21,r3,r21
18003ce4:	d9c00617 	ldw	r7,24(sp)
18003ce8:	3802aa16 	blt	r7,zero,18004794 <_dtoa_r+0x1468>
18003cec:	dd000817 	ldw	r20,32(sp)
18003cf0:	d8800617 	ldw	r2,24(sp)
18003cf4:	d8c00817 	ldw	r3,32(sp)
18003cf8:	01400044 	movi	r5,1
18003cfc:	e009883a 	mov	r4,fp
18003d00:	1887883a 	add	r3,r3,r2
18003d04:	d8c00815 	stw	r3,32(sp)
18003d08:	b0ad883a 	add	r22,r22,r2
18003d0c:	80065800 	call	18006580 <__i2b>
18003d10:	1023883a 	mov	r17,r2
18003d14:	a0000826 	beq	r20,zero,18003d38 <_dtoa_r+0xa0c>
18003d18:	0580070e 	bge	zero,r22,18003d38 <_dtoa_r+0xa0c>
18003d1c:	a005883a 	mov	r2,r20
18003d20:	b500b916 	blt	r22,r20,18004008 <_dtoa_r+0xcdc>
18003d24:	d9000817 	ldw	r4,32(sp)
18003d28:	a0a9c83a 	sub	r20,r20,r2
18003d2c:	b0adc83a 	sub	r22,r22,r2
18003d30:	2089c83a 	sub	r4,r4,r2
18003d34:	d9000815 	stw	r4,32(sp)
18003d38:	d9800a17 	ldw	r6,40(sp)
18003d3c:	0181810e 	bge	zero,r6,18004344 <_dtoa_r+0x1018>
18003d40:	d9c00b17 	ldw	r7,44(sp)
18003d44:	3800b326 	beq	r7,zero,18004014 <_dtoa_r+0xce8>
18003d48:	a800b226 	beq	r21,zero,18004014 <_dtoa_r+0xce8>
18003d4c:	880b883a 	mov	r5,r17
18003d50:	a80d883a 	mov	r6,r21
18003d54:	e009883a 	mov	r4,fp
18003d58:	80068480 	call	18006848 <__pow5mult>
18003d5c:	d9800917 	ldw	r6,36(sp)
18003d60:	100b883a 	mov	r5,r2
18003d64:	e009883a 	mov	r4,fp
18003d68:	1023883a 	mov	r17,r2
18003d6c:	80065bc0 	call	180065bc <__multiply>
18003d70:	1021883a 	mov	r16,r2
18003d74:	d8800a17 	ldw	r2,40(sp)
18003d78:	d9400917 	ldw	r5,36(sp)
18003d7c:	e009883a 	mov	r4,fp
18003d80:	1545c83a 	sub	r2,r2,r21
18003d84:	d8800a15 	stw	r2,40(sp)
18003d88:	80061f40 	call	180061f4 <_Bfree>
18003d8c:	d8c00a17 	ldw	r3,40(sp)
18003d90:	18009f1e 	bne	r3,zero,18004010 <_dtoa_r+0xce4>
18003d94:	05c00044 	movi	r23,1
18003d98:	e009883a 	mov	r4,fp
18003d9c:	b80b883a 	mov	r5,r23
18003da0:	80065800 	call	18006580 <__i2b>
18003da4:	d9000d17 	ldw	r4,52(sp)
18003da8:	102b883a 	mov	r21,r2
18003dac:	2000ce26 	beq	r4,zero,180040e8 <_dtoa_r+0xdbc>
18003db0:	200d883a 	mov	r6,r4
18003db4:	100b883a 	mov	r5,r2
18003db8:	e009883a 	mov	r4,fp
18003dbc:	80068480 	call	18006848 <__pow5mult>
18003dc0:	d9800317 	ldw	r6,12(sp)
18003dc4:	102b883a 	mov	r21,r2
18003dc8:	b981810e 	bge	r23,r6,180043d0 <_dtoa_r+0x10a4>
18003dcc:	0027883a 	mov	r19,zero
18003dd0:	a8800417 	ldw	r2,16(r21)
18003dd4:	05c00804 	movi	r23,32
18003dd8:	10800104 	addi	r2,r2,4
18003ddc:	1085883a 	add	r2,r2,r2
18003de0:	1085883a 	add	r2,r2,r2
18003de4:	a885883a 	add	r2,r21,r2
18003de8:	11000017 	ldw	r4,0(r2)
18003dec:	80064680 	call	18006468 <__hi0bits>
18003df0:	b885c83a 	sub	r2,r23,r2
18003df4:	1585883a 	add	r2,r2,r22
18003df8:	108007cc 	andi	r2,r2,31
18003dfc:	1000b326 	beq	r2,zero,180040cc <_dtoa_r+0xda0>
18003e00:	00c00804 	movi	r3,32
18003e04:	1887c83a 	sub	r3,r3,r2
18003e08:	01000104 	movi	r4,4
18003e0c:	20c2cd0e 	bge	r4,r3,18004944 <_dtoa_r+0x1618>
18003e10:	00c00704 	movi	r3,28
18003e14:	1885c83a 	sub	r2,r3,r2
18003e18:	d8c00817 	ldw	r3,32(sp)
18003e1c:	a0a9883a 	add	r20,r20,r2
18003e20:	b0ad883a 	add	r22,r22,r2
18003e24:	1887883a 	add	r3,r3,r2
18003e28:	d8c00815 	stw	r3,32(sp)
18003e2c:	d9800817 	ldw	r6,32(sp)
18003e30:	0180040e 	bge	zero,r6,18003e44 <_dtoa_r+0xb18>
18003e34:	800b883a 	mov	r5,r16
18003e38:	e009883a 	mov	r4,fp
18003e3c:	80069880 	call	18006988 <__lshift>
18003e40:	1021883a 	mov	r16,r2
18003e44:	0580050e 	bge	zero,r22,18003e5c <_dtoa_r+0xb30>
18003e48:	a80b883a 	mov	r5,r21
18003e4c:	b00d883a 	mov	r6,r22
18003e50:	e009883a 	mov	r4,fp
18003e54:	80069880 	call	18006988 <__lshift>
18003e58:	102b883a 	mov	r21,r2
18003e5c:	d9c00e17 	ldw	r7,56(sp)
18003e60:	3801211e 	bne	r7,zero,180042e8 <_dtoa_r+0xfbc>
18003e64:	d9800617 	ldw	r6,24(sp)
18003e68:	0181380e 	bge	zero,r6,1800434c <_dtoa_r+0x1020>
18003e6c:	d8c00b17 	ldw	r3,44(sp)
18003e70:	1800ab1e 	bne	r3,zero,18004120 <_dtoa_r+0xdf4>
18003e74:	dc800717 	ldw	r18,28(sp)
18003e78:	dcc00617 	ldw	r19,24(sp)
18003e7c:	9029883a 	mov	r20,r18
18003e80:	00000206 	br	18003e8c <_dtoa_r+0xb60>
18003e84:	800621c0 	call	1800621c <__multadd>
18003e88:	1021883a 	mov	r16,r2
18003e8c:	a80b883a 	mov	r5,r21
18003e90:	8009883a 	mov	r4,r16
18003e94:	80031040 	call	18003104 <quorem>
18003e98:	10800c04 	addi	r2,r2,48
18003e9c:	90800005 	stb	r2,0(r18)
18003ea0:	94800044 	addi	r18,r18,1
18003ea4:	9507c83a 	sub	r3,r18,r20
18003ea8:	000f883a 	mov	r7,zero
18003eac:	01800284 	movi	r6,10
18003eb0:	800b883a 	mov	r5,r16
18003eb4:	e009883a 	mov	r4,fp
18003eb8:	1cfff216 	blt	r3,r19,18003e84 <__alt_data_end+0xf8003e84>
18003ebc:	1011883a 	mov	r8,r2
18003ec0:	d8800617 	ldw	r2,24(sp)
18003ec4:	0082370e 	bge	zero,r2,180047a4 <_dtoa_r+0x1478>
18003ec8:	d9000717 	ldw	r4,28(sp)
18003ecc:	0025883a 	mov	r18,zero
18003ed0:	20af883a 	add	r23,r4,r2
18003ed4:	01800044 	movi	r6,1
18003ed8:	800b883a 	mov	r5,r16
18003edc:	e009883a 	mov	r4,fp
18003ee0:	da001715 	stw	r8,92(sp)
18003ee4:	80069880 	call	18006988 <__lshift>
18003ee8:	a80b883a 	mov	r5,r21
18003eec:	1009883a 	mov	r4,r2
18003ef0:	d8800915 	stw	r2,36(sp)
18003ef4:	8006ad00 	call	18006ad0 <__mcmp>
18003ef8:	da001717 	ldw	r8,92(sp)
18003efc:	0081800e 	bge	zero,r2,18004500 <_dtoa_r+0x11d4>
18003f00:	b93fffc3 	ldbu	r4,-1(r23)
18003f04:	b8bfffc4 	addi	r2,r23,-1
18003f08:	1007883a 	mov	r3,r2
18003f0c:	01800e44 	movi	r6,57
18003f10:	d9c00717 	ldw	r7,28(sp)
18003f14:	00000506 	br	18003f2c <_dtoa_r+0xc00>
18003f18:	18ffffc4 	addi	r3,r3,-1
18003f1c:	11c12326 	beq	r2,r7,180043ac <_dtoa_r+0x1080>
18003f20:	19000003 	ldbu	r4,0(r3)
18003f24:	102f883a 	mov	r23,r2
18003f28:	10bfffc4 	addi	r2,r2,-1
18003f2c:	21403fcc 	andi	r5,r4,255
18003f30:	2940201c 	xori	r5,r5,128
18003f34:	297fe004 	addi	r5,r5,-128
18003f38:	29bff726 	beq	r5,r6,18003f18 <__alt_data_end+0xf8003f18>
18003f3c:	21000044 	addi	r4,r4,1
18003f40:	11000005 	stb	r4,0(r2)
18003f44:	a80b883a 	mov	r5,r21
18003f48:	e009883a 	mov	r4,fp
18003f4c:	80061f40 	call	180061f4 <_Bfree>
18003f50:	883ea026 	beq	r17,zero,180039d4 <__alt_data_end+0xf80039d4>
18003f54:	90000426 	beq	r18,zero,18003f68 <_dtoa_r+0xc3c>
18003f58:	94400326 	beq	r18,r17,18003f68 <_dtoa_r+0xc3c>
18003f5c:	900b883a 	mov	r5,r18
18003f60:	e009883a 	mov	r4,fp
18003f64:	80061f40 	call	180061f4 <_Bfree>
18003f68:	880b883a 	mov	r5,r17
18003f6c:	e009883a 	mov	r4,fp
18003f70:	80061f40 	call	180061f4 <_Bfree>
18003f74:	003e9706 	br	180039d4 <__alt_data_end+0xf80039d4>
18003f78:	01800044 	movi	r6,1
18003f7c:	d9800e15 	stw	r6,56(sp)
18003f80:	003d9606 	br	180035dc <__alt_data_end+0xf80035dc>
18003f84:	d8800817 	ldw	r2,32(sp)
18003f88:	d8c00517 	ldw	r3,20(sp)
18003f8c:	d8000d15 	stw	zero,52(sp)
18003f90:	10c5c83a 	sub	r2,r2,r3
18003f94:	00c9c83a 	sub	r4,zero,r3
18003f98:	d8800815 	stw	r2,32(sp)
18003f9c:	d9000a15 	stw	r4,40(sp)
18003fa0:	003d9706 	br	18003600 <__alt_data_end+0xf8003600>
18003fa4:	05adc83a 	sub	r22,zero,r22
18003fa8:	dd800815 	stw	r22,32(sp)
18003fac:	002d883a 	mov	r22,zero
18003fb0:	003d8e06 	br	180035ec <__alt_data_end+0xf80035ec>
18003fb4:	d9000517 	ldw	r4,20(sp)
18003fb8:	800d1300 	call	1800d130 <__floatsidf>
18003fbc:	100d883a 	mov	r6,r2
18003fc0:	180f883a 	mov	r7,r3
18003fc4:	a009883a 	mov	r4,r20
18003fc8:	880b883a 	mov	r5,r17
18003fcc:	800bcf00 	call	1800bcf0 <__eqdf2>
18003fd0:	103d7126 	beq	r2,zero,18003598 <__alt_data_end+0xf8003598>
18003fd4:	d9c00517 	ldw	r7,20(sp)
18003fd8:	39ffffc4 	addi	r7,r7,-1
18003fdc:	d9c00515 	stw	r7,20(sp)
18003fe0:	003d6d06 	br	18003598 <__alt_data_end+0xf8003598>
18003fe4:	dd400a17 	ldw	r21,40(sp)
18003fe8:	dd000817 	ldw	r20,32(sp)
18003fec:	0023883a 	mov	r17,zero
18003ff0:	003f4806 	br	18003d14 <__alt_data_end+0xf8003d14>
18003ff4:	10e3c83a 	sub	r17,r2,r3
18003ff8:	9448983a 	sll	r4,r18,r17
18003ffc:	003d3206 	br	180034c8 <__alt_data_end+0xf80034c8>
18004000:	d8000e15 	stw	zero,56(sp)
18004004:	003d7506 	br	180035dc <__alt_data_end+0xf80035dc>
18004008:	b005883a 	mov	r2,r22
1800400c:	003f4506 	br	18003d24 <__alt_data_end+0xf8003d24>
18004010:	dc000915 	stw	r16,36(sp)
18004014:	d9800a17 	ldw	r6,40(sp)
18004018:	d9400917 	ldw	r5,36(sp)
1800401c:	e009883a 	mov	r4,fp
18004020:	80068480 	call	18006848 <__pow5mult>
18004024:	1021883a 	mov	r16,r2
18004028:	003f5a06 	br	18003d94 <__alt_data_end+0xf8003d94>
1800402c:	01c00044 	movi	r7,1
18004030:	d9c00b15 	stw	r7,44(sp)
18004034:	d8802217 	ldw	r2,136(sp)
18004038:	0081280e 	bge	zero,r2,180044dc <_dtoa_r+0x11b0>
1800403c:	100d883a 	mov	r6,r2
18004040:	1021883a 	mov	r16,r2
18004044:	d8800c15 	stw	r2,48(sp)
18004048:	d8800615 	stw	r2,24(sp)
1800404c:	003d8806 	br	18003670 <__alt_data_end+0xf8003670>
18004050:	d8800617 	ldw	r2,24(sp)
18004054:	00be9b16 	blt	zero,r2,18003ac4 <__alt_data_end+0xf8003ac4>
18004058:	10010f1e 	bne	r2,zero,18004498 <_dtoa_r+0x116c>
1800405c:	880b883a 	mov	r5,r17
18004060:	000d883a 	mov	r6,zero
18004064:	01d00534 	movhi	r7,16404
18004068:	8009883a 	mov	r4,r16
1800406c:	800bf480 	call	1800bf48 <__muldf3>
18004070:	900d883a 	mov	r6,r18
18004074:	980f883a 	mov	r7,r19
18004078:	1009883a 	mov	r4,r2
1800407c:	180b883a 	mov	r5,r3
18004080:	800bd780 	call	1800bd78 <__gedf2>
18004084:	002b883a 	mov	r21,zero
18004088:	0023883a 	mov	r17,zero
1800408c:	1000bf16 	blt	r2,zero,1800438c <_dtoa_r+0x1060>
18004090:	d9802217 	ldw	r6,136(sp)
18004094:	ddc00717 	ldw	r23,28(sp)
18004098:	018c303a 	nor	r6,zero,r6
1800409c:	d9800515 	stw	r6,20(sp)
180040a0:	a80b883a 	mov	r5,r21
180040a4:	e009883a 	mov	r4,fp
180040a8:	80061f40 	call	180061f4 <_Bfree>
180040ac:	883e4926 	beq	r17,zero,180039d4 <__alt_data_end+0xf80039d4>
180040b0:	003fad06 	br	18003f68 <__alt_data_end+0xf8003f68>
180040b4:	d9c01117 	ldw	r7,68(sp)
180040b8:	3801bc26 	beq	r7,zero,180047ac <_dtoa_r+0x1480>
180040bc:	10810cc4 	addi	r2,r2,1075
180040c0:	dd400a17 	ldw	r21,40(sp)
180040c4:	dd000817 	ldw	r20,32(sp)
180040c8:	003f0a06 	br	18003cf4 <__alt_data_end+0xf8003cf4>
180040cc:	00800704 	movi	r2,28
180040d0:	d9000817 	ldw	r4,32(sp)
180040d4:	a0a9883a 	add	r20,r20,r2
180040d8:	b0ad883a 	add	r22,r22,r2
180040dc:	2089883a 	add	r4,r4,r2
180040e0:	d9000815 	stw	r4,32(sp)
180040e4:	003f5106 	br	18003e2c <__alt_data_end+0xf8003e2c>
180040e8:	d8c00317 	ldw	r3,12(sp)
180040ec:	b8c1fc0e 	bge	r23,r3,180048e0 <_dtoa_r+0x15b4>
180040f0:	0027883a 	mov	r19,zero
180040f4:	b805883a 	mov	r2,r23
180040f8:	003f3e06 	br	18003df4 <__alt_data_end+0xf8003df4>
180040fc:	880b883a 	mov	r5,r17
18004100:	e009883a 	mov	r4,fp
18004104:	000f883a 	mov	r7,zero
18004108:	01800284 	movi	r6,10
1800410c:	800621c0 	call	1800621c <__multadd>
18004110:	d9000c17 	ldw	r4,48(sp)
18004114:	1023883a 	mov	r17,r2
18004118:	0102040e 	bge	zero,r4,1800492c <_dtoa_r+0x1600>
1800411c:	d9000615 	stw	r4,24(sp)
18004120:	0500050e 	bge	zero,r20,18004138 <_dtoa_r+0xe0c>
18004124:	880b883a 	mov	r5,r17
18004128:	a00d883a 	mov	r6,r20
1800412c:	e009883a 	mov	r4,fp
18004130:	80069880 	call	18006988 <__lshift>
18004134:	1023883a 	mov	r17,r2
18004138:	9801241e 	bne	r19,zero,180045cc <_dtoa_r+0x12a0>
1800413c:	8829883a 	mov	r20,r17
18004140:	d9000617 	ldw	r4,24(sp)
18004144:	dcc00717 	ldw	r19,28(sp)
18004148:	9480004c 	andi	r18,r18,1
1800414c:	20bfffc4 	addi	r2,r4,-1
18004150:	9885883a 	add	r2,r19,r2
18004154:	d8800415 	stw	r2,16(sp)
18004158:	dc800615 	stw	r18,24(sp)
1800415c:	a80b883a 	mov	r5,r21
18004160:	8009883a 	mov	r4,r16
18004164:	80031040 	call	18003104 <quorem>
18004168:	880b883a 	mov	r5,r17
1800416c:	8009883a 	mov	r4,r16
18004170:	102f883a 	mov	r23,r2
18004174:	8006ad00 	call	18006ad0 <__mcmp>
18004178:	a80b883a 	mov	r5,r21
1800417c:	a00d883a 	mov	r6,r20
18004180:	e009883a 	mov	r4,fp
18004184:	102d883a 	mov	r22,r2
18004188:	8006b300 	call	18006b30 <__mdiff>
1800418c:	1007883a 	mov	r3,r2
18004190:	10800317 	ldw	r2,12(r2)
18004194:	bc800c04 	addi	r18,r23,48
18004198:	180b883a 	mov	r5,r3
1800419c:	10004e1e 	bne	r2,zero,180042d8 <_dtoa_r+0xfac>
180041a0:	8009883a 	mov	r4,r16
180041a4:	d8c01615 	stw	r3,88(sp)
180041a8:	8006ad00 	call	18006ad0 <__mcmp>
180041ac:	d8c01617 	ldw	r3,88(sp)
180041b0:	e009883a 	mov	r4,fp
180041b4:	d8801615 	stw	r2,88(sp)
180041b8:	180b883a 	mov	r5,r3
180041bc:	80061f40 	call	180061f4 <_Bfree>
180041c0:	d8801617 	ldw	r2,88(sp)
180041c4:	1000041e 	bne	r2,zero,180041d8 <_dtoa_r+0xeac>
180041c8:	d9800317 	ldw	r6,12(sp)
180041cc:	3000021e 	bne	r6,zero,180041d8 <_dtoa_r+0xeac>
180041d0:	d8c00617 	ldw	r3,24(sp)
180041d4:	18003726 	beq	r3,zero,180042b4 <_dtoa_r+0xf88>
180041d8:	b0002016 	blt	r22,zero,1800425c <_dtoa_r+0xf30>
180041dc:	b000041e 	bne	r22,zero,180041f0 <_dtoa_r+0xec4>
180041e0:	d9000317 	ldw	r4,12(sp)
180041e4:	2000021e 	bne	r4,zero,180041f0 <_dtoa_r+0xec4>
180041e8:	d8c00617 	ldw	r3,24(sp)
180041ec:	18001b26 	beq	r3,zero,1800425c <_dtoa_r+0xf30>
180041f0:	00810716 	blt	zero,r2,18004610 <_dtoa_r+0x12e4>
180041f4:	d8c00417 	ldw	r3,16(sp)
180041f8:	9d800044 	addi	r22,r19,1
180041fc:	9c800005 	stb	r18,0(r19)
18004200:	b02f883a 	mov	r23,r22
18004204:	98c10626 	beq	r19,r3,18004620 <_dtoa_r+0x12f4>
18004208:	800b883a 	mov	r5,r16
1800420c:	000f883a 	mov	r7,zero
18004210:	01800284 	movi	r6,10
18004214:	e009883a 	mov	r4,fp
18004218:	800621c0 	call	1800621c <__multadd>
1800421c:	1021883a 	mov	r16,r2
18004220:	000f883a 	mov	r7,zero
18004224:	01800284 	movi	r6,10
18004228:	880b883a 	mov	r5,r17
1800422c:	e009883a 	mov	r4,fp
18004230:	8d002526 	beq	r17,r20,180042c8 <_dtoa_r+0xf9c>
18004234:	800621c0 	call	1800621c <__multadd>
18004238:	a00b883a 	mov	r5,r20
1800423c:	000f883a 	mov	r7,zero
18004240:	01800284 	movi	r6,10
18004244:	e009883a 	mov	r4,fp
18004248:	1023883a 	mov	r17,r2
1800424c:	800621c0 	call	1800621c <__multadd>
18004250:	1029883a 	mov	r20,r2
18004254:	b027883a 	mov	r19,r22
18004258:	003fc006 	br	1800415c <__alt_data_end+0xf800415c>
1800425c:	9011883a 	mov	r8,r18
18004260:	00800e0e 	bge	zero,r2,1800429c <_dtoa_r+0xf70>
18004264:	800b883a 	mov	r5,r16
18004268:	01800044 	movi	r6,1
1800426c:	e009883a 	mov	r4,fp
18004270:	da001715 	stw	r8,92(sp)
18004274:	80069880 	call	18006988 <__lshift>
18004278:	a80b883a 	mov	r5,r21
1800427c:	1009883a 	mov	r4,r2
18004280:	1021883a 	mov	r16,r2
18004284:	8006ad00 	call	18006ad0 <__mcmp>
18004288:	da001717 	ldw	r8,92(sp)
1800428c:	0081960e 	bge	zero,r2,180048e8 <_dtoa_r+0x15bc>
18004290:	00800e44 	movi	r2,57
18004294:	40817026 	beq	r8,r2,18004858 <_dtoa_r+0x152c>
18004298:	ba000c44 	addi	r8,r23,49
1800429c:	8825883a 	mov	r18,r17
180042a0:	9dc00044 	addi	r23,r19,1
180042a4:	9a000005 	stb	r8,0(r19)
180042a8:	a023883a 	mov	r17,r20
180042ac:	dc000915 	stw	r16,36(sp)
180042b0:	003f2406 	br	18003f44 <__alt_data_end+0xf8003f44>
180042b4:	00800e44 	movi	r2,57
180042b8:	9011883a 	mov	r8,r18
180042bc:	90816626 	beq	r18,r2,18004858 <_dtoa_r+0x152c>
180042c0:	05bff516 	blt	zero,r22,18004298 <__alt_data_end+0xf8004298>
180042c4:	003ff506 	br	1800429c <__alt_data_end+0xf800429c>
180042c8:	800621c0 	call	1800621c <__multadd>
180042cc:	1023883a 	mov	r17,r2
180042d0:	1029883a 	mov	r20,r2
180042d4:	003fdf06 	br	18004254 <__alt_data_end+0xf8004254>
180042d8:	e009883a 	mov	r4,fp
180042dc:	80061f40 	call	180061f4 <_Bfree>
180042e0:	00800044 	movi	r2,1
180042e4:	003fbc06 	br	180041d8 <__alt_data_end+0xf80041d8>
180042e8:	a80b883a 	mov	r5,r21
180042ec:	8009883a 	mov	r4,r16
180042f0:	8006ad00 	call	18006ad0 <__mcmp>
180042f4:	103edb0e 	bge	r2,zero,18003e64 <__alt_data_end+0xf8003e64>
180042f8:	800b883a 	mov	r5,r16
180042fc:	000f883a 	mov	r7,zero
18004300:	01800284 	movi	r6,10
18004304:	e009883a 	mov	r4,fp
18004308:	800621c0 	call	1800621c <__multadd>
1800430c:	1021883a 	mov	r16,r2
18004310:	d8800517 	ldw	r2,20(sp)
18004314:	d8c00b17 	ldw	r3,44(sp)
18004318:	10bfffc4 	addi	r2,r2,-1
1800431c:	d8800515 	stw	r2,20(sp)
18004320:	183f761e 	bne	r3,zero,180040fc <__alt_data_end+0xf80040fc>
18004324:	d9000c17 	ldw	r4,48(sp)
18004328:	0101730e 	bge	zero,r4,180048f8 <_dtoa_r+0x15cc>
1800432c:	d9000615 	stw	r4,24(sp)
18004330:	003ed006 	br	18003e74 <__alt_data_end+0xf8003e74>
18004334:	00800084 	movi	r2,2
18004338:	3081861e 	bne	r6,r2,18004954 <_dtoa_r+0x1628>
1800433c:	d8000b15 	stw	zero,44(sp)
18004340:	003f3c06 	br	18004034 <__alt_data_end+0xf8004034>
18004344:	dc000917 	ldw	r16,36(sp)
18004348:	003e9206 	br	18003d94 <__alt_data_end+0xf8003d94>
1800434c:	d9c00317 	ldw	r7,12(sp)
18004350:	00800084 	movi	r2,2
18004354:	11fec50e 	bge	r2,r7,18003e6c <__alt_data_end+0xf8003e6c>
18004358:	d9000617 	ldw	r4,24(sp)
1800435c:	20013c1e 	bne	r4,zero,18004850 <_dtoa_r+0x1524>
18004360:	a80b883a 	mov	r5,r21
18004364:	000f883a 	mov	r7,zero
18004368:	01800144 	movi	r6,5
1800436c:	e009883a 	mov	r4,fp
18004370:	800621c0 	call	1800621c <__multadd>
18004374:	100b883a 	mov	r5,r2
18004378:	8009883a 	mov	r4,r16
1800437c:	102b883a 	mov	r21,r2
18004380:	8006ad00 	call	18006ad0 <__mcmp>
18004384:	dc000915 	stw	r16,36(sp)
18004388:	00bf410e 	bge	zero,r2,18004090 <__alt_data_end+0xf8004090>
1800438c:	d9c00717 	ldw	r7,28(sp)
18004390:	00800c44 	movi	r2,49
18004394:	38800005 	stb	r2,0(r7)
18004398:	d8800517 	ldw	r2,20(sp)
1800439c:	3dc00044 	addi	r23,r7,1
180043a0:	10800044 	addi	r2,r2,1
180043a4:	d8800515 	stw	r2,20(sp)
180043a8:	003f3d06 	br	180040a0 <__alt_data_end+0xf80040a0>
180043ac:	d9800517 	ldw	r6,20(sp)
180043b0:	d9c00717 	ldw	r7,28(sp)
180043b4:	00800c44 	movi	r2,49
180043b8:	31800044 	addi	r6,r6,1
180043bc:	d9800515 	stw	r6,20(sp)
180043c0:	38800005 	stb	r2,0(r7)
180043c4:	003edf06 	br	18003f44 <__alt_data_end+0xf8003f44>
180043c8:	d8000b15 	stw	zero,44(sp)
180043cc:	003c9f06 	br	1800364c <__alt_data_end+0xf800364c>
180043d0:	903e7e1e 	bne	r18,zero,18003dcc <__alt_data_end+0xf8003dcc>
180043d4:	00800434 	movhi	r2,16
180043d8:	10bfffc4 	addi	r2,r2,-1
180043dc:	9884703a 	and	r2,r19,r2
180043e0:	1000ea1e 	bne	r2,zero,1800478c <_dtoa_r+0x1460>
180043e4:	9cdffc2c 	andhi	r19,r19,32752
180043e8:	9800e826 	beq	r19,zero,1800478c <_dtoa_r+0x1460>
180043ec:	d9c00817 	ldw	r7,32(sp)
180043f0:	b5800044 	addi	r22,r22,1
180043f4:	04c00044 	movi	r19,1
180043f8:	39c00044 	addi	r7,r7,1
180043fc:	d9c00815 	stw	r7,32(sp)
18004400:	d8800d17 	ldw	r2,52(sp)
18004404:	103e721e 	bne	r2,zero,18003dd0 <__alt_data_end+0xf8003dd0>
18004408:	00800044 	movi	r2,1
1800440c:	003e7906 	br	18003df4 <__alt_data_end+0xf8003df4>
18004410:	8009883a 	mov	r4,r16
18004414:	800d1300 	call	1800d130 <__floatsidf>
18004418:	d9800f17 	ldw	r6,60(sp)
1800441c:	d9c01017 	ldw	r7,64(sp)
18004420:	1009883a 	mov	r4,r2
18004424:	180b883a 	mov	r5,r3
18004428:	800bf480 	call	1800bf48 <__muldf3>
1800442c:	000d883a 	mov	r6,zero
18004430:	01d00734 	movhi	r7,16412
18004434:	1009883a 	mov	r4,r2
18004438:	180b883a 	mov	r5,r3
1800443c:	800aa740 	call	1800aa74 <__adddf3>
18004440:	047f3034 	movhi	r17,64704
18004444:	1021883a 	mov	r16,r2
18004448:	1c63883a 	add	r17,r3,r17
1800444c:	d9000f17 	ldw	r4,60(sp)
18004450:	d9401017 	ldw	r5,64(sp)
18004454:	000d883a 	mov	r6,zero
18004458:	01d00534 	movhi	r7,16404
1800445c:	800c7b40 	call	1800c7b4 <__subdf3>
18004460:	800d883a 	mov	r6,r16
18004464:	880f883a 	mov	r7,r17
18004468:	1009883a 	mov	r4,r2
1800446c:	180b883a 	mov	r5,r3
18004470:	102b883a 	mov	r21,r2
18004474:	1829883a 	mov	r20,r3
18004478:	800bd780 	call	1800bd78 <__gedf2>
1800447c:	00806c16 	blt	zero,r2,18004630 <_dtoa_r+0x1304>
18004480:	89e0003c 	xorhi	r7,r17,32768
18004484:	800d883a 	mov	r6,r16
18004488:	a809883a 	mov	r4,r21
1800448c:	a00b883a 	mov	r5,r20
18004490:	800be540 	call	1800be54 <__ledf2>
18004494:	103d7e0e 	bge	r2,zero,18003a90 <__alt_data_end+0xf8003a90>
18004498:	002b883a 	mov	r21,zero
1800449c:	0023883a 	mov	r17,zero
180044a0:	003efb06 	br	18004090 <__alt_data_end+0xf8004090>
180044a4:	d8800717 	ldw	r2,28(sp)
180044a8:	003bd006 	br	180033ec <__alt_data_end+0xf80033ec>
180044ac:	d9000a17 	ldw	r4,40(sp)
180044b0:	d9800d17 	ldw	r6,52(sp)
180044b4:	dd400a15 	stw	r21,40(sp)
180044b8:	a905c83a 	sub	r2,r21,r4
180044bc:	308d883a 	add	r6,r6,r2
180044c0:	d9800d15 	stw	r6,52(sp)
180044c4:	002b883a 	mov	r21,zero
180044c8:	003e0606 	br	18003ce4 <__alt_data_end+0xf8003ce4>
180044cc:	9023883a 	mov	r17,r18
180044d0:	9829883a 	mov	r20,r19
180044d4:	04000084 	movi	r16,2
180044d8:	003c9206 	br	18003724 <__alt_data_end+0xf8003724>
180044dc:	04000044 	movi	r16,1
180044e0:	dc000c15 	stw	r16,48(sp)
180044e4:	dc000615 	stw	r16,24(sp)
180044e8:	dc002215 	stw	r16,136(sp)
180044ec:	e0001115 	stw	zero,68(fp)
180044f0:	000b883a 	mov	r5,zero
180044f4:	003c6906 	br	1800369c <__alt_data_end+0xf800369c>
180044f8:	3021883a 	mov	r16,r6
180044fc:	003ffb06 	br	180044ec <__alt_data_end+0xf80044ec>
18004500:	1000021e 	bne	r2,zero,1800450c <_dtoa_r+0x11e0>
18004504:	4200004c 	andi	r8,r8,1
18004508:	403e7d1e 	bne	r8,zero,18003f00 <__alt_data_end+0xf8003f00>
1800450c:	01000c04 	movi	r4,48
18004510:	00000106 	br	18004518 <_dtoa_r+0x11ec>
18004514:	102f883a 	mov	r23,r2
18004518:	b8bfffc4 	addi	r2,r23,-1
1800451c:	10c00007 	ldb	r3,0(r2)
18004520:	193ffc26 	beq	r3,r4,18004514 <__alt_data_end+0xf8004514>
18004524:	003e8706 	br	18003f44 <__alt_data_end+0xf8003f44>
18004528:	d8800517 	ldw	r2,20(sp)
1800452c:	00a3c83a 	sub	r17,zero,r2
18004530:	8800a426 	beq	r17,zero,180047c4 <_dtoa_r+0x1498>
18004534:	888003cc 	andi	r2,r17,15
18004538:	100490fa 	slli	r2,r2,3
1800453c:	00c60074 	movhi	r3,6145
18004540:	18ff3004 	addi	r3,r3,-832
18004544:	1885883a 	add	r2,r3,r2
18004548:	11800017 	ldw	r6,0(r2)
1800454c:	11c00117 	ldw	r7,4(r2)
18004550:	9009883a 	mov	r4,r18
18004554:	980b883a 	mov	r5,r19
18004558:	8823d13a 	srai	r17,r17,4
1800455c:	800bf480 	call	1800bf48 <__muldf3>
18004560:	d8800f15 	stw	r2,60(sp)
18004564:	d8c01015 	stw	r3,64(sp)
18004568:	8800e826 	beq	r17,zero,1800490c <_dtoa_r+0x15e0>
1800456c:	05060074 	movhi	r20,6145
18004570:	a53f2604 	addi	r20,r20,-872
18004574:	04000084 	movi	r16,2
18004578:	8980004c 	andi	r6,r17,1
1800457c:	1009883a 	mov	r4,r2
18004580:	8823d07a 	srai	r17,r17,1
18004584:	180b883a 	mov	r5,r3
18004588:	30000426 	beq	r6,zero,1800459c <_dtoa_r+0x1270>
1800458c:	a1800017 	ldw	r6,0(r20)
18004590:	a1c00117 	ldw	r7,4(r20)
18004594:	84000044 	addi	r16,r16,1
18004598:	800bf480 	call	1800bf48 <__muldf3>
1800459c:	a5000204 	addi	r20,r20,8
180045a0:	883ff51e 	bne	r17,zero,18004578 <__alt_data_end+0xf8004578>
180045a4:	d8800f15 	stw	r2,60(sp)
180045a8:	d8c01015 	stw	r3,64(sp)
180045ac:	003c7606 	br	18003788 <__alt_data_end+0xf8003788>
180045b0:	00c00c04 	movi	r3,48
180045b4:	10c00005 	stb	r3,0(r2)
180045b8:	d8c00517 	ldw	r3,20(sp)
180045bc:	bd3fffc3 	ldbu	r20,-1(r23)
180045c0:	18c00044 	addi	r3,r3,1
180045c4:	d8c00515 	stw	r3,20(sp)
180045c8:	003db906 	br	18003cb0 <__alt_data_end+0xf8003cb0>
180045cc:	89400117 	ldw	r5,4(r17)
180045d0:	e009883a 	mov	r4,fp
180045d4:	800614c0 	call	1800614c <_Balloc>
180045d8:	89800417 	ldw	r6,16(r17)
180045dc:	89400304 	addi	r5,r17,12
180045e0:	11000304 	addi	r4,r2,12
180045e4:	31800084 	addi	r6,r6,2
180045e8:	318d883a 	add	r6,r6,r6
180045ec:	318d883a 	add	r6,r6,r6
180045f0:	1027883a 	mov	r19,r2
180045f4:	8005d800 	call	18005d80 <memcpy>
180045f8:	01800044 	movi	r6,1
180045fc:	980b883a 	mov	r5,r19
18004600:	e009883a 	mov	r4,fp
18004604:	80069880 	call	18006988 <__lshift>
18004608:	1029883a 	mov	r20,r2
1800460c:	003ecc06 	br	18004140 <__alt_data_end+0xf8004140>
18004610:	00800e44 	movi	r2,57
18004614:	90809026 	beq	r18,r2,18004858 <_dtoa_r+0x152c>
18004618:	92000044 	addi	r8,r18,1
1800461c:	003f1f06 	br	1800429c <__alt_data_end+0xf800429c>
18004620:	9011883a 	mov	r8,r18
18004624:	8825883a 	mov	r18,r17
18004628:	a023883a 	mov	r17,r20
1800462c:	003e2906 	br	18003ed4 <__alt_data_end+0xf8003ed4>
18004630:	002b883a 	mov	r21,zero
18004634:	0023883a 	mov	r17,zero
18004638:	003f5406 	br	1800438c <__alt_data_end+0xf800438c>
1800463c:	61bfffc4 	addi	r6,r12,-1
18004640:	300490fa 	slli	r2,r6,3
18004644:	00c60074 	movhi	r3,6145
18004648:	18ff3004 	addi	r3,r3,-832
1800464c:	1885883a 	add	r2,r3,r2
18004650:	11000017 	ldw	r4,0(r2)
18004654:	11400117 	ldw	r5,4(r2)
18004658:	d8800717 	ldw	r2,28(sp)
1800465c:	880f883a 	mov	r7,r17
18004660:	d9801215 	stw	r6,72(sp)
18004664:	800d883a 	mov	r6,r16
18004668:	db001615 	stw	r12,88(sp)
1800466c:	15c00044 	addi	r23,r2,1
18004670:	800bf480 	call	1800bf48 <__muldf3>
18004674:	d9401017 	ldw	r5,64(sp)
18004678:	d9000f17 	ldw	r4,60(sp)
1800467c:	d8c01515 	stw	r3,84(sp)
18004680:	d8801415 	stw	r2,80(sp)
18004684:	800d0b00 	call	1800d0b0 <__fixdfsi>
18004688:	1009883a 	mov	r4,r2
1800468c:	1021883a 	mov	r16,r2
18004690:	800d1300 	call	1800d130 <__floatsidf>
18004694:	d9000f17 	ldw	r4,60(sp)
18004698:	d9401017 	ldw	r5,64(sp)
1800469c:	100d883a 	mov	r6,r2
180046a0:	180f883a 	mov	r7,r3
180046a4:	800c7b40 	call	1800c7b4 <__subdf3>
180046a8:	1829883a 	mov	r20,r3
180046ac:	d8c00717 	ldw	r3,28(sp)
180046b0:	84000c04 	addi	r16,r16,48
180046b4:	1023883a 	mov	r17,r2
180046b8:	1c000005 	stb	r16,0(r3)
180046bc:	db001617 	ldw	r12,88(sp)
180046c0:	00800044 	movi	r2,1
180046c4:	60802226 	beq	r12,r2,18004750 <_dtoa_r+0x1424>
180046c8:	d9c00717 	ldw	r7,28(sp)
180046cc:	8805883a 	mov	r2,r17
180046d0:	b82b883a 	mov	r21,r23
180046d4:	3b19883a 	add	r12,r7,r12
180046d8:	6023883a 	mov	r17,r12
180046dc:	a007883a 	mov	r3,r20
180046e0:	dc800f15 	stw	r18,60(sp)
180046e4:	000d883a 	mov	r6,zero
180046e8:	01d00934 	movhi	r7,16420
180046ec:	1009883a 	mov	r4,r2
180046f0:	180b883a 	mov	r5,r3
180046f4:	800bf480 	call	1800bf48 <__muldf3>
180046f8:	180b883a 	mov	r5,r3
180046fc:	1009883a 	mov	r4,r2
18004700:	1829883a 	mov	r20,r3
18004704:	1025883a 	mov	r18,r2
18004708:	800d0b00 	call	1800d0b0 <__fixdfsi>
1800470c:	1009883a 	mov	r4,r2
18004710:	1021883a 	mov	r16,r2
18004714:	800d1300 	call	1800d130 <__floatsidf>
18004718:	100d883a 	mov	r6,r2
1800471c:	180f883a 	mov	r7,r3
18004720:	9009883a 	mov	r4,r18
18004724:	a00b883a 	mov	r5,r20
18004728:	84000c04 	addi	r16,r16,48
1800472c:	800c7b40 	call	1800c7b4 <__subdf3>
18004730:	ad400044 	addi	r21,r21,1
18004734:	ac3fffc5 	stb	r16,-1(r21)
18004738:	ac7fea1e 	bne	r21,r17,180046e4 <__alt_data_end+0xf80046e4>
1800473c:	1023883a 	mov	r17,r2
18004740:	d8801217 	ldw	r2,72(sp)
18004744:	dc800f17 	ldw	r18,60(sp)
18004748:	1829883a 	mov	r20,r3
1800474c:	b8af883a 	add	r23,r23,r2
18004750:	d9001417 	ldw	r4,80(sp)
18004754:	d9401517 	ldw	r5,84(sp)
18004758:	000d883a 	mov	r6,zero
1800475c:	01cff834 	movhi	r7,16352
18004760:	800aa740 	call	1800aa74 <__adddf3>
18004764:	880d883a 	mov	r6,r17
18004768:	a00f883a 	mov	r7,r20
1800476c:	1009883a 	mov	r4,r2
18004770:	180b883a 	mov	r5,r3
18004774:	800be540 	call	1800be54 <__ledf2>
18004778:	10003e0e 	bge	r2,zero,18004874 <_dtoa_r+0x1548>
1800477c:	d9001317 	ldw	r4,76(sp)
18004780:	bd3fffc3 	ldbu	r20,-1(r23)
18004784:	d9000515 	stw	r4,20(sp)
18004788:	003d3b06 	br	18003c78 <__alt_data_end+0xf8003c78>
1800478c:	0027883a 	mov	r19,zero
18004790:	003f1b06 	br	18004400 <__alt_data_end+0xf8004400>
18004794:	d8800817 	ldw	r2,32(sp)
18004798:	11e9c83a 	sub	r20,r2,r7
1800479c:	0005883a 	mov	r2,zero
180047a0:	003d5406 	br	18003cf4 <__alt_data_end+0xf8003cf4>
180047a4:	00800044 	movi	r2,1
180047a8:	003dc706 	br	18003ec8 <__alt_data_end+0xf8003ec8>
180047ac:	d8c00217 	ldw	r3,8(sp)
180047b0:	00800d84 	movi	r2,54
180047b4:	dd400a17 	ldw	r21,40(sp)
180047b8:	10c5c83a 	sub	r2,r2,r3
180047bc:	dd000817 	ldw	r20,32(sp)
180047c0:	003d4c06 	br	18003cf4 <__alt_data_end+0xf8003cf4>
180047c4:	dc800f15 	stw	r18,60(sp)
180047c8:	dcc01015 	stw	r19,64(sp)
180047cc:	04000084 	movi	r16,2
180047d0:	003bed06 	br	18003788 <__alt_data_end+0xf8003788>
180047d4:	d9000617 	ldw	r4,24(sp)
180047d8:	203f0d26 	beq	r4,zero,18004410 <__alt_data_end+0xf8004410>
180047dc:	d9800c17 	ldw	r6,48(sp)
180047e0:	01bcab0e 	bge	zero,r6,18003a90 <__alt_data_end+0xf8003a90>
180047e4:	d9401017 	ldw	r5,64(sp)
180047e8:	d9000f17 	ldw	r4,60(sp)
180047ec:	000d883a 	mov	r6,zero
180047f0:	01d00934 	movhi	r7,16420
180047f4:	800bf480 	call	1800bf48 <__muldf3>
180047f8:	81000044 	addi	r4,r16,1
180047fc:	d8800f15 	stw	r2,60(sp)
18004800:	d8c01015 	stw	r3,64(sp)
18004804:	800d1300 	call	1800d130 <__floatsidf>
18004808:	d9800f17 	ldw	r6,60(sp)
1800480c:	d9c01017 	ldw	r7,64(sp)
18004810:	1009883a 	mov	r4,r2
18004814:	180b883a 	mov	r5,r3
18004818:	800bf480 	call	1800bf48 <__muldf3>
1800481c:	01d00734 	movhi	r7,16412
18004820:	000d883a 	mov	r6,zero
18004824:	1009883a 	mov	r4,r2
18004828:	180b883a 	mov	r5,r3
1800482c:	800aa740 	call	1800aa74 <__adddf3>
18004830:	d9c00517 	ldw	r7,20(sp)
18004834:	047f3034 	movhi	r17,64704
18004838:	1021883a 	mov	r16,r2
1800483c:	39ffffc4 	addi	r7,r7,-1
18004840:	d9c01315 	stw	r7,76(sp)
18004844:	1c63883a 	add	r17,r3,r17
18004848:	db000c17 	ldw	r12,48(sp)
1800484c:	003bea06 	br	180037f8 <__alt_data_end+0xf80037f8>
18004850:	dc000915 	stw	r16,36(sp)
18004854:	003e0e06 	br	18004090 <__alt_data_end+0xf8004090>
18004858:	01000e44 	movi	r4,57
1800485c:	8825883a 	mov	r18,r17
18004860:	9dc00044 	addi	r23,r19,1
18004864:	99000005 	stb	r4,0(r19)
18004868:	a023883a 	mov	r17,r20
1800486c:	dc000915 	stw	r16,36(sp)
18004870:	003da406 	br	18003f04 <__alt_data_end+0xf8003f04>
18004874:	d9801417 	ldw	r6,80(sp)
18004878:	d9c01517 	ldw	r7,84(sp)
1800487c:	0009883a 	mov	r4,zero
18004880:	014ff834 	movhi	r5,16352
18004884:	800c7b40 	call	1800c7b4 <__subdf3>
18004888:	880d883a 	mov	r6,r17
1800488c:	a00f883a 	mov	r7,r20
18004890:	1009883a 	mov	r4,r2
18004894:	180b883a 	mov	r5,r3
18004898:	800bd780 	call	1800bd78 <__gedf2>
1800489c:	00bc7c0e 	bge	zero,r2,18003a90 <__alt_data_end+0xf8003a90>
180048a0:	01000c04 	movi	r4,48
180048a4:	00000106 	br	180048ac <_dtoa_r+0x1580>
180048a8:	102f883a 	mov	r23,r2
180048ac:	b8bfffc4 	addi	r2,r23,-1
180048b0:	10c00007 	ldb	r3,0(r2)
180048b4:	193ffc26 	beq	r3,r4,180048a8 <__alt_data_end+0xf80048a8>
180048b8:	d9801317 	ldw	r6,76(sp)
180048bc:	d9800515 	stw	r6,20(sp)
180048c0:	003c4406 	br	180039d4 <__alt_data_end+0xf80039d4>
180048c4:	d9801317 	ldw	r6,76(sp)
180048c8:	d9800515 	stw	r6,20(sp)
180048cc:	003cea06 	br	18003c78 <__alt_data_end+0xf8003c78>
180048d0:	dd800f17 	ldw	r22,60(sp)
180048d4:	dcc01017 	ldw	r19,64(sp)
180048d8:	dc801217 	ldw	r18,72(sp)
180048dc:	003c6c06 	br	18003a90 <__alt_data_end+0xf8003a90>
180048e0:	903e031e 	bne	r18,zero,180040f0 <__alt_data_end+0xf80040f0>
180048e4:	003ebb06 	br	180043d4 <__alt_data_end+0xf80043d4>
180048e8:	103e6c1e 	bne	r2,zero,1800429c <__alt_data_end+0xf800429c>
180048ec:	4080004c 	andi	r2,r8,1
180048f0:	103e6a26 	beq	r2,zero,1800429c <__alt_data_end+0xf800429c>
180048f4:	003e6606 	br	18004290 <__alt_data_end+0xf8004290>
180048f8:	d8c00317 	ldw	r3,12(sp)
180048fc:	00800084 	movi	r2,2
18004900:	10c02916 	blt	r2,r3,180049a8 <_dtoa_r+0x167c>
18004904:	d9000c17 	ldw	r4,48(sp)
18004908:	003e8806 	br	1800432c <__alt_data_end+0xf800432c>
1800490c:	04000084 	movi	r16,2
18004910:	003b9d06 	br	18003788 <__alt_data_end+0xf8003788>
18004914:	d9001317 	ldw	r4,76(sp)
18004918:	d9000515 	stw	r4,20(sp)
1800491c:	003cd606 	br	18003c78 <__alt_data_end+0xf8003c78>
18004920:	d8801317 	ldw	r2,76(sp)
18004924:	d8800515 	stw	r2,20(sp)
18004928:	003c2a06 	br	180039d4 <__alt_data_end+0xf80039d4>
1800492c:	d9800317 	ldw	r6,12(sp)
18004930:	00800084 	movi	r2,2
18004934:	11801516 	blt	r2,r6,1800498c <_dtoa_r+0x1660>
18004938:	d9c00c17 	ldw	r7,48(sp)
1800493c:	d9c00615 	stw	r7,24(sp)
18004940:	003df706 	br	18004120 <__alt_data_end+0xf8004120>
18004944:	193d3926 	beq	r3,r4,18003e2c <__alt_data_end+0xf8003e2c>
18004948:	00c00f04 	movi	r3,60
1800494c:	1885c83a 	sub	r2,r3,r2
18004950:	003ddf06 	br	180040d0 <__alt_data_end+0xf80040d0>
18004954:	e009883a 	mov	r4,fp
18004958:	e0001115 	stw	zero,68(fp)
1800495c:	000b883a 	mov	r5,zero
18004960:	800614c0 	call	1800614c <_Balloc>
18004964:	d8800715 	stw	r2,28(sp)
18004968:	d8c00717 	ldw	r3,28(sp)
1800496c:	00bfffc4 	movi	r2,-1
18004970:	01000044 	movi	r4,1
18004974:	d8800c15 	stw	r2,48(sp)
18004978:	e0c01015 	stw	r3,64(fp)
1800497c:	d9000b15 	stw	r4,44(sp)
18004980:	d8800615 	stw	r2,24(sp)
18004984:	d8002215 	stw	zero,136(sp)
18004988:	003c4106 	br	18003a90 <__alt_data_end+0xf8003a90>
1800498c:	d8c00c17 	ldw	r3,48(sp)
18004990:	d8c00615 	stw	r3,24(sp)
18004994:	003e7006 	br	18004358 <__alt_data_end+0xf8004358>
18004998:	04400044 	movi	r17,1
1800499c:	003b2006 	br	18003620 <__alt_data_end+0xf8003620>
180049a0:	000b883a 	mov	r5,zero
180049a4:	003b3d06 	br	1800369c <__alt_data_end+0xf800369c>
180049a8:	d8800c17 	ldw	r2,48(sp)
180049ac:	d8800615 	stw	r2,24(sp)
180049b0:	003e6906 	br	18004358 <__alt_data_end+0xf8004358>

180049b4 <__fp_unlock>:
180049b4:	0005883a 	mov	r2,zero
180049b8:	f800283a 	ret

180049bc <_cleanup_r>:
180049bc:	01460074 	movhi	r5,6145
180049c0:	2964a704 	addi	r5,r5,-28004
180049c4:	80052f01 	jmpi	180052f0 <_fwalk_reent>

180049c8 <__sinit.part.1>:
180049c8:	defff704 	addi	sp,sp,-36
180049cc:	00c60034 	movhi	r3,6144
180049d0:	dfc00815 	stw	ra,32(sp)
180049d4:	ddc00715 	stw	r23,28(sp)
180049d8:	dd800615 	stw	r22,24(sp)
180049dc:	dd400515 	stw	r21,20(sp)
180049e0:	dd000415 	stw	r20,16(sp)
180049e4:	dcc00315 	stw	r19,12(sp)
180049e8:	dc800215 	stw	r18,8(sp)
180049ec:	dc400115 	stw	r17,4(sp)
180049f0:	dc000015 	stw	r16,0(sp)
180049f4:	18d26f04 	addi	r3,r3,18876
180049f8:	24000117 	ldw	r16,4(r4)
180049fc:	20c00f15 	stw	r3,60(r4)
18004a00:	2080bb04 	addi	r2,r4,748
18004a04:	00c000c4 	movi	r3,3
18004a08:	20c0b915 	stw	r3,740(r4)
18004a0c:	2080ba15 	stw	r2,744(r4)
18004a10:	2000b815 	stw	zero,736(r4)
18004a14:	05c00204 	movi	r23,8
18004a18:	00800104 	movi	r2,4
18004a1c:	2025883a 	mov	r18,r4
18004a20:	b80d883a 	mov	r6,r23
18004a24:	81001704 	addi	r4,r16,92
18004a28:	000b883a 	mov	r5,zero
18004a2c:	80000015 	stw	zero,0(r16)
18004a30:	80000115 	stw	zero,4(r16)
18004a34:	80000215 	stw	zero,8(r16)
18004a38:	8080030d 	sth	r2,12(r16)
18004a3c:	80001915 	stw	zero,100(r16)
18004a40:	8000038d 	sth	zero,14(r16)
18004a44:	80000415 	stw	zero,16(r16)
18004a48:	80000515 	stw	zero,20(r16)
18004a4c:	80000615 	stw	zero,24(r16)
18004a50:	80060240 	call	18006024 <memset>
18004a54:	05860034 	movhi	r22,6144
18004a58:	94400217 	ldw	r17,8(r18)
18004a5c:	05460034 	movhi	r21,6144
18004a60:	05060034 	movhi	r20,6144
18004a64:	04c60034 	movhi	r19,6144
18004a68:	b59e0c04 	addi	r22,r22,30768
18004a6c:	ad5e2304 	addi	r21,r21,30860
18004a70:	a51e4204 	addi	r20,r20,30984
18004a74:	9cde5904 	addi	r19,r19,31076
18004a78:	85800815 	stw	r22,32(r16)
18004a7c:	85400915 	stw	r21,36(r16)
18004a80:	85000a15 	stw	r20,40(r16)
18004a84:	84c00b15 	stw	r19,44(r16)
18004a88:	84000715 	stw	r16,28(r16)
18004a8c:	00800284 	movi	r2,10
18004a90:	8880030d 	sth	r2,12(r17)
18004a94:	00800044 	movi	r2,1
18004a98:	b80d883a 	mov	r6,r23
18004a9c:	89001704 	addi	r4,r17,92
18004aa0:	000b883a 	mov	r5,zero
18004aa4:	88000015 	stw	zero,0(r17)
18004aa8:	88000115 	stw	zero,4(r17)
18004aac:	88000215 	stw	zero,8(r17)
18004ab0:	88001915 	stw	zero,100(r17)
18004ab4:	8880038d 	sth	r2,14(r17)
18004ab8:	88000415 	stw	zero,16(r17)
18004abc:	88000515 	stw	zero,20(r17)
18004ac0:	88000615 	stw	zero,24(r17)
18004ac4:	80060240 	call	18006024 <memset>
18004ac8:	94000317 	ldw	r16,12(r18)
18004acc:	00800484 	movi	r2,18
18004ad0:	8c400715 	stw	r17,28(r17)
18004ad4:	8d800815 	stw	r22,32(r17)
18004ad8:	8d400915 	stw	r21,36(r17)
18004adc:	8d000a15 	stw	r20,40(r17)
18004ae0:	8cc00b15 	stw	r19,44(r17)
18004ae4:	8080030d 	sth	r2,12(r16)
18004ae8:	00800084 	movi	r2,2
18004aec:	80000015 	stw	zero,0(r16)
18004af0:	80000115 	stw	zero,4(r16)
18004af4:	80000215 	stw	zero,8(r16)
18004af8:	80001915 	stw	zero,100(r16)
18004afc:	8080038d 	sth	r2,14(r16)
18004b00:	80000415 	stw	zero,16(r16)
18004b04:	80000515 	stw	zero,20(r16)
18004b08:	80000615 	stw	zero,24(r16)
18004b0c:	b80d883a 	mov	r6,r23
18004b10:	000b883a 	mov	r5,zero
18004b14:	81001704 	addi	r4,r16,92
18004b18:	80060240 	call	18006024 <memset>
18004b1c:	00800044 	movi	r2,1
18004b20:	84000715 	stw	r16,28(r16)
18004b24:	85800815 	stw	r22,32(r16)
18004b28:	85400915 	stw	r21,36(r16)
18004b2c:	85000a15 	stw	r20,40(r16)
18004b30:	84c00b15 	stw	r19,44(r16)
18004b34:	90800e15 	stw	r2,56(r18)
18004b38:	dfc00817 	ldw	ra,32(sp)
18004b3c:	ddc00717 	ldw	r23,28(sp)
18004b40:	dd800617 	ldw	r22,24(sp)
18004b44:	dd400517 	ldw	r21,20(sp)
18004b48:	dd000417 	ldw	r20,16(sp)
18004b4c:	dcc00317 	ldw	r19,12(sp)
18004b50:	dc800217 	ldw	r18,8(sp)
18004b54:	dc400117 	ldw	r17,4(sp)
18004b58:	dc000017 	ldw	r16,0(sp)
18004b5c:	dec00904 	addi	sp,sp,36
18004b60:	f800283a 	ret

18004b64 <__fp_lock>:
18004b64:	0005883a 	mov	r2,zero
18004b68:	f800283a 	ret

18004b6c <__sfmoreglue>:
18004b6c:	defffc04 	addi	sp,sp,-16
18004b70:	dc800215 	stw	r18,8(sp)
18004b74:	2825883a 	mov	r18,r5
18004b78:	dc000015 	stw	r16,0(sp)
18004b7c:	01401a04 	movi	r5,104
18004b80:	2021883a 	mov	r16,r4
18004b84:	913fffc4 	addi	r4,r18,-1
18004b88:	dfc00315 	stw	ra,12(sp)
18004b8c:	dc400115 	stw	r17,4(sp)
18004b90:	8000b740 	call	18000b74 <__mulsi3>
18004b94:	8009883a 	mov	r4,r16
18004b98:	11401d04 	addi	r5,r2,116
18004b9c:	1023883a 	mov	r17,r2
18004ba0:	80054900 	call	18005490 <_malloc_r>
18004ba4:	1021883a 	mov	r16,r2
18004ba8:	10000726 	beq	r2,zero,18004bc8 <__sfmoreglue+0x5c>
18004bac:	11000304 	addi	r4,r2,12
18004bb0:	10000015 	stw	zero,0(r2)
18004bb4:	14800115 	stw	r18,4(r2)
18004bb8:	11000215 	stw	r4,8(r2)
18004bbc:	89801a04 	addi	r6,r17,104
18004bc0:	000b883a 	mov	r5,zero
18004bc4:	80060240 	call	18006024 <memset>
18004bc8:	8005883a 	mov	r2,r16
18004bcc:	dfc00317 	ldw	ra,12(sp)
18004bd0:	dc800217 	ldw	r18,8(sp)
18004bd4:	dc400117 	ldw	r17,4(sp)
18004bd8:	dc000017 	ldw	r16,0(sp)
18004bdc:	dec00404 	addi	sp,sp,16
18004be0:	f800283a 	ret

18004be4 <__sfp>:
18004be4:	defffb04 	addi	sp,sp,-20
18004be8:	dc000015 	stw	r16,0(sp)
18004bec:	04060074 	movhi	r16,6145
18004bf0:	84077904 	addi	r16,r16,7652
18004bf4:	dcc00315 	stw	r19,12(sp)
18004bf8:	2027883a 	mov	r19,r4
18004bfc:	81000017 	ldw	r4,0(r16)
18004c00:	dfc00415 	stw	ra,16(sp)
18004c04:	dc800215 	stw	r18,8(sp)
18004c08:	20800e17 	ldw	r2,56(r4)
18004c0c:	dc400115 	stw	r17,4(sp)
18004c10:	1000021e 	bne	r2,zero,18004c1c <__sfp+0x38>
18004c14:	80049c80 	call	180049c8 <__sinit.part.1>
18004c18:	81000017 	ldw	r4,0(r16)
18004c1c:	2480b804 	addi	r18,r4,736
18004c20:	047fffc4 	movi	r17,-1
18004c24:	91000117 	ldw	r4,4(r18)
18004c28:	94000217 	ldw	r16,8(r18)
18004c2c:	213fffc4 	addi	r4,r4,-1
18004c30:	20000a16 	blt	r4,zero,18004c5c <__sfp+0x78>
18004c34:	8080030f 	ldh	r2,12(r16)
18004c38:	10000c26 	beq	r2,zero,18004c6c <__sfp+0x88>
18004c3c:	80c01d04 	addi	r3,r16,116
18004c40:	00000206 	br	18004c4c <__sfp+0x68>
18004c44:	18bfe60f 	ldh	r2,-104(r3)
18004c48:	10000826 	beq	r2,zero,18004c6c <__sfp+0x88>
18004c4c:	213fffc4 	addi	r4,r4,-1
18004c50:	1c3ffd04 	addi	r16,r3,-12
18004c54:	18c01a04 	addi	r3,r3,104
18004c58:	247ffa1e 	bne	r4,r17,18004c44 <__alt_data_end+0xf8004c44>
18004c5c:	90800017 	ldw	r2,0(r18)
18004c60:	10001d26 	beq	r2,zero,18004cd8 <__sfp+0xf4>
18004c64:	1025883a 	mov	r18,r2
18004c68:	003fee06 	br	18004c24 <__alt_data_end+0xf8004c24>
18004c6c:	00bfffc4 	movi	r2,-1
18004c70:	8080038d 	sth	r2,14(r16)
18004c74:	00800044 	movi	r2,1
18004c78:	8080030d 	sth	r2,12(r16)
18004c7c:	80001915 	stw	zero,100(r16)
18004c80:	80000015 	stw	zero,0(r16)
18004c84:	80000215 	stw	zero,8(r16)
18004c88:	80000115 	stw	zero,4(r16)
18004c8c:	80000415 	stw	zero,16(r16)
18004c90:	80000515 	stw	zero,20(r16)
18004c94:	80000615 	stw	zero,24(r16)
18004c98:	01800204 	movi	r6,8
18004c9c:	000b883a 	mov	r5,zero
18004ca0:	81001704 	addi	r4,r16,92
18004ca4:	80060240 	call	18006024 <memset>
18004ca8:	8005883a 	mov	r2,r16
18004cac:	80000c15 	stw	zero,48(r16)
18004cb0:	80000d15 	stw	zero,52(r16)
18004cb4:	80001115 	stw	zero,68(r16)
18004cb8:	80001215 	stw	zero,72(r16)
18004cbc:	dfc00417 	ldw	ra,16(sp)
18004cc0:	dcc00317 	ldw	r19,12(sp)
18004cc4:	dc800217 	ldw	r18,8(sp)
18004cc8:	dc400117 	ldw	r17,4(sp)
18004ccc:	dc000017 	ldw	r16,0(sp)
18004cd0:	dec00504 	addi	sp,sp,20
18004cd4:	f800283a 	ret
18004cd8:	01400104 	movi	r5,4
18004cdc:	9809883a 	mov	r4,r19
18004ce0:	8004b6c0 	call	18004b6c <__sfmoreglue>
18004ce4:	90800015 	stw	r2,0(r18)
18004ce8:	103fde1e 	bne	r2,zero,18004c64 <__alt_data_end+0xf8004c64>
18004cec:	00800304 	movi	r2,12
18004cf0:	98800015 	stw	r2,0(r19)
18004cf4:	0005883a 	mov	r2,zero
18004cf8:	003ff006 	br	18004cbc <__alt_data_end+0xf8004cbc>

18004cfc <_cleanup>:
18004cfc:	00860074 	movhi	r2,6145
18004d00:	10877904 	addi	r2,r2,7652
18004d04:	11000017 	ldw	r4,0(r2)
18004d08:	01460074 	movhi	r5,6145
18004d0c:	2964a704 	addi	r5,r5,-28004
18004d10:	80052f01 	jmpi	180052f0 <_fwalk_reent>

18004d14 <__sinit>:
18004d14:	20800e17 	ldw	r2,56(r4)
18004d18:	10000126 	beq	r2,zero,18004d20 <__sinit+0xc>
18004d1c:	f800283a 	ret
18004d20:	80049c81 	jmpi	180049c8 <__sinit.part.1>

18004d24 <__sfp_lock_acquire>:
18004d24:	f800283a 	ret

18004d28 <__sfp_lock_release>:
18004d28:	f800283a 	ret

18004d2c <__sinit_lock_acquire>:
18004d2c:	f800283a 	ret

18004d30 <__sinit_lock_release>:
18004d30:	f800283a 	ret

18004d34 <__fp_lock_all>:
18004d34:	00860074 	movhi	r2,6145
18004d38:	10877a04 	addi	r2,r2,7656
18004d3c:	11000017 	ldw	r4,0(r2)
18004d40:	01460034 	movhi	r5,6144
18004d44:	2952d904 	addi	r5,r5,19300
18004d48:	800522c1 	jmpi	1800522c <_fwalk>

18004d4c <__fp_unlock_all>:
18004d4c:	00860074 	movhi	r2,6145
18004d50:	10877a04 	addi	r2,r2,7656
18004d54:	11000017 	ldw	r4,0(r2)
18004d58:	01460034 	movhi	r5,6144
18004d5c:	29526d04 	addi	r5,r5,18868
18004d60:	800522c1 	jmpi	1800522c <_fwalk>

18004d64 <__sfvwrite_r>:
18004d64:	30800217 	ldw	r2,8(r6)
18004d68:	10006726 	beq	r2,zero,18004f08 <__sfvwrite_r+0x1a4>
18004d6c:	28c0030b 	ldhu	r3,12(r5)
18004d70:	defff404 	addi	sp,sp,-48
18004d74:	dd400715 	stw	r21,28(sp)
18004d78:	dd000615 	stw	r20,24(sp)
18004d7c:	dc000215 	stw	r16,8(sp)
18004d80:	dfc00b15 	stw	ra,44(sp)
18004d84:	df000a15 	stw	fp,40(sp)
18004d88:	ddc00915 	stw	r23,36(sp)
18004d8c:	dd800815 	stw	r22,32(sp)
18004d90:	dcc00515 	stw	r19,20(sp)
18004d94:	dc800415 	stw	r18,16(sp)
18004d98:	dc400315 	stw	r17,12(sp)
18004d9c:	1880020c 	andi	r2,r3,8
18004da0:	2821883a 	mov	r16,r5
18004da4:	202b883a 	mov	r21,r4
18004da8:	3029883a 	mov	r20,r6
18004dac:	10002726 	beq	r2,zero,18004e4c <__sfvwrite_r+0xe8>
18004db0:	28800417 	ldw	r2,16(r5)
18004db4:	10002526 	beq	r2,zero,18004e4c <__sfvwrite_r+0xe8>
18004db8:	1880008c 	andi	r2,r3,2
18004dbc:	a4400017 	ldw	r17,0(r20)
18004dc0:	10002a26 	beq	r2,zero,18004e6c <__sfvwrite_r+0x108>
18004dc4:	05a00034 	movhi	r22,32768
18004dc8:	0027883a 	mov	r19,zero
18004dcc:	0025883a 	mov	r18,zero
18004dd0:	b5bf0004 	addi	r22,r22,-1024
18004dd4:	980d883a 	mov	r6,r19
18004dd8:	a809883a 	mov	r4,r21
18004ddc:	90004626 	beq	r18,zero,18004ef8 <__sfvwrite_r+0x194>
18004de0:	900f883a 	mov	r7,r18
18004de4:	b480022e 	bgeu	r22,r18,18004df0 <__sfvwrite_r+0x8c>
18004de8:	01e00034 	movhi	r7,32768
18004dec:	39ff0004 	addi	r7,r7,-1024
18004df0:	80800917 	ldw	r2,36(r16)
18004df4:	81400717 	ldw	r5,28(r16)
18004df8:	103ee83a 	callr	r2
18004dfc:	00805a0e 	bge	zero,r2,18004f68 <__sfvwrite_r+0x204>
18004e00:	a0c00217 	ldw	r3,8(r20)
18004e04:	98a7883a 	add	r19,r19,r2
18004e08:	90a5c83a 	sub	r18,r18,r2
18004e0c:	1885c83a 	sub	r2,r3,r2
18004e10:	a0800215 	stw	r2,8(r20)
18004e14:	103fef1e 	bne	r2,zero,18004dd4 <__alt_data_end+0xf8004dd4>
18004e18:	0005883a 	mov	r2,zero
18004e1c:	dfc00b17 	ldw	ra,44(sp)
18004e20:	df000a17 	ldw	fp,40(sp)
18004e24:	ddc00917 	ldw	r23,36(sp)
18004e28:	dd800817 	ldw	r22,32(sp)
18004e2c:	dd400717 	ldw	r21,28(sp)
18004e30:	dd000617 	ldw	r20,24(sp)
18004e34:	dcc00517 	ldw	r19,20(sp)
18004e38:	dc800417 	ldw	r18,16(sp)
18004e3c:	dc400317 	ldw	r17,12(sp)
18004e40:	dc000217 	ldw	r16,8(sp)
18004e44:	dec00c04 	addi	sp,sp,48
18004e48:	f800283a 	ret
18004e4c:	800b883a 	mov	r5,r16
18004e50:	a809883a 	mov	r4,r21
18004e54:	80090180 	call	18009018 <__swsetup_r>
18004e58:	1000ee1e 	bne	r2,zero,18005214 <__sfvwrite_r+0x4b0>
18004e5c:	80c0030b 	ldhu	r3,12(r16)
18004e60:	a4400017 	ldw	r17,0(r20)
18004e64:	1880008c 	andi	r2,r3,2
18004e68:	103fd61e 	bne	r2,zero,18004dc4 <__alt_data_end+0xf8004dc4>
18004e6c:	1880004c 	andi	r2,r3,1
18004e70:	1000421e 	bne	r2,zero,18004f7c <__sfvwrite_r+0x218>
18004e74:	0039883a 	mov	fp,zero
18004e78:	0025883a 	mov	r18,zero
18004e7c:	90001a26 	beq	r18,zero,18004ee8 <__sfvwrite_r+0x184>
18004e80:	1880800c 	andi	r2,r3,512
18004e84:	84c00217 	ldw	r19,8(r16)
18004e88:	10002126 	beq	r2,zero,18004f10 <__sfvwrite_r+0x1ac>
18004e8c:	982f883a 	mov	r23,r19
18004e90:	94c09636 	bltu	r18,r19,180050ec <__sfvwrite_r+0x388>
18004e94:	1881200c 	andi	r2,r3,1152
18004e98:	1000a11e 	bne	r2,zero,18005120 <__sfvwrite_r+0x3bc>
18004e9c:	81000017 	ldw	r4,0(r16)
18004ea0:	b80d883a 	mov	r6,r23
18004ea4:	e00b883a 	mov	r5,fp
18004ea8:	8005ec80 	call	18005ec8 <memmove>
18004eac:	80c00217 	ldw	r3,8(r16)
18004eb0:	81000017 	ldw	r4,0(r16)
18004eb4:	9005883a 	mov	r2,r18
18004eb8:	1ce7c83a 	sub	r19,r3,r19
18004ebc:	25cf883a 	add	r7,r4,r23
18004ec0:	84c00215 	stw	r19,8(r16)
18004ec4:	81c00015 	stw	r7,0(r16)
18004ec8:	a0c00217 	ldw	r3,8(r20)
18004ecc:	e0b9883a 	add	fp,fp,r2
18004ed0:	90a5c83a 	sub	r18,r18,r2
18004ed4:	18a7c83a 	sub	r19,r3,r2
18004ed8:	a4c00215 	stw	r19,8(r20)
18004edc:	983fce26 	beq	r19,zero,18004e18 <__alt_data_end+0xf8004e18>
18004ee0:	80c0030b 	ldhu	r3,12(r16)
18004ee4:	903fe61e 	bne	r18,zero,18004e80 <__alt_data_end+0xf8004e80>
18004ee8:	8f000017 	ldw	fp,0(r17)
18004eec:	8c800117 	ldw	r18,4(r17)
18004ef0:	8c400204 	addi	r17,r17,8
18004ef4:	003fe106 	br	18004e7c <__alt_data_end+0xf8004e7c>
18004ef8:	8cc00017 	ldw	r19,0(r17)
18004efc:	8c800117 	ldw	r18,4(r17)
18004f00:	8c400204 	addi	r17,r17,8
18004f04:	003fb306 	br	18004dd4 <__alt_data_end+0xf8004dd4>
18004f08:	0005883a 	mov	r2,zero
18004f0c:	f800283a 	ret
18004f10:	81000017 	ldw	r4,0(r16)
18004f14:	80800417 	ldw	r2,16(r16)
18004f18:	11005a36 	bltu	r2,r4,18005084 <__sfvwrite_r+0x320>
18004f1c:	85c00517 	ldw	r23,20(r16)
18004f20:	95c05836 	bltu	r18,r23,18005084 <__sfvwrite_r+0x320>
18004f24:	00a00034 	movhi	r2,32768
18004f28:	10bfffc4 	addi	r2,r2,-1
18004f2c:	9009883a 	mov	r4,r18
18004f30:	1480012e 	bgeu	r2,r18,18004f38 <__sfvwrite_r+0x1d4>
18004f34:	1009883a 	mov	r4,r2
18004f38:	b80b883a 	mov	r5,r23
18004f3c:	80009c00 	call	180009c0 <__divsi3>
18004f40:	b80b883a 	mov	r5,r23
18004f44:	1009883a 	mov	r4,r2
18004f48:	8000b740 	call	18000b74 <__mulsi3>
18004f4c:	81400717 	ldw	r5,28(r16)
18004f50:	80c00917 	ldw	r3,36(r16)
18004f54:	100f883a 	mov	r7,r2
18004f58:	e00d883a 	mov	r6,fp
18004f5c:	a809883a 	mov	r4,r21
18004f60:	183ee83a 	callr	r3
18004f64:	00bfd816 	blt	zero,r2,18004ec8 <__alt_data_end+0xf8004ec8>
18004f68:	8080030b 	ldhu	r2,12(r16)
18004f6c:	10801014 	ori	r2,r2,64
18004f70:	8080030d 	sth	r2,12(r16)
18004f74:	00bfffc4 	movi	r2,-1
18004f78:	003fa806 	br	18004e1c <__alt_data_end+0xf8004e1c>
18004f7c:	0027883a 	mov	r19,zero
18004f80:	0011883a 	mov	r8,zero
18004f84:	0039883a 	mov	fp,zero
18004f88:	0025883a 	mov	r18,zero
18004f8c:	90001f26 	beq	r18,zero,1800500c <__sfvwrite_r+0x2a8>
18004f90:	40005a26 	beq	r8,zero,180050fc <__sfvwrite_r+0x398>
18004f94:	982d883a 	mov	r22,r19
18004f98:	94c0012e 	bgeu	r18,r19,18004fa0 <__sfvwrite_r+0x23c>
18004f9c:	902d883a 	mov	r22,r18
18004fa0:	81000017 	ldw	r4,0(r16)
18004fa4:	80800417 	ldw	r2,16(r16)
18004fa8:	b02f883a 	mov	r23,r22
18004fac:	81c00517 	ldw	r7,20(r16)
18004fb0:	1100032e 	bgeu	r2,r4,18004fc0 <__sfvwrite_r+0x25c>
18004fb4:	80c00217 	ldw	r3,8(r16)
18004fb8:	38c7883a 	add	r3,r7,r3
18004fbc:	1d801816 	blt	r3,r22,18005020 <__sfvwrite_r+0x2bc>
18004fc0:	b1c03e16 	blt	r22,r7,180050bc <__sfvwrite_r+0x358>
18004fc4:	80800917 	ldw	r2,36(r16)
18004fc8:	81400717 	ldw	r5,28(r16)
18004fcc:	e00d883a 	mov	r6,fp
18004fd0:	da000115 	stw	r8,4(sp)
18004fd4:	a809883a 	mov	r4,r21
18004fd8:	103ee83a 	callr	r2
18004fdc:	102f883a 	mov	r23,r2
18004fe0:	da000117 	ldw	r8,4(sp)
18004fe4:	00bfe00e 	bge	zero,r2,18004f68 <__alt_data_end+0xf8004f68>
18004fe8:	9de7c83a 	sub	r19,r19,r23
18004fec:	98001f26 	beq	r19,zero,1800506c <__sfvwrite_r+0x308>
18004ff0:	a0800217 	ldw	r2,8(r20)
18004ff4:	e5f9883a 	add	fp,fp,r23
18004ff8:	95e5c83a 	sub	r18,r18,r23
18004ffc:	15efc83a 	sub	r23,r2,r23
18005000:	a5c00215 	stw	r23,8(r20)
18005004:	b83f8426 	beq	r23,zero,18004e18 <__alt_data_end+0xf8004e18>
18005008:	903fe11e 	bne	r18,zero,18004f90 <__alt_data_end+0xf8004f90>
1800500c:	8f000017 	ldw	fp,0(r17)
18005010:	8c800117 	ldw	r18,4(r17)
18005014:	0011883a 	mov	r8,zero
18005018:	8c400204 	addi	r17,r17,8
1800501c:	003fdb06 	br	18004f8c <__alt_data_end+0xf8004f8c>
18005020:	180d883a 	mov	r6,r3
18005024:	e00b883a 	mov	r5,fp
18005028:	da000115 	stw	r8,4(sp)
1800502c:	d8c00015 	stw	r3,0(sp)
18005030:	8005ec80 	call	18005ec8 <memmove>
18005034:	d8c00017 	ldw	r3,0(sp)
18005038:	80800017 	ldw	r2,0(r16)
1800503c:	800b883a 	mov	r5,r16
18005040:	a809883a 	mov	r4,r21
18005044:	10c5883a 	add	r2,r2,r3
18005048:	80800015 	stw	r2,0(r16)
1800504c:	d8c00015 	stw	r3,0(sp)
18005050:	80095bc0 	call	180095bc <_fflush_r>
18005054:	d8c00017 	ldw	r3,0(sp)
18005058:	da000117 	ldw	r8,4(sp)
1800505c:	103fc21e 	bne	r2,zero,18004f68 <__alt_data_end+0xf8004f68>
18005060:	182f883a 	mov	r23,r3
18005064:	9de7c83a 	sub	r19,r19,r23
18005068:	983fe11e 	bne	r19,zero,18004ff0 <__alt_data_end+0xf8004ff0>
1800506c:	800b883a 	mov	r5,r16
18005070:	a809883a 	mov	r4,r21
18005074:	80095bc0 	call	180095bc <_fflush_r>
18005078:	103fbb1e 	bne	r2,zero,18004f68 <__alt_data_end+0xf8004f68>
1800507c:	0011883a 	mov	r8,zero
18005080:	003fdb06 	br	18004ff0 <__alt_data_end+0xf8004ff0>
18005084:	94c0012e 	bgeu	r18,r19,1800508c <__sfvwrite_r+0x328>
18005088:	9027883a 	mov	r19,r18
1800508c:	980d883a 	mov	r6,r19
18005090:	e00b883a 	mov	r5,fp
18005094:	8005ec80 	call	18005ec8 <memmove>
18005098:	80800217 	ldw	r2,8(r16)
1800509c:	80c00017 	ldw	r3,0(r16)
180050a0:	14c5c83a 	sub	r2,r2,r19
180050a4:	1cc7883a 	add	r3,r3,r19
180050a8:	80800215 	stw	r2,8(r16)
180050ac:	80c00015 	stw	r3,0(r16)
180050b0:	10004326 	beq	r2,zero,180051c0 <__sfvwrite_r+0x45c>
180050b4:	9805883a 	mov	r2,r19
180050b8:	003f8306 	br	18004ec8 <__alt_data_end+0xf8004ec8>
180050bc:	b00d883a 	mov	r6,r22
180050c0:	e00b883a 	mov	r5,fp
180050c4:	da000115 	stw	r8,4(sp)
180050c8:	8005ec80 	call	18005ec8 <memmove>
180050cc:	80800217 	ldw	r2,8(r16)
180050d0:	80c00017 	ldw	r3,0(r16)
180050d4:	da000117 	ldw	r8,4(sp)
180050d8:	1585c83a 	sub	r2,r2,r22
180050dc:	1dad883a 	add	r22,r3,r22
180050e0:	80800215 	stw	r2,8(r16)
180050e4:	85800015 	stw	r22,0(r16)
180050e8:	003fbf06 	br	18004fe8 <__alt_data_end+0xf8004fe8>
180050ec:	81000017 	ldw	r4,0(r16)
180050f0:	9027883a 	mov	r19,r18
180050f4:	902f883a 	mov	r23,r18
180050f8:	003f6906 	br	18004ea0 <__alt_data_end+0xf8004ea0>
180050fc:	900d883a 	mov	r6,r18
18005100:	01400284 	movi	r5,10
18005104:	e009883a 	mov	r4,fp
18005108:	8005c9c0 	call	18005c9c <memchr>
1800510c:	10003e26 	beq	r2,zero,18005208 <__sfvwrite_r+0x4a4>
18005110:	10800044 	addi	r2,r2,1
18005114:	1727c83a 	sub	r19,r2,fp
18005118:	02000044 	movi	r8,1
1800511c:	003f9d06 	br	18004f94 <__alt_data_end+0xf8004f94>
18005120:	80800517 	ldw	r2,20(r16)
18005124:	81400417 	ldw	r5,16(r16)
18005128:	81c00017 	ldw	r7,0(r16)
1800512c:	10a7883a 	add	r19,r2,r2
18005130:	9885883a 	add	r2,r19,r2
18005134:	1026d7fa 	srli	r19,r2,31
18005138:	396dc83a 	sub	r22,r7,r5
1800513c:	b1000044 	addi	r4,r22,1
18005140:	9885883a 	add	r2,r19,r2
18005144:	1027d07a 	srai	r19,r2,1
18005148:	2485883a 	add	r2,r4,r18
1800514c:	980d883a 	mov	r6,r19
18005150:	9880022e 	bgeu	r19,r2,1800515c <__sfvwrite_r+0x3f8>
18005154:	1027883a 	mov	r19,r2
18005158:	100d883a 	mov	r6,r2
1800515c:	18c1000c 	andi	r3,r3,1024
18005160:	18001c26 	beq	r3,zero,180051d4 <__sfvwrite_r+0x470>
18005164:	300b883a 	mov	r5,r6
18005168:	a809883a 	mov	r4,r21
1800516c:	80054900 	call	18005490 <_malloc_r>
18005170:	102f883a 	mov	r23,r2
18005174:	10002926 	beq	r2,zero,1800521c <__sfvwrite_r+0x4b8>
18005178:	81400417 	ldw	r5,16(r16)
1800517c:	b00d883a 	mov	r6,r22
18005180:	1009883a 	mov	r4,r2
18005184:	8005d800 	call	18005d80 <memcpy>
18005188:	8080030b 	ldhu	r2,12(r16)
1800518c:	00fedfc4 	movi	r3,-1153
18005190:	10c4703a 	and	r2,r2,r3
18005194:	10802014 	ori	r2,r2,128
18005198:	8080030d 	sth	r2,12(r16)
1800519c:	bd89883a 	add	r4,r23,r22
180051a0:	9d8fc83a 	sub	r7,r19,r22
180051a4:	85c00415 	stw	r23,16(r16)
180051a8:	84c00515 	stw	r19,20(r16)
180051ac:	81000015 	stw	r4,0(r16)
180051b0:	9027883a 	mov	r19,r18
180051b4:	81c00215 	stw	r7,8(r16)
180051b8:	902f883a 	mov	r23,r18
180051bc:	003f3806 	br	18004ea0 <__alt_data_end+0xf8004ea0>
180051c0:	800b883a 	mov	r5,r16
180051c4:	a809883a 	mov	r4,r21
180051c8:	80095bc0 	call	180095bc <_fflush_r>
180051cc:	103fb926 	beq	r2,zero,180050b4 <__alt_data_end+0xf80050b4>
180051d0:	003f6506 	br	18004f68 <__alt_data_end+0xf8004f68>
180051d4:	a809883a 	mov	r4,r21
180051d8:	80072040 	call	18007204 <_realloc_r>
180051dc:	102f883a 	mov	r23,r2
180051e0:	103fee1e 	bne	r2,zero,1800519c <__alt_data_end+0xf800519c>
180051e4:	81400417 	ldw	r5,16(r16)
180051e8:	a809883a 	mov	r4,r21
180051ec:	800976c0 	call	1800976c <_free_r>
180051f0:	8080030b 	ldhu	r2,12(r16)
180051f4:	00ffdfc4 	movi	r3,-129
180051f8:	1884703a 	and	r2,r3,r2
180051fc:	00c00304 	movi	r3,12
18005200:	a8c00015 	stw	r3,0(r21)
18005204:	003f5906 	br	18004f6c <__alt_data_end+0xf8004f6c>
18005208:	94c00044 	addi	r19,r18,1
1800520c:	02000044 	movi	r8,1
18005210:	003f6006 	br	18004f94 <__alt_data_end+0xf8004f94>
18005214:	00bfffc4 	movi	r2,-1
18005218:	003f0006 	br	18004e1c <__alt_data_end+0xf8004e1c>
1800521c:	00800304 	movi	r2,12
18005220:	a8800015 	stw	r2,0(r21)
18005224:	8080030b 	ldhu	r2,12(r16)
18005228:	003f5006 	br	18004f6c <__alt_data_end+0xf8004f6c>

1800522c <_fwalk>:
1800522c:	defff704 	addi	sp,sp,-36
18005230:	dd000415 	stw	r20,16(sp)
18005234:	dfc00815 	stw	ra,32(sp)
18005238:	ddc00715 	stw	r23,28(sp)
1800523c:	dd800615 	stw	r22,24(sp)
18005240:	dd400515 	stw	r21,20(sp)
18005244:	dcc00315 	stw	r19,12(sp)
18005248:	dc800215 	stw	r18,8(sp)
1800524c:	dc400115 	stw	r17,4(sp)
18005250:	dc000015 	stw	r16,0(sp)
18005254:	2500b804 	addi	r20,r4,736
18005258:	a0002326 	beq	r20,zero,180052e8 <_fwalk+0xbc>
1800525c:	282b883a 	mov	r21,r5
18005260:	002f883a 	mov	r23,zero
18005264:	05800044 	movi	r22,1
18005268:	04ffffc4 	movi	r19,-1
1800526c:	a4400117 	ldw	r17,4(r20)
18005270:	a4800217 	ldw	r18,8(r20)
18005274:	8c7fffc4 	addi	r17,r17,-1
18005278:	88000d16 	blt	r17,zero,180052b0 <_fwalk+0x84>
1800527c:	94000304 	addi	r16,r18,12
18005280:	94800384 	addi	r18,r18,14
18005284:	8080000b 	ldhu	r2,0(r16)
18005288:	8c7fffc4 	addi	r17,r17,-1
1800528c:	813ffd04 	addi	r4,r16,-12
18005290:	b080042e 	bgeu	r22,r2,180052a4 <_fwalk+0x78>
18005294:	9080000f 	ldh	r2,0(r18)
18005298:	14c00226 	beq	r2,r19,180052a4 <_fwalk+0x78>
1800529c:	a83ee83a 	callr	r21
180052a0:	b8aeb03a 	or	r23,r23,r2
180052a4:	84001a04 	addi	r16,r16,104
180052a8:	94801a04 	addi	r18,r18,104
180052ac:	8cfff51e 	bne	r17,r19,18005284 <__alt_data_end+0xf8005284>
180052b0:	a5000017 	ldw	r20,0(r20)
180052b4:	a03fed1e 	bne	r20,zero,1800526c <__alt_data_end+0xf800526c>
180052b8:	b805883a 	mov	r2,r23
180052bc:	dfc00817 	ldw	ra,32(sp)
180052c0:	ddc00717 	ldw	r23,28(sp)
180052c4:	dd800617 	ldw	r22,24(sp)
180052c8:	dd400517 	ldw	r21,20(sp)
180052cc:	dd000417 	ldw	r20,16(sp)
180052d0:	dcc00317 	ldw	r19,12(sp)
180052d4:	dc800217 	ldw	r18,8(sp)
180052d8:	dc400117 	ldw	r17,4(sp)
180052dc:	dc000017 	ldw	r16,0(sp)
180052e0:	dec00904 	addi	sp,sp,36
180052e4:	f800283a 	ret
180052e8:	002f883a 	mov	r23,zero
180052ec:	003ff206 	br	180052b8 <__alt_data_end+0xf80052b8>

180052f0 <_fwalk_reent>:
180052f0:	defff704 	addi	sp,sp,-36
180052f4:	dd000415 	stw	r20,16(sp)
180052f8:	dfc00815 	stw	ra,32(sp)
180052fc:	ddc00715 	stw	r23,28(sp)
18005300:	dd800615 	stw	r22,24(sp)
18005304:	dd400515 	stw	r21,20(sp)
18005308:	dcc00315 	stw	r19,12(sp)
1800530c:	dc800215 	stw	r18,8(sp)
18005310:	dc400115 	stw	r17,4(sp)
18005314:	dc000015 	stw	r16,0(sp)
18005318:	2500b804 	addi	r20,r4,736
1800531c:	a0002326 	beq	r20,zero,180053ac <_fwalk_reent+0xbc>
18005320:	282b883a 	mov	r21,r5
18005324:	2027883a 	mov	r19,r4
18005328:	002f883a 	mov	r23,zero
1800532c:	05800044 	movi	r22,1
18005330:	04bfffc4 	movi	r18,-1
18005334:	a4400117 	ldw	r17,4(r20)
18005338:	a4000217 	ldw	r16,8(r20)
1800533c:	8c7fffc4 	addi	r17,r17,-1
18005340:	88000c16 	blt	r17,zero,18005374 <_fwalk_reent+0x84>
18005344:	84000304 	addi	r16,r16,12
18005348:	8080000b 	ldhu	r2,0(r16)
1800534c:	8c7fffc4 	addi	r17,r17,-1
18005350:	817ffd04 	addi	r5,r16,-12
18005354:	b080052e 	bgeu	r22,r2,1800536c <_fwalk_reent+0x7c>
18005358:	8080008f 	ldh	r2,2(r16)
1800535c:	9809883a 	mov	r4,r19
18005360:	14800226 	beq	r2,r18,1800536c <_fwalk_reent+0x7c>
18005364:	a83ee83a 	callr	r21
18005368:	b8aeb03a 	or	r23,r23,r2
1800536c:	84001a04 	addi	r16,r16,104
18005370:	8cbff51e 	bne	r17,r18,18005348 <__alt_data_end+0xf8005348>
18005374:	a5000017 	ldw	r20,0(r20)
18005378:	a03fee1e 	bne	r20,zero,18005334 <__alt_data_end+0xf8005334>
1800537c:	b805883a 	mov	r2,r23
18005380:	dfc00817 	ldw	ra,32(sp)
18005384:	ddc00717 	ldw	r23,28(sp)
18005388:	dd800617 	ldw	r22,24(sp)
1800538c:	dd400517 	ldw	r21,20(sp)
18005390:	dd000417 	ldw	r20,16(sp)
18005394:	dcc00317 	ldw	r19,12(sp)
18005398:	dc800217 	ldw	r18,8(sp)
1800539c:	dc400117 	ldw	r17,4(sp)
180053a0:	dc000017 	ldw	r16,0(sp)
180053a4:	dec00904 	addi	sp,sp,36
180053a8:	f800283a 	ret
180053ac:	002f883a 	mov	r23,zero
180053b0:	003ff206 	br	1800537c <__alt_data_end+0xf800537c>

180053b4 <_setlocale_r>:
180053b4:	30001b26 	beq	r6,zero,18005424 <_setlocale_r+0x70>
180053b8:	01460074 	movhi	r5,6145
180053bc:	defffe04 	addi	sp,sp,-8
180053c0:	297f1604 	addi	r5,r5,-936
180053c4:	3009883a 	mov	r4,r6
180053c8:	dc000015 	stw	r16,0(sp)
180053cc:	dfc00115 	stw	ra,4(sp)
180053d0:	3021883a 	mov	r16,r6
180053d4:	800796c0 	call	1800796c <strcmp>
180053d8:	1000061e 	bne	r2,zero,180053f4 <_setlocale_r+0x40>
180053dc:	00860074 	movhi	r2,6145
180053e0:	10bf1504 	addi	r2,r2,-940
180053e4:	dfc00117 	ldw	ra,4(sp)
180053e8:	dc000017 	ldw	r16,0(sp)
180053ec:	dec00204 	addi	sp,sp,8
180053f0:	f800283a 	ret
180053f4:	01460074 	movhi	r5,6145
180053f8:	297f1504 	addi	r5,r5,-940
180053fc:	8009883a 	mov	r4,r16
18005400:	800796c0 	call	1800796c <strcmp>
18005404:	103ff526 	beq	r2,zero,180053dc <__alt_data_end+0xf80053dc>
18005408:	01460074 	movhi	r5,6145
1800540c:	297f0004 	addi	r5,r5,-1024
18005410:	8009883a 	mov	r4,r16
18005414:	800796c0 	call	1800796c <strcmp>
18005418:	103ff026 	beq	r2,zero,180053dc <__alt_data_end+0xf80053dc>
1800541c:	0005883a 	mov	r2,zero
18005420:	003ff006 	br	180053e4 <__alt_data_end+0xf80053e4>
18005424:	00860074 	movhi	r2,6145
18005428:	10bf1504 	addi	r2,r2,-940
1800542c:	f800283a 	ret

18005430 <__locale_charset>:
18005430:	00860074 	movhi	r2,6145
18005434:	1081dc04 	addi	r2,r2,1904
18005438:	f800283a 	ret

1800543c <__locale_mb_cur_max>:
1800543c:	00860074 	movhi	r2,6145
18005440:	10877b04 	addi	r2,r2,7660
18005444:	10800017 	ldw	r2,0(r2)
18005448:	f800283a 	ret

1800544c <__locale_msgcharset>:
1800544c:	00860074 	movhi	r2,6145
18005450:	1081d404 	addi	r2,r2,1872
18005454:	f800283a 	ret

18005458 <__locale_cjk_lang>:
18005458:	0005883a 	mov	r2,zero
1800545c:	f800283a 	ret

18005460 <_localeconv_r>:
18005460:	00860074 	movhi	r2,6145
18005464:	1081e404 	addi	r2,r2,1936
18005468:	f800283a 	ret

1800546c <setlocale>:
1800546c:	00860074 	movhi	r2,6145
18005470:	10877a04 	addi	r2,r2,7656
18005474:	280d883a 	mov	r6,r5
18005478:	200b883a 	mov	r5,r4
1800547c:	11000017 	ldw	r4,0(r2)
18005480:	80053b41 	jmpi	180053b4 <_setlocale_r>

18005484 <localeconv>:
18005484:	00860074 	movhi	r2,6145
18005488:	1081e404 	addi	r2,r2,1936
1800548c:	f800283a 	ret

18005490 <_malloc_r>:
18005490:	defff504 	addi	sp,sp,-44
18005494:	dc800315 	stw	r18,12(sp)
18005498:	dfc00a15 	stw	ra,40(sp)
1800549c:	df000915 	stw	fp,36(sp)
180054a0:	ddc00815 	stw	r23,32(sp)
180054a4:	dd800715 	stw	r22,28(sp)
180054a8:	dd400615 	stw	r21,24(sp)
180054ac:	dd000515 	stw	r20,20(sp)
180054b0:	dcc00415 	stw	r19,16(sp)
180054b4:	dc400215 	stw	r17,8(sp)
180054b8:	dc000115 	stw	r16,4(sp)
180054bc:	288002c4 	addi	r2,r5,11
180054c0:	00c00584 	movi	r3,22
180054c4:	2025883a 	mov	r18,r4
180054c8:	18807f2e 	bgeu	r3,r2,180056c8 <_malloc_r+0x238>
180054cc:	047ffe04 	movi	r17,-8
180054d0:	1462703a 	and	r17,r2,r17
180054d4:	8800a316 	blt	r17,zero,18005764 <_malloc_r+0x2d4>
180054d8:	8940a236 	bltu	r17,r5,18005764 <_malloc_r+0x2d4>
180054dc:	800d8b40 	call	1800d8b4 <__malloc_lock>
180054e0:	00807dc4 	movi	r2,503
180054e4:	1441e92e 	bgeu	r2,r17,18005c8c <_malloc_r+0x7fc>
180054e8:	8804d27a 	srli	r2,r17,9
180054ec:	1000a126 	beq	r2,zero,18005774 <_malloc_r+0x2e4>
180054f0:	00c00104 	movi	r3,4
180054f4:	18811e36 	bltu	r3,r2,18005970 <_malloc_r+0x4e0>
180054f8:	8804d1ba 	srli	r2,r17,6
180054fc:	12000e44 	addi	r8,r2,57
18005500:	11c00e04 	addi	r7,r2,56
18005504:	4209883a 	add	r4,r8,r8
18005508:	04c60074 	movhi	r19,6145
1800550c:	2109883a 	add	r4,r4,r4
18005510:	9cc1f204 	addi	r19,r19,1992
18005514:	2109883a 	add	r4,r4,r4
18005518:	9909883a 	add	r4,r19,r4
1800551c:	24000117 	ldw	r16,4(r4)
18005520:	213ffe04 	addi	r4,r4,-8
18005524:	24009726 	beq	r4,r16,18005784 <_malloc_r+0x2f4>
18005528:	80800117 	ldw	r2,4(r16)
1800552c:	01bfff04 	movi	r6,-4
18005530:	014003c4 	movi	r5,15
18005534:	1184703a 	and	r2,r2,r6
18005538:	1447c83a 	sub	r3,r2,r17
1800553c:	28c00716 	blt	r5,r3,1800555c <_malloc_r+0xcc>
18005540:	1800920e 	bge	r3,zero,1800578c <_malloc_r+0x2fc>
18005544:	84000317 	ldw	r16,12(r16)
18005548:	24008e26 	beq	r4,r16,18005784 <_malloc_r+0x2f4>
1800554c:	80800117 	ldw	r2,4(r16)
18005550:	1184703a 	and	r2,r2,r6
18005554:	1447c83a 	sub	r3,r2,r17
18005558:	28fff90e 	bge	r5,r3,18005540 <__alt_data_end+0xf8005540>
1800555c:	3809883a 	mov	r4,r7
18005560:	01860074 	movhi	r6,6145
18005564:	9c000417 	ldw	r16,16(r19)
18005568:	3181f204 	addi	r6,r6,1992
1800556c:	32000204 	addi	r8,r6,8
18005570:	82013426 	beq	r16,r8,18005a44 <_malloc_r+0x5b4>
18005574:	80c00117 	ldw	r3,4(r16)
18005578:	00bfff04 	movi	r2,-4
1800557c:	188e703a 	and	r7,r3,r2
18005580:	3c45c83a 	sub	r2,r7,r17
18005584:	00c003c4 	movi	r3,15
18005588:	18811f16 	blt	r3,r2,18005a08 <_malloc_r+0x578>
1800558c:	32000515 	stw	r8,20(r6)
18005590:	32000415 	stw	r8,16(r6)
18005594:	10007f0e 	bge	r2,zero,18005794 <_malloc_r+0x304>
18005598:	00807fc4 	movi	r2,511
1800559c:	11c0fd36 	bltu	r2,r7,18005994 <_malloc_r+0x504>
180055a0:	3806d0fa 	srli	r3,r7,3
180055a4:	01c00044 	movi	r7,1
180055a8:	30800117 	ldw	r2,4(r6)
180055ac:	19400044 	addi	r5,r3,1
180055b0:	294b883a 	add	r5,r5,r5
180055b4:	1807d0ba 	srai	r3,r3,2
180055b8:	294b883a 	add	r5,r5,r5
180055bc:	294b883a 	add	r5,r5,r5
180055c0:	298b883a 	add	r5,r5,r6
180055c4:	38c6983a 	sll	r3,r7,r3
180055c8:	29c00017 	ldw	r7,0(r5)
180055cc:	2a7ffe04 	addi	r9,r5,-8
180055d0:	1886b03a 	or	r3,r3,r2
180055d4:	82400315 	stw	r9,12(r16)
180055d8:	81c00215 	stw	r7,8(r16)
180055dc:	30c00115 	stw	r3,4(r6)
180055e0:	2c000015 	stw	r16,0(r5)
180055e4:	3c000315 	stw	r16,12(r7)
180055e8:	2005d0ba 	srai	r2,r4,2
180055ec:	01400044 	movi	r5,1
180055f0:	288a983a 	sll	r5,r5,r2
180055f4:	19406f36 	bltu	r3,r5,180057b4 <_malloc_r+0x324>
180055f8:	28c4703a 	and	r2,r5,r3
180055fc:	10000a1e 	bne	r2,zero,18005628 <_malloc_r+0x198>
18005600:	00bfff04 	movi	r2,-4
18005604:	294b883a 	add	r5,r5,r5
18005608:	2088703a 	and	r4,r4,r2
1800560c:	28c4703a 	and	r2,r5,r3
18005610:	21000104 	addi	r4,r4,4
18005614:	1000041e 	bne	r2,zero,18005628 <_malloc_r+0x198>
18005618:	294b883a 	add	r5,r5,r5
1800561c:	28c4703a 	and	r2,r5,r3
18005620:	21000104 	addi	r4,r4,4
18005624:	103ffc26 	beq	r2,zero,18005618 <__alt_data_end+0xf8005618>
18005628:	02bfff04 	movi	r10,-4
1800562c:	024003c4 	movi	r9,15
18005630:	21800044 	addi	r6,r4,1
18005634:	318d883a 	add	r6,r6,r6
18005638:	318d883a 	add	r6,r6,r6
1800563c:	318d883a 	add	r6,r6,r6
18005640:	998d883a 	add	r6,r19,r6
18005644:	333ffe04 	addi	r12,r6,-8
18005648:	2017883a 	mov	r11,r4
1800564c:	31800104 	addi	r6,r6,4
18005650:	34000017 	ldw	r16,0(r6)
18005654:	31fffd04 	addi	r7,r6,-12
18005658:	81c0041e 	bne	r16,r7,1800566c <_malloc_r+0x1dc>
1800565c:	0000fb06 	br	18005a4c <_malloc_r+0x5bc>
18005660:	1801030e 	bge	r3,zero,18005a70 <_malloc_r+0x5e0>
18005664:	84000317 	ldw	r16,12(r16)
18005668:	81c0f826 	beq	r16,r7,18005a4c <_malloc_r+0x5bc>
1800566c:	80800117 	ldw	r2,4(r16)
18005670:	1284703a 	and	r2,r2,r10
18005674:	1447c83a 	sub	r3,r2,r17
18005678:	48fff90e 	bge	r9,r3,18005660 <__alt_data_end+0xf8005660>
1800567c:	80800317 	ldw	r2,12(r16)
18005680:	81000217 	ldw	r4,8(r16)
18005684:	89400054 	ori	r5,r17,1
18005688:	81400115 	stw	r5,4(r16)
1800568c:	20800315 	stw	r2,12(r4)
18005690:	11000215 	stw	r4,8(r2)
18005694:	8463883a 	add	r17,r16,r17
18005698:	9c400515 	stw	r17,20(r19)
1800569c:	9c400415 	stw	r17,16(r19)
180056a0:	18800054 	ori	r2,r3,1
180056a4:	88800115 	stw	r2,4(r17)
180056a8:	8a000315 	stw	r8,12(r17)
180056ac:	8a000215 	stw	r8,8(r17)
180056b0:	88e3883a 	add	r17,r17,r3
180056b4:	88c00015 	stw	r3,0(r17)
180056b8:	9009883a 	mov	r4,r18
180056bc:	800d8d80 	call	1800d8d8 <__malloc_unlock>
180056c0:	80800204 	addi	r2,r16,8
180056c4:	00001b06 	br	18005734 <_malloc_r+0x2a4>
180056c8:	04400404 	movi	r17,16
180056cc:	89402536 	bltu	r17,r5,18005764 <_malloc_r+0x2d4>
180056d0:	800d8b40 	call	1800d8b4 <__malloc_lock>
180056d4:	00800184 	movi	r2,6
180056d8:	01000084 	movi	r4,2
180056dc:	04c60074 	movhi	r19,6145
180056e0:	1085883a 	add	r2,r2,r2
180056e4:	9cc1f204 	addi	r19,r19,1992
180056e8:	1085883a 	add	r2,r2,r2
180056ec:	9885883a 	add	r2,r19,r2
180056f0:	14000117 	ldw	r16,4(r2)
180056f4:	10fffe04 	addi	r3,r2,-8
180056f8:	80c0d926 	beq	r16,r3,18005a60 <_malloc_r+0x5d0>
180056fc:	80c00117 	ldw	r3,4(r16)
18005700:	81000317 	ldw	r4,12(r16)
18005704:	00bfff04 	movi	r2,-4
18005708:	1884703a 	and	r2,r3,r2
1800570c:	81400217 	ldw	r5,8(r16)
18005710:	8085883a 	add	r2,r16,r2
18005714:	10c00117 	ldw	r3,4(r2)
18005718:	29000315 	stw	r4,12(r5)
1800571c:	21400215 	stw	r5,8(r4)
18005720:	18c00054 	ori	r3,r3,1
18005724:	10c00115 	stw	r3,4(r2)
18005728:	9009883a 	mov	r4,r18
1800572c:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18005730:	80800204 	addi	r2,r16,8
18005734:	dfc00a17 	ldw	ra,40(sp)
18005738:	df000917 	ldw	fp,36(sp)
1800573c:	ddc00817 	ldw	r23,32(sp)
18005740:	dd800717 	ldw	r22,28(sp)
18005744:	dd400617 	ldw	r21,24(sp)
18005748:	dd000517 	ldw	r20,20(sp)
1800574c:	dcc00417 	ldw	r19,16(sp)
18005750:	dc800317 	ldw	r18,12(sp)
18005754:	dc400217 	ldw	r17,8(sp)
18005758:	dc000117 	ldw	r16,4(sp)
1800575c:	dec00b04 	addi	sp,sp,44
18005760:	f800283a 	ret
18005764:	00800304 	movi	r2,12
18005768:	90800015 	stw	r2,0(r18)
1800576c:	0005883a 	mov	r2,zero
18005770:	003ff006 	br	18005734 <__alt_data_end+0xf8005734>
18005774:	01002004 	movi	r4,128
18005778:	02001004 	movi	r8,64
1800577c:	01c00fc4 	movi	r7,63
18005780:	003f6106 	br	18005508 <__alt_data_end+0xf8005508>
18005784:	4009883a 	mov	r4,r8
18005788:	003f7506 	br	18005560 <__alt_data_end+0xf8005560>
1800578c:	81000317 	ldw	r4,12(r16)
18005790:	003fde06 	br	1800570c <__alt_data_end+0xf800570c>
18005794:	81c5883a 	add	r2,r16,r7
18005798:	11400117 	ldw	r5,4(r2)
1800579c:	9009883a 	mov	r4,r18
180057a0:	29400054 	ori	r5,r5,1
180057a4:	11400115 	stw	r5,4(r2)
180057a8:	800d8d80 	call	1800d8d8 <__malloc_unlock>
180057ac:	80800204 	addi	r2,r16,8
180057b0:	003fe006 	br	18005734 <__alt_data_end+0xf8005734>
180057b4:	9c000217 	ldw	r16,8(r19)
180057b8:	00bfff04 	movi	r2,-4
180057bc:	85800117 	ldw	r22,4(r16)
180057c0:	b0ac703a 	and	r22,r22,r2
180057c4:	b4400336 	bltu	r22,r17,180057d4 <_malloc_r+0x344>
180057c8:	b445c83a 	sub	r2,r22,r17
180057cc:	00c003c4 	movi	r3,15
180057d0:	18805d16 	blt	r3,r2,18005948 <_malloc_r+0x4b8>
180057d4:	05c60074 	movhi	r23,6145
180057d8:	00860074 	movhi	r2,6145
180057dc:	108f5e04 	addi	r2,r2,15736
180057e0:	bdc77c04 	addi	r23,r23,7664
180057e4:	15400017 	ldw	r21,0(r2)
180057e8:	b8c00017 	ldw	r3,0(r23)
180057ec:	00bfffc4 	movi	r2,-1
180057f0:	858d883a 	add	r6,r16,r22
180057f4:	8d6b883a 	add	r21,r17,r21
180057f8:	1880ea26 	beq	r3,r2,18005ba4 <_malloc_r+0x714>
180057fc:	ad4403c4 	addi	r21,r21,4111
18005800:	00bc0004 	movi	r2,-4096
18005804:	a8aa703a 	and	r21,r21,r2
18005808:	a80b883a 	mov	r5,r21
1800580c:	9009883a 	mov	r4,r18
18005810:	d9800015 	stw	r6,0(sp)
18005814:	80077dc0 	call	180077dc <_sbrk_r>
18005818:	1029883a 	mov	r20,r2
1800581c:	00bfffc4 	movi	r2,-1
18005820:	d9800017 	ldw	r6,0(sp)
18005824:	a080e826 	beq	r20,r2,18005bc8 <_malloc_r+0x738>
18005828:	a180a636 	bltu	r20,r6,18005ac4 <_malloc_r+0x634>
1800582c:	07060074 	movhi	fp,6145
18005830:	e70f6704 	addi	fp,fp,15772
18005834:	e0800017 	ldw	r2,0(fp)
18005838:	a887883a 	add	r3,r21,r2
1800583c:	e0c00015 	stw	r3,0(fp)
18005840:	3500e626 	beq	r6,r20,18005bdc <_malloc_r+0x74c>
18005844:	b9000017 	ldw	r4,0(r23)
18005848:	00bfffc4 	movi	r2,-1
1800584c:	2080ee26 	beq	r4,r2,18005c08 <_malloc_r+0x778>
18005850:	a185c83a 	sub	r2,r20,r6
18005854:	10c5883a 	add	r2,r2,r3
18005858:	e0800015 	stw	r2,0(fp)
1800585c:	a0c001cc 	andi	r3,r20,7
18005860:	1800bc26 	beq	r3,zero,18005b54 <_malloc_r+0x6c4>
18005864:	a0e9c83a 	sub	r20,r20,r3
18005868:	00840204 	movi	r2,4104
1800586c:	a5000204 	addi	r20,r20,8
18005870:	10c7c83a 	sub	r3,r2,r3
18005874:	a545883a 	add	r2,r20,r21
18005878:	1083ffcc 	andi	r2,r2,4095
1800587c:	18abc83a 	sub	r21,r3,r2
18005880:	a80b883a 	mov	r5,r21
18005884:	9009883a 	mov	r4,r18
18005888:	80077dc0 	call	180077dc <_sbrk_r>
1800588c:	00ffffc4 	movi	r3,-1
18005890:	10c0e126 	beq	r2,r3,18005c18 <_malloc_r+0x788>
18005894:	1505c83a 	sub	r2,r2,r20
18005898:	1545883a 	add	r2,r2,r21
1800589c:	10800054 	ori	r2,r2,1
180058a0:	e0c00017 	ldw	r3,0(fp)
180058a4:	9d000215 	stw	r20,8(r19)
180058a8:	a0800115 	stw	r2,4(r20)
180058ac:	a8c7883a 	add	r3,r21,r3
180058b0:	e0c00015 	stw	r3,0(fp)
180058b4:	84c00e26 	beq	r16,r19,180058f0 <_malloc_r+0x460>
180058b8:	018003c4 	movi	r6,15
180058bc:	3580a72e 	bgeu	r6,r22,18005b5c <_malloc_r+0x6cc>
180058c0:	81400117 	ldw	r5,4(r16)
180058c4:	013ffe04 	movi	r4,-8
180058c8:	b0bffd04 	addi	r2,r22,-12
180058cc:	1104703a 	and	r2,r2,r4
180058d0:	2900004c 	andi	r4,r5,1
180058d4:	2088b03a 	or	r4,r4,r2
180058d8:	81000115 	stw	r4,4(r16)
180058dc:	01400144 	movi	r5,5
180058e0:	8089883a 	add	r4,r16,r2
180058e4:	21400115 	stw	r5,4(r4)
180058e8:	21400215 	stw	r5,8(r4)
180058ec:	3080cd36 	bltu	r6,r2,18005c24 <_malloc_r+0x794>
180058f0:	00860074 	movhi	r2,6145
180058f4:	108f5d04 	addi	r2,r2,15732
180058f8:	11000017 	ldw	r4,0(r2)
180058fc:	20c0012e 	bgeu	r4,r3,18005904 <_malloc_r+0x474>
18005900:	10c00015 	stw	r3,0(r2)
18005904:	00860074 	movhi	r2,6145
18005908:	108f5c04 	addi	r2,r2,15728
1800590c:	11000017 	ldw	r4,0(r2)
18005910:	9c000217 	ldw	r16,8(r19)
18005914:	20c0012e 	bgeu	r4,r3,1800591c <_malloc_r+0x48c>
18005918:	10c00015 	stw	r3,0(r2)
1800591c:	80c00117 	ldw	r3,4(r16)
18005920:	00bfff04 	movi	r2,-4
18005924:	1886703a 	and	r3,r3,r2
18005928:	1c45c83a 	sub	r2,r3,r17
1800592c:	1c400236 	bltu	r3,r17,18005938 <_malloc_r+0x4a8>
18005930:	00c003c4 	movi	r3,15
18005934:	18800416 	blt	r3,r2,18005948 <_malloc_r+0x4b8>
18005938:	9009883a 	mov	r4,r18
1800593c:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18005940:	0005883a 	mov	r2,zero
18005944:	003f7b06 	br	18005734 <__alt_data_end+0xf8005734>
18005948:	88c00054 	ori	r3,r17,1
1800594c:	80c00115 	stw	r3,4(r16)
18005950:	8463883a 	add	r17,r16,r17
18005954:	10800054 	ori	r2,r2,1
18005958:	9c400215 	stw	r17,8(r19)
1800595c:	88800115 	stw	r2,4(r17)
18005960:	9009883a 	mov	r4,r18
18005964:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18005968:	80800204 	addi	r2,r16,8
1800596c:	003f7106 	br	18005734 <__alt_data_end+0xf8005734>
18005970:	00c00504 	movi	r3,20
18005974:	18804a2e 	bgeu	r3,r2,18005aa0 <_malloc_r+0x610>
18005978:	00c01504 	movi	r3,84
1800597c:	18806e36 	bltu	r3,r2,18005b38 <_malloc_r+0x6a8>
18005980:	8804d33a 	srli	r2,r17,12
18005984:	12001bc4 	addi	r8,r2,111
18005988:	11c01b84 	addi	r7,r2,110
1800598c:	4209883a 	add	r4,r8,r8
18005990:	003edd06 	br	18005508 <__alt_data_end+0xf8005508>
18005994:	3804d27a 	srli	r2,r7,9
18005998:	00c00104 	movi	r3,4
1800599c:	1880442e 	bgeu	r3,r2,18005ab0 <_malloc_r+0x620>
180059a0:	00c00504 	movi	r3,20
180059a4:	18808136 	bltu	r3,r2,18005bac <_malloc_r+0x71c>
180059a8:	11401704 	addi	r5,r2,92
180059ac:	10c016c4 	addi	r3,r2,91
180059b0:	294b883a 	add	r5,r5,r5
180059b4:	294b883a 	add	r5,r5,r5
180059b8:	294b883a 	add	r5,r5,r5
180059bc:	994b883a 	add	r5,r19,r5
180059c0:	28800017 	ldw	r2,0(r5)
180059c4:	01860074 	movhi	r6,6145
180059c8:	297ffe04 	addi	r5,r5,-8
180059cc:	3181f204 	addi	r6,r6,1992
180059d0:	28806526 	beq	r5,r2,18005b68 <_malloc_r+0x6d8>
180059d4:	01bfff04 	movi	r6,-4
180059d8:	10c00117 	ldw	r3,4(r2)
180059dc:	1986703a 	and	r3,r3,r6
180059e0:	38c0022e 	bgeu	r7,r3,180059ec <_malloc_r+0x55c>
180059e4:	10800217 	ldw	r2,8(r2)
180059e8:	28bffb1e 	bne	r5,r2,180059d8 <__alt_data_end+0xf80059d8>
180059ec:	11400317 	ldw	r5,12(r2)
180059f0:	98c00117 	ldw	r3,4(r19)
180059f4:	81400315 	stw	r5,12(r16)
180059f8:	80800215 	stw	r2,8(r16)
180059fc:	2c000215 	stw	r16,8(r5)
18005a00:	14000315 	stw	r16,12(r2)
18005a04:	003ef806 	br	180055e8 <__alt_data_end+0xf80055e8>
18005a08:	88c00054 	ori	r3,r17,1
18005a0c:	80c00115 	stw	r3,4(r16)
18005a10:	8463883a 	add	r17,r16,r17
18005a14:	34400515 	stw	r17,20(r6)
18005a18:	34400415 	stw	r17,16(r6)
18005a1c:	10c00054 	ori	r3,r2,1
18005a20:	8a000315 	stw	r8,12(r17)
18005a24:	8a000215 	stw	r8,8(r17)
18005a28:	88c00115 	stw	r3,4(r17)
18005a2c:	88a3883a 	add	r17,r17,r2
18005a30:	88800015 	stw	r2,0(r17)
18005a34:	9009883a 	mov	r4,r18
18005a38:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18005a3c:	80800204 	addi	r2,r16,8
18005a40:	003f3c06 	br	18005734 <__alt_data_end+0xf8005734>
18005a44:	30c00117 	ldw	r3,4(r6)
18005a48:	003ee706 	br	180055e8 <__alt_data_end+0xf80055e8>
18005a4c:	5ac00044 	addi	r11,r11,1
18005a50:	588000cc 	andi	r2,r11,3
18005a54:	31800204 	addi	r6,r6,8
18005a58:	103efd1e 	bne	r2,zero,18005650 <__alt_data_end+0xf8005650>
18005a5c:	00002406 	br	18005af0 <_malloc_r+0x660>
18005a60:	14000317 	ldw	r16,12(r2)
18005a64:	143f251e 	bne	r2,r16,180056fc <__alt_data_end+0xf80056fc>
18005a68:	21000084 	addi	r4,r4,2
18005a6c:	003ebc06 	br	18005560 <__alt_data_end+0xf8005560>
18005a70:	8085883a 	add	r2,r16,r2
18005a74:	10c00117 	ldw	r3,4(r2)
18005a78:	81000317 	ldw	r4,12(r16)
18005a7c:	81400217 	ldw	r5,8(r16)
18005a80:	18c00054 	ori	r3,r3,1
18005a84:	10c00115 	stw	r3,4(r2)
18005a88:	29000315 	stw	r4,12(r5)
18005a8c:	21400215 	stw	r5,8(r4)
18005a90:	9009883a 	mov	r4,r18
18005a94:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18005a98:	80800204 	addi	r2,r16,8
18005a9c:	003f2506 	br	18005734 <__alt_data_end+0xf8005734>
18005aa0:	12001704 	addi	r8,r2,92
18005aa4:	11c016c4 	addi	r7,r2,91
18005aa8:	4209883a 	add	r4,r8,r8
18005aac:	003e9606 	br	18005508 <__alt_data_end+0xf8005508>
18005ab0:	3804d1ba 	srli	r2,r7,6
18005ab4:	11400e44 	addi	r5,r2,57
18005ab8:	10c00e04 	addi	r3,r2,56
18005abc:	294b883a 	add	r5,r5,r5
18005ac0:	003fbc06 	br	180059b4 <__alt_data_end+0xf80059b4>
18005ac4:	84ff5926 	beq	r16,r19,1800582c <__alt_data_end+0xf800582c>
18005ac8:	00860074 	movhi	r2,6145
18005acc:	1081f204 	addi	r2,r2,1992
18005ad0:	14000217 	ldw	r16,8(r2)
18005ad4:	00bfff04 	movi	r2,-4
18005ad8:	80c00117 	ldw	r3,4(r16)
18005adc:	1886703a 	and	r3,r3,r2
18005ae0:	003f9106 	br	18005928 <__alt_data_end+0xf8005928>
18005ae4:	60800217 	ldw	r2,8(r12)
18005ae8:	213fffc4 	addi	r4,r4,-1
18005aec:	1300651e 	bne	r2,r12,18005c84 <_malloc_r+0x7f4>
18005af0:	208000cc 	andi	r2,r4,3
18005af4:	633ffe04 	addi	r12,r12,-8
18005af8:	103ffa1e 	bne	r2,zero,18005ae4 <__alt_data_end+0xf8005ae4>
18005afc:	98800117 	ldw	r2,4(r19)
18005b00:	0146303a 	nor	r3,zero,r5
18005b04:	1884703a 	and	r2,r3,r2
18005b08:	98800115 	stw	r2,4(r19)
18005b0c:	294b883a 	add	r5,r5,r5
18005b10:	117f2836 	bltu	r2,r5,180057b4 <__alt_data_end+0xf80057b4>
18005b14:	283f2726 	beq	r5,zero,180057b4 <__alt_data_end+0xf80057b4>
18005b18:	2886703a 	and	r3,r5,r2
18005b1c:	5809883a 	mov	r4,r11
18005b20:	183ec31e 	bne	r3,zero,18005630 <__alt_data_end+0xf8005630>
18005b24:	294b883a 	add	r5,r5,r5
18005b28:	2886703a 	and	r3,r5,r2
18005b2c:	21000104 	addi	r4,r4,4
18005b30:	183ffc26 	beq	r3,zero,18005b24 <__alt_data_end+0xf8005b24>
18005b34:	003ebe06 	br	18005630 <__alt_data_end+0xf8005630>
18005b38:	00c05504 	movi	r3,340
18005b3c:	18801236 	bltu	r3,r2,18005b88 <_malloc_r+0x6f8>
18005b40:	8804d3fa 	srli	r2,r17,15
18005b44:	12001e04 	addi	r8,r2,120
18005b48:	11c01dc4 	addi	r7,r2,119
18005b4c:	4209883a 	add	r4,r8,r8
18005b50:	003e6d06 	br	18005508 <__alt_data_end+0xf8005508>
18005b54:	00c40004 	movi	r3,4096
18005b58:	003f4606 	br	18005874 <__alt_data_end+0xf8005874>
18005b5c:	00800044 	movi	r2,1
18005b60:	a0800115 	stw	r2,4(r20)
18005b64:	003f7406 	br	18005938 <__alt_data_end+0xf8005938>
18005b68:	1805d0ba 	srai	r2,r3,2
18005b6c:	01c00044 	movi	r7,1
18005b70:	30c00117 	ldw	r3,4(r6)
18005b74:	388e983a 	sll	r7,r7,r2
18005b78:	2805883a 	mov	r2,r5
18005b7c:	38c6b03a 	or	r3,r7,r3
18005b80:	30c00115 	stw	r3,4(r6)
18005b84:	003f9b06 	br	180059f4 <__alt_data_end+0xf80059f4>
18005b88:	00c15504 	movi	r3,1364
18005b8c:	18801a36 	bltu	r3,r2,18005bf8 <_malloc_r+0x768>
18005b90:	8804d4ba 	srli	r2,r17,18
18005b94:	12001f44 	addi	r8,r2,125
18005b98:	11c01f04 	addi	r7,r2,124
18005b9c:	4209883a 	add	r4,r8,r8
18005ba0:	003e5906 	br	18005508 <__alt_data_end+0xf8005508>
18005ba4:	ad400404 	addi	r21,r21,16
18005ba8:	003f1706 	br	18005808 <__alt_data_end+0xf8005808>
18005bac:	00c01504 	movi	r3,84
18005bb0:	18802336 	bltu	r3,r2,18005c40 <_malloc_r+0x7b0>
18005bb4:	3804d33a 	srli	r2,r7,12
18005bb8:	11401bc4 	addi	r5,r2,111
18005bbc:	10c01b84 	addi	r3,r2,110
18005bc0:	294b883a 	add	r5,r5,r5
18005bc4:	003f7b06 	br	180059b4 <__alt_data_end+0xf80059b4>
18005bc8:	9c000217 	ldw	r16,8(r19)
18005bcc:	00bfff04 	movi	r2,-4
18005bd0:	80c00117 	ldw	r3,4(r16)
18005bd4:	1886703a 	and	r3,r3,r2
18005bd8:	003f5306 	br	18005928 <__alt_data_end+0xf8005928>
18005bdc:	3083ffcc 	andi	r2,r6,4095
18005be0:	103f181e 	bne	r2,zero,18005844 <__alt_data_end+0xf8005844>
18005be4:	99000217 	ldw	r4,8(r19)
18005be8:	b545883a 	add	r2,r22,r21
18005bec:	10800054 	ori	r2,r2,1
18005bf0:	20800115 	stw	r2,4(r4)
18005bf4:	003f3e06 	br	180058f0 <__alt_data_end+0xf80058f0>
18005bf8:	01003f84 	movi	r4,254
18005bfc:	02001fc4 	movi	r8,127
18005c00:	01c01f84 	movi	r7,126
18005c04:	003e4006 	br	18005508 <__alt_data_end+0xf8005508>
18005c08:	00860074 	movhi	r2,6145
18005c0c:	10877c04 	addi	r2,r2,7664
18005c10:	15000015 	stw	r20,0(r2)
18005c14:	003f1106 	br	1800585c <__alt_data_end+0xf800585c>
18005c18:	00800044 	movi	r2,1
18005c1c:	002b883a 	mov	r21,zero
18005c20:	003f1f06 	br	180058a0 <__alt_data_end+0xf80058a0>
18005c24:	81400204 	addi	r5,r16,8
18005c28:	9009883a 	mov	r4,r18
18005c2c:	800976c0 	call	1800976c <_free_r>
18005c30:	00860074 	movhi	r2,6145
18005c34:	108f6704 	addi	r2,r2,15772
18005c38:	10c00017 	ldw	r3,0(r2)
18005c3c:	003f2c06 	br	180058f0 <__alt_data_end+0xf80058f0>
18005c40:	00c05504 	movi	r3,340
18005c44:	18800536 	bltu	r3,r2,18005c5c <_malloc_r+0x7cc>
18005c48:	3804d3fa 	srli	r2,r7,15
18005c4c:	11401e04 	addi	r5,r2,120
18005c50:	10c01dc4 	addi	r3,r2,119
18005c54:	294b883a 	add	r5,r5,r5
18005c58:	003f5606 	br	180059b4 <__alt_data_end+0xf80059b4>
18005c5c:	00c15504 	movi	r3,1364
18005c60:	18800536 	bltu	r3,r2,18005c78 <_malloc_r+0x7e8>
18005c64:	3804d4ba 	srli	r2,r7,18
18005c68:	11401f44 	addi	r5,r2,125
18005c6c:	10c01f04 	addi	r3,r2,124
18005c70:	294b883a 	add	r5,r5,r5
18005c74:	003f4f06 	br	180059b4 <__alt_data_end+0xf80059b4>
18005c78:	01403f84 	movi	r5,254
18005c7c:	00c01f84 	movi	r3,126
18005c80:	003f4c06 	br	180059b4 <__alt_data_end+0xf80059b4>
18005c84:	98800117 	ldw	r2,4(r19)
18005c88:	003fa006 	br	18005b0c <__alt_data_end+0xf8005b0c>
18005c8c:	8808d0fa 	srli	r4,r17,3
18005c90:	20800044 	addi	r2,r4,1
18005c94:	1085883a 	add	r2,r2,r2
18005c98:	003e9006 	br	180056dc <__alt_data_end+0xf80056dc>

18005c9c <memchr>:
18005c9c:	208000cc 	andi	r2,r4,3
18005ca0:	280f883a 	mov	r7,r5
18005ca4:	10003426 	beq	r2,zero,18005d78 <memchr+0xdc>
18005ca8:	30bfffc4 	addi	r2,r6,-1
18005cac:	30001a26 	beq	r6,zero,18005d18 <memchr+0x7c>
18005cb0:	20c00003 	ldbu	r3,0(r4)
18005cb4:	29803fcc 	andi	r6,r5,255
18005cb8:	30c0051e 	bne	r6,r3,18005cd0 <memchr+0x34>
18005cbc:	00001806 	br	18005d20 <memchr+0x84>
18005cc0:	10001526 	beq	r2,zero,18005d18 <memchr+0x7c>
18005cc4:	20c00003 	ldbu	r3,0(r4)
18005cc8:	10bfffc4 	addi	r2,r2,-1
18005ccc:	30c01426 	beq	r6,r3,18005d20 <memchr+0x84>
18005cd0:	21000044 	addi	r4,r4,1
18005cd4:	20c000cc 	andi	r3,r4,3
18005cd8:	183ff91e 	bne	r3,zero,18005cc0 <__alt_data_end+0xf8005cc0>
18005cdc:	020000c4 	movi	r8,3
18005ce0:	40801136 	bltu	r8,r2,18005d28 <memchr+0x8c>
18005ce4:	10000c26 	beq	r2,zero,18005d18 <memchr+0x7c>
18005ce8:	20c00003 	ldbu	r3,0(r4)
18005cec:	29403fcc 	andi	r5,r5,255
18005cf0:	28c00b26 	beq	r5,r3,18005d20 <memchr+0x84>
18005cf4:	20c00044 	addi	r3,r4,1
18005cf8:	39803fcc 	andi	r6,r7,255
18005cfc:	2089883a 	add	r4,r4,r2
18005d00:	00000306 	br	18005d10 <memchr+0x74>
18005d04:	18c00044 	addi	r3,r3,1
18005d08:	197fffc3 	ldbu	r5,-1(r3)
18005d0c:	31400526 	beq	r6,r5,18005d24 <memchr+0x88>
18005d10:	1805883a 	mov	r2,r3
18005d14:	20fffb1e 	bne	r4,r3,18005d04 <__alt_data_end+0xf8005d04>
18005d18:	0005883a 	mov	r2,zero
18005d1c:	f800283a 	ret
18005d20:	2005883a 	mov	r2,r4
18005d24:	f800283a 	ret
18005d28:	28c03fcc 	andi	r3,r5,255
18005d2c:	1812923a 	slli	r9,r3,8
18005d30:	02ffbff4 	movhi	r11,65279
18005d34:	02a02074 	movhi	r10,32897
18005d38:	48d2b03a 	or	r9,r9,r3
18005d3c:	4806943a 	slli	r3,r9,16
18005d40:	5affbfc4 	addi	r11,r11,-257
18005d44:	52a02004 	addi	r10,r10,-32640
18005d48:	48d2b03a 	or	r9,r9,r3
18005d4c:	20c00017 	ldw	r3,0(r4)
18005d50:	48c6f03a 	xor	r3,r9,r3
18005d54:	1acd883a 	add	r6,r3,r11
18005d58:	00c6303a 	nor	r3,zero,r3
18005d5c:	30c6703a 	and	r3,r6,r3
18005d60:	1a86703a 	and	r3,r3,r10
18005d64:	183fe01e 	bne	r3,zero,18005ce8 <__alt_data_end+0xf8005ce8>
18005d68:	10bfff04 	addi	r2,r2,-4
18005d6c:	21000104 	addi	r4,r4,4
18005d70:	40bff636 	bltu	r8,r2,18005d4c <__alt_data_end+0xf8005d4c>
18005d74:	003fdb06 	br	18005ce4 <__alt_data_end+0xf8005ce4>
18005d78:	3005883a 	mov	r2,r6
18005d7c:	003fd706 	br	18005cdc <__alt_data_end+0xf8005cdc>

18005d80 <memcpy>:
18005d80:	defffd04 	addi	sp,sp,-12
18005d84:	dfc00215 	stw	ra,8(sp)
18005d88:	dc400115 	stw	r17,4(sp)
18005d8c:	dc000015 	stw	r16,0(sp)
18005d90:	00c003c4 	movi	r3,15
18005d94:	2005883a 	mov	r2,r4
18005d98:	1980452e 	bgeu	r3,r6,18005eb0 <memcpy+0x130>
18005d9c:	2906b03a 	or	r3,r5,r4
18005da0:	18c000cc 	andi	r3,r3,3
18005da4:	1800441e 	bne	r3,zero,18005eb8 <memcpy+0x138>
18005da8:	347ffc04 	addi	r17,r6,-16
18005dac:	8822d13a 	srli	r17,r17,4
18005db0:	28c00104 	addi	r3,r5,4
18005db4:	23400104 	addi	r13,r4,4
18005db8:	8820913a 	slli	r16,r17,4
18005dbc:	2b000204 	addi	r12,r5,8
18005dc0:	22c00204 	addi	r11,r4,8
18005dc4:	84000504 	addi	r16,r16,20
18005dc8:	2a800304 	addi	r10,r5,12
18005dcc:	22400304 	addi	r9,r4,12
18005dd0:	2c21883a 	add	r16,r5,r16
18005dd4:	2811883a 	mov	r8,r5
18005dd8:	200f883a 	mov	r7,r4
18005ddc:	41000017 	ldw	r4,0(r8)
18005de0:	1fc00017 	ldw	ra,0(r3)
18005de4:	63c00017 	ldw	r15,0(r12)
18005de8:	39000015 	stw	r4,0(r7)
18005dec:	53800017 	ldw	r14,0(r10)
18005df0:	6fc00015 	stw	ra,0(r13)
18005df4:	5bc00015 	stw	r15,0(r11)
18005df8:	4b800015 	stw	r14,0(r9)
18005dfc:	18c00404 	addi	r3,r3,16
18005e00:	39c00404 	addi	r7,r7,16
18005e04:	42000404 	addi	r8,r8,16
18005e08:	6b400404 	addi	r13,r13,16
18005e0c:	63000404 	addi	r12,r12,16
18005e10:	5ac00404 	addi	r11,r11,16
18005e14:	52800404 	addi	r10,r10,16
18005e18:	4a400404 	addi	r9,r9,16
18005e1c:	1c3fef1e 	bne	r3,r16,18005ddc <__alt_data_end+0xf8005ddc>
18005e20:	89c00044 	addi	r7,r17,1
18005e24:	380e913a 	slli	r7,r7,4
18005e28:	310003cc 	andi	r4,r6,15
18005e2c:	02c000c4 	movi	r11,3
18005e30:	11c7883a 	add	r3,r2,r7
18005e34:	29cb883a 	add	r5,r5,r7
18005e38:	5900212e 	bgeu	r11,r4,18005ec0 <memcpy+0x140>
18005e3c:	1813883a 	mov	r9,r3
18005e40:	2811883a 	mov	r8,r5
18005e44:	200f883a 	mov	r7,r4
18005e48:	42800017 	ldw	r10,0(r8)
18005e4c:	4a400104 	addi	r9,r9,4
18005e50:	39ffff04 	addi	r7,r7,-4
18005e54:	4abfff15 	stw	r10,-4(r9)
18005e58:	42000104 	addi	r8,r8,4
18005e5c:	59fffa36 	bltu	r11,r7,18005e48 <__alt_data_end+0xf8005e48>
18005e60:	213fff04 	addi	r4,r4,-4
18005e64:	2008d0ba 	srli	r4,r4,2
18005e68:	318000cc 	andi	r6,r6,3
18005e6c:	21000044 	addi	r4,r4,1
18005e70:	2109883a 	add	r4,r4,r4
18005e74:	2109883a 	add	r4,r4,r4
18005e78:	1907883a 	add	r3,r3,r4
18005e7c:	290b883a 	add	r5,r5,r4
18005e80:	30000626 	beq	r6,zero,18005e9c <memcpy+0x11c>
18005e84:	198d883a 	add	r6,r3,r6
18005e88:	29c00003 	ldbu	r7,0(r5)
18005e8c:	18c00044 	addi	r3,r3,1
18005e90:	29400044 	addi	r5,r5,1
18005e94:	19ffffc5 	stb	r7,-1(r3)
18005e98:	19bffb1e 	bne	r3,r6,18005e88 <__alt_data_end+0xf8005e88>
18005e9c:	dfc00217 	ldw	ra,8(sp)
18005ea0:	dc400117 	ldw	r17,4(sp)
18005ea4:	dc000017 	ldw	r16,0(sp)
18005ea8:	dec00304 	addi	sp,sp,12
18005eac:	f800283a 	ret
18005eb0:	2007883a 	mov	r3,r4
18005eb4:	003ff206 	br	18005e80 <__alt_data_end+0xf8005e80>
18005eb8:	2007883a 	mov	r3,r4
18005ebc:	003ff106 	br	18005e84 <__alt_data_end+0xf8005e84>
18005ec0:	200d883a 	mov	r6,r4
18005ec4:	003fee06 	br	18005e80 <__alt_data_end+0xf8005e80>

18005ec8 <memmove>:
18005ec8:	2005883a 	mov	r2,r4
18005ecc:	29000b2e 	bgeu	r5,r4,18005efc <memmove+0x34>
18005ed0:	298f883a 	add	r7,r5,r6
18005ed4:	21c0092e 	bgeu	r4,r7,18005efc <memmove+0x34>
18005ed8:	2187883a 	add	r3,r4,r6
18005edc:	198bc83a 	sub	r5,r3,r6
18005ee0:	30004826 	beq	r6,zero,18006004 <memmove+0x13c>
18005ee4:	39ffffc4 	addi	r7,r7,-1
18005ee8:	39000003 	ldbu	r4,0(r7)
18005eec:	18ffffc4 	addi	r3,r3,-1
18005ef0:	19000005 	stb	r4,0(r3)
18005ef4:	28fffb1e 	bne	r5,r3,18005ee4 <__alt_data_end+0xf8005ee4>
18005ef8:	f800283a 	ret
18005efc:	00c003c4 	movi	r3,15
18005f00:	1980412e 	bgeu	r3,r6,18006008 <memmove+0x140>
18005f04:	2886b03a 	or	r3,r5,r2
18005f08:	18c000cc 	andi	r3,r3,3
18005f0c:	1800401e 	bne	r3,zero,18006010 <memmove+0x148>
18005f10:	33fffc04 	addi	r15,r6,-16
18005f14:	781ed13a 	srli	r15,r15,4
18005f18:	28c00104 	addi	r3,r5,4
18005f1c:	13400104 	addi	r13,r2,4
18005f20:	781c913a 	slli	r14,r15,4
18005f24:	2b000204 	addi	r12,r5,8
18005f28:	12c00204 	addi	r11,r2,8
18005f2c:	73800504 	addi	r14,r14,20
18005f30:	2a800304 	addi	r10,r5,12
18005f34:	12400304 	addi	r9,r2,12
18005f38:	2b9d883a 	add	r14,r5,r14
18005f3c:	2811883a 	mov	r8,r5
18005f40:	100f883a 	mov	r7,r2
18005f44:	41000017 	ldw	r4,0(r8)
18005f48:	39c00404 	addi	r7,r7,16
18005f4c:	18c00404 	addi	r3,r3,16
18005f50:	393ffc15 	stw	r4,-16(r7)
18005f54:	193ffc17 	ldw	r4,-16(r3)
18005f58:	6b400404 	addi	r13,r13,16
18005f5c:	5ac00404 	addi	r11,r11,16
18005f60:	693ffc15 	stw	r4,-16(r13)
18005f64:	61000017 	ldw	r4,0(r12)
18005f68:	4a400404 	addi	r9,r9,16
18005f6c:	42000404 	addi	r8,r8,16
18005f70:	593ffc15 	stw	r4,-16(r11)
18005f74:	51000017 	ldw	r4,0(r10)
18005f78:	63000404 	addi	r12,r12,16
18005f7c:	52800404 	addi	r10,r10,16
18005f80:	493ffc15 	stw	r4,-16(r9)
18005f84:	1bbfef1e 	bne	r3,r14,18005f44 <__alt_data_end+0xf8005f44>
18005f88:	79000044 	addi	r4,r15,1
18005f8c:	2008913a 	slli	r4,r4,4
18005f90:	328003cc 	andi	r10,r6,15
18005f94:	02c000c4 	movi	r11,3
18005f98:	1107883a 	add	r3,r2,r4
18005f9c:	290b883a 	add	r5,r5,r4
18005fa0:	5a801e2e 	bgeu	r11,r10,1800601c <memmove+0x154>
18005fa4:	1813883a 	mov	r9,r3
18005fa8:	2811883a 	mov	r8,r5
18005fac:	500f883a 	mov	r7,r10
18005fb0:	41000017 	ldw	r4,0(r8)
18005fb4:	4a400104 	addi	r9,r9,4
18005fb8:	39ffff04 	addi	r7,r7,-4
18005fbc:	493fff15 	stw	r4,-4(r9)
18005fc0:	42000104 	addi	r8,r8,4
18005fc4:	59fffa36 	bltu	r11,r7,18005fb0 <__alt_data_end+0xf8005fb0>
18005fc8:	513fff04 	addi	r4,r10,-4
18005fcc:	2008d0ba 	srli	r4,r4,2
18005fd0:	318000cc 	andi	r6,r6,3
18005fd4:	21000044 	addi	r4,r4,1
18005fd8:	2109883a 	add	r4,r4,r4
18005fdc:	2109883a 	add	r4,r4,r4
18005fe0:	1907883a 	add	r3,r3,r4
18005fe4:	290b883a 	add	r5,r5,r4
18005fe8:	30000b26 	beq	r6,zero,18006018 <memmove+0x150>
18005fec:	198d883a 	add	r6,r3,r6
18005ff0:	29c00003 	ldbu	r7,0(r5)
18005ff4:	18c00044 	addi	r3,r3,1
18005ff8:	29400044 	addi	r5,r5,1
18005ffc:	19ffffc5 	stb	r7,-1(r3)
18006000:	19bffb1e 	bne	r3,r6,18005ff0 <__alt_data_end+0xf8005ff0>
18006004:	f800283a 	ret
18006008:	1007883a 	mov	r3,r2
1800600c:	003ff606 	br	18005fe8 <__alt_data_end+0xf8005fe8>
18006010:	1007883a 	mov	r3,r2
18006014:	003ff506 	br	18005fec <__alt_data_end+0xf8005fec>
18006018:	f800283a 	ret
1800601c:	500d883a 	mov	r6,r10
18006020:	003ff106 	br	18005fe8 <__alt_data_end+0xf8005fe8>

18006024 <memset>:
18006024:	20c000cc 	andi	r3,r4,3
18006028:	2005883a 	mov	r2,r4
1800602c:	18004426 	beq	r3,zero,18006140 <memset+0x11c>
18006030:	31ffffc4 	addi	r7,r6,-1
18006034:	30004026 	beq	r6,zero,18006138 <memset+0x114>
18006038:	2813883a 	mov	r9,r5
1800603c:	200d883a 	mov	r6,r4
18006040:	2007883a 	mov	r3,r4
18006044:	00000406 	br	18006058 <memset+0x34>
18006048:	3a3fffc4 	addi	r8,r7,-1
1800604c:	31800044 	addi	r6,r6,1
18006050:	38003926 	beq	r7,zero,18006138 <memset+0x114>
18006054:	400f883a 	mov	r7,r8
18006058:	18c00044 	addi	r3,r3,1
1800605c:	32400005 	stb	r9,0(r6)
18006060:	1a0000cc 	andi	r8,r3,3
18006064:	403ff81e 	bne	r8,zero,18006048 <__alt_data_end+0xf8006048>
18006068:	010000c4 	movi	r4,3
1800606c:	21c02d2e 	bgeu	r4,r7,18006124 <memset+0x100>
18006070:	29003fcc 	andi	r4,r5,255
18006074:	200c923a 	slli	r6,r4,8
18006078:	3108b03a 	or	r4,r6,r4
1800607c:	200c943a 	slli	r6,r4,16
18006080:	218cb03a 	or	r6,r4,r6
18006084:	010003c4 	movi	r4,15
18006088:	21c0182e 	bgeu	r4,r7,180060ec <memset+0xc8>
1800608c:	3b3ffc04 	addi	r12,r7,-16
18006090:	6018d13a 	srli	r12,r12,4
18006094:	1a000104 	addi	r8,r3,4
18006098:	1ac00204 	addi	r11,r3,8
1800609c:	6008913a 	slli	r4,r12,4
180060a0:	1a800304 	addi	r10,r3,12
180060a4:	1813883a 	mov	r9,r3
180060a8:	21000504 	addi	r4,r4,20
180060ac:	1909883a 	add	r4,r3,r4
180060b0:	49800015 	stw	r6,0(r9)
180060b4:	41800015 	stw	r6,0(r8)
180060b8:	59800015 	stw	r6,0(r11)
180060bc:	51800015 	stw	r6,0(r10)
180060c0:	42000404 	addi	r8,r8,16
180060c4:	4a400404 	addi	r9,r9,16
180060c8:	5ac00404 	addi	r11,r11,16
180060cc:	52800404 	addi	r10,r10,16
180060d0:	413ff71e 	bne	r8,r4,180060b0 <__alt_data_end+0xf80060b0>
180060d4:	63000044 	addi	r12,r12,1
180060d8:	6018913a 	slli	r12,r12,4
180060dc:	39c003cc 	andi	r7,r7,15
180060e0:	010000c4 	movi	r4,3
180060e4:	1b07883a 	add	r3,r3,r12
180060e8:	21c00e2e 	bgeu	r4,r7,18006124 <memset+0x100>
180060ec:	1813883a 	mov	r9,r3
180060f0:	3811883a 	mov	r8,r7
180060f4:	010000c4 	movi	r4,3
180060f8:	49800015 	stw	r6,0(r9)
180060fc:	423fff04 	addi	r8,r8,-4
18006100:	4a400104 	addi	r9,r9,4
18006104:	223ffc36 	bltu	r4,r8,180060f8 <__alt_data_end+0xf80060f8>
18006108:	393fff04 	addi	r4,r7,-4
1800610c:	2008d0ba 	srli	r4,r4,2
18006110:	39c000cc 	andi	r7,r7,3
18006114:	21000044 	addi	r4,r4,1
18006118:	2109883a 	add	r4,r4,r4
1800611c:	2109883a 	add	r4,r4,r4
18006120:	1907883a 	add	r3,r3,r4
18006124:	38000526 	beq	r7,zero,1800613c <memset+0x118>
18006128:	19cf883a 	add	r7,r3,r7
1800612c:	19400005 	stb	r5,0(r3)
18006130:	18c00044 	addi	r3,r3,1
18006134:	38fffd1e 	bne	r7,r3,1800612c <__alt_data_end+0xf800612c>
18006138:	f800283a 	ret
1800613c:	f800283a 	ret
18006140:	2007883a 	mov	r3,r4
18006144:	300f883a 	mov	r7,r6
18006148:	003fc706 	br	18006068 <__alt_data_end+0xf8006068>

1800614c <_Balloc>:
1800614c:	20801317 	ldw	r2,76(r4)
18006150:	defffc04 	addi	sp,sp,-16
18006154:	dc400115 	stw	r17,4(sp)
18006158:	dc000015 	stw	r16,0(sp)
1800615c:	dfc00315 	stw	ra,12(sp)
18006160:	dc800215 	stw	r18,8(sp)
18006164:	2023883a 	mov	r17,r4
18006168:	2821883a 	mov	r16,r5
1800616c:	10000f26 	beq	r2,zero,180061ac <_Balloc+0x60>
18006170:	8407883a 	add	r3,r16,r16
18006174:	18c7883a 	add	r3,r3,r3
18006178:	10c7883a 	add	r3,r2,r3
1800617c:	18800017 	ldw	r2,0(r3)
18006180:	10001126 	beq	r2,zero,180061c8 <_Balloc+0x7c>
18006184:	11000017 	ldw	r4,0(r2)
18006188:	19000015 	stw	r4,0(r3)
1800618c:	10000415 	stw	zero,16(r2)
18006190:	10000315 	stw	zero,12(r2)
18006194:	dfc00317 	ldw	ra,12(sp)
18006198:	dc800217 	ldw	r18,8(sp)
1800619c:	dc400117 	ldw	r17,4(sp)
180061a0:	dc000017 	ldw	r16,0(sp)
180061a4:	dec00404 	addi	sp,sp,16
180061a8:	f800283a 	ret
180061ac:	01800844 	movi	r6,33
180061b0:	01400104 	movi	r5,4
180061b4:	80091c00 	call	180091c0 <_calloc_r>
180061b8:	88801315 	stw	r2,76(r17)
180061bc:	103fec1e 	bne	r2,zero,18006170 <__alt_data_end+0xf8006170>
180061c0:	0005883a 	mov	r2,zero
180061c4:	003ff306 	br	18006194 <__alt_data_end+0xf8006194>
180061c8:	01400044 	movi	r5,1
180061cc:	2c24983a 	sll	r18,r5,r16
180061d0:	8809883a 	mov	r4,r17
180061d4:	91800144 	addi	r6,r18,5
180061d8:	318d883a 	add	r6,r6,r6
180061dc:	318d883a 	add	r6,r6,r6
180061e0:	80091c00 	call	180091c0 <_calloc_r>
180061e4:	103ff626 	beq	r2,zero,180061c0 <__alt_data_end+0xf80061c0>
180061e8:	14000115 	stw	r16,4(r2)
180061ec:	14800215 	stw	r18,8(r2)
180061f0:	003fe606 	br	1800618c <__alt_data_end+0xf800618c>

180061f4 <_Bfree>:
180061f4:	28000826 	beq	r5,zero,18006218 <_Bfree+0x24>
180061f8:	28c00117 	ldw	r3,4(r5)
180061fc:	20801317 	ldw	r2,76(r4)
18006200:	18c7883a 	add	r3,r3,r3
18006204:	18c7883a 	add	r3,r3,r3
18006208:	10c5883a 	add	r2,r2,r3
1800620c:	10c00017 	ldw	r3,0(r2)
18006210:	28c00015 	stw	r3,0(r5)
18006214:	11400015 	stw	r5,0(r2)
18006218:	f800283a 	ret

1800621c <__multadd>:
1800621c:	defff704 	addi	sp,sp,-36
18006220:	dc800215 	stw	r18,8(sp)
18006224:	2c800417 	ldw	r18,16(r5)
18006228:	dd800615 	stw	r22,24(sp)
1800622c:	dd400515 	stw	r21,20(sp)
18006230:	dd000415 	stw	r20,16(sp)
18006234:	dcc00315 	stw	r19,12(sp)
18006238:	dc400115 	stw	r17,4(sp)
1800623c:	dc000015 	stw	r16,0(sp)
18006240:	dfc00815 	stw	ra,32(sp)
18006244:	ddc00715 	stw	r23,28(sp)
18006248:	2827883a 	mov	r19,r5
1800624c:	2029883a 	mov	r20,r4
18006250:	3023883a 	mov	r17,r6
18006254:	3821883a 	mov	r16,r7
18006258:	2d400504 	addi	r21,r5,20
1800625c:	002d883a 	mov	r22,zero
18006260:	adc00017 	ldw	r23,0(r21)
18006264:	880b883a 	mov	r5,r17
18006268:	ad400104 	addi	r21,r21,4
1800626c:	b93fffcc 	andi	r4,r23,65535
18006270:	8000b740 	call	18000b74 <__mulsi3>
18006274:	b808d43a 	srli	r4,r23,16
18006278:	880b883a 	mov	r5,r17
1800627c:	1421883a 	add	r16,r2,r16
18006280:	8000b740 	call	18000b74 <__mulsi3>
18006284:	800ed43a 	srli	r7,r16,16
18006288:	80ffffcc 	andi	r3,r16,65535
1800628c:	b5800044 	addi	r22,r22,1
18006290:	11c5883a 	add	r2,r2,r7
18006294:	100e943a 	slli	r7,r2,16
18006298:	1020d43a 	srli	r16,r2,16
1800629c:	38c7883a 	add	r3,r7,r3
180062a0:	a8ffff15 	stw	r3,-4(r21)
180062a4:	b4bfee16 	blt	r22,r18,18006260 <__alt_data_end+0xf8006260>
180062a8:	80000926 	beq	r16,zero,180062d0 <__multadd+0xb4>
180062ac:	98800217 	ldw	r2,8(r19)
180062b0:	9080130e 	bge	r18,r2,18006300 <__multadd+0xe4>
180062b4:	90800144 	addi	r2,r18,5
180062b8:	1085883a 	add	r2,r2,r2
180062bc:	1085883a 	add	r2,r2,r2
180062c0:	9885883a 	add	r2,r19,r2
180062c4:	14000015 	stw	r16,0(r2)
180062c8:	94800044 	addi	r18,r18,1
180062cc:	9c800415 	stw	r18,16(r19)
180062d0:	9805883a 	mov	r2,r19
180062d4:	dfc00817 	ldw	ra,32(sp)
180062d8:	ddc00717 	ldw	r23,28(sp)
180062dc:	dd800617 	ldw	r22,24(sp)
180062e0:	dd400517 	ldw	r21,20(sp)
180062e4:	dd000417 	ldw	r20,16(sp)
180062e8:	dcc00317 	ldw	r19,12(sp)
180062ec:	dc800217 	ldw	r18,8(sp)
180062f0:	dc400117 	ldw	r17,4(sp)
180062f4:	dc000017 	ldw	r16,0(sp)
180062f8:	dec00904 	addi	sp,sp,36
180062fc:	f800283a 	ret
18006300:	99400117 	ldw	r5,4(r19)
18006304:	a009883a 	mov	r4,r20
18006308:	29400044 	addi	r5,r5,1
1800630c:	800614c0 	call	1800614c <_Balloc>
18006310:	99800417 	ldw	r6,16(r19)
18006314:	99400304 	addi	r5,r19,12
18006318:	11000304 	addi	r4,r2,12
1800631c:	31800084 	addi	r6,r6,2
18006320:	318d883a 	add	r6,r6,r6
18006324:	318d883a 	add	r6,r6,r6
18006328:	1023883a 	mov	r17,r2
1800632c:	8005d800 	call	18005d80 <memcpy>
18006330:	98000a26 	beq	r19,zero,1800635c <__multadd+0x140>
18006334:	98c00117 	ldw	r3,4(r19)
18006338:	a0801317 	ldw	r2,76(r20)
1800633c:	18c7883a 	add	r3,r3,r3
18006340:	18c7883a 	add	r3,r3,r3
18006344:	10c5883a 	add	r2,r2,r3
18006348:	10c00017 	ldw	r3,0(r2)
1800634c:	98c00015 	stw	r3,0(r19)
18006350:	14c00015 	stw	r19,0(r2)
18006354:	8827883a 	mov	r19,r17
18006358:	003fd606 	br	180062b4 <__alt_data_end+0xf80062b4>
1800635c:	8827883a 	mov	r19,r17
18006360:	003fd406 	br	180062b4 <__alt_data_end+0xf80062b4>

18006364 <__s2b>:
18006364:	defff904 	addi	sp,sp,-28
18006368:	dc400115 	stw	r17,4(sp)
1800636c:	dc000015 	stw	r16,0(sp)
18006370:	2023883a 	mov	r17,r4
18006374:	2821883a 	mov	r16,r5
18006378:	39000204 	addi	r4,r7,8
1800637c:	01400244 	movi	r5,9
18006380:	dcc00315 	stw	r19,12(sp)
18006384:	dc800215 	stw	r18,8(sp)
18006388:	dfc00615 	stw	ra,24(sp)
1800638c:	dd400515 	stw	r21,20(sp)
18006390:	dd000415 	stw	r20,16(sp)
18006394:	3825883a 	mov	r18,r7
18006398:	3027883a 	mov	r19,r6
1800639c:	80009c00 	call	180009c0 <__divsi3>
180063a0:	00c00044 	movi	r3,1
180063a4:	000b883a 	mov	r5,zero
180063a8:	1880030e 	bge	r3,r2,180063b8 <__s2b+0x54>
180063ac:	18c7883a 	add	r3,r3,r3
180063b0:	29400044 	addi	r5,r5,1
180063b4:	18bffd16 	blt	r3,r2,180063ac <__alt_data_end+0xf80063ac>
180063b8:	8809883a 	mov	r4,r17
180063bc:	800614c0 	call	1800614c <_Balloc>
180063c0:	d8c00717 	ldw	r3,28(sp)
180063c4:	10c00515 	stw	r3,20(r2)
180063c8:	00c00044 	movi	r3,1
180063cc:	10c00415 	stw	r3,16(r2)
180063d0:	00c00244 	movi	r3,9
180063d4:	1cc0210e 	bge	r3,r19,1800645c <__s2b+0xf8>
180063d8:	80eb883a 	add	r21,r16,r3
180063dc:	a829883a 	mov	r20,r21
180063e0:	84e1883a 	add	r16,r16,r19
180063e4:	a1c00007 	ldb	r7,0(r20)
180063e8:	01800284 	movi	r6,10
180063ec:	a5000044 	addi	r20,r20,1
180063f0:	100b883a 	mov	r5,r2
180063f4:	39fff404 	addi	r7,r7,-48
180063f8:	8809883a 	mov	r4,r17
180063fc:	800621c0 	call	1800621c <__multadd>
18006400:	a43ff81e 	bne	r20,r16,180063e4 <__alt_data_end+0xf80063e4>
18006404:	ace1883a 	add	r16,r21,r19
18006408:	843ffe04 	addi	r16,r16,-8
1800640c:	9c800a0e 	bge	r19,r18,18006438 <__s2b+0xd4>
18006410:	94e5c83a 	sub	r18,r18,r19
18006414:	84a5883a 	add	r18,r16,r18
18006418:	81c00007 	ldb	r7,0(r16)
1800641c:	01800284 	movi	r6,10
18006420:	84000044 	addi	r16,r16,1
18006424:	100b883a 	mov	r5,r2
18006428:	39fff404 	addi	r7,r7,-48
1800642c:	8809883a 	mov	r4,r17
18006430:	800621c0 	call	1800621c <__multadd>
18006434:	84bff81e 	bne	r16,r18,18006418 <__alt_data_end+0xf8006418>
18006438:	dfc00617 	ldw	ra,24(sp)
1800643c:	dd400517 	ldw	r21,20(sp)
18006440:	dd000417 	ldw	r20,16(sp)
18006444:	dcc00317 	ldw	r19,12(sp)
18006448:	dc800217 	ldw	r18,8(sp)
1800644c:	dc400117 	ldw	r17,4(sp)
18006450:	dc000017 	ldw	r16,0(sp)
18006454:	dec00704 	addi	sp,sp,28
18006458:	f800283a 	ret
1800645c:	84000284 	addi	r16,r16,10
18006460:	1827883a 	mov	r19,r3
18006464:	003fe906 	br	1800640c <__alt_data_end+0xf800640c>

18006468 <__hi0bits>:
18006468:	20bfffec 	andhi	r2,r4,65535
1800646c:	1000141e 	bne	r2,zero,180064c0 <__hi0bits+0x58>
18006470:	2008943a 	slli	r4,r4,16
18006474:	00800404 	movi	r2,16
18006478:	20ffc02c 	andhi	r3,r4,65280
1800647c:	1800021e 	bne	r3,zero,18006488 <__hi0bits+0x20>
18006480:	2008923a 	slli	r4,r4,8
18006484:	10800204 	addi	r2,r2,8
18006488:	20fc002c 	andhi	r3,r4,61440
1800648c:	1800021e 	bne	r3,zero,18006498 <__hi0bits+0x30>
18006490:	2008913a 	slli	r4,r4,4
18006494:	10800104 	addi	r2,r2,4
18006498:	20f0002c 	andhi	r3,r4,49152
1800649c:	1800031e 	bne	r3,zero,180064ac <__hi0bits+0x44>
180064a0:	2109883a 	add	r4,r4,r4
180064a4:	10800084 	addi	r2,r2,2
180064a8:	2109883a 	add	r4,r4,r4
180064ac:	20000316 	blt	r4,zero,180064bc <__hi0bits+0x54>
180064b0:	2110002c 	andhi	r4,r4,16384
180064b4:	2000041e 	bne	r4,zero,180064c8 <__hi0bits+0x60>
180064b8:	00800804 	movi	r2,32
180064bc:	f800283a 	ret
180064c0:	0005883a 	mov	r2,zero
180064c4:	003fec06 	br	18006478 <__alt_data_end+0xf8006478>
180064c8:	10800044 	addi	r2,r2,1
180064cc:	f800283a 	ret

180064d0 <__lo0bits>:
180064d0:	20c00017 	ldw	r3,0(r4)
180064d4:	188001cc 	andi	r2,r3,7
180064d8:	10000826 	beq	r2,zero,180064fc <__lo0bits+0x2c>
180064dc:	1880004c 	andi	r2,r3,1
180064e0:	1000211e 	bne	r2,zero,18006568 <__lo0bits+0x98>
180064e4:	1880008c 	andi	r2,r3,2
180064e8:	1000211e 	bne	r2,zero,18006570 <__lo0bits+0xa0>
180064ec:	1806d0ba 	srli	r3,r3,2
180064f0:	00800084 	movi	r2,2
180064f4:	20c00015 	stw	r3,0(r4)
180064f8:	f800283a 	ret
180064fc:	18bfffcc 	andi	r2,r3,65535
18006500:	10001326 	beq	r2,zero,18006550 <__lo0bits+0x80>
18006504:	0005883a 	mov	r2,zero
18006508:	19403fcc 	andi	r5,r3,255
1800650c:	2800021e 	bne	r5,zero,18006518 <__lo0bits+0x48>
18006510:	1806d23a 	srli	r3,r3,8
18006514:	10800204 	addi	r2,r2,8
18006518:	194003cc 	andi	r5,r3,15
1800651c:	2800021e 	bne	r5,zero,18006528 <__lo0bits+0x58>
18006520:	1806d13a 	srli	r3,r3,4
18006524:	10800104 	addi	r2,r2,4
18006528:	194000cc 	andi	r5,r3,3
1800652c:	2800021e 	bne	r5,zero,18006538 <__lo0bits+0x68>
18006530:	1806d0ba 	srli	r3,r3,2
18006534:	10800084 	addi	r2,r2,2
18006538:	1940004c 	andi	r5,r3,1
1800653c:	2800081e 	bne	r5,zero,18006560 <__lo0bits+0x90>
18006540:	1806d07a 	srli	r3,r3,1
18006544:	1800051e 	bne	r3,zero,1800655c <__lo0bits+0x8c>
18006548:	00800804 	movi	r2,32
1800654c:	f800283a 	ret
18006550:	1806d43a 	srli	r3,r3,16
18006554:	00800404 	movi	r2,16
18006558:	003feb06 	br	18006508 <__alt_data_end+0xf8006508>
1800655c:	10800044 	addi	r2,r2,1
18006560:	20c00015 	stw	r3,0(r4)
18006564:	f800283a 	ret
18006568:	0005883a 	mov	r2,zero
1800656c:	f800283a 	ret
18006570:	1806d07a 	srli	r3,r3,1
18006574:	00800044 	movi	r2,1
18006578:	20c00015 	stw	r3,0(r4)
1800657c:	f800283a 	ret

18006580 <__i2b>:
18006580:	defffd04 	addi	sp,sp,-12
18006584:	dc000015 	stw	r16,0(sp)
18006588:	04000044 	movi	r16,1
1800658c:	dc400115 	stw	r17,4(sp)
18006590:	2823883a 	mov	r17,r5
18006594:	800b883a 	mov	r5,r16
18006598:	dfc00215 	stw	ra,8(sp)
1800659c:	800614c0 	call	1800614c <_Balloc>
180065a0:	14400515 	stw	r17,20(r2)
180065a4:	14000415 	stw	r16,16(r2)
180065a8:	dfc00217 	ldw	ra,8(sp)
180065ac:	dc400117 	ldw	r17,4(sp)
180065b0:	dc000017 	ldw	r16,0(sp)
180065b4:	dec00304 	addi	sp,sp,12
180065b8:	f800283a 	ret

180065bc <__multiply>:
180065bc:	deffef04 	addi	sp,sp,-68
180065c0:	dc400815 	stw	r17,32(sp)
180065c4:	dc000715 	stw	r16,28(sp)
180065c8:	34400417 	ldw	r17,16(r6)
180065cc:	2c000417 	ldw	r16,16(r5)
180065d0:	dd800d15 	stw	r22,52(sp)
180065d4:	dc800915 	stw	r18,36(sp)
180065d8:	dfc01015 	stw	ra,64(sp)
180065dc:	df000f15 	stw	fp,60(sp)
180065e0:	ddc00e15 	stw	r23,56(sp)
180065e4:	dd400c15 	stw	r21,48(sp)
180065e8:	dd000b15 	stw	r20,44(sp)
180065ec:	dcc00a15 	stw	r19,40(sp)
180065f0:	2825883a 	mov	r18,r5
180065f4:	302d883a 	mov	r22,r6
180065f8:	8440050e 	bge	r16,r17,18006610 <__multiply+0x54>
180065fc:	8007883a 	mov	r3,r16
18006600:	3025883a 	mov	r18,r6
18006604:	8821883a 	mov	r16,r17
18006608:	282d883a 	mov	r22,r5
1800660c:	1823883a 	mov	r17,r3
18006610:	90800217 	ldw	r2,8(r18)
18006614:	8447883a 	add	r3,r16,r17
18006618:	d8c00215 	stw	r3,8(sp)
1800661c:	91400117 	ldw	r5,4(r18)
18006620:	10c0010e 	bge	r2,r3,18006628 <__multiply+0x6c>
18006624:	29400044 	addi	r5,r5,1
18006628:	800614c0 	call	1800614c <_Balloc>
1800662c:	d8c00217 	ldw	r3,8(sp)
18006630:	d8800615 	stw	r2,24(sp)
18006634:	18eb883a 	add	r21,r3,r3
18006638:	ad6b883a 	add	r21,r21,r21
1800663c:	10c00504 	addi	r3,r2,20
18006640:	1d6b883a 	add	r21,r3,r21
18006644:	d8c00115 	stw	r3,4(sp)
18006648:	dd400315 	stw	r21,12(sp)
1800664c:	1805883a 	mov	r2,r3
18006650:	1d40042e 	bgeu	r3,r21,18006664 <__multiply+0xa8>
18006654:	d8c00317 	ldw	r3,12(sp)
18006658:	10000015 	stw	zero,0(r2)
1800665c:	10800104 	addi	r2,r2,4
18006660:	10fffc36 	bltu	r2,r3,18006654 <__alt_data_end+0xf8006654>
18006664:	8c63883a 	add	r17,r17,r17
18006668:	b5800504 	addi	r22,r22,20
1800666c:	8c63883a 	add	r17,r17,r17
18006670:	94800504 	addi	r18,r18,20
18006674:	8421883a 	add	r16,r16,r16
18006678:	b463883a 	add	r17,r22,r17
1800667c:	8421883a 	add	r16,r16,r16
18006680:	dd800015 	stw	r22,0(sp)
18006684:	dc800415 	stw	r18,16(sp)
18006688:	dc400515 	stw	r17,20(sp)
1800668c:	9429883a 	add	r20,r18,r16
18006690:	b4404f2e 	bgeu	r22,r17,180067d0 <__multiply+0x214>
18006694:	d8c00017 	ldw	r3,0(sp)
18006698:	1c800017 	ldw	r18,0(r3)
1800669c:	947fffcc 	andi	r17,r18,65535
180066a0:	88001e26 	beq	r17,zero,1800671c <__multiply+0x160>
180066a4:	dd800117 	ldw	r22,4(sp)
180066a8:	dd400417 	ldw	r21,16(sp)
180066ac:	0027883a 	mov	r19,zero
180066b0:	ac800017 	ldw	r18,0(r21)
180066b4:	b4000017 	ldw	r16,0(r22)
180066b8:	880b883a 	mov	r5,r17
180066bc:	913fffcc 	andi	r4,r18,65535
180066c0:	8000b740 	call	18000b74 <__mulsi3>
180066c4:	9008d43a 	srli	r4,r18,16
180066c8:	84bfffcc 	andi	r18,r16,65535
180066cc:	1485883a 	add	r2,r2,r18
180066d0:	14e5883a 	add	r18,r2,r19
180066d4:	8020d43a 	srli	r16,r16,16
180066d8:	9026d43a 	srli	r19,r18,16
180066dc:	880b883a 	mov	r5,r17
180066e0:	8000b740 	call	18000b74 <__mulsi3>
180066e4:	1405883a 	add	r2,r2,r16
180066e8:	14e1883a 	add	r16,r2,r19
180066ec:	90ffffcc 	andi	r3,r18,65535
180066f0:	8024943a 	slli	r18,r16,16
180066f4:	ad400104 	addi	r21,r21,4
180066f8:	b005883a 	mov	r2,r22
180066fc:	90c6b03a 	or	r3,r18,r3
18006700:	b0c00015 	stw	r3,0(r22)
18006704:	8026d43a 	srli	r19,r16,16
18006708:	b5800104 	addi	r22,r22,4
1800670c:	ad3fe836 	bltu	r21,r20,180066b0 <__alt_data_end+0xf80066b0>
18006710:	d8c00017 	ldw	r3,0(sp)
18006714:	14c00115 	stw	r19,4(r2)
18006718:	1c800017 	ldw	r18,0(r3)
1800671c:	9024d43a 	srli	r18,r18,16
18006720:	90002226 	beq	r18,zero,180067ac <__multiply+0x1f0>
18006724:	d8c00117 	ldw	r3,4(sp)
18006728:	dd800417 	ldw	r22,16(sp)
1800672c:	002f883a 	mov	r23,zero
18006730:	1f000017 	ldw	fp,0(r3)
18006734:	1823883a 	mov	r17,r3
18006738:	182b883a 	mov	r21,r3
1800673c:	e021883a 	mov	r16,fp
18006740:	00000106 	br	18006748 <__multiply+0x18c>
18006744:	982b883a 	mov	r21,r19
18006748:	b100000b 	ldhu	r4,0(r22)
1800674c:	8020d43a 	srli	r16,r16,16
18006750:	900b883a 	mov	r5,r18
18006754:	8000b740 	call	18000b74 <__mulsi3>
18006758:	1405883a 	add	r2,r2,r16
1800675c:	15ef883a 	add	r23,r2,r23
18006760:	b804943a 	slli	r2,r23,16
18006764:	e0ffffcc 	andi	r3,fp,65535
18006768:	8c400104 	addi	r17,r17,4
1800676c:	10c6b03a 	or	r3,r2,r3
18006770:	88ffff15 	stw	r3,-4(r17)
18006774:	b5800104 	addi	r22,r22,4
18006778:	b13fff17 	ldw	r4,-4(r22)
1800677c:	acc00104 	addi	r19,r21,4
18006780:	900b883a 	mov	r5,r18
18006784:	2008d43a 	srli	r4,r4,16
18006788:	9c000017 	ldw	r16,0(r19)
1800678c:	8000b740 	call	18000b74 <__mulsi3>
18006790:	b806d43a 	srli	r3,r23,16
18006794:	813fffcc 	andi	r4,r16,65535
18006798:	1105883a 	add	r2,r2,r4
1800679c:	10f9883a 	add	fp,r2,r3
180067a0:	e02ed43a 	srli	r23,fp,16
180067a4:	b53fe736 	bltu	r22,r20,18006744 <__alt_data_end+0xf8006744>
180067a8:	af000115 	stw	fp,4(r21)
180067ac:	d8c00017 	ldw	r3,0(sp)
180067b0:	d9000517 	ldw	r4,20(sp)
180067b4:	18c00104 	addi	r3,r3,4
180067b8:	d8c00015 	stw	r3,0(sp)
180067bc:	d8c00117 	ldw	r3,4(sp)
180067c0:	18c00104 	addi	r3,r3,4
180067c4:	d8c00115 	stw	r3,4(sp)
180067c8:	d8c00017 	ldw	r3,0(sp)
180067cc:	193fb136 	bltu	r3,r4,18006694 <__alt_data_end+0xf8006694>
180067d0:	d8c00217 	ldw	r3,8(sp)
180067d4:	00c00c0e 	bge	zero,r3,18006808 <__multiply+0x24c>
180067d8:	d8c00317 	ldw	r3,12(sp)
180067dc:	18bfff17 	ldw	r2,-4(r3)
180067e0:	1d7fff04 	addi	r21,r3,-4
180067e4:	10000326 	beq	r2,zero,180067f4 <__multiply+0x238>
180067e8:	00000706 	br	18006808 <__multiply+0x24c>
180067ec:	a8800017 	ldw	r2,0(r21)
180067f0:	1000051e 	bne	r2,zero,18006808 <__multiply+0x24c>
180067f4:	d8c00217 	ldw	r3,8(sp)
180067f8:	ad7fff04 	addi	r21,r21,-4
180067fc:	18ffffc4 	addi	r3,r3,-1
18006800:	d8c00215 	stw	r3,8(sp)
18006804:	183ff91e 	bne	r3,zero,180067ec <__alt_data_end+0xf80067ec>
18006808:	d8c00617 	ldw	r3,24(sp)
1800680c:	d9000217 	ldw	r4,8(sp)
18006810:	1805883a 	mov	r2,r3
18006814:	19000415 	stw	r4,16(r3)
18006818:	dfc01017 	ldw	ra,64(sp)
1800681c:	df000f17 	ldw	fp,60(sp)
18006820:	ddc00e17 	ldw	r23,56(sp)
18006824:	dd800d17 	ldw	r22,52(sp)
18006828:	dd400c17 	ldw	r21,48(sp)
1800682c:	dd000b17 	ldw	r20,44(sp)
18006830:	dcc00a17 	ldw	r19,40(sp)
18006834:	dc800917 	ldw	r18,36(sp)
18006838:	dc400817 	ldw	r17,32(sp)
1800683c:	dc000717 	ldw	r16,28(sp)
18006840:	dec01104 	addi	sp,sp,68
18006844:	f800283a 	ret

18006848 <__pow5mult>:
18006848:	defffa04 	addi	sp,sp,-24
1800684c:	dcc00315 	stw	r19,12(sp)
18006850:	dc000015 	stw	r16,0(sp)
18006854:	dfc00515 	stw	ra,20(sp)
18006858:	dd000415 	stw	r20,16(sp)
1800685c:	dc800215 	stw	r18,8(sp)
18006860:	dc400115 	stw	r17,4(sp)
18006864:	308000cc 	andi	r2,r6,3
18006868:	3021883a 	mov	r16,r6
1800686c:	2027883a 	mov	r19,r4
18006870:	10002f1e 	bne	r2,zero,18006930 <__pow5mult+0xe8>
18006874:	2825883a 	mov	r18,r5
18006878:	8021d0ba 	srai	r16,r16,2
1800687c:	80001a26 	beq	r16,zero,180068e8 <__pow5mult+0xa0>
18006880:	9c401217 	ldw	r17,72(r19)
18006884:	8800061e 	bne	r17,zero,180068a0 <__pow5mult+0x58>
18006888:	00003406 	br	1800695c <__pow5mult+0x114>
1800688c:	8021d07a 	srai	r16,r16,1
18006890:	80001526 	beq	r16,zero,180068e8 <__pow5mult+0xa0>
18006894:	88800017 	ldw	r2,0(r17)
18006898:	10001c26 	beq	r2,zero,1800690c <__pow5mult+0xc4>
1800689c:	1023883a 	mov	r17,r2
180068a0:	8080004c 	andi	r2,r16,1
180068a4:	103ff926 	beq	r2,zero,1800688c <__alt_data_end+0xf800688c>
180068a8:	880d883a 	mov	r6,r17
180068ac:	900b883a 	mov	r5,r18
180068b0:	9809883a 	mov	r4,r19
180068b4:	80065bc0 	call	180065bc <__multiply>
180068b8:	90001b26 	beq	r18,zero,18006928 <__pow5mult+0xe0>
180068bc:	91000117 	ldw	r4,4(r18)
180068c0:	98c01317 	ldw	r3,76(r19)
180068c4:	8021d07a 	srai	r16,r16,1
180068c8:	2109883a 	add	r4,r4,r4
180068cc:	2109883a 	add	r4,r4,r4
180068d0:	1907883a 	add	r3,r3,r4
180068d4:	19000017 	ldw	r4,0(r3)
180068d8:	91000015 	stw	r4,0(r18)
180068dc:	1c800015 	stw	r18,0(r3)
180068e0:	1025883a 	mov	r18,r2
180068e4:	803feb1e 	bne	r16,zero,18006894 <__alt_data_end+0xf8006894>
180068e8:	9005883a 	mov	r2,r18
180068ec:	dfc00517 	ldw	ra,20(sp)
180068f0:	dd000417 	ldw	r20,16(sp)
180068f4:	dcc00317 	ldw	r19,12(sp)
180068f8:	dc800217 	ldw	r18,8(sp)
180068fc:	dc400117 	ldw	r17,4(sp)
18006900:	dc000017 	ldw	r16,0(sp)
18006904:	dec00604 	addi	sp,sp,24
18006908:	f800283a 	ret
1800690c:	880d883a 	mov	r6,r17
18006910:	880b883a 	mov	r5,r17
18006914:	9809883a 	mov	r4,r19
18006918:	80065bc0 	call	180065bc <__multiply>
1800691c:	88800015 	stw	r2,0(r17)
18006920:	10000015 	stw	zero,0(r2)
18006924:	003fdd06 	br	1800689c <__alt_data_end+0xf800689c>
18006928:	1025883a 	mov	r18,r2
1800692c:	003fd706 	br	1800688c <__alt_data_end+0xf800688c>
18006930:	10bfffc4 	addi	r2,r2,-1
18006934:	1085883a 	add	r2,r2,r2
18006938:	00c60074 	movhi	r3,6145
1800693c:	18ff1904 	addi	r3,r3,-924
18006940:	1085883a 	add	r2,r2,r2
18006944:	1885883a 	add	r2,r3,r2
18006948:	11800017 	ldw	r6,0(r2)
1800694c:	000f883a 	mov	r7,zero
18006950:	800621c0 	call	1800621c <__multadd>
18006954:	1025883a 	mov	r18,r2
18006958:	003fc706 	br	18006878 <__alt_data_end+0xf8006878>
1800695c:	05000044 	movi	r20,1
18006960:	a00b883a 	mov	r5,r20
18006964:	9809883a 	mov	r4,r19
18006968:	800614c0 	call	1800614c <_Balloc>
1800696c:	1023883a 	mov	r17,r2
18006970:	00809c44 	movi	r2,625
18006974:	88800515 	stw	r2,20(r17)
18006978:	8d000415 	stw	r20,16(r17)
1800697c:	9c401215 	stw	r17,72(r19)
18006980:	88000015 	stw	zero,0(r17)
18006984:	003fc606 	br	180068a0 <__alt_data_end+0xf80068a0>

18006988 <__lshift>:
18006988:	defff904 	addi	sp,sp,-28
1800698c:	dd400515 	stw	r21,20(sp)
18006990:	dcc00315 	stw	r19,12(sp)
18006994:	302bd17a 	srai	r21,r6,5
18006998:	2cc00417 	ldw	r19,16(r5)
1800699c:	28800217 	ldw	r2,8(r5)
180069a0:	dd000415 	stw	r20,16(sp)
180069a4:	ace7883a 	add	r19,r21,r19
180069a8:	dc800215 	stw	r18,8(sp)
180069ac:	dc400115 	stw	r17,4(sp)
180069b0:	dc000015 	stw	r16,0(sp)
180069b4:	dfc00615 	stw	ra,24(sp)
180069b8:	9c000044 	addi	r16,r19,1
180069bc:	2823883a 	mov	r17,r5
180069c0:	3029883a 	mov	r20,r6
180069c4:	2025883a 	mov	r18,r4
180069c8:	29400117 	ldw	r5,4(r5)
180069cc:	1400030e 	bge	r2,r16,180069dc <__lshift+0x54>
180069d0:	1085883a 	add	r2,r2,r2
180069d4:	29400044 	addi	r5,r5,1
180069d8:	143ffd16 	blt	r2,r16,180069d0 <__alt_data_end+0xf80069d0>
180069dc:	9009883a 	mov	r4,r18
180069e0:	800614c0 	call	1800614c <_Balloc>
180069e4:	10c00504 	addi	r3,r2,20
180069e8:	0540070e 	bge	zero,r21,18006a08 <__lshift+0x80>
180069ec:	ad6b883a 	add	r21,r21,r21
180069f0:	ad6b883a 	add	r21,r21,r21
180069f4:	1809883a 	mov	r4,r3
180069f8:	1d47883a 	add	r3,r3,r21
180069fc:	20000015 	stw	zero,0(r4)
18006a00:	21000104 	addi	r4,r4,4
18006a04:	193ffd1e 	bne	r3,r4,180069fc <__alt_data_end+0xf80069fc>
18006a08:	8a000417 	ldw	r8,16(r17)
18006a0c:	89000504 	addi	r4,r17,20
18006a10:	a18007cc 	andi	r6,r20,31
18006a14:	4211883a 	add	r8,r8,r8
18006a18:	4211883a 	add	r8,r8,r8
18006a1c:	2211883a 	add	r8,r4,r8
18006a20:	30002326 	beq	r6,zero,18006ab0 <__lshift+0x128>
18006a24:	02400804 	movi	r9,32
18006a28:	4993c83a 	sub	r9,r9,r6
18006a2c:	000b883a 	mov	r5,zero
18006a30:	21c00017 	ldw	r7,0(r4)
18006a34:	1815883a 	mov	r10,r3
18006a38:	18c00104 	addi	r3,r3,4
18006a3c:	398e983a 	sll	r7,r7,r6
18006a40:	21000104 	addi	r4,r4,4
18006a44:	394ab03a 	or	r5,r7,r5
18006a48:	197fff15 	stw	r5,-4(r3)
18006a4c:	217fff17 	ldw	r5,-4(r4)
18006a50:	2a4ad83a 	srl	r5,r5,r9
18006a54:	223ff636 	bltu	r4,r8,18006a30 <__alt_data_end+0xf8006a30>
18006a58:	51400115 	stw	r5,4(r10)
18006a5c:	28001a1e 	bne	r5,zero,18006ac8 <__lshift+0x140>
18006a60:	843fffc4 	addi	r16,r16,-1
18006a64:	14000415 	stw	r16,16(r2)
18006a68:	88000826 	beq	r17,zero,18006a8c <__lshift+0x104>
18006a6c:	89000117 	ldw	r4,4(r17)
18006a70:	90c01317 	ldw	r3,76(r18)
18006a74:	2109883a 	add	r4,r4,r4
18006a78:	2109883a 	add	r4,r4,r4
18006a7c:	1907883a 	add	r3,r3,r4
18006a80:	19000017 	ldw	r4,0(r3)
18006a84:	89000015 	stw	r4,0(r17)
18006a88:	1c400015 	stw	r17,0(r3)
18006a8c:	dfc00617 	ldw	ra,24(sp)
18006a90:	dd400517 	ldw	r21,20(sp)
18006a94:	dd000417 	ldw	r20,16(sp)
18006a98:	dcc00317 	ldw	r19,12(sp)
18006a9c:	dc800217 	ldw	r18,8(sp)
18006aa0:	dc400117 	ldw	r17,4(sp)
18006aa4:	dc000017 	ldw	r16,0(sp)
18006aa8:	dec00704 	addi	sp,sp,28
18006aac:	f800283a 	ret
18006ab0:	21400017 	ldw	r5,0(r4)
18006ab4:	18c00104 	addi	r3,r3,4
18006ab8:	21000104 	addi	r4,r4,4
18006abc:	197fff15 	stw	r5,-4(r3)
18006ac0:	223ffb36 	bltu	r4,r8,18006ab0 <__alt_data_end+0xf8006ab0>
18006ac4:	003fe606 	br	18006a60 <__alt_data_end+0xf8006a60>
18006ac8:	9c000084 	addi	r16,r19,2
18006acc:	003fe406 	br	18006a60 <__alt_data_end+0xf8006a60>

18006ad0 <__mcmp>:
18006ad0:	20800417 	ldw	r2,16(r4)
18006ad4:	28c00417 	ldw	r3,16(r5)
18006ad8:	10c5c83a 	sub	r2,r2,r3
18006adc:	1000111e 	bne	r2,zero,18006b24 <__mcmp+0x54>
18006ae0:	18c7883a 	add	r3,r3,r3
18006ae4:	18c7883a 	add	r3,r3,r3
18006ae8:	21000504 	addi	r4,r4,20
18006aec:	29400504 	addi	r5,r5,20
18006af0:	20c5883a 	add	r2,r4,r3
18006af4:	28cb883a 	add	r5,r5,r3
18006af8:	00000106 	br	18006b00 <__mcmp+0x30>
18006afc:	20800a2e 	bgeu	r4,r2,18006b28 <__mcmp+0x58>
18006b00:	10bfff04 	addi	r2,r2,-4
18006b04:	297fff04 	addi	r5,r5,-4
18006b08:	11800017 	ldw	r6,0(r2)
18006b0c:	28c00017 	ldw	r3,0(r5)
18006b10:	30fffa26 	beq	r6,r3,18006afc <__alt_data_end+0xf8006afc>
18006b14:	30c00236 	bltu	r6,r3,18006b20 <__mcmp+0x50>
18006b18:	00800044 	movi	r2,1
18006b1c:	f800283a 	ret
18006b20:	00bfffc4 	movi	r2,-1
18006b24:	f800283a 	ret
18006b28:	0005883a 	mov	r2,zero
18006b2c:	f800283a 	ret

18006b30 <__mdiff>:
18006b30:	28c00417 	ldw	r3,16(r5)
18006b34:	30800417 	ldw	r2,16(r6)
18006b38:	defffa04 	addi	sp,sp,-24
18006b3c:	dcc00315 	stw	r19,12(sp)
18006b40:	dc800215 	stw	r18,8(sp)
18006b44:	dfc00515 	stw	ra,20(sp)
18006b48:	dd000415 	stw	r20,16(sp)
18006b4c:	dc400115 	stw	r17,4(sp)
18006b50:	dc000015 	stw	r16,0(sp)
18006b54:	1887c83a 	sub	r3,r3,r2
18006b58:	2825883a 	mov	r18,r5
18006b5c:	3027883a 	mov	r19,r6
18006b60:	1800141e 	bne	r3,zero,18006bb4 <__mdiff+0x84>
18006b64:	1085883a 	add	r2,r2,r2
18006b68:	1085883a 	add	r2,r2,r2
18006b6c:	2a000504 	addi	r8,r5,20
18006b70:	34000504 	addi	r16,r6,20
18006b74:	4087883a 	add	r3,r8,r2
18006b78:	8085883a 	add	r2,r16,r2
18006b7c:	00000106 	br	18006b84 <__mdiff+0x54>
18006b80:	40c0592e 	bgeu	r8,r3,18006ce8 <__mdiff+0x1b8>
18006b84:	18ffff04 	addi	r3,r3,-4
18006b88:	10bfff04 	addi	r2,r2,-4
18006b8c:	19c00017 	ldw	r7,0(r3)
18006b90:	11400017 	ldw	r5,0(r2)
18006b94:	397ffa26 	beq	r7,r5,18006b80 <__alt_data_end+0xf8006b80>
18006b98:	3940592e 	bgeu	r7,r5,18006d00 <__mdiff+0x1d0>
18006b9c:	9005883a 	mov	r2,r18
18006ba0:	4023883a 	mov	r17,r8
18006ba4:	9825883a 	mov	r18,r19
18006ba8:	05000044 	movi	r20,1
18006bac:	1027883a 	mov	r19,r2
18006bb0:	00000406 	br	18006bc4 <__mdiff+0x94>
18006bb4:	18005616 	blt	r3,zero,18006d10 <__mdiff+0x1e0>
18006bb8:	34400504 	addi	r17,r6,20
18006bbc:	2c000504 	addi	r16,r5,20
18006bc0:	0029883a 	mov	r20,zero
18006bc4:	91400117 	ldw	r5,4(r18)
18006bc8:	800614c0 	call	1800614c <_Balloc>
18006bcc:	92400417 	ldw	r9,16(r18)
18006bd0:	9b000417 	ldw	r12,16(r19)
18006bd4:	12c00504 	addi	r11,r2,20
18006bd8:	4a51883a 	add	r8,r9,r9
18006bdc:	6319883a 	add	r12,r12,r12
18006be0:	4211883a 	add	r8,r8,r8
18006be4:	6319883a 	add	r12,r12,r12
18006be8:	15000315 	stw	r20,12(r2)
18006bec:	8211883a 	add	r8,r16,r8
18006bf0:	8b19883a 	add	r12,r17,r12
18006bf4:	0007883a 	mov	r3,zero
18006bf8:	81400017 	ldw	r5,0(r16)
18006bfc:	89c00017 	ldw	r7,0(r17)
18006c00:	59800104 	addi	r6,r11,4
18006c04:	293fffcc 	andi	r4,r5,65535
18006c08:	20c7883a 	add	r3,r4,r3
18006c0c:	393fffcc 	andi	r4,r7,65535
18006c10:	1909c83a 	sub	r4,r3,r4
18006c14:	280ad43a 	srli	r5,r5,16
18006c18:	380ed43a 	srli	r7,r7,16
18006c1c:	2007d43a 	srai	r3,r4,16
18006c20:	213fffcc 	andi	r4,r4,65535
18006c24:	29cbc83a 	sub	r5,r5,r7
18006c28:	28c7883a 	add	r3,r5,r3
18006c2c:	180a943a 	slli	r5,r3,16
18006c30:	8c400104 	addi	r17,r17,4
18006c34:	84000104 	addi	r16,r16,4
18006c38:	2908b03a 	or	r4,r5,r4
18006c3c:	59000015 	stw	r4,0(r11)
18006c40:	1807d43a 	srai	r3,r3,16
18006c44:	3015883a 	mov	r10,r6
18006c48:	3017883a 	mov	r11,r6
18006c4c:	8b3fea36 	bltu	r17,r12,18006bf8 <__alt_data_end+0xf8006bf8>
18006c50:	8200162e 	bgeu	r16,r8,18006cac <__mdiff+0x17c>
18006c54:	8017883a 	mov	r11,r16
18006c58:	59400017 	ldw	r5,0(r11)
18006c5c:	31800104 	addi	r6,r6,4
18006c60:	5ac00104 	addi	r11,r11,4
18006c64:	293fffcc 	andi	r4,r5,65535
18006c68:	20c7883a 	add	r3,r4,r3
18006c6c:	280ed43a 	srli	r7,r5,16
18006c70:	180bd43a 	srai	r5,r3,16
18006c74:	193fffcc 	andi	r4,r3,65535
18006c78:	3947883a 	add	r3,r7,r5
18006c7c:	180a943a 	slli	r5,r3,16
18006c80:	1807d43a 	srai	r3,r3,16
18006c84:	2908b03a 	or	r4,r5,r4
18006c88:	313fff15 	stw	r4,-4(r6)
18006c8c:	5a3ff236 	bltu	r11,r8,18006c58 <__alt_data_end+0xf8006c58>
18006c90:	0406303a 	nor	r3,zero,r16
18006c94:	1a07883a 	add	r3,r3,r8
18006c98:	1806d0ba 	srli	r3,r3,2
18006c9c:	18c00044 	addi	r3,r3,1
18006ca0:	18c7883a 	add	r3,r3,r3
18006ca4:	18c7883a 	add	r3,r3,r3
18006ca8:	50d5883a 	add	r10,r10,r3
18006cac:	50ffff04 	addi	r3,r10,-4
18006cb0:	2000041e 	bne	r4,zero,18006cc4 <__mdiff+0x194>
18006cb4:	18ffff04 	addi	r3,r3,-4
18006cb8:	19000017 	ldw	r4,0(r3)
18006cbc:	4a7fffc4 	addi	r9,r9,-1
18006cc0:	203ffc26 	beq	r4,zero,18006cb4 <__alt_data_end+0xf8006cb4>
18006cc4:	12400415 	stw	r9,16(r2)
18006cc8:	dfc00517 	ldw	ra,20(sp)
18006ccc:	dd000417 	ldw	r20,16(sp)
18006cd0:	dcc00317 	ldw	r19,12(sp)
18006cd4:	dc800217 	ldw	r18,8(sp)
18006cd8:	dc400117 	ldw	r17,4(sp)
18006cdc:	dc000017 	ldw	r16,0(sp)
18006ce0:	dec00604 	addi	sp,sp,24
18006ce4:	f800283a 	ret
18006ce8:	000b883a 	mov	r5,zero
18006cec:	800614c0 	call	1800614c <_Balloc>
18006cf0:	00c00044 	movi	r3,1
18006cf4:	10c00415 	stw	r3,16(r2)
18006cf8:	10000515 	stw	zero,20(r2)
18006cfc:	003ff206 	br	18006cc8 <__alt_data_end+0xf8006cc8>
18006d00:	8023883a 	mov	r17,r16
18006d04:	0029883a 	mov	r20,zero
18006d08:	4021883a 	mov	r16,r8
18006d0c:	003fad06 	br	18006bc4 <__alt_data_end+0xf8006bc4>
18006d10:	9005883a 	mov	r2,r18
18006d14:	94400504 	addi	r17,r18,20
18006d18:	9c000504 	addi	r16,r19,20
18006d1c:	9825883a 	mov	r18,r19
18006d20:	05000044 	movi	r20,1
18006d24:	1027883a 	mov	r19,r2
18006d28:	003fa606 	br	18006bc4 <__alt_data_end+0xf8006bc4>

18006d2c <__ulp>:
18006d2c:	295ffc2c 	andhi	r5,r5,32752
18006d30:	00bf3034 	movhi	r2,64704
18006d34:	2887883a 	add	r3,r5,r2
18006d38:	00c0020e 	bge	zero,r3,18006d44 <__ulp+0x18>
18006d3c:	0005883a 	mov	r2,zero
18006d40:	f800283a 	ret
18006d44:	00c7c83a 	sub	r3,zero,r3
18006d48:	1807d53a 	srai	r3,r3,20
18006d4c:	008004c4 	movi	r2,19
18006d50:	10c00b0e 	bge	r2,r3,18006d80 <__ulp+0x54>
18006d54:	18bffb04 	addi	r2,r3,-20
18006d58:	01000784 	movi	r4,30
18006d5c:	0007883a 	mov	r3,zero
18006d60:	20800516 	blt	r4,r2,18006d78 <__ulp+0x4c>
18006d64:	010007c4 	movi	r4,31
18006d68:	2089c83a 	sub	r4,r4,r2
18006d6c:	00800044 	movi	r2,1
18006d70:	1104983a 	sll	r2,r2,r4
18006d74:	f800283a 	ret
18006d78:	00800044 	movi	r2,1
18006d7c:	f800283a 	ret
18006d80:	01400234 	movhi	r5,8
18006d84:	28c7d83a 	sra	r3,r5,r3
18006d88:	0005883a 	mov	r2,zero
18006d8c:	f800283a 	ret

18006d90 <__b2d>:
18006d90:	defffa04 	addi	sp,sp,-24
18006d94:	dc000015 	stw	r16,0(sp)
18006d98:	24000417 	ldw	r16,16(r4)
18006d9c:	dc400115 	stw	r17,4(sp)
18006da0:	24400504 	addi	r17,r4,20
18006da4:	8421883a 	add	r16,r16,r16
18006da8:	8421883a 	add	r16,r16,r16
18006dac:	8c21883a 	add	r16,r17,r16
18006db0:	dc800215 	stw	r18,8(sp)
18006db4:	84bfff17 	ldw	r18,-4(r16)
18006db8:	dd000415 	stw	r20,16(sp)
18006dbc:	dcc00315 	stw	r19,12(sp)
18006dc0:	9009883a 	mov	r4,r18
18006dc4:	2829883a 	mov	r20,r5
18006dc8:	dfc00515 	stw	ra,20(sp)
18006dcc:	80064680 	call	18006468 <__hi0bits>
18006dd0:	00c00804 	movi	r3,32
18006dd4:	1889c83a 	sub	r4,r3,r2
18006dd8:	a1000015 	stw	r4,0(r20)
18006ddc:	01000284 	movi	r4,10
18006de0:	84ffff04 	addi	r19,r16,-4
18006de4:	20801216 	blt	r4,r2,18006e30 <__b2d+0xa0>
18006de8:	018002c4 	movi	r6,11
18006dec:	308dc83a 	sub	r6,r6,r2
18006df0:	9186d83a 	srl	r3,r18,r6
18006df4:	18cffc34 	orhi	r3,r3,16368
18006df8:	8cc0212e 	bgeu	r17,r19,18006e80 <__b2d+0xf0>
18006dfc:	813ffe17 	ldw	r4,-8(r16)
18006e00:	218cd83a 	srl	r6,r4,r6
18006e04:	10800544 	addi	r2,r2,21
18006e08:	9084983a 	sll	r2,r18,r2
18006e0c:	1184b03a 	or	r2,r2,r6
18006e10:	dfc00517 	ldw	ra,20(sp)
18006e14:	dd000417 	ldw	r20,16(sp)
18006e18:	dcc00317 	ldw	r19,12(sp)
18006e1c:	dc800217 	ldw	r18,8(sp)
18006e20:	dc400117 	ldw	r17,4(sp)
18006e24:	dc000017 	ldw	r16,0(sp)
18006e28:	dec00604 	addi	sp,sp,24
18006e2c:	f800283a 	ret
18006e30:	8cc00f2e 	bgeu	r17,r19,18006e70 <__b2d+0xe0>
18006e34:	117ffd44 	addi	r5,r2,-11
18006e38:	80bffe17 	ldw	r2,-8(r16)
18006e3c:	28000e26 	beq	r5,zero,18006e78 <__b2d+0xe8>
18006e40:	1949c83a 	sub	r4,r3,r5
18006e44:	9164983a 	sll	r18,r18,r5
18006e48:	1106d83a 	srl	r3,r2,r4
18006e4c:	81bffe04 	addi	r6,r16,-8
18006e50:	948ffc34 	orhi	r18,r18,16368
18006e54:	90c6b03a 	or	r3,r18,r3
18006e58:	89800e2e 	bgeu	r17,r6,18006e94 <__b2d+0x104>
18006e5c:	81bffd17 	ldw	r6,-12(r16)
18006e60:	1144983a 	sll	r2,r2,r5
18006e64:	310ad83a 	srl	r5,r6,r4
18006e68:	2884b03a 	or	r2,r5,r2
18006e6c:	003fe806 	br	18006e10 <__alt_data_end+0xf8006e10>
18006e70:	10bffd44 	addi	r2,r2,-11
18006e74:	1000041e 	bne	r2,zero,18006e88 <__b2d+0xf8>
18006e78:	90cffc34 	orhi	r3,r18,16368
18006e7c:	003fe406 	br	18006e10 <__alt_data_end+0xf8006e10>
18006e80:	000d883a 	mov	r6,zero
18006e84:	003fdf06 	br	18006e04 <__alt_data_end+0xf8006e04>
18006e88:	90a4983a 	sll	r18,r18,r2
18006e8c:	0005883a 	mov	r2,zero
18006e90:	003ff906 	br	18006e78 <__alt_data_end+0xf8006e78>
18006e94:	1144983a 	sll	r2,r2,r5
18006e98:	003fdd06 	br	18006e10 <__alt_data_end+0xf8006e10>

18006e9c <__d2b>:
18006e9c:	defff804 	addi	sp,sp,-32
18006ea0:	dc000215 	stw	r16,8(sp)
18006ea4:	3021883a 	mov	r16,r6
18006ea8:	dc400315 	stw	r17,12(sp)
18006eac:	8022907a 	slli	r17,r16,1
18006eb0:	dd000615 	stw	r20,24(sp)
18006eb4:	2829883a 	mov	r20,r5
18006eb8:	01400044 	movi	r5,1
18006ebc:	dcc00515 	stw	r19,20(sp)
18006ec0:	dc800415 	stw	r18,16(sp)
18006ec4:	dfc00715 	stw	ra,28(sp)
18006ec8:	3825883a 	mov	r18,r7
18006ecc:	8822d57a 	srli	r17,r17,21
18006ed0:	800614c0 	call	1800614c <_Balloc>
18006ed4:	1027883a 	mov	r19,r2
18006ed8:	00800434 	movhi	r2,16
18006edc:	10bfffc4 	addi	r2,r2,-1
18006ee0:	808c703a 	and	r6,r16,r2
18006ee4:	88000126 	beq	r17,zero,18006eec <__d2b+0x50>
18006ee8:	31800434 	orhi	r6,r6,16
18006eec:	d9800015 	stw	r6,0(sp)
18006ef0:	a0002426 	beq	r20,zero,18006f84 <__d2b+0xe8>
18006ef4:	d9000104 	addi	r4,sp,4
18006ef8:	dd000115 	stw	r20,4(sp)
18006efc:	80064d00 	call	180064d0 <__lo0bits>
18006f00:	d8c00017 	ldw	r3,0(sp)
18006f04:	10002f1e 	bne	r2,zero,18006fc4 <__d2b+0x128>
18006f08:	d9000117 	ldw	r4,4(sp)
18006f0c:	99000515 	stw	r4,20(r19)
18006f10:	1821003a 	cmpeq	r16,r3,zero
18006f14:	01000084 	movi	r4,2
18006f18:	2421c83a 	sub	r16,r4,r16
18006f1c:	98c00615 	stw	r3,24(r19)
18006f20:	9c000415 	stw	r16,16(r19)
18006f24:	88001f1e 	bne	r17,zero,18006fa4 <__d2b+0x108>
18006f28:	10bef384 	addi	r2,r2,-1074
18006f2c:	90800015 	stw	r2,0(r18)
18006f30:	00900034 	movhi	r2,16384
18006f34:	10bfffc4 	addi	r2,r2,-1
18006f38:	8085883a 	add	r2,r16,r2
18006f3c:	1085883a 	add	r2,r2,r2
18006f40:	1085883a 	add	r2,r2,r2
18006f44:	9885883a 	add	r2,r19,r2
18006f48:	11000517 	ldw	r4,20(r2)
18006f4c:	8020917a 	slli	r16,r16,5
18006f50:	80064680 	call	18006468 <__hi0bits>
18006f54:	d8c00817 	ldw	r3,32(sp)
18006f58:	8085c83a 	sub	r2,r16,r2
18006f5c:	18800015 	stw	r2,0(r3)
18006f60:	9805883a 	mov	r2,r19
18006f64:	dfc00717 	ldw	ra,28(sp)
18006f68:	dd000617 	ldw	r20,24(sp)
18006f6c:	dcc00517 	ldw	r19,20(sp)
18006f70:	dc800417 	ldw	r18,16(sp)
18006f74:	dc400317 	ldw	r17,12(sp)
18006f78:	dc000217 	ldw	r16,8(sp)
18006f7c:	dec00804 	addi	sp,sp,32
18006f80:	f800283a 	ret
18006f84:	d809883a 	mov	r4,sp
18006f88:	80064d00 	call	180064d0 <__lo0bits>
18006f8c:	d8c00017 	ldw	r3,0(sp)
18006f90:	04000044 	movi	r16,1
18006f94:	9c000415 	stw	r16,16(r19)
18006f98:	98c00515 	stw	r3,20(r19)
18006f9c:	10800804 	addi	r2,r2,32
18006fa0:	883fe126 	beq	r17,zero,18006f28 <__alt_data_end+0xf8006f28>
18006fa4:	00c00d44 	movi	r3,53
18006fa8:	8c7ef344 	addi	r17,r17,-1075
18006fac:	88a3883a 	add	r17,r17,r2
18006fb0:	1885c83a 	sub	r2,r3,r2
18006fb4:	d8c00817 	ldw	r3,32(sp)
18006fb8:	94400015 	stw	r17,0(r18)
18006fbc:	18800015 	stw	r2,0(r3)
18006fc0:	003fe706 	br	18006f60 <__alt_data_end+0xf8006f60>
18006fc4:	01000804 	movi	r4,32
18006fc8:	2089c83a 	sub	r4,r4,r2
18006fcc:	1908983a 	sll	r4,r3,r4
18006fd0:	d9400117 	ldw	r5,4(sp)
18006fd4:	1886d83a 	srl	r3,r3,r2
18006fd8:	2148b03a 	or	r4,r4,r5
18006fdc:	99000515 	stw	r4,20(r19)
18006fe0:	d8c00015 	stw	r3,0(sp)
18006fe4:	003fca06 	br	18006f10 <__alt_data_end+0xf8006f10>

18006fe8 <__ratio>:
18006fe8:	defff904 	addi	sp,sp,-28
18006fec:	dc400315 	stw	r17,12(sp)
18006ff0:	2823883a 	mov	r17,r5
18006ff4:	d9400104 	addi	r5,sp,4
18006ff8:	dfc00615 	stw	ra,24(sp)
18006ffc:	dcc00515 	stw	r19,20(sp)
18007000:	dc800415 	stw	r18,16(sp)
18007004:	2027883a 	mov	r19,r4
18007008:	dc000215 	stw	r16,8(sp)
1800700c:	8006d900 	call	18006d90 <__b2d>
18007010:	d80b883a 	mov	r5,sp
18007014:	8809883a 	mov	r4,r17
18007018:	1025883a 	mov	r18,r2
1800701c:	1821883a 	mov	r16,r3
18007020:	8006d900 	call	18006d90 <__b2d>
18007024:	8a000417 	ldw	r8,16(r17)
18007028:	99000417 	ldw	r4,16(r19)
1800702c:	d9400117 	ldw	r5,4(sp)
18007030:	2209c83a 	sub	r4,r4,r8
18007034:	2010917a 	slli	r8,r4,5
18007038:	d9000017 	ldw	r4,0(sp)
1800703c:	2909c83a 	sub	r4,r5,r4
18007040:	4109883a 	add	r4,r8,r4
18007044:	01000e0e 	bge	zero,r4,18007080 <__ratio+0x98>
18007048:	2008953a 	slli	r4,r4,20
1800704c:	2421883a 	add	r16,r4,r16
18007050:	100d883a 	mov	r6,r2
18007054:	180f883a 	mov	r7,r3
18007058:	9009883a 	mov	r4,r18
1800705c:	800b883a 	mov	r5,r16
18007060:	800b3200 	call	1800b320 <__divdf3>
18007064:	dfc00617 	ldw	ra,24(sp)
18007068:	dcc00517 	ldw	r19,20(sp)
1800706c:	dc800417 	ldw	r18,16(sp)
18007070:	dc400317 	ldw	r17,12(sp)
18007074:	dc000217 	ldw	r16,8(sp)
18007078:	dec00704 	addi	sp,sp,28
1800707c:	f800283a 	ret
18007080:	2008953a 	slli	r4,r4,20
18007084:	1907c83a 	sub	r3,r3,r4
18007088:	003ff106 	br	18007050 <__alt_data_end+0xf8007050>

1800708c <_mprec_log10>:
1800708c:	defffe04 	addi	sp,sp,-8
18007090:	dc000015 	stw	r16,0(sp)
18007094:	dfc00115 	stw	ra,4(sp)
18007098:	008005c4 	movi	r2,23
1800709c:	2021883a 	mov	r16,r4
180070a0:	11000d0e 	bge	r2,r4,180070d8 <_mprec_log10+0x4c>
180070a4:	0005883a 	mov	r2,zero
180070a8:	00cffc34 	movhi	r3,16368
180070ac:	843fffc4 	addi	r16,r16,-1
180070b0:	000d883a 	mov	r6,zero
180070b4:	01d00934 	movhi	r7,16420
180070b8:	1009883a 	mov	r4,r2
180070bc:	180b883a 	mov	r5,r3
180070c0:	800bf480 	call	1800bf48 <__muldf3>
180070c4:	803ff91e 	bne	r16,zero,180070ac <__alt_data_end+0xf80070ac>
180070c8:	dfc00117 	ldw	ra,4(sp)
180070cc:	dc000017 	ldw	r16,0(sp)
180070d0:	dec00204 	addi	sp,sp,8
180070d4:	f800283a 	ret
180070d8:	202090fa 	slli	r16,r4,3
180070dc:	00860074 	movhi	r2,6145
180070e0:	10bf3004 	addi	r2,r2,-832
180070e4:	1421883a 	add	r16,r2,r16
180070e8:	80800017 	ldw	r2,0(r16)
180070ec:	80c00117 	ldw	r3,4(r16)
180070f0:	dfc00117 	ldw	ra,4(sp)
180070f4:	dc000017 	ldw	r16,0(sp)
180070f8:	dec00204 	addi	sp,sp,8
180070fc:	f800283a 	ret

18007100 <__copybits>:
18007100:	297fffc4 	addi	r5,r5,-1
18007104:	280fd17a 	srai	r7,r5,5
18007108:	30c00417 	ldw	r3,16(r6)
1800710c:	30800504 	addi	r2,r6,20
18007110:	39c00044 	addi	r7,r7,1
18007114:	18c7883a 	add	r3,r3,r3
18007118:	39cf883a 	add	r7,r7,r7
1800711c:	18c7883a 	add	r3,r3,r3
18007120:	39cf883a 	add	r7,r7,r7
18007124:	10c7883a 	add	r3,r2,r3
18007128:	21cf883a 	add	r7,r4,r7
1800712c:	10c00d2e 	bgeu	r2,r3,18007164 <__copybits+0x64>
18007130:	200b883a 	mov	r5,r4
18007134:	12000017 	ldw	r8,0(r2)
18007138:	29400104 	addi	r5,r5,4
1800713c:	10800104 	addi	r2,r2,4
18007140:	2a3fff15 	stw	r8,-4(r5)
18007144:	10fffb36 	bltu	r2,r3,18007134 <__alt_data_end+0xf8007134>
18007148:	1985c83a 	sub	r2,r3,r6
1800714c:	10bffac4 	addi	r2,r2,-21
18007150:	1004d0ba 	srli	r2,r2,2
18007154:	10800044 	addi	r2,r2,1
18007158:	1085883a 	add	r2,r2,r2
1800715c:	1085883a 	add	r2,r2,r2
18007160:	2089883a 	add	r4,r4,r2
18007164:	21c0032e 	bgeu	r4,r7,18007174 <__copybits+0x74>
18007168:	20000015 	stw	zero,0(r4)
1800716c:	21000104 	addi	r4,r4,4
18007170:	21fffd36 	bltu	r4,r7,18007168 <__alt_data_end+0xf8007168>
18007174:	f800283a 	ret

18007178 <__any_on>:
18007178:	20c00417 	ldw	r3,16(r4)
1800717c:	2805d17a 	srai	r2,r5,5
18007180:	21000504 	addi	r4,r4,20
18007184:	18800d0e 	bge	r3,r2,180071bc <__any_on+0x44>
18007188:	18c7883a 	add	r3,r3,r3
1800718c:	18c7883a 	add	r3,r3,r3
18007190:	20c7883a 	add	r3,r4,r3
18007194:	20c0192e 	bgeu	r4,r3,180071fc <__any_on+0x84>
18007198:	18bfff17 	ldw	r2,-4(r3)
1800719c:	18ffff04 	addi	r3,r3,-4
180071a0:	1000041e 	bne	r2,zero,180071b4 <__any_on+0x3c>
180071a4:	20c0142e 	bgeu	r4,r3,180071f8 <__any_on+0x80>
180071a8:	18ffff04 	addi	r3,r3,-4
180071ac:	19400017 	ldw	r5,0(r3)
180071b0:	283ffc26 	beq	r5,zero,180071a4 <__alt_data_end+0xf80071a4>
180071b4:	00800044 	movi	r2,1
180071b8:	f800283a 	ret
180071bc:	10c00a0e 	bge	r2,r3,180071e8 <__any_on+0x70>
180071c0:	1085883a 	add	r2,r2,r2
180071c4:	1085883a 	add	r2,r2,r2
180071c8:	294007cc 	andi	r5,r5,31
180071cc:	2087883a 	add	r3,r4,r2
180071d0:	283ff026 	beq	r5,zero,18007194 <__alt_data_end+0xf8007194>
180071d4:	19800017 	ldw	r6,0(r3)
180071d8:	3144d83a 	srl	r2,r6,r5
180071dc:	114a983a 	sll	r5,r2,r5
180071e0:	317ff41e 	bne	r6,r5,180071b4 <__alt_data_end+0xf80071b4>
180071e4:	003feb06 	br	18007194 <__alt_data_end+0xf8007194>
180071e8:	1085883a 	add	r2,r2,r2
180071ec:	1085883a 	add	r2,r2,r2
180071f0:	2087883a 	add	r3,r4,r2
180071f4:	003fe706 	br	18007194 <__alt_data_end+0xf8007194>
180071f8:	f800283a 	ret
180071fc:	0005883a 	mov	r2,zero
18007200:	f800283a 	ret

18007204 <_realloc_r>:
18007204:	defff604 	addi	sp,sp,-40
18007208:	dc800215 	stw	r18,8(sp)
1800720c:	dfc00915 	stw	ra,36(sp)
18007210:	df000815 	stw	fp,32(sp)
18007214:	ddc00715 	stw	r23,28(sp)
18007218:	dd800615 	stw	r22,24(sp)
1800721c:	dd400515 	stw	r21,20(sp)
18007220:	dd000415 	stw	r20,16(sp)
18007224:	dcc00315 	stw	r19,12(sp)
18007228:	dc400115 	stw	r17,4(sp)
1800722c:	dc000015 	stw	r16,0(sp)
18007230:	3025883a 	mov	r18,r6
18007234:	2800b726 	beq	r5,zero,18007514 <_realloc_r+0x310>
18007238:	282b883a 	mov	r21,r5
1800723c:	2029883a 	mov	r20,r4
18007240:	800d8b40 	call	1800d8b4 <__malloc_lock>
18007244:	a8bfff17 	ldw	r2,-4(r21)
18007248:	043fff04 	movi	r16,-4
1800724c:	90c002c4 	addi	r3,r18,11
18007250:	01000584 	movi	r4,22
18007254:	acfffe04 	addi	r19,r21,-8
18007258:	1420703a 	and	r16,r2,r16
1800725c:	20c0332e 	bgeu	r4,r3,1800732c <_realloc_r+0x128>
18007260:	047ffe04 	movi	r17,-8
18007264:	1c62703a 	and	r17,r3,r17
18007268:	8807883a 	mov	r3,r17
1800726c:	88005816 	blt	r17,zero,180073d0 <_realloc_r+0x1cc>
18007270:	8c805736 	bltu	r17,r18,180073d0 <_realloc_r+0x1cc>
18007274:	80c0300e 	bge	r16,r3,18007338 <_realloc_r+0x134>
18007278:	07060074 	movhi	fp,6145
1800727c:	e701f204 	addi	fp,fp,1992
18007280:	e1c00217 	ldw	r7,8(fp)
18007284:	9c09883a 	add	r4,r19,r16
18007288:	22000117 	ldw	r8,4(r4)
1800728c:	21c06326 	beq	r4,r7,1800741c <_realloc_r+0x218>
18007290:	017fff84 	movi	r5,-2
18007294:	414a703a 	and	r5,r8,r5
18007298:	214b883a 	add	r5,r4,r5
1800729c:	29800117 	ldw	r6,4(r5)
180072a0:	3180004c 	andi	r6,r6,1
180072a4:	30003f26 	beq	r6,zero,180073a4 <_realloc_r+0x1a0>
180072a8:	1080004c 	andi	r2,r2,1
180072ac:	10008326 	beq	r2,zero,180074bc <_realloc_r+0x2b8>
180072b0:	900b883a 	mov	r5,r18
180072b4:	a009883a 	mov	r4,r20
180072b8:	80054900 	call	18005490 <_malloc_r>
180072bc:	1025883a 	mov	r18,r2
180072c0:	10011e26 	beq	r2,zero,1800773c <_realloc_r+0x538>
180072c4:	a93fff17 	ldw	r4,-4(r21)
180072c8:	10fffe04 	addi	r3,r2,-8
180072cc:	00bfff84 	movi	r2,-2
180072d0:	2084703a 	and	r2,r4,r2
180072d4:	9885883a 	add	r2,r19,r2
180072d8:	1880ee26 	beq	r3,r2,18007694 <_realloc_r+0x490>
180072dc:	81bfff04 	addi	r6,r16,-4
180072e0:	00800904 	movi	r2,36
180072e4:	1180b836 	bltu	r2,r6,180075c8 <_realloc_r+0x3c4>
180072e8:	00c004c4 	movi	r3,19
180072ec:	19809636 	bltu	r3,r6,18007548 <_realloc_r+0x344>
180072f0:	9005883a 	mov	r2,r18
180072f4:	a807883a 	mov	r3,r21
180072f8:	19000017 	ldw	r4,0(r3)
180072fc:	11000015 	stw	r4,0(r2)
18007300:	19000117 	ldw	r4,4(r3)
18007304:	11000115 	stw	r4,4(r2)
18007308:	18c00217 	ldw	r3,8(r3)
1800730c:	10c00215 	stw	r3,8(r2)
18007310:	a80b883a 	mov	r5,r21
18007314:	a009883a 	mov	r4,r20
18007318:	800976c0 	call	1800976c <_free_r>
1800731c:	a009883a 	mov	r4,r20
18007320:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18007324:	9005883a 	mov	r2,r18
18007328:	00001206 	br	18007374 <_realloc_r+0x170>
1800732c:	00c00404 	movi	r3,16
18007330:	1823883a 	mov	r17,r3
18007334:	003fce06 	br	18007270 <__alt_data_end+0xf8007270>
18007338:	a825883a 	mov	r18,r21
1800733c:	8445c83a 	sub	r2,r16,r17
18007340:	00c003c4 	movi	r3,15
18007344:	18802636 	bltu	r3,r2,180073e0 <_realloc_r+0x1dc>
18007348:	99800117 	ldw	r6,4(r19)
1800734c:	9c07883a 	add	r3,r19,r16
18007350:	3180004c 	andi	r6,r6,1
18007354:	3420b03a 	or	r16,r6,r16
18007358:	9c000115 	stw	r16,4(r19)
1800735c:	18800117 	ldw	r2,4(r3)
18007360:	10800054 	ori	r2,r2,1
18007364:	18800115 	stw	r2,4(r3)
18007368:	a009883a 	mov	r4,r20
1800736c:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18007370:	9005883a 	mov	r2,r18
18007374:	dfc00917 	ldw	ra,36(sp)
18007378:	df000817 	ldw	fp,32(sp)
1800737c:	ddc00717 	ldw	r23,28(sp)
18007380:	dd800617 	ldw	r22,24(sp)
18007384:	dd400517 	ldw	r21,20(sp)
18007388:	dd000417 	ldw	r20,16(sp)
1800738c:	dcc00317 	ldw	r19,12(sp)
18007390:	dc800217 	ldw	r18,8(sp)
18007394:	dc400117 	ldw	r17,4(sp)
18007398:	dc000017 	ldw	r16,0(sp)
1800739c:	dec00a04 	addi	sp,sp,40
180073a0:	f800283a 	ret
180073a4:	017fff04 	movi	r5,-4
180073a8:	414a703a 	and	r5,r8,r5
180073ac:	814d883a 	add	r6,r16,r5
180073b0:	30c01f16 	blt	r6,r3,18007430 <_realloc_r+0x22c>
180073b4:	20800317 	ldw	r2,12(r4)
180073b8:	20c00217 	ldw	r3,8(r4)
180073bc:	a825883a 	mov	r18,r21
180073c0:	3021883a 	mov	r16,r6
180073c4:	18800315 	stw	r2,12(r3)
180073c8:	10c00215 	stw	r3,8(r2)
180073cc:	003fdb06 	br	1800733c <__alt_data_end+0xf800733c>
180073d0:	00800304 	movi	r2,12
180073d4:	a0800015 	stw	r2,0(r20)
180073d8:	0005883a 	mov	r2,zero
180073dc:	003fe506 	br	18007374 <__alt_data_end+0xf8007374>
180073e0:	98c00117 	ldw	r3,4(r19)
180073e4:	9c4b883a 	add	r5,r19,r17
180073e8:	11000054 	ori	r4,r2,1
180073ec:	18c0004c 	andi	r3,r3,1
180073f0:	1c62b03a 	or	r17,r3,r17
180073f4:	9c400115 	stw	r17,4(r19)
180073f8:	29000115 	stw	r4,4(r5)
180073fc:	2885883a 	add	r2,r5,r2
18007400:	10c00117 	ldw	r3,4(r2)
18007404:	29400204 	addi	r5,r5,8
18007408:	a009883a 	mov	r4,r20
1800740c:	18c00054 	ori	r3,r3,1
18007410:	10c00115 	stw	r3,4(r2)
18007414:	800976c0 	call	1800976c <_free_r>
18007418:	003fd306 	br	18007368 <__alt_data_end+0xf8007368>
1800741c:	017fff04 	movi	r5,-4
18007420:	414a703a 	and	r5,r8,r5
18007424:	89800404 	addi	r6,r17,16
18007428:	8151883a 	add	r8,r16,r5
1800742c:	4180590e 	bge	r8,r6,18007594 <_realloc_r+0x390>
18007430:	1080004c 	andi	r2,r2,1
18007434:	103f9e1e 	bne	r2,zero,180072b0 <__alt_data_end+0xf80072b0>
18007438:	adbffe17 	ldw	r22,-8(r21)
1800743c:	00bfff04 	movi	r2,-4
18007440:	9dadc83a 	sub	r22,r19,r22
18007444:	b1800117 	ldw	r6,4(r22)
18007448:	3084703a 	and	r2,r6,r2
1800744c:	20002026 	beq	r4,zero,180074d0 <_realloc_r+0x2cc>
18007450:	80af883a 	add	r23,r16,r2
18007454:	b96f883a 	add	r23,r23,r5
18007458:	21c05f26 	beq	r4,r7,180075d8 <_realloc_r+0x3d4>
1800745c:	b8c01c16 	blt	r23,r3,180074d0 <_realloc_r+0x2cc>
18007460:	20800317 	ldw	r2,12(r4)
18007464:	20c00217 	ldw	r3,8(r4)
18007468:	81bfff04 	addi	r6,r16,-4
1800746c:	01000904 	movi	r4,36
18007470:	18800315 	stw	r2,12(r3)
18007474:	10c00215 	stw	r3,8(r2)
18007478:	b0c00217 	ldw	r3,8(r22)
1800747c:	b0800317 	ldw	r2,12(r22)
18007480:	b4800204 	addi	r18,r22,8
18007484:	18800315 	stw	r2,12(r3)
18007488:	10c00215 	stw	r3,8(r2)
1800748c:	21801b36 	bltu	r4,r6,180074fc <_realloc_r+0x2f8>
18007490:	008004c4 	movi	r2,19
18007494:	1180352e 	bgeu	r2,r6,1800756c <_realloc_r+0x368>
18007498:	a8800017 	ldw	r2,0(r21)
1800749c:	b0800215 	stw	r2,8(r22)
180074a0:	a8800117 	ldw	r2,4(r21)
180074a4:	b0800315 	stw	r2,12(r22)
180074a8:	008006c4 	movi	r2,27
180074ac:	11807f36 	bltu	r2,r6,180076ac <_realloc_r+0x4a8>
180074b0:	b0800404 	addi	r2,r22,16
180074b4:	ad400204 	addi	r21,r21,8
180074b8:	00002d06 	br	18007570 <_realloc_r+0x36c>
180074bc:	adbffe17 	ldw	r22,-8(r21)
180074c0:	00bfff04 	movi	r2,-4
180074c4:	9dadc83a 	sub	r22,r19,r22
180074c8:	b1000117 	ldw	r4,4(r22)
180074cc:	2084703a 	and	r2,r4,r2
180074d0:	b03f7726 	beq	r22,zero,180072b0 <__alt_data_end+0xf80072b0>
180074d4:	80af883a 	add	r23,r16,r2
180074d8:	b8ff7516 	blt	r23,r3,180072b0 <__alt_data_end+0xf80072b0>
180074dc:	b0800317 	ldw	r2,12(r22)
180074e0:	b0c00217 	ldw	r3,8(r22)
180074e4:	81bfff04 	addi	r6,r16,-4
180074e8:	01000904 	movi	r4,36
180074ec:	18800315 	stw	r2,12(r3)
180074f0:	10c00215 	stw	r3,8(r2)
180074f4:	b4800204 	addi	r18,r22,8
180074f8:	21bfe52e 	bgeu	r4,r6,18007490 <__alt_data_end+0xf8007490>
180074fc:	a80b883a 	mov	r5,r21
18007500:	9009883a 	mov	r4,r18
18007504:	8005ec80 	call	18005ec8 <memmove>
18007508:	b821883a 	mov	r16,r23
1800750c:	b027883a 	mov	r19,r22
18007510:	003f8a06 	br	1800733c <__alt_data_end+0xf800733c>
18007514:	300b883a 	mov	r5,r6
18007518:	dfc00917 	ldw	ra,36(sp)
1800751c:	df000817 	ldw	fp,32(sp)
18007520:	ddc00717 	ldw	r23,28(sp)
18007524:	dd800617 	ldw	r22,24(sp)
18007528:	dd400517 	ldw	r21,20(sp)
1800752c:	dd000417 	ldw	r20,16(sp)
18007530:	dcc00317 	ldw	r19,12(sp)
18007534:	dc800217 	ldw	r18,8(sp)
18007538:	dc400117 	ldw	r17,4(sp)
1800753c:	dc000017 	ldw	r16,0(sp)
18007540:	dec00a04 	addi	sp,sp,40
18007544:	80054901 	jmpi	18005490 <_malloc_r>
18007548:	a8c00017 	ldw	r3,0(r21)
1800754c:	90c00015 	stw	r3,0(r18)
18007550:	a8c00117 	ldw	r3,4(r21)
18007554:	90c00115 	stw	r3,4(r18)
18007558:	00c006c4 	movi	r3,27
1800755c:	19804536 	bltu	r3,r6,18007674 <_realloc_r+0x470>
18007560:	90800204 	addi	r2,r18,8
18007564:	a8c00204 	addi	r3,r21,8
18007568:	003f6306 	br	180072f8 <__alt_data_end+0xf80072f8>
1800756c:	9005883a 	mov	r2,r18
18007570:	a8c00017 	ldw	r3,0(r21)
18007574:	b821883a 	mov	r16,r23
18007578:	b027883a 	mov	r19,r22
1800757c:	10c00015 	stw	r3,0(r2)
18007580:	a8c00117 	ldw	r3,4(r21)
18007584:	10c00115 	stw	r3,4(r2)
18007588:	a8c00217 	ldw	r3,8(r21)
1800758c:	10c00215 	stw	r3,8(r2)
18007590:	003f6a06 	br	1800733c <__alt_data_end+0xf800733c>
18007594:	9c67883a 	add	r19,r19,r17
18007598:	4445c83a 	sub	r2,r8,r17
1800759c:	e4c00215 	stw	r19,8(fp)
180075a0:	10800054 	ori	r2,r2,1
180075a4:	98800115 	stw	r2,4(r19)
180075a8:	a8bfff17 	ldw	r2,-4(r21)
180075ac:	a009883a 	mov	r4,r20
180075b0:	1080004c 	andi	r2,r2,1
180075b4:	1462b03a 	or	r17,r2,r17
180075b8:	ac7fff15 	stw	r17,-4(r21)
180075bc:	800d8d80 	call	1800d8d8 <__malloc_unlock>
180075c0:	a805883a 	mov	r2,r21
180075c4:	003f6b06 	br	18007374 <__alt_data_end+0xf8007374>
180075c8:	a80b883a 	mov	r5,r21
180075cc:	9009883a 	mov	r4,r18
180075d0:	8005ec80 	call	18005ec8 <memmove>
180075d4:	003f4e06 	br	18007310 <__alt_data_end+0xf8007310>
180075d8:	89000404 	addi	r4,r17,16
180075dc:	b93fbc16 	blt	r23,r4,180074d0 <__alt_data_end+0xf80074d0>
180075e0:	b0800317 	ldw	r2,12(r22)
180075e4:	b0c00217 	ldw	r3,8(r22)
180075e8:	81bfff04 	addi	r6,r16,-4
180075ec:	01000904 	movi	r4,36
180075f0:	18800315 	stw	r2,12(r3)
180075f4:	10c00215 	stw	r3,8(r2)
180075f8:	b4800204 	addi	r18,r22,8
180075fc:	21804336 	bltu	r4,r6,1800770c <_realloc_r+0x508>
18007600:	008004c4 	movi	r2,19
18007604:	11803f2e 	bgeu	r2,r6,18007704 <_realloc_r+0x500>
18007608:	a8800017 	ldw	r2,0(r21)
1800760c:	b0800215 	stw	r2,8(r22)
18007610:	a8800117 	ldw	r2,4(r21)
18007614:	b0800315 	stw	r2,12(r22)
18007618:	008006c4 	movi	r2,27
1800761c:	11803f36 	bltu	r2,r6,1800771c <_realloc_r+0x518>
18007620:	b0800404 	addi	r2,r22,16
18007624:	ad400204 	addi	r21,r21,8
18007628:	a8c00017 	ldw	r3,0(r21)
1800762c:	10c00015 	stw	r3,0(r2)
18007630:	a8c00117 	ldw	r3,4(r21)
18007634:	10c00115 	stw	r3,4(r2)
18007638:	a8c00217 	ldw	r3,8(r21)
1800763c:	10c00215 	stw	r3,8(r2)
18007640:	b447883a 	add	r3,r22,r17
18007644:	bc45c83a 	sub	r2,r23,r17
18007648:	e0c00215 	stw	r3,8(fp)
1800764c:	10800054 	ori	r2,r2,1
18007650:	18800115 	stw	r2,4(r3)
18007654:	b0800117 	ldw	r2,4(r22)
18007658:	a009883a 	mov	r4,r20
1800765c:	1080004c 	andi	r2,r2,1
18007660:	1462b03a 	or	r17,r2,r17
18007664:	b4400115 	stw	r17,4(r22)
18007668:	800d8d80 	call	1800d8d8 <__malloc_unlock>
1800766c:	9005883a 	mov	r2,r18
18007670:	003f4006 	br	18007374 <__alt_data_end+0xf8007374>
18007674:	a8c00217 	ldw	r3,8(r21)
18007678:	90c00215 	stw	r3,8(r18)
1800767c:	a8c00317 	ldw	r3,12(r21)
18007680:	90c00315 	stw	r3,12(r18)
18007684:	30801126 	beq	r6,r2,180076cc <_realloc_r+0x4c8>
18007688:	90800404 	addi	r2,r18,16
1800768c:	a8c00404 	addi	r3,r21,16
18007690:	003f1906 	br	180072f8 <__alt_data_end+0xf80072f8>
18007694:	90ffff17 	ldw	r3,-4(r18)
18007698:	00bfff04 	movi	r2,-4
1800769c:	a825883a 	mov	r18,r21
180076a0:	1884703a 	and	r2,r3,r2
180076a4:	80a1883a 	add	r16,r16,r2
180076a8:	003f2406 	br	1800733c <__alt_data_end+0xf800733c>
180076ac:	a8800217 	ldw	r2,8(r21)
180076b0:	b0800415 	stw	r2,16(r22)
180076b4:	a8800317 	ldw	r2,12(r21)
180076b8:	b0800515 	stw	r2,20(r22)
180076bc:	31000a26 	beq	r6,r4,180076e8 <_realloc_r+0x4e4>
180076c0:	b0800604 	addi	r2,r22,24
180076c4:	ad400404 	addi	r21,r21,16
180076c8:	003fa906 	br	18007570 <__alt_data_end+0xf8007570>
180076cc:	a9000417 	ldw	r4,16(r21)
180076d0:	90800604 	addi	r2,r18,24
180076d4:	a8c00604 	addi	r3,r21,24
180076d8:	91000415 	stw	r4,16(r18)
180076dc:	a9000517 	ldw	r4,20(r21)
180076e0:	91000515 	stw	r4,20(r18)
180076e4:	003f0406 	br	180072f8 <__alt_data_end+0xf80072f8>
180076e8:	a8c00417 	ldw	r3,16(r21)
180076ec:	ad400604 	addi	r21,r21,24
180076f0:	b0800804 	addi	r2,r22,32
180076f4:	b0c00615 	stw	r3,24(r22)
180076f8:	a8ffff17 	ldw	r3,-4(r21)
180076fc:	b0c00715 	stw	r3,28(r22)
18007700:	003f9b06 	br	18007570 <__alt_data_end+0xf8007570>
18007704:	9005883a 	mov	r2,r18
18007708:	003fc706 	br	18007628 <__alt_data_end+0xf8007628>
1800770c:	a80b883a 	mov	r5,r21
18007710:	9009883a 	mov	r4,r18
18007714:	8005ec80 	call	18005ec8 <memmove>
18007718:	003fc906 	br	18007640 <__alt_data_end+0xf8007640>
1800771c:	a8800217 	ldw	r2,8(r21)
18007720:	b0800415 	stw	r2,16(r22)
18007724:	a8800317 	ldw	r2,12(r21)
18007728:	b0800515 	stw	r2,20(r22)
1800772c:	31000726 	beq	r6,r4,1800774c <_realloc_r+0x548>
18007730:	b0800604 	addi	r2,r22,24
18007734:	ad400404 	addi	r21,r21,16
18007738:	003fbb06 	br	18007628 <__alt_data_end+0xf8007628>
1800773c:	a009883a 	mov	r4,r20
18007740:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18007744:	0005883a 	mov	r2,zero
18007748:	003f0a06 	br	18007374 <__alt_data_end+0xf8007374>
1800774c:	a8c00417 	ldw	r3,16(r21)
18007750:	ad400604 	addi	r21,r21,24
18007754:	b0800804 	addi	r2,r22,32
18007758:	b0c00615 	stw	r3,24(r22)
1800775c:	a8ffff17 	ldw	r3,-4(r21)
18007760:	b0c00715 	stw	r3,28(r22)
18007764:	003fb006 	br	18007628 <__alt_data_end+0xf8007628>

18007768 <__fpclassifyd>:
18007768:	00a00034 	movhi	r2,32768
1800776c:	10bfffc4 	addi	r2,r2,-1
18007770:	2884703a 	and	r2,r5,r2
18007774:	10000726 	beq	r2,zero,18007794 <__fpclassifyd+0x2c>
18007778:	00fffc34 	movhi	r3,65520
1800777c:	019ff834 	movhi	r6,32736
18007780:	28c7883a 	add	r3,r5,r3
18007784:	31bfffc4 	addi	r6,r6,-1
18007788:	30c00536 	bltu	r6,r3,180077a0 <__fpclassifyd+0x38>
1800778c:	00800104 	movi	r2,4
18007790:	f800283a 	ret
18007794:	2000021e 	bne	r4,zero,180077a0 <__fpclassifyd+0x38>
18007798:	00800084 	movi	r2,2
1800779c:	f800283a 	ret
180077a0:	00dffc34 	movhi	r3,32752
180077a4:	019ff834 	movhi	r6,32736
180077a8:	28cb883a 	add	r5,r5,r3
180077ac:	31bfffc4 	addi	r6,r6,-1
180077b0:	317ff62e 	bgeu	r6,r5,1800778c <__alt_data_end+0xf800778c>
180077b4:	01400434 	movhi	r5,16
180077b8:	297fffc4 	addi	r5,r5,-1
180077bc:	28800236 	bltu	r5,r2,180077c8 <__fpclassifyd+0x60>
180077c0:	008000c4 	movi	r2,3
180077c4:	f800283a 	ret
180077c8:	10c00226 	beq	r2,r3,180077d4 <__fpclassifyd+0x6c>
180077cc:	0005883a 	mov	r2,zero
180077d0:	f800283a 	ret
180077d4:	2005003a 	cmpeq	r2,r4,zero
180077d8:	f800283a 	ret

180077dc <_sbrk_r>:
180077dc:	defffd04 	addi	sp,sp,-12
180077e0:	dc000015 	stw	r16,0(sp)
180077e4:	04060074 	movhi	r16,6145
180077e8:	dc400115 	stw	r17,4(sp)
180077ec:	840f5f04 	addi	r16,r16,15740
180077f0:	2023883a 	mov	r17,r4
180077f4:	2809883a 	mov	r4,r5
180077f8:	dfc00215 	stw	ra,8(sp)
180077fc:	80000015 	stw	zero,0(r16)
18007800:	800dac00 	call	1800dac0 <sbrk>
18007804:	00ffffc4 	movi	r3,-1
18007808:	10c00526 	beq	r2,r3,18007820 <_sbrk_r+0x44>
1800780c:	dfc00217 	ldw	ra,8(sp)
18007810:	dc400117 	ldw	r17,4(sp)
18007814:	dc000017 	ldw	r16,0(sp)
18007818:	dec00304 	addi	sp,sp,12
1800781c:	f800283a 	ret
18007820:	80c00017 	ldw	r3,0(r16)
18007824:	183ff926 	beq	r3,zero,1800780c <__alt_data_end+0xf800780c>
18007828:	88c00015 	stw	r3,0(r17)
1800782c:	003ff706 	br	1800780c <__alt_data_end+0xf800780c>

18007830 <__sread>:
18007830:	defffe04 	addi	sp,sp,-8
18007834:	dc000015 	stw	r16,0(sp)
18007838:	2821883a 	mov	r16,r5
1800783c:	2940038f 	ldh	r5,14(r5)
18007840:	dfc00115 	stw	ra,4(sp)
18007844:	8009c980 	call	18009c98 <_read_r>
18007848:	10000716 	blt	r2,zero,18007868 <__sread+0x38>
1800784c:	80c01417 	ldw	r3,80(r16)
18007850:	1887883a 	add	r3,r3,r2
18007854:	80c01415 	stw	r3,80(r16)
18007858:	dfc00117 	ldw	ra,4(sp)
1800785c:	dc000017 	ldw	r16,0(sp)
18007860:	dec00204 	addi	sp,sp,8
18007864:	f800283a 	ret
18007868:	80c0030b 	ldhu	r3,12(r16)
1800786c:	18fbffcc 	andi	r3,r3,61439
18007870:	80c0030d 	sth	r3,12(r16)
18007874:	dfc00117 	ldw	ra,4(sp)
18007878:	dc000017 	ldw	r16,0(sp)
1800787c:	dec00204 	addi	sp,sp,8
18007880:	f800283a 	ret

18007884 <__seofread>:
18007884:	0005883a 	mov	r2,zero
18007888:	f800283a 	ret

1800788c <__swrite>:
1800788c:	2880030b 	ldhu	r2,12(r5)
18007890:	defffb04 	addi	sp,sp,-20
18007894:	dcc00315 	stw	r19,12(sp)
18007898:	dc800215 	stw	r18,8(sp)
1800789c:	dc400115 	stw	r17,4(sp)
180078a0:	dc000015 	stw	r16,0(sp)
180078a4:	dfc00415 	stw	ra,16(sp)
180078a8:	10c0400c 	andi	r3,r2,256
180078ac:	2821883a 	mov	r16,r5
180078b0:	2023883a 	mov	r17,r4
180078b4:	3025883a 	mov	r18,r6
180078b8:	3827883a 	mov	r19,r7
180078bc:	18000526 	beq	r3,zero,180078d4 <__swrite+0x48>
180078c0:	2940038f 	ldh	r5,14(r5)
180078c4:	01c00084 	movi	r7,2
180078c8:	000d883a 	mov	r6,zero
180078cc:	8009a7c0 	call	18009a7c <_lseek_r>
180078d0:	8080030b 	ldhu	r2,12(r16)
180078d4:	8140038f 	ldh	r5,14(r16)
180078d8:	10bbffcc 	andi	r2,r2,61439
180078dc:	980f883a 	mov	r7,r19
180078e0:	900d883a 	mov	r6,r18
180078e4:	8809883a 	mov	r4,r17
180078e8:	8080030d 	sth	r2,12(r16)
180078ec:	dfc00417 	ldw	ra,16(sp)
180078f0:	dcc00317 	ldw	r19,12(sp)
180078f4:	dc800217 	ldw	r18,8(sp)
180078f8:	dc400117 	ldw	r17,4(sp)
180078fc:	dc000017 	ldw	r16,0(sp)
18007900:	dec00504 	addi	sp,sp,20
18007904:	8008fb81 	jmpi	18008fb8 <_write_r>

18007908 <__sseek>:
18007908:	defffe04 	addi	sp,sp,-8
1800790c:	dc000015 	stw	r16,0(sp)
18007910:	2821883a 	mov	r16,r5
18007914:	2940038f 	ldh	r5,14(r5)
18007918:	dfc00115 	stw	ra,4(sp)
1800791c:	8009a7c0 	call	18009a7c <_lseek_r>
18007920:	00ffffc4 	movi	r3,-1
18007924:	10c00826 	beq	r2,r3,18007948 <__sseek+0x40>
18007928:	80c0030b 	ldhu	r3,12(r16)
1800792c:	80801415 	stw	r2,80(r16)
18007930:	18c40014 	ori	r3,r3,4096
18007934:	80c0030d 	sth	r3,12(r16)
18007938:	dfc00117 	ldw	ra,4(sp)
1800793c:	dc000017 	ldw	r16,0(sp)
18007940:	dec00204 	addi	sp,sp,8
18007944:	f800283a 	ret
18007948:	80c0030b 	ldhu	r3,12(r16)
1800794c:	18fbffcc 	andi	r3,r3,61439
18007950:	80c0030d 	sth	r3,12(r16)
18007954:	dfc00117 	ldw	ra,4(sp)
18007958:	dc000017 	ldw	r16,0(sp)
1800795c:	dec00204 	addi	sp,sp,8
18007960:	f800283a 	ret

18007964 <__sclose>:
18007964:	2940038f 	ldh	r5,14(r5)
18007968:	800916c1 	jmpi	1800916c <_close_r>

1800796c <strcmp>:
1800796c:	2144b03a 	or	r2,r4,r5
18007970:	108000cc 	andi	r2,r2,3
18007974:	1000171e 	bne	r2,zero,180079d4 <strcmp+0x68>
18007978:	20800017 	ldw	r2,0(r4)
1800797c:	28c00017 	ldw	r3,0(r5)
18007980:	10c0141e 	bne	r2,r3,180079d4 <strcmp+0x68>
18007984:	027fbff4 	movhi	r9,65279
18007988:	4a7fbfc4 	addi	r9,r9,-257
1800798c:	0086303a 	nor	r3,zero,r2
18007990:	02202074 	movhi	r8,32897
18007994:	1245883a 	add	r2,r2,r9
18007998:	42202004 	addi	r8,r8,-32640
1800799c:	10c4703a 	and	r2,r2,r3
180079a0:	1204703a 	and	r2,r2,r8
180079a4:	10000226 	beq	r2,zero,180079b0 <strcmp+0x44>
180079a8:	00002306 	br	18007a38 <strcmp+0xcc>
180079ac:	1000221e 	bne	r2,zero,18007a38 <strcmp+0xcc>
180079b0:	21000104 	addi	r4,r4,4
180079b4:	20c00017 	ldw	r3,0(r4)
180079b8:	29400104 	addi	r5,r5,4
180079bc:	29800017 	ldw	r6,0(r5)
180079c0:	1a4f883a 	add	r7,r3,r9
180079c4:	00c4303a 	nor	r2,zero,r3
180079c8:	3884703a 	and	r2,r7,r2
180079cc:	1204703a 	and	r2,r2,r8
180079d0:	19bff626 	beq	r3,r6,180079ac <__alt_data_end+0xf80079ac>
180079d4:	20800003 	ldbu	r2,0(r4)
180079d8:	10c03fcc 	andi	r3,r2,255
180079dc:	18c0201c 	xori	r3,r3,128
180079e0:	18ffe004 	addi	r3,r3,-128
180079e4:	18000c26 	beq	r3,zero,18007a18 <strcmp+0xac>
180079e8:	29800007 	ldb	r6,0(r5)
180079ec:	19800326 	beq	r3,r6,180079fc <strcmp+0x90>
180079f0:	00001306 	br	18007a40 <strcmp+0xd4>
180079f4:	29800007 	ldb	r6,0(r5)
180079f8:	11800b1e 	bne	r2,r6,18007a28 <strcmp+0xbc>
180079fc:	21000044 	addi	r4,r4,1
18007a00:	20c00003 	ldbu	r3,0(r4)
18007a04:	29400044 	addi	r5,r5,1
18007a08:	18803fcc 	andi	r2,r3,255
18007a0c:	1080201c 	xori	r2,r2,128
18007a10:	10bfe004 	addi	r2,r2,-128
18007a14:	103ff71e 	bne	r2,zero,180079f4 <__alt_data_end+0xf80079f4>
18007a18:	0007883a 	mov	r3,zero
18007a1c:	28800003 	ldbu	r2,0(r5)
18007a20:	1885c83a 	sub	r2,r3,r2
18007a24:	f800283a 	ret
18007a28:	28800003 	ldbu	r2,0(r5)
18007a2c:	18c03fcc 	andi	r3,r3,255
18007a30:	1885c83a 	sub	r2,r3,r2
18007a34:	f800283a 	ret
18007a38:	0005883a 	mov	r2,zero
18007a3c:	f800283a 	ret
18007a40:	10c03fcc 	andi	r3,r2,255
18007a44:	003ff506 	br	18007a1c <__alt_data_end+0xf8007a1c>

18007a48 <__ssprint_r>:
18007a48:	30800217 	ldw	r2,8(r6)
18007a4c:	defff604 	addi	sp,sp,-40
18007a50:	dc800215 	stw	r18,8(sp)
18007a54:	dfc00915 	stw	ra,36(sp)
18007a58:	df000815 	stw	fp,32(sp)
18007a5c:	ddc00715 	stw	r23,28(sp)
18007a60:	dd800615 	stw	r22,24(sp)
18007a64:	dd400515 	stw	r21,20(sp)
18007a68:	dd000415 	stw	r20,16(sp)
18007a6c:	dcc00315 	stw	r19,12(sp)
18007a70:	dc400115 	stw	r17,4(sp)
18007a74:	dc000015 	stw	r16,0(sp)
18007a78:	3025883a 	mov	r18,r6
18007a7c:	10005826 	beq	r2,zero,18007be0 <__ssprint_r+0x198>
18007a80:	2027883a 	mov	r19,r4
18007a84:	35c00017 	ldw	r23,0(r6)
18007a88:	29000017 	ldw	r4,0(r5)
18007a8c:	28800217 	ldw	r2,8(r5)
18007a90:	2823883a 	mov	r17,r5
18007a94:	0039883a 	mov	fp,zero
18007a98:	0021883a 	mov	r16,zero
18007a9c:	80003926 	beq	r16,zero,18007b84 <__ssprint_r+0x13c>
18007aa0:	102b883a 	mov	r21,r2
18007aa4:	102d883a 	mov	r22,r2
18007aa8:	80803a36 	bltu	r16,r2,18007b94 <__ssprint_r+0x14c>
18007aac:	88c0030b 	ldhu	r3,12(r17)
18007ab0:	1881200c 	andi	r2,r3,1152
18007ab4:	10002626 	beq	r2,zero,18007b50 <__ssprint_r+0x108>
18007ab8:	88800517 	ldw	r2,20(r17)
18007abc:	89400417 	ldw	r5,16(r17)
18007ac0:	81800044 	addi	r6,r16,1
18007ac4:	108f883a 	add	r7,r2,r2
18007ac8:	3885883a 	add	r2,r7,r2
18007acc:	100ed7fa 	srli	r7,r2,31
18007ad0:	216dc83a 	sub	r22,r4,r5
18007ad4:	3589883a 	add	r4,r6,r22
18007ad8:	3885883a 	add	r2,r7,r2
18007adc:	102bd07a 	srai	r21,r2,1
18007ae0:	a80d883a 	mov	r6,r21
18007ae4:	a900022e 	bgeu	r21,r4,18007af0 <__ssprint_r+0xa8>
18007ae8:	202b883a 	mov	r21,r4
18007aec:	200d883a 	mov	r6,r4
18007af0:	18c1000c 	andi	r3,r3,1024
18007af4:	18002a26 	beq	r3,zero,18007ba0 <__ssprint_r+0x158>
18007af8:	300b883a 	mov	r5,r6
18007afc:	9809883a 	mov	r4,r19
18007b00:	80054900 	call	18005490 <_malloc_r>
18007b04:	1029883a 	mov	r20,r2
18007b08:	10002c26 	beq	r2,zero,18007bbc <__ssprint_r+0x174>
18007b0c:	89400417 	ldw	r5,16(r17)
18007b10:	b00d883a 	mov	r6,r22
18007b14:	1009883a 	mov	r4,r2
18007b18:	8005d800 	call	18005d80 <memcpy>
18007b1c:	8880030b 	ldhu	r2,12(r17)
18007b20:	00fedfc4 	movi	r3,-1153
18007b24:	10c4703a 	and	r2,r2,r3
18007b28:	10802014 	ori	r2,r2,128
18007b2c:	8880030d 	sth	r2,12(r17)
18007b30:	a589883a 	add	r4,r20,r22
18007b34:	adadc83a 	sub	r22,r21,r22
18007b38:	8d400515 	stw	r21,20(r17)
18007b3c:	8d800215 	stw	r22,8(r17)
18007b40:	8d000415 	stw	r20,16(r17)
18007b44:	89000015 	stw	r4,0(r17)
18007b48:	802b883a 	mov	r21,r16
18007b4c:	802d883a 	mov	r22,r16
18007b50:	b00d883a 	mov	r6,r22
18007b54:	e00b883a 	mov	r5,fp
18007b58:	8005ec80 	call	18005ec8 <memmove>
18007b5c:	88800217 	ldw	r2,8(r17)
18007b60:	89000017 	ldw	r4,0(r17)
18007b64:	90c00217 	ldw	r3,8(r18)
18007b68:	1545c83a 	sub	r2,r2,r21
18007b6c:	2589883a 	add	r4,r4,r22
18007b70:	88800215 	stw	r2,8(r17)
18007b74:	89000015 	stw	r4,0(r17)
18007b78:	1c21c83a 	sub	r16,r3,r16
18007b7c:	94000215 	stw	r16,8(r18)
18007b80:	80001726 	beq	r16,zero,18007be0 <__ssprint_r+0x198>
18007b84:	bf000017 	ldw	fp,0(r23)
18007b88:	bc000117 	ldw	r16,4(r23)
18007b8c:	bdc00204 	addi	r23,r23,8
18007b90:	003fc206 	br	18007a9c <__alt_data_end+0xf8007a9c>
18007b94:	802b883a 	mov	r21,r16
18007b98:	802d883a 	mov	r22,r16
18007b9c:	003fec06 	br	18007b50 <__alt_data_end+0xf8007b50>
18007ba0:	9809883a 	mov	r4,r19
18007ba4:	80072040 	call	18007204 <_realloc_r>
18007ba8:	1029883a 	mov	r20,r2
18007bac:	103fe01e 	bne	r2,zero,18007b30 <__alt_data_end+0xf8007b30>
18007bb0:	89400417 	ldw	r5,16(r17)
18007bb4:	9809883a 	mov	r4,r19
18007bb8:	800976c0 	call	1800976c <_free_r>
18007bbc:	88c0030b 	ldhu	r3,12(r17)
18007bc0:	00800304 	movi	r2,12
18007bc4:	98800015 	stw	r2,0(r19)
18007bc8:	18c01014 	ori	r3,r3,64
18007bcc:	88c0030d 	sth	r3,12(r17)
18007bd0:	00bfffc4 	movi	r2,-1
18007bd4:	90000215 	stw	zero,8(r18)
18007bd8:	90000115 	stw	zero,4(r18)
18007bdc:	00000206 	br	18007be8 <__ssprint_r+0x1a0>
18007be0:	90000115 	stw	zero,4(r18)
18007be4:	0005883a 	mov	r2,zero
18007be8:	dfc00917 	ldw	ra,36(sp)
18007bec:	df000817 	ldw	fp,32(sp)
18007bf0:	ddc00717 	ldw	r23,28(sp)
18007bf4:	dd800617 	ldw	r22,24(sp)
18007bf8:	dd400517 	ldw	r21,20(sp)
18007bfc:	dd000417 	ldw	r20,16(sp)
18007c00:	dcc00317 	ldw	r19,12(sp)
18007c04:	dc800217 	ldw	r18,8(sp)
18007c08:	dc400117 	ldw	r17,4(sp)
18007c0c:	dc000017 	ldw	r16,0(sp)
18007c10:	dec00a04 	addi	sp,sp,40
18007c14:	f800283a 	ret

18007c18 <___svfiprintf_internal_r>:
18007c18:	2880030b 	ldhu	r2,12(r5)
18007c1c:	deffc804 	addi	sp,sp,-224
18007c20:	dcc03115 	stw	r19,196(sp)
18007c24:	dfc03715 	stw	ra,220(sp)
18007c28:	df003615 	stw	fp,216(sp)
18007c2c:	ddc03515 	stw	r23,212(sp)
18007c30:	dd803415 	stw	r22,208(sp)
18007c34:	dd403315 	stw	r21,204(sp)
18007c38:	dd003215 	stw	r20,200(sp)
18007c3c:	dc803015 	stw	r18,192(sp)
18007c40:	dc402f15 	stw	r17,188(sp)
18007c44:	dc002e15 	stw	r16,184(sp)
18007c48:	d9402315 	stw	r5,140(sp)
18007c4c:	d9002715 	stw	r4,156(sp)
18007c50:	1080200c 	andi	r2,r2,128
18007c54:	d9c02415 	stw	r7,144(sp)
18007c58:	3027883a 	mov	r19,r6
18007c5c:	10000226 	beq	r2,zero,18007c68 <___svfiprintf_internal_r+0x50>
18007c60:	28800417 	ldw	r2,16(r5)
18007c64:	10046d26 	beq	r2,zero,18008e1c <___svfiprintf_internal_r+0x1204>
18007c68:	d8801a04 	addi	r2,sp,104
18007c6c:	d8c019c4 	addi	r3,sp,103
18007c70:	05860074 	movhi	r22,6145
18007c74:	10c9c83a 	sub	r4,r2,r3
18007c78:	b5bf6204 	addi	r22,r22,-632
18007c7c:	d8801e15 	stw	r2,120(sp)
18007c80:	d8c01f15 	stw	r3,124(sp)
18007c84:	dec01a15 	stw	sp,104(sp)
18007c88:	d8001c15 	stw	zero,112(sp)
18007c8c:	d8001b15 	stw	zero,108(sp)
18007c90:	d811883a 	mov	r8,sp
18007c94:	d8002915 	stw	zero,164(sp)
18007c98:	d8002615 	stw	zero,152(sp)
18007c9c:	d9002c15 	stw	r4,176(sp)
18007ca0:	98800007 	ldb	r2,0(r19)
18007ca4:	10031426 	beq	r2,zero,180088f8 <___svfiprintf_internal_r+0xce0>
18007ca8:	00c00944 	movi	r3,37
18007cac:	9825883a 	mov	r18,r19
18007cb0:	10c0021e 	bne	r2,r3,18007cbc <___svfiprintf_internal_r+0xa4>
18007cb4:	00001406 	br	18007d08 <___svfiprintf_internal_r+0xf0>
18007cb8:	10c00326 	beq	r2,r3,18007cc8 <___svfiprintf_internal_r+0xb0>
18007cbc:	94800044 	addi	r18,r18,1
18007cc0:	90800007 	ldb	r2,0(r18)
18007cc4:	103ffc1e 	bne	r2,zero,18007cb8 <__alt_data_end+0xf8007cb8>
18007cc8:	94e1c83a 	sub	r16,r18,r19
18007ccc:	80000e26 	beq	r16,zero,18007d08 <___svfiprintf_internal_r+0xf0>
18007cd0:	d8c01c17 	ldw	r3,112(sp)
18007cd4:	d8801b17 	ldw	r2,108(sp)
18007cd8:	44c00015 	stw	r19,0(r8)
18007cdc:	1c07883a 	add	r3,r3,r16
18007ce0:	10800044 	addi	r2,r2,1
18007ce4:	d8c01c15 	stw	r3,112(sp)
18007ce8:	44000115 	stw	r16,4(r8)
18007cec:	d8801b15 	stw	r2,108(sp)
18007cf0:	00c001c4 	movi	r3,7
18007cf4:	18835c16 	blt	r3,r2,18008a68 <___svfiprintf_internal_r+0xe50>
18007cf8:	42000204 	addi	r8,r8,8
18007cfc:	d9402617 	ldw	r5,152(sp)
18007d00:	2c0b883a 	add	r5,r5,r16
18007d04:	d9402615 	stw	r5,152(sp)
18007d08:	90800007 	ldb	r2,0(r18)
18007d0c:	1002fc26 	beq	r2,zero,18008900 <___svfiprintf_internal_r+0xce8>
18007d10:	0023883a 	mov	r17,zero
18007d14:	00bfffc4 	movi	r2,-1
18007d18:	0021883a 	mov	r16,zero
18007d1c:	94c00044 	addi	r19,r18,1
18007d20:	90c00047 	ldb	r3,1(r18)
18007d24:	dc402105 	stb	r17,132(sp)
18007d28:	d8001d85 	stb	zero,118(sp)
18007d2c:	002b883a 	mov	r21,zero
18007d30:	d8802015 	stw	r2,128(sp)
18007d34:	d8002515 	stw	zero,148(sp)
18007d38:	04801604 	movi	r18,88
18007d3c:	05000244 	movi	r20,9
18007d40:	402f883a 	mov	r23,r8
18007d44:	8023883a 	mov	r17,r16
18007d48:	9cc00044 	addi	r19,r19,1
18007d4c:	18bff804 	addi	r2,r3,-32
18007d50:	9081fb36 	bltu	r18,r2,18008540 <___svfiprintf_internal_r+0x928>
18007d54:	100490ba 	slli	r2,r2,2
18007d58:	01060034 	movhi	r4,6144
18007d5c:	211f5b04 	addi	r4,r4,32108
18007d60:	1105883a 	add	r2,r2,r4
18007d64:	10800017 	ldw	r2,0(r2)
18007d68:	1000683a 	jmp	r2
18007d6c:	18007f6c 	andhi	zero,r3,509
18007d70:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d74:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d78:	18007f60 	cmpeqi	zero,r3,509
18007d7c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d80:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d84:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d88:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d8c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d90:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007d94:	18007ed0 	cmplti	zero,r3,507
18007d98:	180080cc 	andi	zero,r3,515
18007d9c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007da0:	18007ef8 	rdprs	zero,r3,507
18007da4:	1800857c 	xorhi	zero,r3,533
18007da8:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007dac:	18008570 	cmpltui	zero,r3,533
18007db0:	18008504 	addi	zero,r3,532
18007db4:	18008504 	addi	zero,r3,532
18007db8:	18008504 	addi	zero,r3,532
18007dbc:	18008504 	addi	zero,r3,532
18007dc0:	18008504 	addi	zero,r3,532
18007dc4:	18008504 	addi	zero,r3,532
18007dc8:	18008504 	addi	zero,r3,532
18007dcc:	18008504 	addi	zero,r3,532
18007dd0:	18008504 	addi	zero,r3,532
18007dd4:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007dd8:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007ddc:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007de0:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007de4:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007de8:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007dec:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007df0:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007df4:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007df8:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007dfc:	18008488 	cmpgei	zero,r3,530
18007e00:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e04:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e08:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e0c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e10:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e14:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e18:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e1c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e20:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e24:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e28:	18008638 	rdprs	zero,r3,536
18007e2c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e30:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e34:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e38:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e3c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e40:	180085c4 	addi	zero,r3,535
18007e44:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e48:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e4c:	180082c4 	addi	zero,r3,523
18007e50:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e54:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e58:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e5c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e60:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e64:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e68:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e6c:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e70:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e74:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e78:	18008190 	cmplti	zero,r3,518
18007e7c:	18008374 	orhi	zero,r3,525
18007e80:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e84:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e88:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e8c:	18008368 	cmpgeui	zero,r3,525
18007e90:	18008374 	orhi	zero,r3,525
18007e94:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e98:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007e9c:	18008354 	ori	zero,r3,525
18007ea0:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007ea4:	18008314 	ori	zero,r3,524
18007ea8:	180080e0 	cmpeqi	zero,r3,515
18007eac:	18007f04 	addi	zero,r3,508
18007eb0:	1800847c 	xorhi	zero,r3,529
18007eb4:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007eb8:	18008428 	cmpgeui	zero,r3,528
18007ebc:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007ec0:	18008044 	addi	zero,r3,513
18007ec4:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007ec8:	18008540 	call	11800854 <__alt_mem_onchip_memory2_0+0x11800854>
18007ecc:	18007f90 	cmplti	zero,r3,510
18007ed0:	d9002417 	ldw	r4,144(sp)
18007ed4:	d9402417 	ldw	r5,144(sp)
18007ed8:	21000017 	ldw	r4,0(r4)
18007edc:	28800104 	addi	r2,r5,4
18007ee0:	d9002515 	stw	r4,148(sp)
18007ee4:	20032b0e 	bge	r4,zero,18008b94 <___svfiprintf_internal_r+0xf7c>
18007ee8:	d8c02517 	ldw	r3,148(sp)
18007eec:	d8802415 	stw	r2,144(sp)
18007ef0:	00c7c83a 	sub	r3,zero,r3
18007ef4:	d8c02515 	stw	r3,148(sp)
18007ef8:	8c400114 	ori	r17,r17,4
18007efc:	98c00007 	ldb	r3,0(r19)
18007f00:	003f9106 	br	18007d48 <__alt_data_end+0xf8007d48>
18007f04:	00800c04 	movi	r2,48
18007f08:	d9402417 	ldw	r5,144(sp)
18007f0c:	d9002017 	ldw	r4,128(sp)
18007f10:	d8801d05 	stb	r2,116(sp)
18007f14:	00801e04 	movi	r2,120
18007f18:	d8801d45 	stb	r2,117(sp)
18007f1c:	d8001d85 	stb	zero,118(sp)
18007f20:	b811883a 	mov	r8,r23
18007f24:	28c00104 	addi	r3,r5,4
18007f28:	2c800017 	ldw	r18,0(r5)
18007f2c:	0029883a 	mov	r20,zero
18007f30:	88800094 	ori	r2,r17,2
18007f34:	20036316 	blt	r4,zero,18008cc4 <___svfiprintf_internal_r+0x10ac>
18007f38:	00bfdfc4 	movi	r2,-129
18007f3c:	88a0703a 	and	r16,r17,r2
18007f40:	d8c02415 	stw	r3,144(sp)
18007f44:	84000094 	ori	r16,r16,2
18007f48:	90031c26 	beq	r18,zero,18008bbc <___svfiprintf_internal_r+0xfa4>
18007f4c:	01460074 	movhi	r5,6145
18007f50:	297f0104 	addi	r5,r5,-1020
18007f54:	002b883a 	mov	r21,zero
18007f58:	d9402915 	stw	r5,164(sp)
18007f5c:	00002906 	br	18008004 <___svfiprintf_internal_r+0x3ec>
18007f60:	8c400054 	ori	r17,r17,1
18007f64:	98c00007 	ldb	r3,0(r19)
18007f68:	003f7706 	br	18007d48 <__alt_data_end+0xf8007d48>
18007f6c:	a8803fcc 	andi	r2,r21,255
18007f70:	1080201c 	xori	r2,r2,128
18007f74:	10bfe004 	addi	r2,r2,-128
18007f78:	10032a1e 	bne	r2,zero,18008c24 <___svfiprintf_internal_r+0x100c>
18007f7c:	00c00044 	movi	r3,1
18007f80:	d8c02105 	stb	r3,132(sp)
18007f84:	05400804 	movi	r21,32
18007f88:	98c00007 	ldb	r3,0(r19)
18007f8c:	003f6e06 	br	18007d48 <__alt_data_end+0xf8007d48>
18007f90:	8821883a 	mov	r16,r17
18007f94:	dc402103 	ldbu	r17,132(sp)
18007f98:	b811883a 	mov	r8,r23
18007f9c:	8c403fcc 	andi	r17,r17,255
18007fa0:	8803f01e 	bne	r17,zero,18008f64 <___svfiprintf_internal_r+0x134c>
18007fa4:	00860074 	movhi	r2,6145
18007fa8:	10bf0104 	addi	r2,r2,-1020
18007fac:	d8802915 	stw	r2,164(sp)
18007fb0:	8080080c 	andi	r2,r16,32
18007fb4:	1000cd26 	beq	r2,zero,180082ec <___svfiprintf_internal_r+0x6d4>
18007fb8:	d9002417 	ldw	r4,144(sp)
18007fbc:	24800017 	ldw	r18,0(r4)
18007fc0:	25000117 	ldw	r20,4(r4)
18007fc4:	21000204 	addi	r4,r4,8
18007fc8:	d9002415 	stw	r4,144(sp)
18007fcc:	8080004c 	andi	r2,r16,1
18007fd0:	1002c726 	beq	r2,zero,18008af0 <___svfiprintf_internal_r+0xed8>
18007fd4:	9504b03a 	or	r2,r18,r20
18007fd8:	1003061e 	bne	r2,zero,18008bf4 <___svfiprintf_internal_r+0xfdc>
18007fdc:	d9002017 	ldw	r4,128(sp)
18007fe0:	d8001d85 	stb	zero,118(sp)
18007fe4:	20033e16 	blt	r4,zero,18008ce0 <___svfiprintf_internal_r+0x10c8>
18007fe8:	00bfdfc4 	movi	r2,-129
18007fec:	80a0703a 	and	r16,r16,r2
18007ff0:	d9402017 	ldw	r5,128(sp)
18007ff4:	002b883a 	mov	r21,zero
18007ff8:	28002826 	beq	r5,zero,1800809c <___svfiprintf_internal_r+0x484>
18007ffc:	0025883a 	mov	r18,zero
18008000:	0029883a 	mov	r20,zero
18008004:	d9002917 	ldw	r4,164(sp)
18008008:	dc401a04 	addi	r17,sp,104
1800800c:	908003cc 	andi	r2,r18,15
18008010:	a006973a 	slli	r3,r20,28
18008014:	2085883a 	add	r2,r4,r2
18008018:	9024d13a 	srli	r18,r18,4
1800801c:	10800003 	ldbu	r2,0(r2)
18008020:	a028d13a 	srli	r20,r20,4
18008024:	8c7fffc4 	addi	r17,r17,-1
18008028:	1ca4b03a 	or	r18,r3,r18
1800802c:	88800005 	stb	r2,0(r17)
18008030:	9504b03a 	or	r2,r18,r20
18008034:	103ff51e 	bne	r2,zero,1800800c <__alt_data_end+0xf800800c>
18008038:	d8801e17 	ldw	r2,120(sp)
1800803c:	1469c83a 	sub	r20,r2,r17
18008040:	00001906 	br	180080a8 <___svfiprintf_internal_r+0x490>
18008044:	8821883a 	mov	r16,r17
18008048:	dc402103 	ldbu	r17,132(sp)
1800804c:	b811883a 	mov	r8,r23
18008050:	8c403fcc 	andi	r17,r17,255
18008054:	8803d01e 	bne	r17,zero,18008f98 <___svfiprintf_internal_r+0x1380>
18008058:	8080080c 	andi	r2,r16,32
1800805c:	10016126 	beq	r2,zero,180085e4 <___svfiprintf_internal_r+0x9cc>
18008060:	d9002417 	ldw	r4,144(sp)
18008064:	d9402017 	ldw	r5,128(sp)
18008068:	d8001d85 	stb	zero,118(sp)
1800806c:	20c00204 	addi	r3,r4,8
18008070:	24800017 	ldw	r18,0(r4)
18008074:	25000117 	ldw	r20,4(r4)
18008078:	28030f16 	blt	r5,zero,18008cb8 <___svfiprintf_internal_r+0x10a0>
1800807c:	013fdfc4 	movi	r4,-129
18008080:	9504b03a 	or	r2,r18,r20
18008084:	d8c02415 	stw	r3,144(sp)
18008088:	8120703a 	and	r16,r16,r4
1800808c:	002b883a 	mov	r21,zero
18008090:	1000cd1e 	bne	r2,zero,180083c8 <___svfiprintf_internal_r+0x7b0>
18008094:	d8c02017 	ldw	r3,128(sp)
18008098:	1803141e 	bne	r3,zero,18008cec <___svfiprintf_internal_r+0x10d4>
1800809c:	d8002015 	stw	zero,128(sp)
180080a0:	0029883a 	mov	r20,zero
180080a4:	dc401a04 	addi	r17,sp,104
180080a8:	dc802017 	ldw	r18,128(sp)
180080ac:	9500010e 	bge	r18,r20,180080b4 <___svfiprintf_internal_r+0x49c>
180080b0:	a025883a 	mov	r18,r20
180080b4:	ad403fcc 	andi	r21,r21,255
180080b8:	ad40201c 	xori	r21,r21,128
180080bc:	ad7fe004 	addi	r21,r21,-128
180080c0:	a8003f26 	beq	r21,zero,180081c0 <___svfiprintf_internal_r+0x5a8>
180080c4:	94800044 	addi	r18,r18,1
180080c8:	00003d06 	br	180081c0 <___svfiprintf_internal_r+0x5a8>
180080cc:	00c00044 	movi	r3,1
180080d0:	d8c02105 	stb	r3,132(sp)
180080d4:	05400ac4 	movi	r21,43
180080d8:	98c00007 	ldb	r3,0(r19)
180080dc:	003f1a06 	br	18007d48 <__alt_data_end+0xf8007d48>
180080e0:	8821883a 	mov	r16,r17
180080e4:	dc402103 	ldbu	r17,132(sp)
180080e8:	b811883a 	mov	r8,r23
180080ec:	8c403fcc 	andi	r17,r17,255
180080f0:	8803a71e 	bne	r17,zero,18008f90 <___svfiprintf_internal_r+0x1378>
180080f4:	8080080c 	andi	r2,r16,32
180080f8:	10015726 	beq	r2,zero,18008658 <___svfiprintf_internal_r+0xa40>
180080fc:	d8c02417 	ldw	r3,144(sp)
18008100:	d9002017 	ldw	r4,128(sp)
18008104:	d8001d85 	stb	zero,118(sp)
18008108:	18800204 	addi	r2,r3,8
1800810c:	1c800017 	ldw	r18,0(r3)
18008110:	1d000117 	ldw	r20,4(r3)
18008114:	2002db16 	blt	r4,zero,18008c84 <___svfiprintf_internal_r+0x106c>
18008118:	013fdfc4 	movi	r4,-129
1800811c:	9506b03a 	or	r3,r18,r20
18008120:	d8802415 	stw	r2,144(sp)
18008124:	8120703a 	and	r16,r16,r4
18008128:	18015826 	beq	r3,zero,1800868c <___svfiprintf_internal_r+0xa74>
1800812c:	002b883a 	mov	r21,zero
18008130:	dc401a04 	addi	r17,sp,104
18008134:	9006d0fa 	srli	r3,r18,3
18008138:	a008977a 	slli	r4,r20,29
1800813c:	a028d0fa 	srli	r20,r20,3
18008140:	948001cc 	andi	r18,r18,7
18008144:	90800c04 	addi	r2,r18,48
18008148:	8c7fffc4 	addi	r17,r17,-1
1800814c:	20e4b03a 	or	r18,r4,r3
18008150:	88800005 	stb	r2,0(r17)
18008154:	9506b03a 	or	r3,r18,r20
18008158:	183ff61e 	bne	r3,zero,18008134 <__alt_data_end+0xf8008134>
1800815c:	80c0004c 	andi	r3,r16,1
18008160:	18028926 	beq	r3,zero,18008b88 <___svfiprintf_internal_r+0xf70>
18008164:	10803fcc 	andi	r2,r2,255
18008168:	1080201c 	xori	r2,r2,128
1800816c:	10bfe004 	addi	r2,r2,-128
18008170:	00c00c04 	movi	r3,48
18008174:	10ffb026 	beq	r2,r3,18008038 <__alt_data_end+0xf8008038>
18008178:	88ffffc5 	stb	r3,-1(r17)
1800817c:	d8c01e17 	ldw	r3,120(sp)
18008180:	88bfffc4 	addi	r2,r17,-1
18008184:	1023883a 	mov	r17,r2
18008188:	18a9c83a 	sub	r20,r3,r2
1800818c:	003fc606 	br	180080a8 <__alt_data_end+0xf80080a8>
18008190:	d8c02417 	ldw	r3,144(sp)
18008194:	04800044 	movi	r18,1
18008198:	8821883a 	mov	r16,r17
1800819c:	18800017 	ldw	r2,0(r3)
180081a0:	18c00104 	addi	r3,r3,4
180081a4:	b811883a 	mov	r8,r23
180081a8:	d8001d85 	stb	zero,118(sp)
180081ac:	d8801005 	stb	r2,64(sp)
180081b0:	d8c02415 	stw	r3,144(sp)
180081b4:	9029883a 	mov	r20,r18
180081b8:	dc401004 	addi	r17,sp,64
180081bc:	d8002015 	stw	zero,128(sp)
180081c0:	80c0008c 	andi	r3,r16,2
180081c4:	d8c02115 	stw	r3,132(sp)
180081c8:	18000126 	beq	r3,zero,180081d0 <___svfiprintf_internal_r+0x5b8>
180081cc:	94800084 	addi	r18,r18,2
180081d0:	80c0210c 	andi	r3,r16,132
180081d4:	d8c02215 	stw	r3,136(sp)
180081d8:	1801321e 	bne	r3,zero,180086a4 <___svfiprintf_internal_r+0xa8c>
180081dc:	d9002517 	ldw	r4,148(sp)
180081e0:	24b9c83a 	sub	fp,r4,r18
180081e4:	07012f0e 	bge	zero,fp,180086a4 <___svfiprintf_internal_r+0xa8c>
180081e8:	02400404 	movi	r9,16
180081ec:	d8c01c17 	ldw	r3,112(sp)
180081f0:	d8801b17 	ldw	r2,108(sp)
180081f4:	4f03250e 	bge	r9,fp,18008e8c <___svfiprintf_internal_r+0x1274>
180081f8:	01060074 	movhi	r4,6145
180081fc:	213f6604 	addi	r4,r4,-616
18008200:	dc002a15 	stw	r16,168(sp)
18008204:	dc402b15 	stw	r17,172(sp)
18008208:	d9002815 	stw	r4,160(sp)
1800820c:	e023883a 	mov	r17,fp
18008210:	482f883a 	mov	r23,r9
18008214:	9839883a 	mov	fp,r19
18008218:	054001c4 	movi	r21,7
1800821c:	9027883a 	mov	r19,r18
18008220:	dc002717 	ldw	r16,156(sp)
18008224:	dc802317 	ldw	r18,140(sp)
18008228:	00000306 	br	18008238 <___svfiprintf_internal_r+0x620>
1800822c:	8c7ffc04 	addi	r17,r17,-16
18008230:	42000204 	addi	r8,r8,8
18008234:	bc40130e 	bge	r23,r17,18008284 <___svfiprintf_internal_r+0x66c>
18008238:	01460074 	movhi	r5,6145
1800823c:	18c00404 	addi	r3,r3,16
18008240:	10800044 	addi	r2,r2,1
18008244:	297f6604 	addi	r5,r5,-616
18008248:	41400015 	stw	r5,0(r8)
1800824c:	45c00115 	stw	r23,4(r8)
18008250:	d8c01c15 	stw	r3,112(sp)
18008254:	d8801b15 	stw	r2,108(sp)
18008258:	a8bff40e 	bge	r21,r2,1800822c <__alt_data_end+0xf800822c>
1800825c:	d9801a04 	addi	r6,sp,104
18008260:	900b883a 	mov	r5,r18
18008264:	8009883a 	mov	r4,r16
18008268:	8007a480 	call	18007a48 <__ssprint_r>
1800826c:	1001aa1e 	bne	r2,zero,18008918 <___svfiprintf_internal_r+0xd00>
18008270:	8c7ffc04 	addi	r17,r17,-16
18008274:	d8c01c17 	ldw	r3,112(sp)
18008278:	d8801b17 	ldw	r2,108(sp)
1800827c:	d811883a 	mov	r8,sp
18008280:	bc7fed16 	blt	r23,r17,18008238 <__alt_data_end+0xf8008238>
18008284:	9825883a 	mov	r18,r19
18008288:	dc002a17 	ldw	r16,168(sp)
1800828c:	e027883a 	mov	r19,fp
18008290:	8839883a 	mov	fp,r17
18008294:	dc402b17 	ldw	r17,172(sp)
18008298:	d9002817 	ldw	r4,160(sp)
1800829c:	e0c7883a 	add	r3,fp,r3
180082a0:	10800044 	addi	r2,r2,1
180082a4:	41000015 	stw	r4,0(r8)
180082a8:	47000115 	stw	fp,4(r8)
180082ac:	d8c01c15 	stw	r3,112(sp)
180082b0:	d8801b15 	stw	r2,108(sp)
180082b4:	010001c4 	movi	r4,7
180082b8:	20821616 	blt	r4,r2,18008b14 <___svfiprintf_internal_r+0xefc>
180082bc:	42000204 	addi	r8,r8,8
180082c0:	0000fa06 	br	180086ac <___svfiprintf_internal_r+0xa94>
180082c4:	8821883a 	mov	r16,r17
180082c8:	dc402103 	ldbu	r17,132(sp)
180082cc:	b811883a 	mov	r8,r23
180082d0:	8c403fcc 	andi	r17,r17,255
180082d4:	8803361e 	bne	r17,zero,18008fb0 <___svfiprintf_internal_r+0x1398>
180082d8:	01460074 	movhi	r5,6145
180082dc:	297efc04 	addi	r5,r5,-1040
180082e0:	d9402915 	stw	r5,164(sp)
180082e4:	8080080c 	andi	r2,r16,32
180082e8:	103f331e 	bne	r2,zero,18007fb8 <__alt_data_end+0xf8007fb8>
180082ec:	8080040c 	andi	r2,r16,16
180082f0:	1002551e 	bne	r2,zero,18008c48 <___svfiprintf_internal_r+0x1030>
180082f4:	8080100c 	andi	r2,r16,64
180082f8:	1002a626 	beq	r2,zero,18008d94 <___svfiprintf_internal_r+0x117c>
180082fc:	d8802417 	ldw	r2,144(sp)
18008300:	0029883a 	mov	r20,zero
18008304:	1480000b 	ldhu	r18,0(r2)
18008308:	10800104 	addi	r2,r2,4
1800830c:	d8802415 	stw	r2,144(sp)
18008310:	003f2e06 	br	18007fcc <__alt_data_end+0xf8007fcc>
18008314:	8821883a 	mov	r16,r17
18008318:	dc402103 	ldbu	r17,132(sp)
1800831c:	b811883a 	mov	r8,r23
18008320:	8c403fcc 	andi	r17,r17,255
18008324:	88030b1e 	bne	r17,zero,18008f54 <___svfiprintf_internal_r+0x133c>
18008328:	8080080c 	andi	r2,r16,32
1800832c:	1002271e 	bne	r2,zero,18008bcc <___svfiprintf_internal_r+0xfb4>
18008330:	8080040c 	andi	r2,r16,16
18008334:	10028e26 	beq	r2,zero,18008d70 <___svfiprintf_internal_r+0x1158>
18008338:	d8c02417 	ldw	r3,144(sp)
1800833c:	d9002617 	ldw	r4,152(sp)
18008340:	18800017 	ldw	r2,0(r3)
18008344:	18c00104 	addi	r3,r3,4
18008348:	d8c02415 	stw	r3,144(sp)
1800834c:	11000015 	stw	r4,0(r2)
18008350:	003e5306 	br	18007ca0 <__alt_data_end+0xf8007ca0>
18008354:	98c00007 	ldb	r3,0(r19)
18008358:	01401b04 	movi	r5,108
1800835c:	19424f26 	beq	r3,r5,18008c9c <___svfiprintf_internal_r+0x1084>
18008360:	8c400414 	ori	r17,r17,16
18008364:	003e7806 	br	18007d48 <__alt_data_end+0xf8007d48>
18008368:	8c401014 	ori	r17,r17,64
1800836c:	98c00007 	ldb	r3,0(r19)
18008370:	003e7506 	br	18007d48 <__alt_data_end+0xf8007d48>
18008374:	8821883a 	mov	r16,r17
18008378:	dc402103 	ldbu	r17,132(sp)
1800837c:	b811883a 	mov	r8,r23
18008380:	8c403fcc 	andi	r17,r17,255
18008384:	8802fe1e 	bne	r17,zero,18008f80 <___svfiprintf_internal_r+0x1368>
18008388:	8080080c 	andi	r2,r16,32
1800838c:	10004626 	beq	r2,zero,180084a8 <___svfiprintf_internal_r+0x890>
18008390:	d9002417 	ldw	r4,144(sp)
18008394:	20800117 	ldw	r2,4(r4)
18008398:	24800017 	ldw	r18,0(r4)
1800839c:	21000204 	addi	r4,r4,8
180083a0:	d9002415 	stw	r4,144(sp)
180083a4:	1029883a 	mov	r20,r2
180083a8:	10004a16 	blt	r2,zero,180084d4 <___svfiprintf_internal_r+0x8bc>
180083ac:	d9002017 	ldw	r4,128(sp)
180083b0:	dd401d83 	ldbu	r21,118(sp)
180083b4:	2001eb16 	blt	r4,zero,18008b64 <___svfiprintf_internal_r+0xf4c>
180083b8:	00ffdfc4 	movi	r3,-129
180083bc:	9504b03a 	or	r2,r18,r20
180083c0:	80e0703a 	and	r16,r16,r3
180083c4:	103f3326 	beq	r2,zero,18008094 <__alt_data_end+0xf8008094>
180083c8:	a0009426 	beq	r20,zero,1800861c <___svfiprintf_internal_r+0xa04>
180083cc:	dc401a04 	addi	r17,sp,104
180083d0:	402f883a 	mov	r23,r8
180083d4:	9009883a 	mov	r4,r18
180083d8:	a00b883a 	mov	r5,r20
180083dc:	01800284 	movi	r6,10
180083e0:	000f883a 	mov	r7,zero
180083e4:	800a4b00 	call	1800a4b0 <__umoddi3>
180083e8:	10800c04 	addi	r2,r2,48
180083ec:	8c7fffc4 	addi	r17,r17,-1
180083f0:	9009883a 	mov	r4,r18
180083f4:	a00b883a 	mov	r5,r20
180083f8:	88800005 	stb	r2,0(r17)
180083fc:	01800284 	movi	r6,10
18008400:	000f883a 	mov	r7,zero
18008404:	8009eb40 	call	18009eb4 <__udivdi3>
18008408:	1025883a 	mov	r18,r2
1800840c:	10c4b03a 	or	r2,r2,r3
18008410:	1829883a 	mov	r20,r3
18008414:	103fef1e 	bne	r2,zero,180083d4 <__alt_data_end+0xf80083d4>
18008418:	d9001e17 	ldw	r4,120(sp)
1800841c:	b811883a 	mov	r8,r23
18008420:	2469c83a 	sub	r20,r4,r17
18008424:	003f2006 	br	180080a8 <__alt_data_end+0xf80080a8>
18008428:	d8802417 	ldw	r2,144(sp)
1800842c:	8821883a 	mov	r16,r17
18008430:	d8001d85 	stb	zero,118(sp)
18008434:	14400017 	ldw	r17,0(r2)
18008438:	b811883a 	mov	r8,r23
1800843c:	15c00104 	addi	r23,r2,4
18008440:	88026c26 	beq	r17,zero,18008df4 <___svfiprintf_internal_r+0x11dc>
18008444:	d8c02017 	ldw	r3,128(sp)
18008448:	18025f16 	blt	r3,zero,18008dc8 <___svfiprintf_internal_r+0x11b0>
1800844c:	180d883a 	mov	r6,r3
18008450:	000b883a 	mov	r5,zero
18008454:	8809883a 	mov	r4,r17
18008458:	da002d15 	stw	r8,180(sp)
1800845c:	8005c9c0 	call	18005c9c <memchr>
18008460:	da002d17 	ldw	r8,180(sp)
18008464:	1002a526 	beq	r2,zero,18008efc <___svfiprintf_internal_r+0x12e4>
18008468:	1469c83a 	sub	r20,r2,r17
1800846c:	dd401d83 	ldbu	r21,118(sp)
18008470:	ddc02415 	stw	r23,144(sp)
18008474:	d8002015 	stw	zero,128(sp)
18008478:	003f0b06 	br	180080a8 <__alt_data_end+0xf80080a8>
1800847c:	8c400814 	ori	r17,r17,32
18008480:	98c00007 	ldb	r3,0(r19)
18008484:	003e3006 	br	18007d48 <__alt_data_end+0xf8007d48>
18008488:	8821883a 	mov	r16,r17
1800848c:	dc402103 	ldbu	r17,132(sp)
18008490:	b811883a 	mov	r8,r23
18008494:	8c403fcc 	andi	r17,r17,255
18008498:	8802b01e 	bne	r17,zero,18008f5c <___svfiprintf_internal_r+0x1344>
1800849c:	84000414 	ori	r16,r16,16
180084a0:	8080080c 	andi	r2,r16,32
180084a4:	103fba1e 	bne	r2,zero,18008390 <__alt_data_end+0xf8008390>
180084a8:	8080040c 	andi	r2,r16,16
180084ac:	1001df1e 	bne	r2,zero,18008c2c <___svfiprintf_internal_r+0x1014>
180084b0:	8080100c 	andi	r2,r16,64
180084b4:	10023d26 	beq	r2,zero,18008dac <___svfiprintf_internal_r+0x1194>
180084b8:	d8802417 	ldw	r2,144(sp)
180084bc:	1480000f 	ldh	r18,0(r2)
180084c0:	10800104 	addi	r2,r2,4
180084c4:	d8802415 	stw	r2,144(sp)
180084c8:	9029d7fa 	srai	r20,r18,31
180084cc:	a005883a 	mov	r2,r20
180084d0:	103fb60e 	bge	r2,zero,180083ac <__alt_data_end+0xf80083ac>
180084d4:	d9402017 	ldw	r5,128(sp)
180084d8:	04a5c83a 	sub	r18,zero,r18
180084dc:	05400b44 	movi	r21,45
180084e0:	9004c03a 	cmpne	r2,r18,zero
180084e4:	0529c83a 	sub	r20,zero,r20
180084e8:	dd401d85 	stb	r21,118(sp)
180084ec:	a0a9c83a 	sub	r20,r20,r2
180084f0:	28026c16 	blt	r5,zero,18008ea4 <___svfiprintf_internal_r+0x128c>
180084f4:	00bfdfc4 	movi	r2,-129
180084f8:	80a0703a 	and	r16,r16,r2
180084fc:	a03fb31e 	bne	r20,zero,180083cc <__alt_data_end+0xf80083cc>
18008500:	00004606 	br	1800861c <___svfiprintf_internal_r+0xa04>
18008504:	9839883a 	mov	fp,r19
18008508:	d8002515 	stw	zero,148(sp)
1800850c:	1c3ff404 	addi	r16,r3,-48
18008510:	0009883a 	mov	r4,zero
18008514:	01400284 	movi	r5,10
18008518:	8000b740 	call	18000b74 <__mulsi3>
1800851c:	e0c00007 	ldb	r3,0(fp)
18008520:	8089883a 	add	r4,r16,r2
18008524:	9cc00044 	addi	r19,r19,1
18008528:	1c3ff404 	addi	r16,r3,-48
1800852c:	9839883a 	mov	fp,r19
18008530:	a43ff82e 	bgeu	r20,r16,18008514 <__alt_data_end+0xf8008514>
18008534:	d9002515 	stw	r4,148(sp)
18008538:	18bff804 	addi	r2,r3,-32
1800853c:	90be052e 	bgeu	r18,r2,18007d54 <__alt_data_end+0xf8007d54>
18008540:	8821883a 	mov	r16,r17
18008544:	dc402103 	ldbu	r17,132(sp)
18008548:	b811883a 	mov	r8,r23
1800854c:	8c403fcc 	andi	r17,r17,255
18008550:	88028d1e 	bne	r17,zero,18008f88 <___svfiprintf_internal_r+0x1370>
18008554:	1800ea26 	beq	r3,zero,18008900 <___svfiprintf_internal_r+0xce8>
18008558:	04800044 	movi	r18,1
1800855c:	d8c01005 	stb	r3,64(sp)
18008560:	d8001d85 	stb	zero,118(sp)
18008564:	9029883a 	mov	r20,r18
18008568:	dc401004 	addi	r17,sp,64
1800856c:	003f1306 	br	180081bc <__alt_data_end+0xf80081bc>
18008570:	8c402014 	ori	r17,r17,128
18008574:	98c00007 	ldb	r3,0(r19)
18008578:	003df306 	br	18007d48 <__alt_data_end+0xf8007d48>
1800857c:	98c00007 	ldb	r3,0(r19)
18008580:	01000a84 	movi	r4,42
18008584:	9f000044 	addi	fp,r19,1
18008588:	19026326 	beq	r3,r4,18008f18 <___svfiprintf_internal_r+0x1300>
1800858c:	1c3ff404 	addi	r16,r3,-48
18008590:	0009883a 	mov	r4,zero
18008594:	a4025636 	bltu	r20,r16,18008ef0 <___svfiprintf_internal_r+0x12d8>
18008598:	01400284 	movi	r5,10
1800859c:	8000b740 	call	18000b74 <__mulsi3>
180085a0:	e0c00007 	ldb	r3,0(fp)
180085a4:	1409883a 	add	r4,r2,r16
180085a8:	e4c00044 	addi	r19,fp,1
180085ac:	1c3ff404 	addi	r16,r3,-48
180085b0:	9839883a 	mov	fp,r19
180085b4:	a43ff82e 	bgeu	r20,r16,18008598 <__alt_data_end+0xf8008598>
180085b8:	20020c16 	blt	r4,zero,18008dec <___svfiprintf_internal_r+0x11d4>
180085bc:	d9002015 	stw	r4,128(sp)
180085c0:	003de206 	br	18007d4c <__alt_data_end+0xf8007d4c>
180085c4:	8821883a 	mov	r16,r17
180085c8:	dc402103 	ldbu	r17,132(sp)
180085cc:	b811883a 	mov	r8,r23
180085d0:	8c403fcc 	andi	r17,r17,255
180085d4:	8802721e 	bne	r17,zero,18008fa0 <___svfiprintf_internal_r+0x1388>
180085d8:	84000414 	ori	r16,r16,16
180085dc:	8080080c 	andi	r2,r16,32
180085e0:	103e9f1e 	bne	r2,zero,18008060 <__alt_data_end+0xf8008060>
180085e4:	8080040c 	andi	r2,r16,16
180085e8:	10015326 	beq	r2,zero,18008b38 <___svfiprintf_internal_r+0xf20>
180085ec:	d8c02417 	ldw	r3,144(sp)
180085f0:	d9002017 	ldw	r4,128(sp)
180085f4:	d8001d85 	stb	zero,118(sp)
180085f8:	18800104 	addi	r2,r3,4
180085fc:	1c800017 	ldw	r18,0(r3)
18008600:	0029883a 	mov	r20,zero
18008604:	20015516 	blt	r4,zero,18008b5c <___svfiprintf_internal_r+0xf44>
18008608:	00ffdfc4 	movi	r3,-129
1800860c:	d8802415 	stw	r2,144(sp)
18008610:	80e0703a 	and	r16,r16,r3
18008614:	002b883a 	mov	r21,zero
18008618:	903e9e26 	beq	r18,zero,18008094 <__alt_data_end+0xf8008094>
1800861c:	00800244 	movi	r2,9
18008620:	14bf6a36 	bltu	r2,r18,180083cc <__alt_data_end+0xf80083cc>
18008624:	94800c04 	addi	r18,r18,48
18008628:	dc8019c5 	stb	r18,103(sp)
1800862c:	dd002c17 	ldw	r20,176(sp)
18008630:	dc4019c4 	addi	r17,sp,103
18008634:	003e9c06 	br	180080a8 <__alt_data_end+0xf80080a8>
18008638:	8821883a 	mov	r16,r17
1800863c:	dc402103 	ldbu	r17,132(sp)
18008640:	b811883a 	mov	r8,r23
18008644:	8c403fcc 	andi	r17,r17,255
18008648:	8802571e 	bne	r17,zero,18008fa8 <___svfiprintf_internal_r+0x1390>
1800864c:	84000414 	ori	r16,r16,16
18008650:	8080080c 	andi	r2,r16,32
18008654:	103ea91e 	bne	r2,zero,180080fc <__alt_data_end+0xf80080fc>
18008658:	8080040c 	andi	r2,r16,16
1800865c:	10018026 	beq	r2,zero,18008c60 <___svfiprintf_internal_r+0x1048>
18008660:	d9402417 	ldw	r5,144(sp)
18008664:	d8c02017 	ldw	r3,128(sp)
18008668:	d8001d85 	stb	zero,118(sp)
1800866c:	28800104 	addi	r2,r5,4
18008670:	2c800017 	ldw	r18,0(r5)
18008674:	0029883a 	mov	r20,zero
18008678:	18018216 	blt	r3,zero,18008c84 <___svfiprintf_internal_r+0x106c>
1800867c:	00ffdfc4 	movi	r3,-129
18008680:	d8802415 	stw	r2,144(sp)
18008684:	80e0703a 	and	r16,r16,r3
18008688:	903ea81e 	bne	r18,zero,1800812c <__alt_data_end+0xf800812c>
1800868c:	d8802017 	ldw	r2,128(sp)
18008690:	002b883a 	mov	r21,zero
18008694:	1001f226 	beq	r2,zero,18008e60 <___svfiprintf_internal_r+0x1248>
18008698:	0025883a 	mov	r18,zero
1800869c:	0029883a 	mov	r20,zero
180086a0:	003ea306 	br	18008130 <__alt_data_end+0xf8008130>
180086a4:	d8c01c17 	ldw	r3,112(sp)
180086a8:	d8801b17 	ldw	r2,108(sp)
180086ac:	d9001d87 	ldb	r4,118(sp)
180086b0:	20000b26 	beq	r4,zero,180086e0 <___svfiprintf_internal_r+0xac8>
180086b4:	d9001d84 	addi	r4,sp,118
180086b8:	18c00044 	addi	r3,r3,1
180086bc:	10800044 	addi	r2,r2,1
180086c0:	41000015 	stw	r4,0(r8)
180086c4:	01000044 	movi	r4,1
180086c8:	41000115 	stw	r4,4(r8)
180086cc:	d8c01c15 	stw	r3,112(sp)
180086d0:	d8801b15 	stw	r2,108(sp)
180086d4:	010001c4 	movi	r4,7
180086d8:	2080f316 	blt	r4,r2,18008aa8 <___svfiprintf_internal_r+0xe90>
180086dc:	42000204 	addi	r8,r8,8
180086e0:	d9402117 	ldw	r5,132(sp)
180086e4:	28000b26 	beq	r5,zero,18008714 <___svfiprintf_internal_r+0xafc>
180086e8:	d9001d04 	addi	r4,sp,116
180086ec:	18c00084 	addi	r3,r3,2
180086f0:	10800044 	addi	r2,r2,1
180086f4:	41000015 	stw	r4,0(r8)
180086f8:	01000084 	movi	r4,2
180086fc:	41000115 	stw	r4,4(r8)
18008700:	d8c01c15 	stw	r3,112(sp)
18008704:	d8801b15 	stw	r2,108(sp)
18008708:	010001c4 	movi	r4,7
1800870c:	2080ef16 	blt	r4,r2,18008acc <___svfiprintf_internal_r+0xeb4>
18008710:	42000204 	addi	r8,r8,8
18008714:	d9402217 	ldw	r5,136(sp)
18008718:	01002004 	movi	r4,128
1800871c:	29008f26 	beq	r5,r4,1800895c <___svfiprintf_internal_r+0xd44>
18008720:	d9002017 	ldw	r4,128(sp)
18008724:	252fc83a 	sub	r23,r4,r20
18008728:	05c0310e 	bge	zero,r23,180087f0 <___svfiprintf_internal_r+0xbd8>
1800872c:	07000404 	movi	fp,16
18008730:	e5c17d0e 	bge	fp,r23,18008d28 <___svfiprintf_internal_r+0x1110>
18008734:	01060074 	movhi	r4,6145
18008738:	213f6204 	addi	r4,r4,-632
1800873c:	dc002015 	stw	r16,128(sp)
18008740:	dc402215 	stw	r17,136(sp)
18008744:	d9002115 	stw	r4,132(sp)
18008748:	b823883a 	mov	r17,r23
1800874c:	054001c4 	movi	r21,7
18008750:	982f883a 	mov	r23,r19
18008754:	dc002717 	ldw	r16,156(sp)
18008758:	9027883a 	mov	r19,r18
1800875c:	dc802317 	ldw	r18,140(sp)
18008760:	00000306 	br	18008770 <___svfiprintf_internal_r+0xb58>
18008764:	8c7ffc04 	addi	r17,r17,-16
18008768:	42000204 	addi	r8,r8,8
1800876c:	e440110e 	bge	fp,r17,180087b4 <___svfiprintf_internal_r+0xb9c>
18008770:	18c00404 	addi	r3,r3,16
18008774:	10800044 	addi	r2,r2,1
18008778:	45800015 	stw	r22,0(r8)
1800877c:	47000115 	stw	fp,4(r8)
18008780:	d8c01c15 	stw	r3,112(sp)
18008784:	d8801b15 	stw	r2,108(sp)
18008788:	a8bff60e 	bge	r21,r2,18008764 <__alt_data_end+0xf8008764>
1800878c:	d9801a04 	addi	r6,sp,104
18008790:	900b883a 	mov	r5,r18
18008794:	8009883a 	mov	r4,r16
18008798:	8007a480 	call	18007a48 <__ssprint_r>
1800879c:	10005e1e 	bne	r2,zero,18008918 <___svfiprintf_internal_r+0xd00>
180087a0:	8c7ffc04 	addi	r17,r17,-16
180087a4:	d8c01c17 	ldw	r3,112(sp)
180087a8:	d8801b17 	ldw	r2,108(sp)
180087ac:	d811883a 	mov	r8,sp
180087b0:	e47fef16 	blt	fp,r17,18008770 <__alt_data_end+0xf8008770>
180087b4:	9825883a 	mov	r18,r19
180087b8:	dc002017 	ldw	r16,128(sp)
180087bc:	b827883a 	mov	r19,r23
180087c0:	882f883a 	mov	r23,r17
180087c4:	dc402217 	ldw	r17,136(sp)
180087c8:	d9402117 	ldw	r5,132(sp)
180087cc:	1dc7883a 	add	r3,r3,r23
180087d0:	10800044 	addi	r2,r2,1
180087d4:	41400015 	stw	r5,0(r8)
180087d8:	45c00115 	stw	r23,4(r8)
180087dc:	d8c01c15 	stw	r3,112(sp)
180087e0:	d8801b15 	stw	r2,108(sp)
180087e4:	010001c4 	movi	r4,7
180087e8:	2080a616 	blt	r4,r2,18008a84 <___svfiprintf_internal_r+0xe6c>
180087ec:	42000204 	addi	r8,r8,8
180087f0:	a0c7883a 	add	r3,r20,r3
180087f4:	10800044 	addi	r2,r2,1
180087f8:	44400015 	stw	r17,0(r8)
180087fc:	45000115 	stw	r20,4(r8)
18008800:	d8c01c15 	stw	r3,112(sp)
18008804:	d8801b15 	stw	r2,108(sp)
18008808:	010001c4 	movi	r4,7
1800880c:	20808816 	blt	r4,r2,18008a30 <___svfiprintf_internal_r+0xe18>
18008810:	42000204 	addi	r8,r8,8
18008814:	8400010c 	andi	r16,r16,4
18008818:	80002c26 	beq	r16,zero,180088cc <___svfiprintf_internal_r+0xcb4>
1800881c:	d8802517 	ldw	r2,148(sp)
18008820:	14a1c83a 	sub	r16,r2,r18
18008824:	0400290e 	bge	zero,r16,180088cc <___svfiprintf_internal_r+0xcb4>
18008828:	04400404 	movi	r17,16
1800882c:	d8801b17 	ldw	r2,108(sp)
18008830:	8c01a70e 	bge	r17,r16,18008ed0 <___svfiprintf_internal_r+0x12b8>
18008834:	01460074 	movhi	r5,6145
18008838:	297f6604 	addi	r5,r5,-616
1800883c:	d9402815 	stw	r5,160(sp)
18008840:	050001c4 	movi	r20,7
18008844:	dd402717 	ldw	r21,156(sp)
18008848:	ddc02317 	ldw	r23,140(sp)
1800884c:	00000306 	br	1800885c <___svfiprintf_internal_r+0xc44>
18008850:	843ffc04 	addi	r16,r16,-16
18008854:	42000204 	addi	r8,r8,8
18008858:	8c00130e 	bge	r17,r16,180088a8 <___svfiprintf_internal_r+0xc90>
1800885c:	01060074 	movhi	r4,6145
18008860:	18c00404 	addi	r3,r3,16
18008864:	10800044 	addi	r2,r2,1
18008868:	213f6604 	addi	r4,r4,-616
1800886c:	41000015 	stw	r4,0(r8)
18008870:	44400115 	stw	r17,4(r8)
18008874:	d8c01c15 	stw	r3,112(sp)
18008878:	d8801b15 	stw	r2,108(sp)
1800887c:	a0bff40e 	bge	r20,r2,18008850 <__alt_data_end+0xf8008850>
18008880:	d9801a04 	addi	r6,sp,104
18008884:	b80b883a 	mov	r5,r23
18008888:	a809883a 	mov	r4,r21
1800888c:	8007a480 	call	18007a48 <__ssprint_r>
18008890:	1000211e 	bne	r2,zero,18008918 <___svfiprintf_internal_r+0xd00>
18008894:	843ffc04 	addi	r16,r16,-16
18008898:	d8c01c17 	ldw	r3,112(sp)
1800889c:	d8801b17 	ldw	r2,108(sp)
180088a0:	d811883a 	mov	r8,sp
180088a4:	8c3fed16 	blt	r17,r16,1800885c <__alt_data_end+0xf800885c>
180088a8:	d9402817 	ldw	r5,160(sp)
180088ac:	1c07883a 	add	r3,r3,r16
180088b0:	10800044 	addi	r2,r2,1
180088b4:	41400015 	stw	r5,0(r8)
180088b8:	44000115 	stw	r16,4(r8)
180088bc:	d8c01c15 	stw	r3,112(sp)
180088c0:	d8801b15 	stw	r2,108(sp)
180088c4:	010001c4 	movi	r4,7
180088c8:	2080b516 	blt	r4,r2,18008ba0 <___svfiprintf_internal_r+0xf88>
180088cc:	d8802517 	ldw	r2,148(sp)
180088d0:	1480010e 	bge	r2,r18,180088d8 <___svfiprintf_internal_r+0xcc0>
180088d4:	9005883a 	mov	r2,r18
180088d8:	d9002617 	ldw	r4,152(sp)
180088dc:	2089883a 	add	r4,r4,r2
180088e0:	d9002615 	stw	r4,152(sp)
180088e4:	18005a1e 	bne	r3,zero,18008a50 <___svfiprintf_internal_r+0xe38>
180088e8:	98800007 	ldb	r2,0(r19)
180088ec:	d8001b15 	stw	zero,108(sp)
180088f0:	d811883a 	mov	r8,sp
180088f4:	103cec1e 	bne	r2,zero,18007ca8 <__alt_data_end+0xf8007ca8>
180088f8:	9825883a 	mov	r18,r19
180088fc:	003d0206 	br	18007d08 <__alt_data_end+0xf8007d08>
18008900:	d8801c17 	ldw	r2,112(sp)
18008904:	10000426 	beq	r2,zero,18008918 <___svfiprintf_internal_r+0xd00>
18008908:	d9402317 	ldw	r5,140(sp)
1800890c:	d9002717 	ldw	r4,156(sp)
18008910:	d9801a04 	addi	r6,sp,104
18008914:	8007a480 	call	18007a48 <__ssprint_r>
18008918:	d9402317 	ldw	r5,140(sp)
1800891c:	d8802617 	ldw	r2,152(sp)
18008920:	28c0030b 	ldhu	r3,12(r5)
18008924:	18c0100c 	andi	r3,r3,64
18008928:	18015c1e 	bne	r3,zero,18008e9c <___svfiprintf_internal_r+0x1284>
1800892c:	dfc03717 	ldw	ra,220(sp)
18008930:	df003617 	ldw	fp,216(sp)
18008934:	ddc03517 	ldw	r23,212(sp)
18008938:	dd803417 	ldw	r22,208(sp)
1800893c:	dd403317 	ldw	r21,204(sp)
18008940:	dd003217 	ldw	r20,200(sp)
18008944:	dcc03117 	ldw	r19,196(sp)
18008948:	dc803017 	ldw	r18,192(sp)
1800894c:	dc402f17 	ldw	r17,188(sp)
18008950:	dc002e17 	ldw	r16,184(sp)
18008954:	dec03804 	addi	sp,sp,224
18008958:	f800283a 	ret
1800895c:	d9002517 	ldw	r4,148(sp)
18008960:	24afc83a 	sub	r23,r4,r18
18008964:	05ff6e0e 	bge	zero,r23,18008720 <__alt_data_end+0xf8008720>
18008968:	07000404 	movi	fp,16
1800896c:	e5c15c0e 	bge	fp,r23,18008ee0 <___svfiprintf_internal_r+0x12c8>
18008970:	01060074 	movhi	r4,6145
18008974:	213f6204 	addi	r4,r4,-632
18008978:	dc002215 	stw	r16,136(sp)
1800897c:	dc402815 	stw	r17,160(sp)
18008980:	d9002115 	stw	r4,132(sp)
18008984:	b823883a 	mov	r17,r23
18008988:	054001c4 	movi	r21,7
1800898c:	982f883a 	mov	r23,r19
18008990:	dc002717 	ldw	r16,156(sp)
18008994:	9027883a 	mov	r19,r18
18008998:	dc802317 	ldw	r18,140(sp)
1800899c:	00000306 	br	180089ac <___svfiprintf_internal_r+0xd94>
180089a0:	8c7ffc04 	addi	r17,r17,-16
180089a4:	42000204 	addi	r8,r8,8
180089a8:	e440110e 	bge	fp,r17,180089f0 <___svfiprintf_internal_r+0xdd8>
180089ac:	18c00404 	addi	r3,r3,16
180089b0:	10800044 	addi	r2,r2,1
180089b4:	45800015 	stw	r22,0(r8)
180089b8:	47000115 	stw	fp,4(r8)
180089bc:	d8c01c15 	stw	r3,112(sp)
180089c0:	d8801b15 	stw	r2,108(sp)
180089c4:	a8bff60e 	bge	r21,r2,180089a0 <__alt_data_end+0xf80089a0>
180089c8:	d9801a04 	addi	r6,sp,104
180089cc:	900b883a 	mov	r5,r18
180089d0:	8009883a 	mov	r4,r16
180089d4:	8007a480 	call	18007a48 <__ssprint_r>
180089d8:	103fcf1e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
180089dc:	8c7ffc04 	addi	r17,r17,-16
180089e0:	d8c01c17 	ldw	r3,112(sp)
180089e4:	d8801b17 	ldw	r2,108(sp)
180089e8:	d811883a 	mov	r8,sp
180089ec:	e47fef16 	blt	fp,r17,180089ac <__alt_data_end+0xf80089ac>
180089f0:	9825883a 	mov	r18,r19
180089f4:	dc002217 	ldw	r16,136(sp)
180089f8:	b827883a 	mov	r19,r23
180089fc:	882f883a 	mov	r23,r17
18008a00:	dc402817 	ldw	r17,160(sp)
18008a04:	d9402117 	ldw	r5,132(sp)
18008a08:	1dc7883a 	add	r3,r3,r23
18008a0c:	10800044 	addi	r2,r2,1
18008a10:	41400015 	stw	r5,0(r8)
18008a14:	45c00115 	stw	r23,4(r8)
18008a18:	d8c01c15 	stw	r3,112(sp)
18008a1c:	d8801b15 	stw	r2,108(sp)
18008a20:	010001c4 	movi	r4,7
18008a24:	2080b716 	blt	r4,r2,18008d04 <___svfiprintf_internal_r+0x10ec>
18008a28:	42000204 	addi	r8,r8,8
18008a2c:	003f3c06 	br	18008720 <__alt_data_end+0xf8008720>
18008a30:	d9402317 	ldw	r5,140(sp)
18008a34:	d9002717 	ldw	r4,156(sp)
18008a38:	d9801a04 	addi	r6,sp,104
18008a3c:	8007a480 	call	18007a48 <__ssprint_r>
18008a40:	103fb51e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008a44:	d8c01c17 	ldw	r3,112(sp)
18008a48:	d811883a 	mov	r8,sp
18008a4c:	003f7106 	br	18008814 <__alt_data_end+0xf8008814>
18008a50:	d9402317 	ldw	r5,140(sp)
18008a54:	d9002717 	ldw	r4,156(sp)
18008a58:	d9801a04 	addi	r6,sp,104
18008a5c:	8007a480 	call	18007a48 <__ssprint_r>
18008a60:	103fa126 	beq	r2,zero,180088e8 <__alt_data_end+0xf80088e8>
18008a64:	003fac06 	br	18008918 <__alt_data_end+0xf8008918>
18008a68:	d9402317 	ldw	r5,140(sp)
18008a6c:	d9002717 	ldw	r4,156(sp)
18008a70:	d9801a04 	addi	r6,sp,104
18008a74:	8007a480 	call	18007a48 <__ssprint_r>
18008a78:	103fa71e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008a7c:	d811883a 	mov	r8,sp
18008a80:	003c9e06 	br	18007cfc <__alt_data_end+0xf8007cfc>
18008a84:	d9402317 	ldw	r5,140(sp)
18008a88:	d9002717 	ldw	r4,156(sp)
18008a8c:	d9801a04 	addi	r6,sp,104
18008a90:	8007a480 	call	18007a48 <__ssprint_r>
18008a94:	103fa01e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008a98:	d8c01c17 	ldw	r3,112(sp)
18008a9c:	d8801b17 	ldw	r2,108(sp)
18008aa0:	d811883a 	mov	r8,sp
18008aa4:	003f5206 	br	180087f0 <__alt_data_end+0xf80087f0>
18008aa8:	d9402317 	ldw	r5,140(sp)
18008aac:	d9002717 	ldw	r4,156(sp)
18008ab0:	d9801a04 	addi	r6,sp,104
18008ab4:	8007a480 	call	18007a48 <__ssprint_r>
18008ab8:	103f971e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008abc:	d8c01c17 	ldw	r3,112(sp)
18008ac0:	d8801b17 	ldw	r2,108(sp)
18008ac4:	d811883a 	mov	r8,sp
18008ac8:	003f0506 	br	180086e0 <__alt_data_end+0xf80086e0>
18008acc:	d9402317 	ldw	r5,140(sp)
18008ad0:	d9002717 	ldw	r4,156(sp)
18008ad4:	d9801a04 	addi	r6,sp,104
18008ad8:	8007a480 	call	18007a48 <__ssprint_r>
18008adc:	103f8e1e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008ae0:	d8c01c17 	ldw	r3,112(sp)
18008ae4:	d8801b17 	ldw	r2,108(sp)
18008ae8:	d811883a 	mov	r8,sp
18008aec:	003f0906 	br	18008714 <__alt_data_end+0xf8008714>
18008af0:	d9402017 	ldw	r5,128(sp)
18008af4:	d8001d85 	stb	zero,118(sp)
18008af8:	28007716 	blt	r5,zero,18008cd8 <___svfiprintf_internal_r+0x10c0>
18008afc:	00ffdfc4 	movi	r3,-129
18008b00:	9504b03a 	or	r2,r18,r20
18008b04:	80e0703a 	and	r16,r16,r3
18008b08:	103d3926 	beq	r2,zero,18007ff0 <__alt_data_end+0xf8007ff0>
18008b0c:	002b883a 	mov	r21,zero
18008b10:	003d3c06 	br	18008004 <__alt_data_end+0xf8008004>
18008b14:	d9402317 	ldw	r5,140(sp)
18008b18:	d9002717 	ldw	r4,156(sp)
18008b1c:	d9801a04 	addi	r6,sp,104
18008b20:	8007a480 	call	18007a48 <__ssprint_r>
18008b24:	103f7c1e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008b28:	d8c01c17 	ldw	r3,112(sp)
18008b2c:	d8801b17 	ldw	r2,108(sp)
18008b30:	d811883a 	mov	r8,sp
18008b34:	003edd06 	br	180086ac <__alt_data_end+0xf80086ac>
18008b38:	8080100c 	andi	r2,r16,64
18008b3c:	d8001d85 	stb	zero,118(sp)
18008b40:	10008426 	beq	r2,zero,18008d54 <___svfiprintf_internal_r+0x113c>
18008b44:	d9402417 	ldw	r5,144(sp)
18008b48:	d8c02017 	ldw	r3,128(sp)
18008b4c:	0029883a 	mov	r20,zero
18008b50:	28800104 	addi	r2,r5,4
18008b54:	2c80000b 	ldhu	r18,0(r5)
18008b58:	183eab0e 	bge	r3,zero,18008608 <__alt_data_end+0xf8008608>
18008b5c:	d8802415 	stw	r2,144(sp)
18008b60:	002b883a 	mov	r21,zero
18008b64:	9504b03a 	or	r2,r18,r20
18008b68:	103e171e 	bne	r2,zero,180083c8 <__alt_data_end+0xf80083c8>
18008b6c:	00800044 	movi	r2,1
18008b70:	10803fcc 	andi	r2,r2,255
18008b74:	00c00044 	movi	r3,1
18008b78:	10c05c26 	beq	r2,r3,18008cec <___svfiprintf_internal_r+0x10d4>
18008b7c:	00c00084 	movi	r3,2
18008b80:	10fd1e26 	beq	r2,r3,18007ffc <__alt_data_end+0xf8007ffc>
18008b84:	003ec406 	br	18008698 <__alt_data_end+0xf8008698>
18008b88:	d9401e17 	ldw	r5,120(sp)
18008b8c:	2c69c83a 	sub	r20,r5,r17
18008b90:	003d4506 	br	180080a8 <__alt_data_end+0xf80080a8>
18008b94:	d8802415 	stw	r2,144(sp)
18008b98:	98c00007 	ldb	r3,0(r19)
18008b9c:	003c6a06 	br	18007d48 <__alt_data_end+0xf8007d48>
18008ba0:	d9402317 	ldw	r5,140(sp)
18008ba4:	d9002717 	ldw	r4,156(sp)
18008ba8:	d9801a04 	addi	r6,sp,104
18008bac:	8007a480 	call	18007a48 <__ssprint_r>
18008bb0:	103f591e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008bb4:	d8c01c17 	ldw	r3,112(sp)
18008bb8:	003f4406 	br	180088cc <__alt_data_end+0xf80088cc>
18008bbc:	01460074 	movhi	r5,6145
18008bc0:	297f0104 	addi	r5,r5,-1020
18008bc4:	d9402915 	stw	r5,164(sp)
18008bc8:	003d0906 	br	18007ff0 <__alt_data_end+0xf8007ff0>
18008bcc:	d8c02417 	ldw	r3,144(sp)
18008bd0:	d9002617 	ldw	r4,152(sp)
18008bd4:	d9402417 	ldw	r5,144(sp)
18008bd8:	18800017 	ldw	r2,0(r3)
18008bdc:	2007d7fa 	srai	r3,r4,31
18008be0:	29400104 	addi	r5,r5,4
18008be4:	d9402415 	stw	r5,144(sp)
18008be8:	11000015 	stw	r4,0(r2)
18008bec:	10c00115 	stw	r3,4(r2)
18008bf0:	003c2b06 	br	18007ca0 <__alt_data_end+0xf8007ca0>
18008bf4:	d8c01d45 	stb	r3,117(sp)
18008bf8:	d8c02017 	ldw	r3,128(sp)
18008bfc:	00800c04 	movi	r2,48
18008c00:	d8801d05 	stb	r2,116(sp)
18008c04:	d8001d85 	stb	zero,118(sp)
18008c08:	80800094 	ori	r2,r16,2
18008c0c:	1800ac16 	blt	r3,zero,18008ec0 <___svfiprintf_internal_r+0x12a8>
18008c10:	00bfdfc4 	movi	r2,-129
18008c14:	80a0703a 	and	r16,r16,r2
18008c18:	84000094 	ori	r16,r16,2
18008c1c:	002b883a 	mov	r21,zero
18008c20:	003cf806 	br	18008004 <__alt_data_end+0xf8008004>
18008c24:	98c00007 	ldb	r3,0(r19)
18008c28:	003c4706 	br	18007d48 <__alt_data_end+0xf8007d48>
18008c2c:	d9402417 	ldw	r5,144(sp)
18008c30:	2c800017 	ldw	r18,0(r5)
18008c34:	29400104 	addi	r5,r5,4
18008c38:	d9402415 	stw	r5,144(sp)
18008c3c:	9029d7fa 	srai	r20,r18,31
18008c40:	a005883a 	mov	r2,r20
18008c44:	003dd806 	br	180083a8 <__alt_data_end+0xf80083a8>
18008c48:	d9402417 	ldw	r5,144(sp)
18008c4c:	0029883a 	mov	r20,zero
18008c50:	2c800017 	ldw	r18,0(r5)
18008c54:	29400104 	addi	r5,r5,4
18008c58:	d9402415 	stw	r5,144(sp)
18008c5c:	003cdb06 	br	18007fcc <__alt_data_end+0xf8007fcc>
18008c60:	8080100c 	andi	r2,r16,64
18008c64:	d8001d85 	stb	zero,118(sp)
18008c68:	10003326 	beq	r2,zero,18008d38 <___svfiprintf_internal_r+0x1120>
18008c6c:	d9002417 	ldw	r4,144(sp)
18008c70:	d9402017 	ldw	r5,128(sp)
18008c74:	0029883a 	mov	r20,zero
18008c78:	20800104 	addi	r2,r4,4
18008c7c:	2480000b 	ldhu	r18,0(r4)
18008c80:	283e7e0e 	bge	r5,zero,1800867c <__alt_data_end+0xf800867c>
18008c84:	9506b03a 	or	r3,r18,r20
18008c88:	d8802415 	stw	r2,144(sp)
18008c8c:	183d271e 	bne	r3,zero,1800812c <__alt_data_end+0xf800812c>
18008c90:	002b883a 	mov	r21,zero
18008c94:	0005883a 	mov	r2,zero
18008c98:	003fb506 	br	18008b70 <__alt_data_end+0xf8008b70>
18008c9c:	98c00043 	ldbu	r3,1(r19)
18008ca0:	8c400814 	ori	r17,r17,32
18008ca4:	9cc00044 	addi	r19,r19,1
18008ca8:	18c03fcc 	andi	r3,r3,255
18008cac:	18c0201c 	xori	r3,r3,128
18008cb0:	18ffe004 	addi	r3,r3,-128
18008cb4:	003c2406 	br	18007d48 <__alt_data_end+0xf8007d48>
18008cb8:	d8c02415 	stw	r3,144(sp)
18008cbc:	002b883a 	mov	r21,zero
18008cc0:	003fa806 	br	18008b64 <__alt_data_end+0xf8008b64>
18008cc4:	01060074 	movhi	r4,6145
18008cc8:	213f0104 	addi	r4,r4,-1020
18008ccc:	d9002915 	stw	r4,164(sp)
18008cd0:	d8c02415 	stw	r3,144(sp)
18008cd4:	1021883a 	mov	r16,r2
18008cd8:	9504b03a 	or	r2,r18,r20
18008cdc:	103f8b1e 	bne	r2,zero,18008b0c <__alt_data_end+0xf8008b0c>
18008ce0:	002b883a 	mov	r21,zero
18008ce4:	00800084 	movi	r2,2
18008ce8:	003fa106 	br	18008b70 <__alt_data_end+0xf8008b70>
18008cec:	0025883a 	mov	r18,zero
18008cf0:	94800c04 	addi	r18,r18,48
18008cf4:	dc8019c5 	stb	r18,103(sp)
18008cf8:	dd002c17 	ldw	r20,176(sp)
18008cfc:	dc4019c4 	addi	r17,sp,103
18008d00:	003ce906 	br	180080a8 <__alt_data_end+0xf80080a8>
18008d04:	d9402317 	ldw	r5,140(sp)
18008d08:	d9002717 	ldw	r4,156(sp)
18008d0c:	d9801a04 	addi	r6,sp,104
18008d10:	8007a480 	call	18007a48 <__ssprint_r>
18008d14:	103f001e 	bne	r2,zero,18008918 <__alt_data_end+0xf8008918>
18008d18:	d8c01c17 	ldw	r3,112(sp)
18008d1c:	d8801b17 	ldw	r2,108(sp)
18008d20:	d811883a 	mov	r8,sp
18008d24:	003e7e06 	br	18008720 <__alt_data_end+0xf8008720>
18008d28:	01460074 	movhi	r5,6145
18008d2c:	297f6204 	addi	r5,r5,-632
18008d30:	d9402115 	stw	r5,132(sp)
18008d34:	003ea406 	br	180087c8 <__alt_data_end+0xf80087c8>
18008d38:	d8c02417 	ldw	r3,144(sp)
18008d3c:	d9002017 	ldw	r4,128(sp)
18008d40:	0029883a 	mov	r20,zero
18008d44:	18800104 	addi	r2,r3,4
18008d48:	1c800017 	ldw	r18,0(r3)
18008d4c:	203e4b0e 	bge	r4,zero,1800867c <__alt_data_end+0xf800867c>
18008d50:	003fcc06 	br	18008c84 <__alt_data_end+0xf8008c84>
18008d54:	d9002417 	ldw	r4,144(sp)
18008d58:	d9402017 	ldw	r5,128(sp)
18008d5c:	0029883a 	mov	r20,zero
18008d60:	20800104 	addi	r2,r4,4
18008d64:	24800017 	ldw	r18,0(r4)
18008d68:	283e270e 	bge	r5,zero,18008608 <__alt_data_end+0xf8008608>
18008d6c:	003f7b06 	br	18008b5c <__alt_data_end+0xf8008b5c>
18008d70:	8400100c 	andi	r16,r16,64
18008d74:	80003326 	beq	r16,zero,18008e44 <___svfiprintf_internal_r+0x122c>
18008d78:	d9402417 	ldw	r5,144(sp)
18008d7c:	d8c02617 	ldw	r3,152(sp)
18008d80:	28800017 	ldw	r2,0(r5)
18008d84:	29400104 	addi	r5,r5,4
18008d88:	d9402415 	stw	r5,144(sp)
18008d8c:	10c0000d 	sth	r3,0(r2)
18008d90:	003bc306 	br	18007ca0 <__alt_data_end+0xf8007ca0>
18008d94:	d9002417 	ldw	r4,144(sp)
18008d98:	0029883a 	mov	r20,zero
18008d9c:	24800017 	ldw	r18,0(r4)
18008da0:	21000104 	addi	r4,r4,4
18008da4:	d9002415 	stw	r4,144(sp)
18008da8:	003c8806 	br	18007fcc <__alt_data_end+0xf8007fcc>
18008dac:	d8c02417 	ldw	r3,144(sp)
18008db0:	1c800017 	ldw	r18,0(r3)
18008db4:	18c00104 	addi	r3,r3,4
18008db8:	d8c02415 	stw	r3,144(sp)
18008dbc:	9029d7fa 	srai	r20,r18,31
18008dc0:	a005883a 	mov	r2,r20
18008dc4:	003d7806 	br	180083a8 <__alt_data_end+0xf80083a8>
18008dc8:	8809883a 	mov	r4,r17
18008dcc:	da002d15 	stw	r8,180(sp)
18008dd0:	8000db00 	call	18000db0 <strlen>
18008dd4:	1029883a 	mov	r20,r2
18008dd8:	dd401d83 	ldbu	r21,118(sp)
18008ddc:	ddc02415 	stw	r23,144(sp)
18008de0:	d8002015 	stw	zero,128(sp)
18008de4:	da002d17 	ldw	r8,180(sp)
18008de8:	003caf06 	br	180080a8 <__alt_data_end+0xf80080a8>
18008dec:	013fffc4 	movi	r4,-1
18008df0:	003df206 	br	180085bc <__alt_data_end+0xf80085bc>
18008df4:	dd002017 	ldw	r20,128(sp)
18008df8:	00800184 	movi	r2,6
18008dfc:	1500012e 	bgeu	r2,r20,18008e04 <___svfiprintf_internal_r+0x11ec>
18008e00:	1029883a 	mov	r20,r2
18008e04:	a025883a 	mov	r18,r20
18008e08:	a0004116 	blt	r20,zero,18008f10 <___svfiprintf_internal_r+0x12f8>
18008e0c:	04460074 	movhi	r17,6145
18008e10:	ddc02415 	stw	r23,144(sp)
18008e14:	8c7f0604 	addi	r17,r17,-1000
18008e18:	003ce806 	br	180081bc <__alt_data_end+0xf80081bc>
18008e1c:	04001004 	movi	r16,64
18008e20:	800b883a 	mov	r5,r16
18008e24:	80054900 	call	18005490 <_malloc_r>
18008e28:	d8c02317 	ldw	r3,140(sp)
18008e2c:	18800015 	stw	r2,0(r3)
18008e30:	18800415 	stw	r2,16(r3)
18008e34:	10004d26 	beq	r2,zero,18008f6c <___svfiprintf_internal_r+0x1354>
18008e38:	d9402317 	ldw	r5,140(sp)
18008e3c:	2c000515 	stw	r16,20(r5)
18008e40:	003b8906 	br	18007c68 <__alt_data_end+0xf8007c68>
18008e44:	d9002417 	ldw	r4,144(sp)
18008e48:	d9402617 	ldw	r5,152(sp)
18008e4c:	20800017 	ldw	r2,0(r4)
18008e50:	21000104 	addi	r4,r4,4
18008e54:	d9002415 	stw	r4,144(sp)
18008e58:	11400015 	stw	r5,0(r2)
18008e5c:	003b9006 	br	18007ca0 <__alt_data_end+0xf8007ca0>
18008e60:	8080004c 	andi	r2,r16,1
18008e64:	002b883a 	mov	r21,zero
18008e68:	10000526 	beq	r2,zero,18008e80 <___svfiprintf_internal_r+0x1268>
18008e6c:	00800c04 	movi	r2,48
18008e70:	d88019c5 	stb	r2,103(sp)
18008e74:	dd002c17 	ldw	r20,176(sp)
18008e78:	dc4019c4 	addi	r17,sp,103
18008e7c:	003c8a06 	br	180080a8 <__alt_data_end+0xf80080a8>
18008e80:	0029883a 	mov	r20,zero
18008e84:	dc401a04 	addi	r17,sp,104
18008e88:	003c8706 	br	180080a8 <__alt_data_end+0xf80080a8>
18008e8c:	01460074 	movhi	r5,6145
18008e90:	297f6604 	addi	r5,r5,-616
18008e94:	d9402815 	stw	r5,160(sp)
18008e98:	003cff06 	br	18008298 <__alt_data_end+0xf8008298>
18008e9c:	00bfffc4 	movi	r2,-1
18008ea0:	003ea206 	br	1800892c <__alt_data_end+0xf800892c>
18008ea4:	00800044 	movi	r2,1
18008ea8:	10803fcc 	andi	r2,r2,255
18008eac:	00c00044 	movi	r3,1
18008eb0:	10fd4526 	beq	r2,r3,180083c8 <__alt_data_end+0xf80083c8>
18008eb4:	00c00084 	movi	r3,2
18008eb8:	10fc5226 	beq	r2,r3,18008004 <__alt_data_end+0xf8008004>
18008ebc:	003c9c06 	br	18008130 <__alt_data_end+0xf8008130>
18008ec0:	1021883a 	mov	r16,r2
18008ec4:	002b883a 	mov	r21,zero
18008ec8:	00800084 	movi	r2,2
18008ecc:	003ff606 	br	18008ea8 <__alt_data_end+0xf8008ea8>
18008ed0:	01060074 	movhi	r4,6145
18008ed4:	213f6604 	addi	r4,r4,-616
18008ed8:	d9002815 	stw	r4,160(sp)
18008edc:	003e7206 	br	180088a8 <__alt_data_end+0xf80088a8>
18008ee0:	01460074 	movhi	r5,6145
18008ee4:	297f6204 	addi	r5,r5,-632
18008ee8:	d9402115 	stw	r5,132(sp)
18008eec:	003ec506 	br	18008a04 <__alt_data_end+0xf8008a04>
18008ef0:	e027883a 	mov	r19,fp
18008ef4:	d8002015 	stw	zero,128(sp)
18008ef8:	003b9406 	br	18007d4c <__alt_data_end+0xf8007d4c>
18008efc:	dd002017 	ldw	r20,128(sp)
18008f00:	dd401d83 	ldbu	r21,118(sp)
18008f04:	ddc02415 	stw	r23,144(sp)
18008f08:	d8002015 	stw	zero,128(sp)
18008f0c:	003c6606 	br	180080a8 <__alt_data_end+0xf80080a8>
18008f10:	0025883a 	mov	r18,zero
18008f14:	003fbd06 	br	18008e0c <__alt_data_end+0xf8008e0c>
18008f18:	d9402417 	ldw	r5,144(sp)
18008f1c:	d8c02417 	ldw	r3,144(sp)
18008f20:	29400017 	ldw	r5,0(r5)
18008f24:	19000104 	addi	r4,r3,4
18008f28:	d9002415 	stw	r4,144(sp)
18008f2c:	d9402015 	stw	r5,128(sp)
18008f30:	98c00043 	ldbu	r3,1(r19)
18008f34:	e027883a 	mov	r19,fp
18008f38:	283f5b0e 	bge	r5,zero,18008ca8 <__alt_data_end+0xf8008ca8>
18008f3c:	18c03fcc 	andi	r3,r3,255
18008f40:	013fffc4 	movi	r4,-1
18008f44:	18c0201c 	xori	r3,r3,128
18008f48:	d9002015 	stw	r4,128(sp)
18008f4c:	18ffe004 	addi	r3,r3,-128
18008f50:	003b7d06 	br	18007d48 <__alt_data_end+0xf8007d48>
18008f54:	dd401d85 	stb	r21,118(sp)
18008f58:	003cf306 	br	18008328 <__alt_data_end+0xf8008328>
18008f5c:	dd401d85 	stb	r21,118(sp)
18008f60:	003d4e06 	br	1800849c <__alt_data_end+0xf800849c>
18008f64:	dd401d85 	stb	r21,118(sp)
18008f68:	003c0e06 	br	18007fa4 <__alt_data_end+0xf8007fa4>
18008f6c:	d9002717 	ldw	r4,156(sp)
18008f70:	00800304 	movi	r2,12
18008f74:	20800015 	stw	r2,0(r4)
18008f78:	00bfffc4 	movi	r2,-1
18008f7c:	003e6b06 	br	1800892c <__alt_data_end+0xf800892c>
18008f80:	dd401d85 	stb	r21,118(sp)
18008f84:	003d0006 	br	18008388 <__alt_data_end+0xf8008388>
18008f88:	dd401d85 	stb	r21,118(sp)
18008f8c:	003d7106 	br	18008554 <__alt_data_end+0xf8008554>
18008f90:	dd401d85 	stb	r21,118(sp)
18008f94:	003c5706 	br	180080f4 <__alt_data_end+0xf80080f4>
18008f98:	dd401d85 	stb	r21,118(sp)
18008f9c:	003c2e06 	br	18008058 <__alt_data_end+0xf8008058>
18008fa0:	dd401d85 	stb	r21,118(sp)
18008fa4:	003d8c06 	br	180085d8 <__alt_data_end+0xf80085d8>
18008fa8:	dd401d85 	stb	r21,118(sp)
18008fac:	003da706 	br	1800864c <__alt_data_end+0xf800864c>
18008fb0:	dd401d85 	stb	r21,118(sp)
18008fb4:	003cc806 	br	180082d8 <__alt_data_end+0xf80082d8>

18008fb8 <_write_r>:
18008fb8:	defffd04 	addi	sp,sp,-12
18008fbc:	2805883a 	mov	r2,r5
18008fc0:	dc000015 	stw	r16,0(sp)
18008fc4:	04060074 	movhi	r16,6145
18008fc8:	dc400115 	stw	r17,4(sp)
18008fcc:	300b883a 	mov	r5,r6
18008fd0:	840f5f04 	addi	r16,r16,15740
18008fd4:	2023883a 	mov	r17,r4
18008fd8:	380d883a 	mov	r6,r7
18008fdc:	1009883a 	mov	r4,r2
18008fe0:	dfc00215 	stw	ra,8(sp)
18008fe4:	80000015 	stw	zero,0(r16)
18008fe8:	800dbdc0 	call	1800dbdc <write>
18008fec:	00ffffc4 	movi	r3,-1
18008ff0:	10c00526 	beq	r2,r3,18009008 <_write_r+0x50>
18008ff4:	dfc00217 	ldw	ra,8(sp)
18008ff8:	dc400117 	ldw	r17,4(sp)
18008ffc:	dc000017 	ldw	r16,0(sp)
18009000:	dec00304 	addi	sp,sp,12
18009004:	f800283a 	ret
18009008:	80c00017 	ldw	r3,0(r16)
1800900c:	183ff926 	beq	r3,zero,18008ff4 <__alt_data_end+0xf8008ff4>
18009010:	88c00015 	stw	r3,0(r17)
18009014:	003ff706 	br	18008ff4 <__alt_data_end+0xf8008ff4>

18009018 <__swsetup_r>:
18009018:	00860074 	movhi	r2,6145
1800901c:	defffd04 	addi	sp,sp,-12
18009020:	10877a04 	addi	r2,r2,7656
18009024:	dc400115 	stw	r17,4(sp)
18009028:	2023883a 	mov	r17,r4
1800902c:	11000017 	ldw	r4,0(r2)
18009030:	dc000015 	stw	r16,0(sp)
18009034:	dfc00215 	stw	ra,8(sp)
18009038:	2821883a 	mov	r16,r5
1800903c:	20000226 	beq	r4,zero,18009048 <__swsetup_r+0x30>
18009040:	20800e17 	ldw	r2,56(r4)
18009044:	10003126 	beq	r2,zero,1800910c <__swsetup_r+0xf4>
18009048:	8080030b 	ldhu	r2,12(r16)
1800904c:	10c0020c 	andi	r3,r2,8
18009050:	1009883a 	mov	r4,r2
18009054:	18000f26 	beq	r3,zero,18009094 <__swsetup_r+0x7c>
18009058:	80c00417 	ldw	r3,16(r16)
1800905c:	18001526 	beq	r3,zero,180090b4 <__swsetup_r+0x9c>
18009060:	1100004c 	andi	r4,r2,1
18009064:	20001c1e 	bne	r4,zero,180090d8 <__swsetup_r+0xc0>
18009068:	1080008c 	andi	r2,r2,2
1800906c:	1000291e 	bne	r2,zero,18009114 <__swsetup_r+0xfc>
18009070:	80800517 	ldw	r2,20(r16)
18009074:	80800215 	stw	r2,8(r16)
18009078:	18001c26 	beq	r3,zero,180090ec <__swsetup_r+0xd4>
1800907c:	0005883a 	mov	r2,zero
18009080:	dfc00217 	ldw	ra,8(sp)
18009084:	dc400117 	ldw	r17,4(sp)
18009088:	dc000017 	ldw	r16,0(sp)
1800908c:	dec00304 	addi	sp,sp,12
18009090:	f800283a 	ret
18009094:	2080040c 	andi	r2,r4,16
18009098:	10002e26 	beq	r2,zero,18009154 <__swsetup_r+0x13c>
1800909c:	2080010c 	andi	r2,r4,4
180090a0:	10001e1e 	bne	r2,zero,1800911c <__swsetup_r+0x104>
180090a4:	80c00417 	ldw	r3,16(r16)
180090a8:	20800214 	ori	r2,r4,8
180090ac:	8080030d 	sth	r2,12(r16)
180090b0:	183feb1e 	bne	r3,zero,18009060 <__alt_data_end+0xf8009060>
180090b4:	1100a00c 	andi	r4,r2,640
180090b8:	01408004 	movi	r5,512
180090bc:	217fe826 	beq	r4,r5,18009060 <__alt_data_end+0xf8009060>
180090c0:	800b883a 	mov	r5,r16
180090c4:	8809883a 	mov	r4,r17
180090c8:	8009adc0 	call	18009adc <__smakebuf_r>
180090cc:	8080030b 	ldhu	r2,12(r16)
180090d0:	80c00417 	ldw	r3,16(r16)
180090d4:	003fe206 	br	18009060 <__alt_data_end+0xf8009060>
180090d8:	80800517 	ldw	r2,20(r16)
180090dc:	80000215 	stw	zero,8(r16)
180090e0:	0085c83a 	sub	r2,zero,r2
180090e4:	80800615 	stw	r2,24(r16)
180090e8:	183fe41e 	bne	r3,zero,1800907c <__alt_data_end+0xf800907c>
180090ec:	80c0030b 	ldhu	r3,12(r16)
180090f0:	0005883a 	mov	r2,zero
180090f4:	1900200c 	andi	r4,r3,128
180090f8:	203fe126 	beq	r4,zero,18009080 <__alt_data_end+0xf8009080>
180090fc:	18c01014 	ori	r3,r3,64
18009100:	80c0030d 	sth	r3,12(r16)
18009104:	00bfffc4 	movi	r2,-1
18009108:	003fdd06 	br	18009080 <__alt_data_end+0xf8009080>
1800910c:	8004d140 	call	18004d14 <__sinit>
18009110:	003fcd06 	br	18009048 <__alt_data_end+0xf8009048>
18009114:	0005883a 	mov	r2,zero
18009118:	003fd606 	br	18009074 <__alt_data_end+0xf8009074>
1800911c:	81400c17 	ldw	r5,48(r16)
18009120:	28000626 	beq	r5,zero,1800913c <__swsetup_r+0x124>
18009124:	80801004 	addi	r2,r16,64
18009128:	28800326 	beq	r5,r2,18009138 <__swsetup_r+0x120>
1800912c:	8809883a 	mov	r4,r17
18009130:	800976c0 	call	1800976c <_free_r>
18009134:	8100030b 	ldhu	r4,12(r16)
18009138:	80000c15 	stw	zero,48(r16)
1800913c:	80c00417 	ldw	r3,16(r16)
18009140:	00bff6c4 	movi	r2,-37
18009144:	1108703a 	and	r4,r2,r4
18009148:	80000115 	stw	zero,4(r16)
1800914c:	80c00015 	stw	r3,0(r16)
18009150:	003fd506 	br	180090a8 <__alt_data_end+0xf80090a8>
18009154:	00800244 	movi	r2,9
18009158:	88800015 	stw	r2,0(r17)
1800915c:	20801014 	ori	r2,r4,64
18009160:	8080030d 	sth	r2,12(r16)
18009164:	00bfffc4 	movi	r2,-1
18009168:	003fc506 	br	18009080 <__alt_data_end+0xf8009080>

1800916c <_close_r>:
1800916c:	defffd04 	addi	sp,sp,-12
18009170:	dc000015 	stw	r16,0(sp)
18009174:	04060074 	movhi	r16,6145
18009178:	dc400115 	stw	r17,4(sp)
1800917c:	840f5f04 	addi	r16,r16,15740
18009180:	2023883a 	mov	r17,r4
18009184:	2809883a 	mov	r4,r5
18009188:	dfc00215 	stw	ra,8(sp)
1800918c:	80000015 	stw	zero,0(r16)
18009190:	800d3540 	call	1800d354 <close>
18009194:	00ffffc4 	movi	r3,-1
18009198:	10c00526 	beq	r2,r3,180091b0 <_close_r+0x44>
1800919c:	dfc00217 	ldw	ra,8(sp)
180091a0:	dc400117 	ldw	r17,4(sp)
180091a4:	dc000017 	ldw	r16,0(sp)
180091a8:	dec00304 	addi	sp,sp,12
180091ac:	f800283a 	ret
180091b0:	80c00017 	ldw	r3,0(r16)
180091b4:	183ff926 	beq	r3,zero,1800919c <__alt_data_end+0xf800919c>
180091b8:	88c00015 	stw	r3,0(r17)
180091bc:	003ff706 	br	1800919c <__alt_data_end+0xf800919c>

180091c0 <_calloc_r>:
180091c0:	defffe04 	addi	sp,sp,-8
180091c4:	2805883a 	mov	r2,r5
180091c8:	dc000015 	stw	r16,0(sp)
180091cc:	300b883a 	mov	r5,r6
180091d0:	2021883a 	mov	r16,r4
180091d4:	1009883a 	mov	r4,r2
180091d8:	dfc00115 	stw	ra,4(sp)
180091dc:	8000b740 	call	18000b74 <__mulsi3>
180091e0:	100b883a 	mov	r5,r2
180091e4:	8009883a 	mov	r4,r16
180091e8:	80054900 	call	18005490 <_malloc_r>
180091ec:	10002926 	beq	r2,zero,18009294 <_calloc_r+0xd4>
180091f0:	11bfff17 	ldw	r6,-4(r2)
180091f4:	1021883a 	mov	r16,r2
180091f8:	00bfff04 	movi	r2,-4
180091fc:	308c703a 	and	r6,r6,r2
18009200:	00c00904 	movi	r3,36
18009204:	308d883a 	add	r6,r6,r2
18009208:	19801636 	bltu	r3,r6,18009264 <_calloc_r+0xa4>
1800920c:	008004c4 	movi	r2,19
18009210:	11800b2e 	bgeu	r2,r6,18009240 <_calloc_r+0x80>
18009214:	80000015 	stw	zero,0(r16)
18009218:	80000115 	stw	zero,4(r16)
1800921c:	008006c4 	movi	r2,27
18009220:	11801a2e 	bgeu	r2,r6,1800928c <_calloc_r+0xcc>
18009224:	80000215 	stw	zero,8(r16)
18009228:	80000315 	stw	zero,12(r16)
1800922c:	30c0151e 	bne	r6,r3,18009284 <_calloc_r+0xc4>
18009230:	80000415 	stw	zero,16(r16)
18009234:	80800604 	addi	r2,r16,24
18009238:	80000515 	stw	zero,20(r16)
1800923c:	00000106 	br	18009244 <_calloc_r+0x84>
18009240:	8005883a 	mov	r2,r16
18009244:	10000015 	stw	zero,0(r2)
18009248:	10000115 	stw	zero,4(r2)
1800924c:	10000215 	stw	zero,8(r2)
18009250:	8005883a 	mov	r2,r16
18009254:	dfc00117 	ldw	ra,4(sp)
18009258:	dc000017 	ldw	r16,0(sp)
1800925c:	dec00204 	addi	sp,sp,8
18009260:	f800283a 	ret
18009264:	000b883a 	mov	r5,zero
18009268:	8009883a 	mov	r4,r16
1800926c:	80060240 	call	18006024 <memset>
18009270:	8005883a 	mov	r2,r16
18009274:	dfc00117 	ldw	ra,4(sp)
18009278:	dc000017 	ldw	r16,0(sp)
1800927c:	dec00204 	addi	sp,sp,8
18009280:	f800283a 	ret
18009284:	80800404 	addi	r2,r16,16
18009288:	003fee06 	br	18009244 <__alt_data_end+0xf8009244>
1800928c:	80800204 	addi	r2,r16,8
18009290:	003fec06 	br	18009244 <__alt_data_end+0xf8009244>
18009294:	0005883a 	mov	r2,zero
18009298:	003fee06 	br	18009254 <__alt_data_end+0xf8009254>

1800929c <_fclose_r>:
1800929c:	28003926 	beq	r5,zero,18009384 <_fclose_r+0xe8>
180092a0:	defffc04 	addi	sp,sp,-16
180092a4:	dc400115 	stw	r17,4(sp)
180092a8:	dc000015 	stw	r16,0(sp)
180092ac:	dfc00315 	stw	ra,12(sp)
180092b0:	dc800215 	stw	r18,8(sp)
180092b4:	2023883a 	mov	r17,r4
180092b8:	2821883a 	mov	r16,r5
180092bc:	20000226 	beq	r4,zero,180092c8 <_fclose_r+0x2c>
180092c0:	20800e17 	ldw	r2,56(r4)
180092c4:	10002726 	beq	r2,zero,18009364 <_fclose_r+0xc8>
180092c8:	8080030f 	ldh	r2,12(r16)
180092cc:	1000071e 	bne	r2,zero,180092ec <_fclose_r+0x50>
180092d0:	0005883a 	mov	r2,zero
180092d4:	dfc00317 	ldw	ra,12(sp)
180092d8:	dc800217 	ldw	r18,8(sp)
180092dc:	dc400117 	ldw	r17,4(sp)
180092e0:	dc000017 	ldw	r16,0(sp)
180092e4:	dec00404 	addi	sp,sp,16
180092e8:	f800283a 	ret
180092ec:	800b883a 	mov	r5,r16
180092f0:	8809883a 	mov	r4,r17
180092f4:	80093a00 	call	180093a0 <__sflush_r>
180092f8:	1025883a 	mov	r18,r2
180092fc:	80800b17 	ldw	r2,44(r16)
18009300:	10000426 	beq	r2,zero,18009314 <_fclose_r+0x78>
18009304:	81400717 	ldw	r5,28(r16)
18009308:	8809883a 	mov	r4,r17
1800930c:	103ee83a 	callr	r2
18009310:	10001616 	blt	r2,zero,1800936c <_fclose_r+0xd0>
18009314:	8080030b 	ldhu	r2,12(r16)
18009318:	1080200c 	andi	r2,r2,128
1800931c:	1000151e 	bne	r2,zero,18009374 <_fclose_r+0xd8>
18009320:	81400c17 	ldw	r5,48(r16)
18009324:	28000526 	beq	r5,zero,1800933c <_fclose_r+0xa0>
18009328:	80801004 	addi	r2,r16,64
1800932c:	28800226 	beq	r5,r2,18009338 <_fclose_r+0x9c>
18009330:	8809883a 	mov	r4,r17
18009334:	800976c0 	call	1800976c <_free_r>
18009338:	80000c15 	stw	zero,48(r16)
1800933c:	81401117 	ldw	r5,68(r16)
18009340:	28000326 	beq	r5,zero,18009350 <_fclose_r+0xb4>
18009344:	8809883a 	mov	r4,r17
18009348:	800976c0 	call	1800976c <_free_r>
1800934c:	80001115 	stw	zero,68(r16)
18009350:	8004d240 	call	18004d24 <__sfp_lock_acquire>
18009354:	8000030d 	sth	zero,12(r16)
18009358:	8004d280 	call	18004d28 <__sfp_lock_release>
1800935c:	9005883a 	mov	r2,r18
18009360:	003fdc06 	br	180092d4 <__alt_data_end+0xf80092d4>
18009364:	8004d140 	call	18004d14 <__sinit>
18009368:	003fd706 	br	180092c8 <__alt_data_end+0xf80092c8>
1800936c:	04bfffc4 	movi	r18,-1
18009370:	003fe806 	br	18009314 <__alt_data_end+0xf8009314>
18009374:	81400417 	ldw	r5,16(r16)
18009378:	8809883a 	mov	r4,r17
1800937c:	800976c0 	call	1800976c <_free_r>
18009380:	003fe706 	br	18009320 <__alt_data_end+0xf8009320>
18009384:	0005883a 	mov	r2,zero
18009388:	f800283a 	ret

1800938c <fclose>:
1800938c:	00860074 	movhi	r2,6145
18009390:	10877a04 	addi	r2,r2,7656
18009394:	200b883a 	mov	r5,r4
18009398:	11000017 	ldw	r4,0(r2)
1800939c:	800929c1 	jmpi	1800929c <_fclose_r>

180093a0 <__sflush_r>:
180093a0:	2880030b 	ldhu	r2,12(r5)
180093a4:	defffb04 	addi	sp,sp,-20
180093a8:	dcc00315 	stw	r19,12(sp)
180093ac:	dc400115 	stw	r17,4(sp)
180093b0:	dfc00415 	stw	ra,16(sp)
180093b4:	dc800215 	stw	r18,8(sp)
180093b8:	dc000015 	stw	r16,0(sp)
180093bc:	10c0020c 	andi	r3,r2,8
180093c0:	2823883a 	mov	r17,r5
180093c4:	2027883a 	mov	r19,r4
180093c8:	1800311e 	bne	r3,zero,18009490 <__sflush_r+0xf0>
180093cc:	28c00117 	ldw	r3,4(r5)
180093d0:	10820014 	ori	r2,r2,2048
180093d4:	2880030d 	sth	r2,12(r5)
180093d8:	00c04b0e 	bge	zero,r3,18009508 <__sflush_r+0x168>
180093dc:	8a000a17 	ldw	r8,40(r17)
180093e0:	40002326 	beq	r8,zero,18009470 <__sflush_r+0xd0>
180093e4:	9c000017 	ldw	r16,0(r19)
180093e8:	10c4000c 	andi	r3,r2,4096
180093ec:	98000015 	stw	zero,0(r19)
180093f0:	18004826 	beq	r3,zero,18009514 <__sflush_r+0x174>
180093f4:	89801417 	ldw	r6,80(r17)
180093f8:	10c0010c 	andi	r3,r2,4
180093fc:	18000626 	beq	r3,zero,18009418 <__sflush_r+0x78>
18009400:	88c00117 	ldw	r3,4(r17)
18009404:	88800c17 	ldw	r2,48(r17)
18009408:	30cdc83a 	sub	r6,r6,r3
1800940c:	10000226 	beq	r2,zero,18009418 <__sflush_r+0x78>
18009410:	88800f17 	ldw	r2,60(r17)
18009414:	308dc83a 	sub	r6,r6,r2
18009418:	89400717 	ldw	r5,28(r17)
1800941c:	000f883a 	mov	r7,zero
18009420:	9809883a 	mov	r4,r19
18009424:	403ee83a 	callr	r8
18009428:	00ffffc4 	movi	r3,-1
1800942c:	10c04426 	beq	r2,r3,18009540 <__sflush_r+0x1a0>
18009430:	88c0030b 	ldhu	r3,12(r17)
18009434:	89000417 	ldw	r4,16(r17)
18009438:	88000115 	stw	zero,4(r17)
1800943c:	197dffcc 	andi	r5,r3,63487
18009440:	8940030d 	sth	r5,12(r17)
18009444:	89000015 	stw	r4,0(r17)
18009448:	18c4000c 	andi	r3,r3,4096
1800944c:	18002c1e 	bne	r3,zero,18009500 <__sflush_r+0x160>
18009450:	89400c17 	ldw	r5,48(r17)
18009454:	9c000015 	stw	r16,0(r19)
18009458:	28000526 	beq	r5,zero,18009470 <__sflush_r+0xd0>
1800945c:	88801004 	addi	r2,r17,64
18009460:	28800226 	beq	r5,r2,1800946c <__sflush_r+0xcc>
18009464:	9809883a 	mov	r4,r19
18009468:	800976c0 	call	1800976c <_free_r>
1800946c:	88000c15 	stw	zero,48(r17)
18009470:	0005883a 	mov	r2,zero
18009474:	dfc00417 	ldw	ra,16(sp)
18009478:	dcc00317 	ldw	r19,12(sp)
1800947c:	dc800217 	ldw	r18,8(sp)
18009480:	dc400117 	ldw	r17,4(sp)
18009484:	dc000017 	ldw	r16,0(sp)
18009488:	dec00504 	addi	sp,sp,20
1800948c:	f800283a 	ret
18009490:	2c800417 	ldw	r18,16(r5)
18009494:	903ff626 	beq	r18,zero,18009470 <__alt_data_end+0xf8009470>
18009498:	2c000017 	ldw	r16,0(r5)
1800949c:	108000cc 	andi	r2,r2,3
180094a0:	2c800015 	stw	r18,0(r5)
180094a4:	84a1c83a 	sub	r16,r16,r18
180094a8:	1000131e 	bne	r2,zero,180094f8 <__sflush_r+0x158>
180094ac:	28800517 	ldw	r2,20(r5)
180094b0:	88800215 	stw	r2,8(r17)
180094b4:	04000316 	blt	zero,r16,180094c4 <__sflush_r+0x124>
180094b8:	003fed06 	br	18009470 <__alt_data_end+0xf8009470>
180094bc:	90a5883a 	add	r18,r18,r2
180094c0:	043feb0e 	bge	zero,r16,18009470 <__alt_data_end+0xf8009470>
180094c4:	88800917 	ldw	r2,36(r17)
180094c8:	89400717 	ldw	r5,28(r17)
180094cc:	800f883a 	mov	r7,r16
180094d0:	900d883a 	mov	r6,r18
180094d4:	9809883a 	mov	r4,r19
180094d8:	103ee83a 	callr	r2
180094dc:	80a1c83a 	sub	r16,r16,r2
180094e0:	00bff616 	blt	zero,r2,180094bc <__alt_data_end+0xf80094bc>
180094e4:	88c0030b 	ldhu	r3,12(r17)
180094e8:	00bfffc4 	movi	r2,-1
180094ec:	18c01014 	ori	r3,r3,64
180094f0:	88c0030d 	sth	r3,12(r17)
180094f4:	003fdf06 	br	18009474 <__alt_data_end+0xf8009474>
180094f8:	0005883a 	mov	r2,zero
180094fc:	003fec06 	br	180094b0 <__alt_data_end+0xf80094b0>
18009500:	88801415 	stw	r2,80(r17)
18009504:	003fd206 	br	18009450 <__alt_data_end+0xf8009450>
18009508:	28c00f17 	ldw	r3,60(r5)
1800950c:	00ffb316 	blt	zero,r3,180093dc <__alt_data_end+0xf80093dc>
18009510:	003fd706 	br	18009470 <__alt_data_end+0xf8009470>
18009514:	89400717 	ldw	r5,28(r17)
18009518:	000d883a 	mov	r6,zero
1800951c:	01c00044 	movi	r7,1
18009520:	9809883a 	mov	r4,r19
18009524:	403ee83a 	callr	r8
18009528:	100d883a 	mov	r6,r2
1800952c:	00bfffc4 	movi	r2,-1
18009530:	30801426 	beq	r6,r2,18009584 <__sflush_r+0x1e4>
18009534:	8880030b 	ldhu	r2,12(r17)
18009538:	8a000a17 	ldw	r8,40(r17)
1800953c:	003fae06 	br	180093f8 <__alt_data_end+0xf80093f8>
18009540:	98c00017 	ldw	r3,0(r19)
18009544:	183fba26 	beq	r3,zero,18009430 <__alt_data_end+0xf8009430>
18009548:	01000744 	movi	r4,29
1800954c:	19000626 	beq	r3,r4,18009568 <__sflush_r+0x1c8>
18009550:	01000584 	movi	r4,22
18009554:	19000426 	beq	r3,r4,18009568 <__sflush_r+0x1c8>
18009558:	88c0030b 	ldhu	r3,12(r17)
1800955c:	18c01014 	ori	r3,r3,64
18009560:	88c0030d 	sth	r3,12(r17)
18009564:	003fc306 	br	18009474 <__alt_data_end+0xf8009474>
18009568:	8880030b 	ldhu	r2,12(r17)
1800956c:	88c00417 	ldw	r3,16(r17)
18009570:	88000115 	stw	zero,4(r17)
18009574:	10bdffcc 	andi	r2,r2,63487
18009578:	8880030d 	sth	r2,12(r17)
1800957c:	88c00015 	stw	r3,0(r17)
18009580:	003fb306 	br	18009450 <__alt_data_end+0xf8009450>
18009584:	98800017 	ldw	r2,0(r19)
18009588:	103fea26 	beq	r2,zero,18009534 <__alt_data_end+0xf8009534>
1800958c:	00c00744 	movi	r3,29
18009590:	10c00226 	beq	r2,r3,1800959c <__sflush_r+0x1fc>
18009594:	00c00584 	movi	r3,22
18009598:	10c0031e 	bne	r2,r3,180095a8 <__sflush_r+0x208>
1800959c:	9c000015 	stw	r16,0(r19)
180095a0:	0005883a 	mov	r2,zero
180095a4:	003fb306 	br	18009474 <__alt_data_end+0xf8009474>
180095a8:	88c0030b 	ldhu	r3,12(r17)
180095ac:	3005883a 	mov	r2,r6
180095b0:	18c01014 	ori	r3,r3,64
180095b4:	88c0030d 	sth	r3,12(r17)
180095b8:	003fae06 	br	18009474 <__alt_data_end+0xf8009474>

180095bc <_fflush_r>:
180095bc:	defffd04 	addi	sp,sp,-12
180095c0:	dc000115 	stw	r16,4(sp)
180095c4:	dfc00215 	stw	ra,8(sp)
180095c8:	2021883a 	mov	r16,r4
180095cc:	20000226 	beq	r4,zero,180095d8 <_fflush_r+0x1c>
180095d0:	20800e17 	ldw	r2,56(r4)
180095d4:	10000c26 	beq	r2,zero,18009608 <_fflush_r+0x4c>
180095d8:	2880030f 	ldh	r2,12(r5)
180095dc:	1000051e 	bne	r2,zero,180095f4 <_fflush_r+0x38>
180095e0:	0005883a 	mov	r2,zero
180095e4:	dfc00217 	ldw	ra,8(sp)
180095e8:	dc000117 	ldw	r16,4(sp)
180095ec:	dec00304 	addi	sp,sp,12
180095f0:	f800283a 	ret
180095f4:	8009883a 	mov	r4,r16
180095f8:	dfc00217 	ldw	ra,8(sp)
180095fc:	dc000117 	ldw	r16,4(sp)
18009600:	dec00304 	addi	sp,sp,12
18009604:	80093a01 	jmpi	180093a0 <__sflush_r>
18009608:	d9400015 	stw	r5,0(sp)
1800960c:	8004d140 	call	18004d14 <__sinit>
18009610:	d9400017 	ldw	r5,0(sp)
18009614:	003ff006 	br	180095d8 <__alt_data_end+0xf80095d8>

18009618 <fflush>:
18009618:	20000526 	beq	r4,zero,18009630 <fflush+0x18>
1800961c:	00860074 	movhi	r2,6145
18009620:	10877a04 	addi	r2,r2,7656
18009624:	200b883a 	mov	r5,r4
18009628:	11000017 	ldw	r4,0(r2)
1800962c:	80095bc1 	jmpi	180095bc <_fflush_r>
18009630:	00860074 	movhi	r2,6145
18009634:	10877904 	addi	r2,r2,7652
18009638:	11000017 	ldw	r4,0(r2)
1800963c:	01460074 	movhi	r5,6145
18009640:	29656f04 	addi	r5,r5,-27204
18009644:	80052f01 	jmpi	180052f0 <_fwalk_reent>

18009648 <_malloc_trim_r>:
18009648:	defffb04 	addi	sp,sp,-20
1800964c:	dcc00315 	stw	r19,12(sp)
18009650:	04c60074 	movhi	r19,6145
18009654:	dc800215 	stw	r18,8(sp)
18009658:	dc400115 	stw	r17,4(sp)
1800965c:	dc000015 	stw	r16,0(sp)
18009660:	dfc00415 	stw	ra,16(sp)
18009664:	2821883a 	mov	r16,r5
18009668:	9cc1f204 	addi	r19,r19,1992
1800966c:	2025883a 	mov	r18,r4
18009670:	800d8b40 	call	1800d8b4 <__malloc_lock>
18009674:	98800217 	ldw	r2,8(r19)
18009678:	14400117 	ldw	r17,4(r2)
1800967c:	00bfff04 	movi	r2,-4
18009680:	88a2703a 	and	r17,r17,r2
18009684:	8c21c83a 	sub	r16,r17,r16
18009688:	8403fbc4 	addi	r16,r16,4079
1800968c:	8020d33a 	srli	r16,r16,12
18009690:	0083ffc4 	movi	r2,4095
18009694:	843fffc4 	addi	r16,r16,-1
18009698:	8020933a 	slli	r16,r16,12
1800969c:	1400060e 	bge	r2,r16,180096b8 <_malloc_trim_r+0x70>
180096a0:	000b883a 	mov	r5,zero
180096a4:	9009883a 	mov	r4,r18
180096a8:	80077dc0 	call	180077dc <_sbrk_r>
180096ac:	98c00217 	ldw	r3,8(r19)
180096b0:	1c47883a 	add	r3,r3,r17
180096b4:	10c00a26 	beq	r2,r3,180096e0 <_malloc_trim_r+0x98>
180096b8:	9009883a 	mov	r4,r18
180096bc:	800d8d80 	call	1800d8d8 <__malloc_unlock>
180096c0:	0005883a 	mov	r2,zero
180096c4:	dfc00417 	ldw	ra,16(sp)
180096c8:	dcc00317 	ldw	r19,12(sp)
180096cc:	dc800217 	ldw	r18,8(sp)
180096d0:	dc400117 	ldw	r17,4(sp)
180096d4:	dc000017 	ldw	r16,0(sp)
180096d8:	dec00504 	addi	sp,sp,20
180096dc:	f800283a 	ret
180096e0:	040bc83a 	sub	r5,zero,r16
180096e4:	9009883a 	mov	r4,r18
180096e8:	80077dc0 	call	180077dc <_sbrk_r>
180096ec:	00ffffc4 	movi	r3,-1
180096f0:	10c00d26 	beq	r2,r3,18009728 <_malloc_trim_r+0xe0>
180096f4:	00c60074 	movhi	r3,6145
180096f8:	18cf6704 	addi	r3,r3,15772
180096fc:	18800017 	ldw	r2,0(r3)
18009700:	99000217 	ldw	r4,8(r19)
18009704:	8c23c83a 	sub	r17,r17,r16
18009708:	8c400054 	ori	r17,r17,1
1800970c:	1421c83a 	sub	r16,r2,r16
18009710:	24400115 	stw	r17,4(r4)
18009714:	9009883a 	mov	r4,r18
18009718:	1c000015 	stw	r16,0(r3)
1800971c:	800d8d80 	call	1800d8d8 <__malloc_unlock>
18009720:	00800044 	movi	r2,1
18009724:	003fe706 	br	180096c4 <__alt_data_end+0xf80096c4>
18009728:	000b883a 	mov	r5,zero
1800972c:	9009883a 	mov	r4,r18
18009730:	80077dc0 	call	180077dc <_sbrk_r>
18009734:	99000217 	ldw	r4,8(r19)
18009738:	014003c4 	movi	r5,15
1800973c:	1107c83a 	sub	r3,r2,r4
18009740:	28ffdd0e 	bge	r5,r3,180096b8 <__alt_data_end+0xf80096b8>
18009744:	01460074 	movhi	r5,6145
18009748:	29477c04 	addi	r5,r5,7664
1800974c:	29400017 	ldw	r5,0(r5)
18009750:	18c00054 	ori	r3,r3,1
18009754:	20c00115 	stw	r3,4(r4)
18009758:	00c60074 	movhi	r3,6145
1800975c:	1145c83a 	sub	r2,r2,r5
18009760:	18cf6704 	addi	r3,r3,15772
18009764:	18800015 	stw	r2,0(r3)
18009768:	003fd306 	br	180096b8 <__alt_data_end+0xf80096b8>

1800976c <_free_r>:
1800976c:	28004126 	beq	r5,zero,18009874 <_free_r+0x108>
18009770:	defffd04 	addi	sp,sp,-12
18009774:	dc400115 	stw	r17,4(sp)
18009778:	dc000015 	stw	r16,0(sp)
1800977c:	2023883a 	mov	r17,r4
18009780:	2821883a 	mov	r16,r5
18009784:	dfc00215 	stw	ra,8(sp)
18009788:	800d8b40 	call	1800d8b4 <__malloc_lock>
1800978c:	81ffff17 	ldw	r7,-4(r16)
18009790:	00bfff84 	movi	r2,-2
18009794:	01060074 	movhi	r4,6145
18009798:	81bffe04 	addi	r6,r16,-8
1800979c:	3884703a 	and	r2,r7,r2
180097a0:	2101f204 	addi	r4,r4,1992
180097a4:	308b883a 	add	r5,r6,r2
180097a8:	2a400117 	ldw	r9,4(r5)
180097ac:	22000217 	ldw	r8,8(r4)
180097b0:	00ffff04 	movi	r3,-4
180097b4:	48c6703a 	and	r3,r9,r3
180097b8:	2a005726 	beq	r5,r8,18009918 <_free_r+0x1ac>
180097bc:	28c00115 	stw	r3,4(r5)
180097c0:	39c0004c 	andi	r7,r7,1
180097c4:	3800091e 	bne	r7,zero,180097ec <_free_r+0x80>
180097c8:	823ffe17 	ldw	r8,-8(r16)
180097cc:	22400204 	addi	r9,r4,8
180097d0:	320dc83a 	sub	r6,r6,r8
180097d4:	31c00217 	ldw	r7,8(r6)
180097d8:	1205883a 	add	r2,r2,r8
180097dc:	3a406526 	beq	r7,r9,18009974 <_free_r+0x208>
180097e0:	32000317 	ldw	r8,12(r6)
180097e4:	3a000315 	stw	r8,12(r7)
180097e8:	41c00215 	stw	r7,8(r8)
180097ec:	28cf883a 	add	r7,r5,r3
180097f0:	39c00117 	ldw	r7,4(r7)
180097f4:	39c0004c 	andi	r7,r7,1
180097f8:	38003a26 	beq	r7,zero,180098e4 <_free_r+0x178>
180097fc:	10c00054 	ori	r3,r2,1
18009800:	30c00115 	stw	r3,4(r6)
18009804:	3087883a 	add	r3,r6,r2
18009808:	18800015 	stw	r2,0(r3)
1800980c:	00c07fc4 	movi	r3,511
18009810:	18801936 	bltu	r3,r2,18009878 <_free_r+0x10c>
18009814:	1004d0fa 	srli	r2,r2,3
18009818:	01c00044 	movi	r7,1
1800981c:	21400117 	ldw	r5,4(r4)
18009820:	10c00044 	addi	r3,r2,1
18009824:	18c7883a 	add	r3,r3,r3
18009828:	1005d0ba 	srai	r2,r2,2
1800982c:	18c7883a 	add	r3,r3,r3
18009830:	18c7883a 	add	r3,r3,r3
18009834:	1907883a 	add	r3,r3,r4
18009838:	3884983a 	sll	r2,r7,r2
1800983c:	19c00017 	ldw	r7,0(r3)
18009840:	1a3ffe04 	addi	r8,r3,-8
18009844:	1144b03a 	or	r2,r2,r5
18009848:	32000315 	stw	r8,12(r6)
1800984c:	31c00215 	stw	r7,8(r6)
18009850:	20800115 	stw	r2,4(r4)
18009854:	19800015 	stw	r6,0(r3)
18009858:	39800315 	stw	r6,12(r7)
1800985c:	8809883a 	mov	r4,r17
18009860:	dfc00217 	ldw	ra,8(sp)
18009864:	dc400117 	ldw	r17,4(sp)
18009868:	dc000017 	ldw	r16,0(sp)
1800986c:	dec00304 	addi	sp,sp,12
18009870:	800d8d81 	jmpi	1800d8d8 <__malloc_unlock>
18009874:	f800283a 	ret
18009878:	100ad27a 	srli	r5,r2,9
1800987c:	00c00104 	movi	r3,4
18009880:	19404a36 	bltu	r3,r5,180099ac <_free_r+0x240>
18009884:	100ad1ba 	srli	r5,r2,6
18009888:	28c00e44 	addi	r3,r5,57
1800988c:	18c7883a 	add	r3,r3,r3
18009890:	29400e04 	addi	r5,r5,56
18009894:	18c7883a 	add	r3,r3,r3
18009898:	18c7883a 	add	r3,r3,r3
1800989c:	1909883a 	add	r4,r3,r4
180098a0:	20c00017 	ldw	r3,0(r4)
180098a4:	01c60074 	movhi	r7,6145
180098a8:	213ffe04 	addi	r4,r4,-8
180098ac:	39c1f204 	addi	r7,r7,1992
180098b0:	20c04426 	beq	r4,r3,180099c4 <_free_r+0x258>
180098b4:	01ffff04 	movi	r7,-4
180098b8:	19400117 	ldw	r5,4(r3)
180098bc:	29ca703a 	and	r5,r5,r7
180098c0:	1140022e 	bgeu	r2,r5,180098cc <_free_r+0x160>
180098c4:	18c00217 	ldw	r3,8(r3)
180098c8:	20fffb1e 	bne	r4,r3,180098b8 <__alt_data_end+0xf80098b8>
180098cc:	19000317 	ldw	r4,12(r3)
180098d0:	31000315 	stw	r4,12(r6)
180098d4:	30c00215 	stw	r3,8(r6)
180098d8:	21800215 	stw	r6,8(r4)
180098dc:	19800315 	stw	r6,12(r3)
180098e0:	003fde06 	br	1800985c <__alt_data_end+0xf800985c>
180098e4:	29c00217 	ldw	r7,8(r5)
180098e8:	10c5883a 	add	r2,r2,r3
180098ec:	00c60074 	movhi	r3,6145
180098f0:	18c1f404 	addi	r3,r3,2000
180098f4:	38c03b26 	beq	r7,r3,180099e4 <_free_r+0x278>
180098f8:	2a000317 	ldw	r8,12(r5)
180098fc:	11400054 	ori	r5,r2,1
18009900:	3087883a 	add	r3,r6,r2
18009904:	3a000315 	stw	r8,12(r7)
18009908:	41c00215 	stw	r7,8(r8)
1800990c:	31400115 	stw	r5,4(r6)
18009910:	18800015 	stw	r2,0(r3)
18009914:	003fbd06 	br	1800980c <__alt_data_end+0xf800980c>
18009918:	39c0004c 	andi	r7,r7,1
1800991c:	10c5883a 	add	r2,r2,r3
18009920:	3800071e 	bne	r7,zero,18009940 <_free_r+0x1d4>
18009924:	81fffe17 	ldw	r7,-8(r16)
18009928:	31cdc83a 	sub	r6,r6,r7
1800992c:	30c00317 	ldw	r3,12(r6)
18009930:	31400217 	ldw	r5,8(r6)
18009934:	11c5883a 	add	r2,r2,r7
18009938:	28c00315 	stw	r3,12(r5)
1800993c:	19400215 	stw	r5,8(r3)
18009940:	10c00054 	ori	r3,r2,1
18009944:	30c00115 	stw	r3,4(r6)
18009948:	00c60074 	movhi	r3,6145
1800994c:	18c77d04 	addi	r3,r3,7668
18009950:	18c00017 	ldw	r3,0(r3)
18009954:	21800215 	stw	r6,8(r4)
18009958:	10ffc036 	bltu	r2,r3,1800985c <__alt_data_end+0xf800985c>
1800995c:	00860074 	movhi	r2,6145
18009960:	108f5e04 	addi	r2,r2,15736
18009964:	11400017 	ldw	r5,0(r2)
18009968:	8809883a 	mov	r4,r17
1800996c:	80096480 	call	18009648 <_malloc_trim_r>
18009970:	003fba06 	br	1800985c <__alt_data_end+0xf800985c>
18009974:	28c9883a 	add	r4,r5,r3
18009978:	21000117 	ldw	r4,4(r4)
1800997c:	2100004c 	andi	r4,r4,1
18009980:	2000391e 	bne	r4,zero,18009a68 <_free_r+0x2fc>
18009984:	29c00217 	ldw	r7,8(r5)
18009988:	29000317 	ldw	r4,12(r5)
1800998c:	1885883a 	add	r2,r3,r2
18009990:	10c00054 	ori	r3,r2,1
18009994:	39000315 	stw	r4,12(r7)
18009998:	21c00215 	stw	r7,8(r4)
1800999c:	30c00115 	stw	r3,4(r6)
180099a0:	308d883a 	add	r6,r6,r2
180099a4:	30800015 	stw	r2,0(r6)
180099a8:	003fac06 	br	1800985c <__alt_data_end+0xf800985c>
180099ac:	00c00504 	movi	r3,20
180099b0:	19401536 	bltu	r3,r5,18009a08 <_free_r+0x29c>
180099b4:	28c01704 	addi	r3,r5,92
180099b8:	18c7883a 	add	r3,r3,r3
180099bc:	294016c4 	addi	r5,r5,91
180099c0:	003fb406 	br	18009894 <__alt_data_end+0xf8009894>
180099c4:	280bd0ba 	srai	r5,r5,2
180099c8:	00c00044 	movi	r3,1
180099cc:	38800117 	ldw	r2,4(r7)
180099d0:	194a983a 	sll	r5,r3,r5
180099d4:	2007883a 	mov	r3,r4
180099d8:	2884b03a 	or	r2,r5,r2
180099dc:	38800115 	stw	r2,4(r7)
180099e0:	003fbb06 	br	180098d0 <__alt_data_end+0xf80098d0>
180099e4:	21800515 	stw	r6,20(r4)
180099e8:	21800415 	stw	r6,16(r4)
180099ec:	10c00054 	ori	r3,r2,1
180099f0:	31c00315 	stw	r7,12(r6)
180099f4:	31c00215 	stw	r7,8(r6)
180099f8:	30c00115 	stw	r3,4(r6)
180099fc:	308d883a 	add	r6,r6,r2
18009a00:	30800015 	stw	r2,0(r6)
18009a04:	003f9506 	br	1800985c <__alt_data_end+0xf800985c>
18009a08:	00c01504 	movi	r3,84
18009a0c:	19400536 	bltu	r3,r5,18009a24 <_free_r+0x2b8>
18009a10:	100ad33a 	srli	r5,r2,12
18009a14:	28c01bc4 	addi	r3,r5,111
18009a18:	18c7883a 	add	r3,r3,r3
18009a1c:	29401b84 	addi	r5,r5,110
18009a20:	003f9c06 	br	18009894 <__alt_data_end+0xf8009894>
18009a24:	00c05504 	movi	r3,340
18009a28:	19400536 	bltu	r3,r5,18009a40 <_free_r+0x2d4>
18009a2c:	100ad3fa 	srli	r5,r2,15
18009a30:	28c01e04 	addi	r3,r5,120
18009a34:	18c7883a 	add	r3,r3,r3
18009a38:	29401dc4 	addi	r5,r5,119
18009a3c:	003f9506 	br	18009894 <__alt_data_end+0xf8009894>
18009a40:	00c15504 	movi	r3,1364
18009a44:	19400536 	bltu	r3,r5,18009a5c <_free_r+0x2f0>
18009a48:	100ad4ba 	srli	r5,r2,18
18009a4c:	28c01f44 	addi	r3,r5,125
18009a50:	18c7883a 	add	r3,r3,r3
18009a54:	29401f04 	addi	r5,r5,124
18009a58:	003f8e06 	br	18009894 <__alt_data_end+0xf8009894>
18009a5c:	00c03f84 	movi	r3,254
18009a60:	01401f84 	movi	r5,126
18009a64:	003f8b06 	br	18009894 <__alt_data_end+0xf8009894>
18009a68:	10c00054 	ori	r3,r2,1
18009a6c:	30c00115 	stw	r3,4(r6)
18009a70:	308d883a 	add	r6,r6,r2
18009a74:	30800015 	stw	r2,0(r6)
18009a78:	003f7806 	br	1800985c <__alt_data_end+0xf800985c>

18009a7c <_lseek_r>:
18009a7c:	defffd04 	addi	sp,sp,-12
18009a80:	2805883a 	mov	r2,r5
18009a84:	dc000015 	stw	r16,0(sp)
18009a88:	04060074 	movhi	r16,6145
18009a8c:	dc400115 	stw	r17,4(sp)
18009a90:	300b883a 	mov	r5,r6
18009a94:	840f5f04 	addi	r16,r16,15740
18009a98:	2023883a 	mov	r17,r4
18009a9c:	380d883a 	mov	r6,r7
18009aa0:	1009883a 	mov	r4,r2
18009aa4:	dfc00215 	stw	ra,8(sp)
18009aa8:	80000015 	stw	zero,0(r16)
18009aac:	800d75c0 	call	1800d75c <lseek>
18009ab0:	00ffffc4 	movi	r3,-1
18009ab4:	10c00526 	beq	r2,r3,18009acc <_lseek_r+0x50>
18009ab8:	dfc00217 	ldw	ra,8(sp)
18009abc:	dc400117 	ldw	r17,4(sp)
18009ac0:	dc000017 	ldw	r16,0(sp)
18009ac4:	dec00304 	addi	sp,sp,12
18009ac8:	f800283a 	ret
18009acc:	80c00017 	ldw	r3,0(r16)
18009ad0:	183ff926 	beq	r3,zero,18009ab8 <__alt_data_end+0xf8009ab8>
18009ad4:	88c00015 	stw	r3,0(r17)
18009ad8:	003ff706 	br	18009ab8 <__alt_data_end+0xf8009ab8>

18009adc <__smakebuf_r>:
18009adc:	2880030b 	ldhu	r2,12(r5)
18009ae0:	10c0008c 	andi	r3,r2,2
18009ae4:	1800411e 	bne	r3,zero,18009bec <__smakebuf_r+0x110>
18009ae8:	deffec04 	addi	sp,sp,-80
18009aec:	dc000f15 	stw	r16,60(sp)
18009af0:	2821883a 	mov	r16,r5
18009af4:	2940038f 	ldh	r5,14(r5)
18009af8:	dc401015 	stw	r17,64(sp)
18009afc:	dfc01315 	stw	ra,76(sp)
18009b00:	dcc01215 	stw	r19,72(sp)
18009b04:	dc801115 	stw	r18,68(sp)
18009b08:	2023883a 	mov	r17,r4
18009b0c:	28001c16 	blt	r5,zero,18009b80 <__smakebuf_r+0xa4>
18009b10:	d80d883a 	mov	r6,sp
18009b14:	8009cf80 	call	18009cf8 <_fstat_r>
18009b18:	10001816 	blt	r2,zero,18009b7c <__smakebuf_r+0xa0>
18009b1c:	d8800117 	ldw	r2,4(sp)
18009b20:	00e00014 	movui	r3,32768
18009b24:	10bc000c 	andi	r2,r2,61440
18009b28:	14c80020 	cmpeqi	r19,r2,8192
18009b2c:	10c03726 	beq	r2,r3,18009c0c <__smakebuf_r+0x130>
18009b30:	80c0030b 	ldhu	r3,12(r16)
18009b34:	18c20014 	ori	r3,r3,2048
18009b38:	80c0030d 	sth	r3,12(r16)
18009b3c:	00c80004 	movi	r3,8192
18009b40:	10c0521e 	bne	r2,r3,18009c8c <__smakebuf_r+0x1b0>
18009b44:	8140038f 	ldh	r5,14(r16)
18009b48:	8809883a 	mov	r4,r17
18009b4c:	8009d540 	call	18009d54 <_isatty_r>
18009b50:	10004c26 	beq	r2,zero,18009c84 <__smakebuf_r+0x1a8>
18009b54:	8080030b 	ldhu	r2,12(r16)
18009b58:	80c010c4 	addi	r3,r16,67
18009b5c:	80c00015 	stw	r3,0(r16)
18009b60:	10800054 	ori	r2,r2,1
18009b64:	8080030d 	sth	r2,12(r16)
18009b68:	00800044 	movi	r2,1
18009b6c:	80c00415 	stw	r3,16(r16)
18009b70:	80800515 	stw	r2,20(r16)
18009b74:	04810004 	movi	r18,1024
18009b78:	00000706 	br	18009b98 <__smakebuf_r+0xbc>
18009b7c:	8080030b 	ldhu	r2,12(r16)
18009b80:	10c0200c 	andi	r3,r2,128
18009b84:	18001f1e 	bne	r3,zero,18009c04 <__smakebuf_r+0x128>
18009b88:	04810004 	movi	r18,1024
18009b8c:	10820014 	ori	r2,r2,2048
18009b90:	8080030d 	sth	r2,12(r16)
18009b94:	0027883a 	mov	r19,zero
18009b98:	900b883a 	mov	r5,r18
18009b9c:	8809883a 	mov	r4,r17
18009ba0:	80054900 	call	18005490 <_malloc_r>
18009ba4:	10002c26 	beq	r2,zero,18009c58 <__smakebuf_r+0x17c>
18009ba8:	80c0030b 	ldhu	r3,12(r16)
18009bac:	01060034 	movhi	r4,6144
18009bb0:	21126f04 	addi	r4,r4,18876
18009bb4:	89000f15 	stw	r4,60(r17)
18009bb8:	18c02014 	ori	r3,r3,128
18009bbc:	80c0030d 	sth	r3,12(r16)
18009bc0:	80800015 	stw	r2,0(r16)
18009bc4:	80800415 	stw	r2,16(r16)
18009bc8:	84800515 	stw	r18,20(r16)
18009bcc:	98001a1e 	bne	r19,zero,18009c38 <__smakebuf_r+0x15c>
18009bd0:	dfc01317 	ldw	ra,76(sp)
18009bd4:	dcc01217 	ldw	r19,72(sp)
18009bd8:	dc801117 	ldw	r18,68(sp)
18009bdc:	dc401017 	ldw	r17,64(sp)
18009be0:	dc000f17 	ldw	r16,60(sp)
18009be4:	dec01404 	addi	sp,sp,80
18009be8:	f800283a 	ret
18009bec:	288010c4 	addi	r2,r5,67
18009bf0:	28800015 	stw	r2,0(r5)
18009bf4:	28800415 	stw	r2,16(r5)
18009bf8:	00800044 	movi	r2,1
18009bfc:	28800515 	stw	r2,20(r5)
18009c00:	f800283a 	ret
18009c04:	04801004 	movi	r18,64
18009c08:	003fe006 	br	18009b8c <__alt_data_end+0xf8009b8c>
18009c0c:	81000a17 	ldw	r4,40(r16)
18009c10:	00c60034 	movhi	r3,6144
18009c14:	18de4204 	addi	r3,r3,30984
18009c18:	20ffc51e 	bne	r4,r3,18009b30 <__alt_data_end+0xf8009b30>
18009c1c:	8080030b 	ldhu	r2,12(r16)
18009c20:	04810004 	movi	r18,1024
18009c24:	84801315 	stw	r18,76(r16)
18009c28:	1484b03a 	or	r2,r2,r18
18009c2c:	8080030d 	sth	r2,12(r16)
18009c30:	0027883a 	mov	r19,zero
18009c34:	003fd806 	br	18009b98 <__alt_data_end+0xf8009b98>
18009c38:	8140038f 	ldh	r5,14(r16)
18009c3c:	8809883a 	mov	r4,r17
18009c40:	8009d540 	call	18009d54 <_isatty_r>
18009c44:	103fe226 	beq	r2,zero,18009bd0 <__alt_data_end+0xf8009bd0>
18009c48:	8080030b 	ldhu	r2,12(r16)
18009c4c:	10800054 	ori	r2,r2,1
18009c50:	8080030d 	sth	r2,12(r16)
18009c54:	003fde06 	br	18009bd0 <__alt_data_end+0xf8009bd0>
18009c58:	8080030b 	ldhu	r2,12(r16)
18009c5c:	10c0800c 	andi	r3,r2,512
18009c60:	183fdb1e 	bne	r3,zero,18009bd0 <__alt_data_end+0xf8009bd0>
18009c64:	10800094 	ori	r2,r2,2
18009c68:	80c010c4 	addi	r3,r16,67
18009c6c:	8080030d 	sth	r2,12(r16)
18009c70:	00800044 	movi	r2,1
18009c74:	80c00015 	stw	r3,0(r16)
18009c78:	80c00415 	stw	r3,16(r16)
18009c7c:	80800515 	stw	r2,20(r16)
18009c80:	003fd306 	br	18009bd0 <__alt_data_end+0xf8009bd0>
18009c84:	04810004 	movi	r18,1024
18009c88:	003fc306 	br	18009b98 <__alt_data_end+0xf8009b98>
18009c8c:	0027883a 	mov	r19,zero
18009c90:	04810004 	movi	r18,1024
18009c94:	003fc006 	br	18009b98 <__alt_data_end+0xf8009b98>

18009c98 <_read_r>:
18009c98:	defffd04 	addi	sp,sp,-12
18009c9c:	2805883a 	mov	r2,r5
18009ca0:	dc000015 	stw	r16,0(sp)
18009ca4:	04060074 	movhi	r16,6145
18009ca8:	dc400115 	stw	r17,4(sp)
18009cac:	300b883a 	mov	r5,r6
18009cb0:	840f5f04 	addi	r16,r16,15740
18009cb4:	2023883a 	mov	r17,r4
18009cb8:	380d883a 	mov	r6,r7
18009cbc:	1009883a 	mov	r4,r2
18009cc0:	dfc00215 	stw	ra,8(sp)
18009cc4:	80000015 	stw	zero,0(r16)
18009cc8:	800d9380 	call	1800d938 <read>
18009ccc:	00ffffc4 	movi	r3,-1
18009cd0:	10c00526 	beq	r2,r3,18009ce8 <_read_r+0x50>
18009cd4:	dfc00217 	ldw	ra,8(sp)
18009cd8:	dc400117 	ldw	r17,4(sp)
18009cdc:	dc000017 	ldw	r16,0(sp)
18009ce0:	dec00304 	addi	sp,sp,12
18009ce4:	f800283a 	ret
18009ce8:	80c00017 	ldw	r3,0(r16)
18009cec:	183ff926 	beq	r3,zero,18009cd4 <__alt_data_end+0xf8009cd4>
18009cf0:	88c00015 	stw	r3,0(r17)
18009cf4:	003ff706 	br	18009cd4 <__alt_data_end+0xf8009cd4>

18009cf8 <_fstat_r>:
18009cf8:	defffd04 	addi	sp,sp,-12
18009cfc:	2805883a 	mov	r2,r5
18009d00:	dc000015 	stw	r16,0(sp)
18009d04:	04060074 	movhi	r16,6145
18009d08:	dc400115 	stw	r17,4(sp)
18009d0c:	840f5f04 	addi	r16,r16,15740
18009d10:	2023883a 	mov	r17,r4
18009d14:	300b883a 	mov	r5,r6
18009d18:	1009883a 	mov	r4,r2
18009d1c:	dfc00215 	stw	ra,8(sp)
18009d20:	80000015 	stw	zero,0(r16)
18009d24:	800d4940 	call	1800d494 <fstat>
18009d28:	00ffffc4 	movi	r3,-1
18009d2c:	10c00526 	beq	r2,r3,18009d44 <_fstat_r+0x4c>
18009d30:	dfc00217 	ldw	ra,8(sp)
18009d34:	dc400117 	ldw	r17,4(sp)
18009d38:	dc000017 	ldw	r16,0(sp)
18009d3c:	dec00304 	addi	sp,sp,12
18009d40:	f800283a 	ret
18009d44:	80c00017 	ldw	r3,0(r16)
18009d48:	183ff926 	beq	r3,zero,18009d30 <__alt_data_end+0xf8009d30>
18009d4c:	88c00015 	stw	r3,0(r17)
18009d50:	003ff706 	br	18009d30 <__alt_data_end+0xf8009d30>

18009d54 <_isatty_r>:
18009d54:	defffd04 	addi	sp,sp,-12
18009d58:	dc000015 	stw	r16,0(sp)
18009d5c:	04060074 	movhi	r16,6145
18009d60:	dc400115 	stw	r17,4(sp)
18009d64:	840f5f04 	addi	r16,r16,15740
18009d68:	2023883a 	mov	r17,r4
18009d6c:	2809883a 	mov	r4,r5
18009d70:	dfc00215 	stw	ra,8(sp)
18009d74:	80000015 	stw	zero,0(r16)
18009d78:	800d5880 	call	1800d588 <isatty>
18009d7c:	00ffffc4 	movi	r3,-1
18009d80:	10c00526 	beq	r2,r3,18009d98 <_isatty_r+0x44>
18009d84:	dfc00217 	ldw	ra,8(sp)
18009d88:	dc400117 	ldw	r17,4(sp)
18009d8c:	dc000017 	ldw	r16,0(sp)
18009d90:	dec00304 	addi	sp,sp,12
18009d94:	f800283a 	ret
18009d98:	80c00017 	ldw	r3,0(r16)
18009d9c:	183ff926 	beq	r3,zero,18009d84 <__alt_data_end+0xf8009d84>
18009da0:	88c00015 	stw	r3,0(r17)
18009da4:	003ff706 	br	18009d84 <__alt_data_end+0xf8009d84>

18009da8 <__muldi3>:
18009da8:	defff604 	addi	sp,sp,-40
18009dac:	dd800615 	stw	r22,24(sp)
18009db0:	dd400515 	stw	r21,20(sp)
18009db4:	dc400115 	stw	r17,4(sp)
18009db8:	357fffcc 	andi	r21,r6,65535
18009dbc:	2022d43a 	srli	r17,r4,16
18009dc0:	25bfffcc 	andi	r22,r4,65535
18009dc4:	dcc00315 	stw	r19,12(sp)
18009dc8:	dc800215 	stw	r18,8(sp)
18009dcc:	2027883a 	mov	r19,r4
18009dd0:	2825883a 	mov	r18,r5
18009dd4:	b009883a 	mov	r4,r22
18009dd8:	a80b883a 	mov	r5,r21
18009ddc:	dfc00915 	stw	ra,36(sp)
18009de0:	df000815 	stw	fp,32(sp)
18009de4:	ddc00715 	stw	r23,28(sp)
18009de8:	3839883a 	mov	fp,r7
18009dec:	302ed43a 	srli	r23,r6,16
18009df0:	dd000415 	stw	r20,16(sp)
18009df4:	dc000015 	stw	r16,0(sp)
18009df8:	3029883a 	mov	r20,r6
18009dfc:	8000b740 	call	18000b74 <__mulsi3>
18009e00:	a80b883a 	mov	r5,r21
18009e04:	8809883a 	mov	r4,r17
18009e08:	1021883a 	mov	r16,r2
18009e0c:	8000b740 	call	18000b74 <__mulsi3>
18009e10:	8809883a 	mov	r4,r17
18009e14:	b80b883a 	mov	r5,r23
18009e18:	102b883a 	mov	r21,r2
18009e1c:	8000b740 	call	18000b74 <__mulsi3>
18009e20:	b80b883a 	mov	r5,r23
18009e24:	b009883a 	mov	r4,r22
18009e28:	1023883a 	mov	r17,r2
18009e2c:	8000b740 	call	18000b74 <__mulsi3>
18009e30:	8006d43a 	srli	r3,r16,16
18009e34:	1545883a 	add	r2,r2,r21
18009e38:	1885883a 	add	r2,r3,r2
18009e3c:	1540022e 	bgeu	r2,r21,18009e48 <__muldi3+0xa0>
18009e40:	00c00074 	movhi	r3,1
18009e44:	88e3883a 	add	r17,r17,r3
18009e48:	1006d43a 	srli	r3,r2,16
18009e4c:	1004943a 	slli	r2,r2,16
18009e50:	e00b883a 	mov	r5,fp
18009e54:	9809883a 	mov	r4,r19
18009e58:	843fffcc 	andi	r16,r16,65535
18009e5c:	1c63883a 	add	r17,r3,r17
18009e60:	1421883a 	add	r16,r2,r16
18009e64:	8000b740 	call	18000b74 <__mulsi3>
18009e68:	900b883a 	mov	r5,r18
18009e6c:	a009883a 	mov	r4,r20
18009e70:	1027883a 	mov	r19,r2
18009e74:	8000b740 	call	18000b74 <__mulsi3>
18009e78:	9885883a 	add	r2,r19,r2
18009e7c:	1447883a 	add	r3,r2,r17
18009e80:	8005883a 	mov	r2,r16
18009e84:	dfc00917 	ldw	ra,36(sp)
18009e88:	df000817 	ldw	fp,32(sp)
18009e8c:	ddc00717 	ldw	r23,28(sp)
18009e90:	dd800617 	ldw	r22,24(sp)
18009e94:	dd400517 	ldw	r21,20(sp)
18009e98:	dd000417 	ldw	r20,16(sp)
18009e9c:	dcc00317 	ldw	r19,12(sp)
18009ea0:	dc800217 	ldw	r18,8(sp)
18009ea4:	dc400117 	ldw	r17,4(sp)
18009ea8:	dc000017 	ldw	r16,0(sp)
18009eac:	dec00a04 	addi	sp,sp,40
18009eb0:	f800283a 	ret

18009eb4 <__udivdi3>:
18009eb4:	defff404 	addi	sp,sp,-48
18009eb8:	dcc00515 	stw	r19,20(sp)
18009ebc:	dc000215 	stw	r16,8(sp)
18009ec0:	dfc00b15 	stw	ra,44(sp)
18009ec4:	df000a15 	stw	fp,40(sp)
18009ec8:	ddc00915 	stw	r23,36(sp)
18009ecc:	dd800815 	stw	r22,32(sp)
18009ed0:	dd400715 	stw	r21,28(sp)
18009ed4:	dd000615 	stw	r20,24(sp)
18009ed8:	dc800415 	stw	r18,16(sp)
18009edc:	dc400315 	stw	r17,12(sp)
18009ee0:	2027883a 	mov	r19,r4
18009ee4:	2821883a 	mov	r16,r5
18009ee8:	3800461e 	bne	r7,zero,1800a004 <__udivdi3+0x150>
18009eec:	3023883a 	mov	r17,r6
18009ef0:	2025883a 	mov	r18,r4
18009ef4:	2980572e 	bgeu	r5,r6,1800a054 <__udivdi3+0x1a0>
18009ef8:	00bfffd4 	movui	r2,65535
18009efc:	282d883a 	mov	r22,r5
18009f00:	1180b236 	bltu	r2,r6,1800a1cc <__udivdi3+0x318>
18009f04:	00803fc4 	movi	r2,255
18009f08:	1185803a 	cmpltu	r2,r2,r6
18009f0c:	100490fa 	slli	r2,r2,3
18009f10:	3086d83a 	srl	r3,r6,r2
18009f14:	01060074 	movhi	r4,6145
18009f18:	213f6a04 	addi	r4,r4,-600
18009f1c:	20c7883a 	add	r3,r4,r3
18009f20:	18c00003 	ldbu	r3,0(r3)
18009f24:	1885883a 	add	r2,r3,r2
18009f28:	00c00804 	movi	r3,32
18009f2c:	1887c83a 	sub	r3,r3,r2
18009f30:	18000526 	beq	r3,zero,18009f48 <__udivdi3+0x94>
18009f34:	80e0983a 	sll	r16,r16,r3
18009f38:	9884d83a 	srl	r2,r19,r2
18009f3c:	30e2983a 	sll	r17,r6,r3
18009f40:	98e4983a 	sll	r18,r19,r3
18009f44:	142cb03a 	or	r22,r2,r16
18009f48:	882ad43a 	srli	r21,r17,16
18009f4c:	b009883a 	mov	r4,r22
18009f50:	8d3fffcc 	andi	r20,r17,65535
18009f54:	a80b883a 	mov	r5,r21
18009f58:	8000b1c0 	call	18000b1c <__umodsi3>
18009f5c:	b009883a 	mov	r4,r22
18009f60:	a80b883a 	mov	r5,r21
18009f64:	1027883a 	mov	r19,r2
18009f68:	8000ab80 	call	18000ab8 <__udivsi3>
18009f6c:	100b883a 	mov	r5,r2
18009f70:	a009883a 	mov	r4,r20
18009f74:	102d883a 	mov	r22,r2
18009f78:	8000b740 	call	18000b74 <__mulsi3>
18009f7c:	9826943a 	slli	r19,r19,16
18009f80:	9006d43a 	srli	r3,r18,16
18009f84:	1cc6b03a 	or	r3,r3,r19
18009f88:	1880052e 	bgeu	r3,r2,18009fa0 <__udivdi3+0xec>
18009f8c:	1c47883a 	add	r3,r3,r17
18009f90:	b13fffc4 	addi	r4,r22,-1
18009f94:	1c400136 	bltu	r3,r17,18009f9c <__udivdi3+0xe8>
18009f98:	18814236 	bltu	r3,r2,1800a4a4 <__udivdi3+0x5f0>
18009f9c:	202d883a 	mov	r22,r4
18009fa0:	18a1c83a 	sub	r16,r3,r2
18009fa4:	8009883a 	mov	r4,r16
18009fa8:	a80b883a 	mov	r5,r21
18009fac:	8000b1c0 	call	18000b1c <__umodsi3>
18009fb0:	1027883a 	mov	r19,r2
18009fb4:	8009883a 	mov	r4,r16
18009fb8:	a80b883a 	mov	r5,r21
18009fbc:	9826943a 	slli	r19,r19,16
18009fc0:	8000ab80 	call	18000ab8 <__udivsi3>
18009fc4:	100b883a 	mov	r5,r2
18009fc8:	a009883a 	mov	r4,r20
18009fcc:	94bfffcc 	andi	r18,r18,65535
18009fd0:	1021883a 	mov	r16,r2
18009fd4:	94e4b03a 	or	r18,r18,r19
18009fd8:	8000b740 	call	18000b74 <__mulsi3>
18009fdc:	9080052e 	bgeu	r18,r2,18009ff4 <__udivdi3+0x140>
18009fe0:	8ca5883a 	add	r18,r17,r18
18009fe4:	80ffffc4 	addi	r3,r16,-1
18009fe8:	94410c36 	bltu	r18,r17,1800a41c <__udivdi3+0x568>
18009fec:	90810b2e 	bgeu	r18,r2,1800a41c <__udivdi3+0x568>
18009ff0:	843fff84 	addi	r16,r16,-2
18009ff4:	b004943a 	slli	r2,r22,16
18009ff8:	0007883a 	mov	r3,zero
18009ffc:	1404b03a 	or	r2,r2,r16
1800a000:	00005e06 	br	1800a17c <__udivdi3+0x2c8>
1800a004:	29c05b36 	bltu	r5,r7,1800a174 <__udivdi3+0x2c0>
1800a008:	00bfffd4 	movui	r2,65535
1800a00c:	11c0672e 	bgeu	r2,r7,1800a1ac <__udivdi3+0x2f8>
1800a010:	00804034 	movhi	r2,256
1800a014:	10bfffc4 	addi	r2,r2,-1
1800a018:	11c10a36 	bltu	r2,r7,1800a444 <__udivdi3+0x590>
1800a01c:	00800404 	movi	r2,16
1800a020:	3886d83a 	srl	r3,r7,r2
1800a024:	01060074 	movhi	r4,6145
1800a028:	213f6a04 	addi	r4,r4,-600
1800a02c:	20c7883a 	add	r3,r4,r3
1800a030:	18c00003 	ldbu	r3,0(r3)
1800a034:	05c00804 	movi	r23,32
1800a038:	1885883a 	add	r2,r3,r2
1800a03c:	b8afc83a 	sub	r23,r23,r2
1800a040:	b800671e 	bne	r23,zero,1800a1e0 <__udivdi3+0x32c>
1800a044:	3c010536 	bltu	r7,r16,1800a45c <__udivdi3+0x5a8>
1800a048:	9985403a 	cmpgeu	r2,r19,r6
1800a04c:	0007883a 	mov	r3,zero
1800a050:	00004a06 	br	1800a17c <__udivdi3+0x2c8>
1800a054:	3000041e 	bne	r6,zero,1800a068 <__udivdi3+0x1b4>
1800a058:	000b883a 	mov	r5,zero
1800a05c:	01000044 	movi	r4,1
1800a060:	8000ab80 	call	18000ab8 <__udivsi3>
1800a064:	1023883a 	mov	r17,r2
1800a068:	00bfffd4 	movui	r2,65535
1800a06c:	1440532e 	bgeu	r2,r17,1800a1bc <__udivdi3+0x308>
1800a070:	00804034 	movhi	r2,256
1800a074:	10bfffc4 	addi	r2,r2,-1
1800a078:	1440f436 	bltu	r2,r17,1800a44c <__udivdi3+0x598>
1800a07c:	00800404 	movi	r2,16
1800a080:	8886d83a 	srl	r3,r17,r2
1800a084:	01060074 	movhi	r4,6145
1800a088:	213f6a04 	addi	r4,r4,-600
1800a08c:	20c7883a 	add	r3,r4,r3
1800a090:	18c00003 	ldbu	r3,0(r3)
1800a094:	1885883a 	add	r2,r3,r2
1800a098:	00c00804 	movi	r3,32
1800a09c:	1887c83a 	sub	r3,r3,r2
1800a0a0:	1800a51e 	bne	r3,zero,1800a338 <__udivdi3+0x484>
1800a0a4:	882ad43a 	srli	r21,r17,16
1800a0a8:	8461c83a 	sub	r16,r16,r17
1800a0ac:	8d3fffcc 	andi	r20,r17,65535
1800a0b0:	00c00044 	movi	r3,1
1800a0b4:	a80b883a 	mov	r5,r21
1800a0b8:	8009883a 	mov	r4,r16
1800a0bc:	d8c00115 	stw	r3,4(sp)
1800a0c0:	8000b1c0 	call	18000b1c <__umodsi3>
1800a0c4:	a80b883a 	mov	r5,r21
1800a0c8:	8009883a 	mov	r4,r16
1800a0cc:	1027883a 	mov	r19,r2
1800a0d0:	8000ab80 	call	18000ab8 <__udivsi3>
1800a0d4:	a00b883a 	mov	r5,r20
1800a0d8:	1009883a 	mov	r4,r2
1800a0dc:	102d883a 	mov	r22,r2
1800a0e0:	8000b740 	call	18000b74 <__mulsi3>
1800a0e4:	9826943a 	slli	r19,r19,16
1800a0e8:	900ed43a 	srli	r7,r18,16
1800a0ec:	d8c00117 	ldw	r3,4(sp)
1800a0f0:	3cceb03a 	or	r7,r7,r19
1800a0f4:	3880052e 	bgeu	r7,r2,1800a10c <__udivdi3+0x258>
1800a0f8:	3c4f883a 	add	r7,r7,r17
1800a0fc:	b13fffc4 	addi	r4,r22,-1
1800a100:	3c400136 	bltu	r7,r17,1800a108 <__udivdi3+0x254>
1800a104:	3880e436 	bltu	r7,r2,1800a498 <__udivdi3+0x5e4>
1800a108:	202d883a 	mov	r22,r4
1800a10c:	38a1c83a 	sub	r16,r7,r2
1800a110:	8009883a 	mov	r4,r16
1800a114:	a80b883a 	mov	r5,r21
1800a118:	d8c00115 	stw	r3,4(sp)
1800a11c:	8000b1c0 	call	18000b1c <__umodsi3>
1800a120:	1027883a 	mov	r19,r2
1800a124:	8009883a 	mov	r4,r16
1800a128:	a80b883a 	mov	r5,r21
1800a12c:	9826943a 	slli	r19,r19,16
1800a130:	8000ab80 	call	18000ab8 <__udivsi3>
1800a134:	a00b883a 	mov	r5,r20
1800a138:	1009883a 	mov	r4,r2
1800a13c:	94bfffcc 	andi	r18,r18,65535
1800a140:	1021883a 	mov	r16,r2
1800a144:	94e4b03a 	or	r18,r18,r19
1800a148:	8000b740 	call	18000b74 <__mulsi3>
1800a14c:	d8c00117 	ldw	r3,4(sp)
1800a150:	9080052e 	bgeu	r18,r2,1800a168 <__udivdi3+0x2b4>
1800a154:	8ca5883a 	add	r18,r17,r18
1800a158:	813fffc4 	addi	r4,r16,-1
1800a15c:	9440ad36 	bltu	r18,r17,1800a414 <__udivdi3+0x560>
1800a160:	9080ac2e 	bgeu	r18,r2,1800a414 <__udivdi3+0x560>
1800a164:	843fff84 	addi	r16,r16,-2
1800a168:	b004943a 	slli	r2,r22,16
1800a16c:	1404b03a 	or	r2,r2,r16
1800a170:	00000206 	br	1800a17c <__udivdi3+0x2c8>
1800a174:	0007883a 	mov	r3,zero
1800a178:	0005883a 	mov	r2,zero
1800a17c:	dfc00b17 	ldw	ra,44(sp)
1800a180:	df000a17 	ldw	fp,40(sp)
1800a184:	ddc00917 	ldw	r23,36(sp)
1800a188:	dd800817 	ldw	r22,32(sp)
1800a18c:	dd400717 	ldw	r21,28(sp)
1800a190:	dd000617 	ldw	r20,24(sp)
1800a194:	dcc00517 	ldw	r19,20(sp)
1800a198:	dc800417 	ldw	r18,16(sp)
1800a19c:	dc400317 	ldw	r17,12(sp)
1800a1a0:	dc000217 	ldw	r16,8(sp)
1800a1a4:	dec00c04 	addi	sp,sp,48
1800a1a8:	f800283a 	ret
1800a1ac:	00803fc4 	movi	r2,255
1800a1b0:	11c5803a 	cmpltu	r2,r2,r7
1800a1b4:	100490fa 	slli	r2,r2,3
1800a1b8:	003f9906 	br	1800a020 <__alt_data_end+0xf800a020>
1800a1bc:	00803fc4 	movi	r2,255
1800a1c0:	1445803a 	cmpltu	r2,r2,r17
1800a1c4:	100490fa 	slli	r2,r2,3
1800a1c8:	003fad06 	br	1800a080 <__alt_data_end+0xf800a080>
1800a1cc:	00804034 	movhi	r2,256
1800a1d0:	10bfffc4 	addi	r2,r2,-1
1800a1d4:	11809f36 	bltu	r2,r6,1800a454 <__udivdi3+0x5a0>
1800a1d8:	00800404 	movi	r2,16
1800a1dc:	003f4c06 	br	18009f10 <__alt_data_end+0xf8009f10>
1800a1e0:	3dce983a 	sll	r7,r7,r23
1800a1e4:	30b8d83a 	srl	fp,r6,r2
1800a1e8:	80a2d83a 	srl	r17,r16,r2
1800a1ec:	35cc983a 	sll	r6,r6,r23
1800a1f0:	3f38b03a 	or	fp,r7,fp
1800a1f4:	e024d43a 	srli	r18,fp,16
1800a1f8:	9884d83a 	srl	r2,r19,r2
1800a1fc:	85e0983a 	sll	r16,r16,r23
1800a200:	8809883a 	mov	r4,r17
1800a204:	900b883a 	mov	r5,r18
1800a208:	d9800015 	stw	r6,0(sp)
1800a20c:	1420b03a 	or	r16,r2,r16
1800a210:	8000b1c0 	call	18000b1c <__umodsi3>
1800a214:	900b883a 	mov	r5,r18
1800a218:	8809883a 	mov	r4,r17
1800a21c:	1029883a 	mov	r20,r2
1800a220:	e5bfffcc 	andi	r22,fp,65535
1800a224:	8000ab80 	call	18000ab8 <__udivsi3>
1800a228:	100b883a 	mov	r5,r2
1800a22c:	b009883a 	mov	r4,r22
1800a230:	102b883a 	mov	r21,r2
1800a234:	8000b740 	call	18000b74 <__mulsi3>
1800a238:	a028943a 	slli	r20,r20,16
1800a23c:	8006d43a 	srli	r3,r16,16
1800a240:	1d06b03a 	or	r3,r3,r20
1800a244:	1880042e 	bgeu	r3,r2,1800a258 <__udivdi3+0x3a4>
1800a248:	1f07883a 	add	r3,r3,fp
1800a24c:	a93fffc4 	addi	r4,r21,-1
1800a250:	1f00892e 	bgeu	r3,fp,1800a478 <__udivdi3+0x5c4>
1800a254:	202b883a 	mov	r21,r4
1800a258:	18a3c83a 	sub	r17,r3,r2
1800a25c:	8809883a 	mov	r4,r17
1800a260:	900b883a 	mov	r5,r18
1800a264:	8000b1c0 	call	18000b1c <__umodsi3>
1800a268:	1029883a 	mov	r20,r2
1800a26c:	8809883a 	mov	r4,r17
1800a270:	900b883a 	mov	r5,r18
1800a274:	a028943a 	slli	r20,r20,16
1800a278:	8000ab80 	call	18000ab8 <__udivsi3>
1800a27c:	100b883a 	mov	r5,r2
1800a280:	b009883a 	mov	r4,r22
1800a284:	843fffcc 	andi	r16,r16,65535
1800a288:	1023883a 	mov	r17,r2
1800a28c:	8520b03a 	or	r16,r16,r20
1800a290:	8000b740 	call	18000b74 <__mulsi3>
1800a294:	8080042e 	bgeu	r16,r2,1800a2a8 <__udivdi3+0x3f4>
1800a298:	8721883a 	add	r16,r16,fp
1800a29c:	88ffffc4 	addi	r3,r17,-1
1800a2a0:	8700712e 	bgeu	r16,fp,1800a468 <__udivdi3+0x5b4>
1800a2a4:	1823883a 	mov	r17,r3
1800a2a8:	a80e943a 	slli	r7,r21,16
1800a2ac:	d8c00017 	ldw	r3,0(sp)
1800a2b0:	80a1c83a 	sub	r16,r16,r2
1800a2b4:	3c64b03a 	or	r18,r7,r17
1800a2b8:	1d3fffcc 	andi	r20,r3,65535
1800a2bc:	9022d43a 	srli	r17,r18,16
1800a2c0:	95bfffcc 	andi	r22,r18,65535
1800a2c4:	a00b883a 	mov	r5,r20
1800a2c8:	b009883a 	mov	r4,r22
1800a2cc:	182ad43a 	srli	r21,r3,16
1800a2d0:	8000b740 	call	18000b74 <__mulsi3>
1800a2d4:	a00b883a 	mov	r5,r20
1800a2d8:	8809883a 	mov	r4,r17
1800a2dc:	1039883a 	mov	fp,r2
1800a2e0:	8000b740 	call	18000b74 <__mulsi3>
1800a2e4:	8809883a 	mov	r4,r17
1800a2e8:	a80b883a 	mov	r5,r21
1800a2ec:	1029883a 	mov	r20,r2
1800a2f0:	8000b740 	call	18000b74 <__mulsi3>
1800a2f4:	a80b883a 	mov	r5,r21
1800a2f8:	b009883a 	mov	r4,r22
1800a2fc:	1023883a 	mov	r17,r2
1800a300:	8000b740 	call	18000b74 <__mulsi3>
1800a304:	e006d43a 	srli	r3,fp,16
1800a308:	1505883a 	add	r2,r2,r20
1800a30c:	1887883a 	add	r3,r3,r2
1800a310:	1d00022e 	bgeu	r3,r20,1800a31c <__udivdi3+0x468>
1800a314:	00800074 	movhi	r2,1
1800a318:	88a3883a 	add	r17,r17,r2
1800a31c:	1804d43a 	srli	r2,r3,16
1800a320:	1463883a 	add	r17,r2,r17
1800a324:	84404436 	bltu	r16,r17,1800a438 <__udivdi3+0x584>
1800a328:	84403e26 	beq	r16,r17,1800a424 <__udivdi3+0x570>
1800a32c:	9005883a 	mov	r2,r18
1800a330:	0007883a 	mov	r3,zero
1800a334:	003f9106 	br	1800a17c <__alt_data_end+0xf800a17c>
1800a338:	88e2983a 	sll	r17,r17,r3
1800a33c:	80aed83a 	srl	r23,r16,r2
1800a340:	80e0983a 	sll	r16,r16,r3
1800a344:	882ad43a 	srli	r21,r17,16
1800a348:	9884d83a 	srl	r2,r19,r2
1800a34c:	b809883a 	mov	r4,r23
1800a350:	a80b883a 	mov	r5,r21
1800a354:	98e4983a 	sll	r18,r19,r3
1800a358:	142cb03a 	or	r22,r2,r16
1800a35c:	8000b1c0 	call	18000b1c <__umodsi3>
1800a360:	b809883a 	mov	r4,r23
1800a364:	a80b883a 	mov	r5,r21
1800a368:	1027883a 	mov	r19,r2
1800a36c:	8d3fffcc 	andi	r20,r17,65535
1800a370:	8000ab80 	call	18000ab8 <__udivsi3>
1800a374:	a009883a 	mov	r4,r20
1800a378:	100b883a 	mov	r5,r2
1800a37c:	102f883a 	mov	r23,r2
1800a380:	8000b740 	call	18000b74 <__mulsi3>
1800a384:	9826943a 	slli	r19,r19,16
1800a388:	b008d43a 	srli	r4,r22,16
1800a38c:	24c8b03a 	or	r4,r4,r19
1800a390:	2080062e 	bgeu	r4,r2,1800a3ac <__udivdi3+0x4f8>
1800a394:	2449883a 	add	r4,r4,r17
1800a398:	b8ffffc4 	addi	r3,r23,-1
1800a39c:	24403c36 	bltu	r4,r17,1800a490 <__udivdi3+0x5dc>
1800a3a0:	20803b2e 	bgeu	r4,r2,1800a490 <__udivdi3+0x5dc>
1800a3a4:	bdffff84 	addi	r23,r23,-2
1800a3a8:	2449883a 	add	r4,r4,r17
1800a3ac:	20a1c83a 	sub	r16,r4,r2
1800a3b0:	a80b883a 	mov	r5,r21
1800a3b4:	8009883a 	mov	r4,r16
1800a3b8:	8000b1c0 	call	18000b1c <__umodsi3>
1800a3bc:	a80b883a 	mov	r5,r21
1800a3c0:	8009883a 	mov	r4,r16
1800a3c4:	1027883a 	mov	r19,r2
1800a3c8:	8000ab80 	call	18000ab8 <__udivsi3>
1800a3cc:	a009883a 	mov	r4,r20
1800a3d0:	100b883a 	mov	r5,r2
1800a3d4:	9826943a 	slli	r19,r19,16
1800a3d8:	1039883a 	mov	fp,r2
1800a3dc:	8000b740 	call	18000b74 <__mulsi3>
1800a3e0:	b13fffcc 	andi	r4,r22,65535
1800a3e4:	24c8b03a 	or	r4,r4,r19
1800a3e8:	2080062e 	bgeu	r4,r2,1800a404 <__udivdi3+0x550>
1800a3ec:	2449883a 	add	r4,r4,r17
1800a3f0:	e0ffffc4 	addi	r3,fp,-1
1800a3f4:	24402436 	bltu	r4,r17,1800a488 <__udivdi3+0x5d4>
1800a3f8:	2080232e 	bgeu	r4,r2,1800a488 <__udivdi3+0x5d4>
1800a3fc:	e73fff84 	addi	fp,fp,-2
1800a400:	2449883a 	add	r4,r4,r17
1800a404:	b82e943a 	slli	r23,r23,16
1800a408:	20a1c83a 	sub	r16,r4,r2
1800a40c:	bf06b03a 	or	r3,r23,fp
1800a410:	003f2806 	br	1800a0b4 <__alt_data_end+0xf800a0b4>
1800a414:	2021883a 	mov	r16,r4
1800a418:	003f5306 	br	1800a168 <__alt_data_end+0xf800a168>
1800a41c:	1821883a 	mov	r16,r3
1800a420:	003ef406 	br	18009ff4 <__alt_data_end+0xf8009ff4>
1800a424:	1806943a 	slli	r3,r3,16
1800a428:	9de6983a 	sll	r19,r19,r23
1800a42c:	e73fffcc 	andi	fp,fp,65535
1800a430:	1f07883a 	add	r3,r3,fp
1800a434:	98ffbd2e 	bgeu	r19,r3,1800a32c <__alt_data_end+0xf800a32c>
1800a438:	90bfffc4 	addi	r2,r18,-1
1800a43c:	0007883a 	mov	r3,zero
1800a440:	003f4e06 	br	1800a17c <__alt_data_end+0xf800a17c>
1800a444:	00800604 	movi	r2,24
1800a448:	003ef506 	br	1800a020 <__alt_data_end+0xf800a020>
1800a44c:	00800604 	movi	r2,24
1800a450:	003f0b06 	br	1800a080 <__alt_data_end+0xf800a080>
1800a454:	00800604 	movi	r2,24
1800a458:	003ead06 	br	18009f10 <__alt_data_end+0xf8009f10>
1800a45c:	0007883a 	mov	r3,zero
1800a460:	00800044 	movi	r2,1
1800a464:	003f4506 	br	1800a17c <__alt_data_end+0xf800a17c>
1800a468:	80bf8e2e 	bgeu	r16,r2,1800a2a4 <__alt_data_end+0xf800a2a4>
1800a46c:	8c7fff84 	addi	r17,r17,-2
1800a470:	8721883a 	add	r16,r16,fp
1800a474:	003f8c06 	br	1800a2a8 <__alt_data_end+0xf800a2a8>
1800a478:	18bf762e 	bgeu	r3,r2,1800a254 <__alt_data_end+0xf800a254>
1800a47c:	ad7fff84 	addi	r21,r21,-2
1800a480:	1f07883a 	add	r3,r3,fp
1800a484:	003f7406 	br	1800a258 <__alt_data_end+0xf800a258>
1800a488:	1839883a 	mov	fp,r3
1800a48c:	003fdd06 	br	1800a404 <__alt_data_end+0xf800a404>
1800a490:	182f883a 	mov	r23,r3
1800a494:	003fc506 	br	1800a3ac <__alt_data_end+0xf800a3ac>
1800a498:	b5bfff84 	addi	r22,r22,-2
1800a49c:	3c4f883a 	add	r7,r7,r17
1800a4a0:	003f1a06 	br	1800a10c <__alt_data_end+0xf800a10c>
1800a4a4:	b5bfff84 	addi	r22,r22,-2
1800a4a8:	1c47883a 	add	r3,r3,r17
1800a4ac:	003ebc06 	br	18009fa0 <__alt_data_end+0xf8009fa0>

1800a4b0 <__umoddi3>:
1800a4b0:	defff304 	addi	sp,sp,-52
1800a4b4:	df000b15 	stw	fp,44(sp)
1800a4b8:	dc400415 	stw	r17,16(sp)
1800a4bc:	dc000315 	stw	r16,12(sp)
1800a4c0:	dfc00c15 	stw	ra,48(sp)
1800a4c4:	ddc00a15 	stw	r23,40(sp)
1800a4c8:	dd800915 	stw	r22,36(sp)
1800a4cc:	dd400815 	stw	r21,32(sp)
1800a4d0:	dd000715 	stw	r20,28(sp)
1800a4d4:	dcc00615 	stw	r19,24(sp)
1800a4d8:	dc800515 	stw	r18,20(sp)
1800a4dc:	2021883a 	mov	r16,r4
1800a4e0:	2823883a 	mov	r17,r5
1800a4e4:	2839883a 	mov	fp,r5
1800a4e8:	3800401e 	bne	r7,zero,1800a5ec <__umoddi3+0x13c>
1800a4ec:	3027883a 	mov	r19,r6
1800a4f0:	2029883a 	mov	r20,r4
1800a4f4:	2980552e 	bgeu	r5,r6,1800a64c <__umoddi3+0x19c>
1800a4f8:	00bfffd4 	movui	r2,65535
1800a4fc:	1180a236 	bltu	r2,r6,1800a788 <__umoddi3+0x2d8>
1800a500:	01003fc4 	movi	r4,255
1800a504:	2189803a 	cmpltu	r4,r4,r6
1800a508:	200890fa 	slli	r4,r4,3
1800a50c:	3104d83a 	srl	r2,r6,r4
1800a510:	00c60074 	movhi	r3,6145
1800a514:	18ff6a04 	addi	r3,r3,-600
1800a518:	1885883a 	add	r2,r3,r2
1800a51c:	10c00003 	ldbu	r3,0(r2)
1800a520:	00800804 	movi	r2,32
1800a524:	1909883a 	add	r4,r3,r4
1800a528:	1125c83a 	sub	r18,r2,r4
1800a52c:	90000526 	beq	r18,zero,1800a544 <__umoddi3+0x94>
1800a530:	8ca2983a 	sll	r17,r17,r18
1800a534:	8108d83a 	srl	r4,r16,r4
1800a538:	34a6983a 	sll	r19,r6,r18
1800a53c:	84a8983a 	sll	r20,r16,r18
1800a540:	2478b03a 	or	fp,r4,r17
1800a544:	982cd43a 	srli	r22,r19,16
1800a548:	e009883a 	mov	r4,fp
1800a54c:	9dffffcc 	andi	r23,r19,65535
1800a550:	b00b883a 	mov	r5,r22
1800a554:	8000b1c0 	call	18000b1c <__umodsi3>
1800a558:	b00b883a 	mov	r5,r22
1800a55c:	e009883a 	mov	r4,fp
1800a560:	102b883a 	mov	r21,r2
1800a564:	8000ab80 	call	18000ab8 <__udivsi3>
1800a568:	100b883a 	mov	r5,r2
1800a56c:	b809883a 	mov	r4,r23
1800a570:	8000b740 	call	18000b74 <__mulsi3>
1800a574:	a82a943a 	slli	r21,r21,16
1800a578:	a006d43a 	srli	r3,r20,16
1800a57c:	1d46b03a 	or	r3,r3,r21
1800a580:	1880032e 	bgeu	r3,r2,1800a590 <__umoddi3+0xe0>
1800a584:	1cc7883a 	add	r3,r3,r19
1800a588:	1cc00136 	bltu	r3,r19,1800a590 <__umoddi3+0xe0>
1800a58c:	18813136 	bltu	r3,r2,1800aa54 <__umoddi3+0x5a4>
1800a590:	18a1c83a 	sub	r16,r3,r2
1800a594:	b00b883a 	mov	r5,r22
1800a598:	8009883a 	mov	r4,r16
1800a59c:	8000b1c0 	call	18000b1c <__umodsi3>
1800a5a0:	b00b883a 	mov	r5,r22
1800a5a4:	8009883a 	mov	r4,r16
1800a5a8:	1023883a 	mov	r17,r2
1800a5ac:	8000ab80 	call	18000ab8 <__udivsi3>
1800a5b0:	100b883a 	mov	r5,r2
1800a5b4:	b809883a 	mov	r4,r23
1800a5b8:	8822943a 	slli	r17,r17,16
1800a5bc:	8000b740 	call	18000b74 <__mulsi3>
1800a5c0:	a0ffffcc 	andi	r3,r20,65535
1800a5c4:	1c46b03a 	or	r3,r3,r17
1800a5c8:	1880042e 	bgeu	r3,r2,1800a5dc <__umoddi3+0x12c>
1800a5cc:	1cc7883a 	add	r3,r3,r19
1800a5d0:	1cc00236 	bltu	r3,r19,1800a5dc <__umoddi3+0x12c>
1800a5d4:	1880012e 	bgeu	r3,r2,1800a5dc <__umoddi3+0x12c>
1800a5d8:	1cc7883a 	add	r3,r3,r19
1800a5dc:	1885c83a 	sub	r2,r3,r2
1800a5e0:	1484d83a 	srl	r2,r2,r18
1800a5e4:	0007883a 	mov	r3,zero
1800a5e8:	00005306 	br	1800a738 <__umoddi3+0x288>
1800a5ec:	29c05036 	bltu	r5,r7,1800a730 <__umoddi3+0x280>
1800a5f0:	00bfffd4 	movui	r2,65535
1800a5f4:	11c05c2e 	bgeu	r2,r7,1800a768 <__umoddi3+0x2b8>
1800a5f8:	00804034 	movhi	r2,256
1800a5fc:	10bfffc4 	addi	r2,r2,-1
1800a600:	11c10636 	bltu	r2,r7,1800aa1c <__umoddi3+0x56c>
1800a604:	01000404 	movi	r4,16
1800a608:	3904d83a 	srl	r2,r7,r4
1800a60c:	00c60074 	movhi	r3,6145
1800a610:	18ff6a04 	addi	r3,r3,-600
1800a614:	1885883a 	add	r2,r3,r2
1800a618:	14c00003 	ldbu	r19,0(r2)
1800a61c:	00c00804 	movi	r3,32
1800a620:	9927883a 	add	r19,r19,r4
1800a624:	1ce9c83a 	sub	r20,r3,r19
1800a628:	a0005c1e 	bne	r20,zero,1800a79c <__umoddi3+0x2ec>
1800a62c:	3c400136 	bltu	r7,r17,1800a634 <__umoddi3+0x184>
1800a630:	81810a36 	bltu	r16,r6,1800aa5c <__umoddi3+0x5ac>
1800a634:	8185c83a 	sub	r2,r16,r6
1800a638:	89e3c83a 	sub	r17,r17,r7
1800a63c:	8089803a 	cmpltu	r4,r16,r2
1800a640:	8939c83a 	sub	fp,r17,r4
1800a644:	e007883a 	mov	r3,fp
1800a648:	00003b06 	br	1800a738 <__umoddi3+0x288>
1800a64c:	3000041e 	bne	r6,zero,1800a660 <__umoddi3+0x1b0>
1800a650:	000b883a 	mov	r5,zero
1800a654:	01000044 	movi	r4,1
1800a658:	8000ab80 	call	18000ab8 <__udivsi3>
1800a65c:	1027883a 	mov	r19,r2
1800a660:	00bfffd4 	movui	r2,65535
1800a664:	14c0442e 	bgeu	r2,r19,1800a778 <__umoddi3+0x2c8>
1800a668:	00804034 	movhi	r2,256
1800a66c:	10bfffc4 	addi	r2,r2,-1
1800a670:	14c0ec36 	bltu	r2,r19,1800aa24 <__umoddi3+0x574>
1800a674:	00800404 	movi	r2,16
1800a678:	9886d83a 	srl	r3,r19,r2
1800a67c:	01060074 	movhi	r4,6145
1800a680:	213f6a04 	addi	r4,r4,-600
1800a684:	20c7883a 	add	r3,r4,r3
1800a688:	18c00003 	ldbu	r3,0(r3)
1800a68c:	1887883a 	add	r3,r3,r2
1800a690:	00800804 	movi	r2,32
1800a694:	10e5c83a 	sub	r18,r2,r3
1800a698:	9000ab1e 	bne	r18,zero,1800a948 <__umoddi3+0x498>
1800a69c:	982cd43a 	srli	r22,r19,16
1800a6a0:	8ce3c83a 	sub	r17,r17,r19
1800a6a4:	9dffffcc 	andi	r23,r19,65535
1800a6a8:	b00b883a 	mov	r5,r22
1800a6ac:	8809883a 	mov	r4,r17
1800a6b0:	8000b1c0 	call	18000b1c <__umodsi3>
1800a6b4:	b00b883a 	mov	r5,r22
1800a6b8:	8809883a 	mov	r4,r17
1800a6bc:	102b883a 	mov	r21,r2
1800a6c0:	8000ab80 	call	18000ab8 <__udivsi3>
1800a6c4:	b80b883a 	mov	r5,r23
1800a6c8:	1009883a 	mov	r4,r2
1800a6cc:	8000b740 	call	18000b74 <__mulsi3>
1800a6d0:	a82a943a 	slli	r21,r21,16
1800a6d4:	a006d43a 	srli	r3,r20,16
1800a6d8:	1d46b03a 	or	r3,r3,r21
1800a6dc:	1880042e 	bgeu	r3,r2,1800a6f0 <__umoddi3+0x240>
1800a6e0:	1cc7883a 	add	r3,r3,r19
1800a6e4:	1cc00236 	bltu	r3,r19,1800a6f0 <__umoddi3+0x240>
1800a6e8:	1880012e 	bgeu	r3,r2,1800a6f0 <__umoddi3+0x240>
1800a6ec:	1cc7883a 	add	r3,r3,r19
1800a6f0:	18a1c83a 	sub	r16,r3,r2
1800a6f4:	b00b883a 	mov	r5,r22
1800a6f8:	8009883a 	mov	r4,r16
1800a6fc:	8000b1c0 	call	18000b1c <__umodsi3>
1800a700:	1023883a 	mov	r17,r2
1800a704:	b00b883a 	mov	r5,r22
1800a708:	8009883a 	mov	r4,r16
1800a70c:	8000ab80 	call	18000ab8 <__udivsi3>
1800a710:	8822943a 	slli	r17,r17,16
1800a714:	b80b883a 	mov	r5,r23
1800a718:	1009883a 	mov	r4,r2
1800a71c:	8000b740 	call	18000b74 <__mulsi3>
1800a720:	a53fffcc 	andi	r20,r20,65535
1800a724:	a446b03a 	or	r3,r20,r17
1800a728:	18bfac2e 	bgeu	r3,r2,1800a5dc <__alt_data_end+0xf800a5dc>
1800a72c:	003fa706 	br	1800a5cc <__alt_data_end+0xf800a5cc>
1800a730:	2005883a 	mov	r2,r4
1800a734:	2807883a 	mov	r3,r5
1800a738:	dfc00c17 	ldw	ra,48(sp)
1800a73c:	df000b17 	ldw	fp,44(sp)
1800a740:	ddc00a17 	ldw	r23,40(sp)
1800a744:	dd800917 	ldw	r22,36(sp)
1800a748:	dd400817 	ldw	r21,32(sp)
1800a74c:	dd000717 	ldw	r20,28(sp)
1800a750:	dcc00617 	ldw	r19,24(sp)
1800a754:	dc800517 	ldw	r18,20(sp)
1800a758:	dc400417 	ldw	r17,16(sp)
1800a75c:	dc000317 	ldw	r16,12(sp)
1800a760:	dec00d04 	addi	sp,sp,52
1800a764:	f800283a 	ret
1800a768:	04c03fc4 	movi	r19,255
1800a76c:	99c9803a 	cmpltu	r4,r19,r7
1800a770:	200890fa 	slli	r4,r4,3
1800a774:	003fa406 	br	1800a608 <__alt_data_end+0xf800a608>
1800a778:	00803fc4 	movi	r2,255
1800a77c:	14c5803a 	cmpltu	r2,r2,r19
1800a780:	100490fa 	slli	r2,r2,3
1800a784:	003fbc06 	br	1800a678 <__alt_data_end+0xf800a678>
1800a788:	00804034 	movhi	r2,256
1800a78c:	10bfffc4 	addi	r2,r2,-1
1800a790:	1180a636 	bltu	r2,r6,1800aa2c <__umoddi3+0x57c>
1800a794:	01000404 	movi	r4,16
1800a798:	003f5c06 	br	1800a50c <__alt_data_end+0xf800a50c>
1800a79c:	3d0e983a 	sll	r7,r7,r20
1800a7a0:	34ead83a 	srl	r21,r6,r19
1800a7a4:	8cc6d83a 	srl	r3,r17,r19
1800a7a8:	8d10983a 	sll	r8,r17,r20
1800a7ac:	3d6ab03a 	or	r21,r7,r21
1800a7b0:	a82cd43a 	srli	r22,r21,16
1800a7b4:	84e2d83a 	srl	r17,r16,r19
1800a7b8:	1809883a 	mov	r4,r3
1800a7bc:	b00b883a 	mov	r5,r22
1800a7c0:	8a22b03a 	or	r17,r17,r8
1800a7c4:	3524983a 	sll	r18,r6,r20
1800a7c8:	dc400015 	stw	r17,0(sp)
1800a7cc:	d8c00115 	stw	r3,4(sp)
1800a7d0:	8000b1c0 	call	18000b1c <__umodsi3>
1800a7d4:	d8c00117 	ldw	r3,4(sp)
1800a7d8:	b00b883a 	mov	r5,r22
1800a7dc:	1039883a 	mov	fp,r2
1800a7e0:	1809883a 	mov	r4,r3
1800a7e4:	8000ab80 	call	18000ab8 <__udivsi3>
1800a7e8:	adffffcc 	andi	r23,r21,65535
1800a7ec:	100b883a 	mov	r5,r2
1800a7f0:	b809883a 	mov	r4,r23
1800a7f4:	1023883a 	mov	r17,r2
1800a7f8:	8000b740 	call	18000b74 <__mulsi3>
1800a7fc:	d9400017 	ldw	r5,0(sp)
1800a800:	e008943a 	slli	r4,fp,16
1800a804:	8520983a 	sll	r16,r16,r20
1800a808:	2806d43a 	srli	r3,r5,16
1800a80c:	1906b03a 	or	r3,r3,r4
1800a810:	1880042e 	bgeu	r3,r2,1800a824 <__umoddi3+0x374>
1800a814:	1d47883a 	add	r3,r3,r21
1800a818:	893fffc4 	addi	r4,r17,-1
1800a81c:	1d40892e 	bgeu	r3,r21,1800aa44 <__umoddi3+0x594>
1800a820:	2023883a 	mov	r17,r4
1800a824:	18b9c83a 	sub	fp,r3,r2
1800a828:	b00b883a 	mov	r5,r22
1800a82c:	e009883a 	mov	r4,fp
1800a830:	8000b1c0 	call	18000b1c <__umodsi3>
1800a834:	b00b883a 	mov	r5,r22
1800a838:	e009883a 	mov	r4,fp
1800a83c:	d8800215 	stw	r2,8(sp)
1800a840:	8000ab80 	call	18000ab8 <__udivsi3>
1800a844:	100b883a 	mov	r5,r2
1800a848:	b809883a 	mov	r4,r23
1800a84c:	102d883a 	mov	r22,r2
1800a850:	8000b740 	call	18000b74 <__mulsi3>
1800a854:	d9800217 	ldw	r6,8(sp)
1800a858:	d8c00017 	ldw	r3,0(sp)
1800a85c:	300c943a 	slli	r6,r6,16
1800a860:	1a3fffcc 	andi	r8,r3,65535
1800a864:	4190b03a 	or	r8,r8,r6
1800a868:	4080042e 	bgeu	r8,r2,1800a87c <__umoddi3+0x3cc>
1800a86c:	4551883a 	add	r8,r8,r21
1800a870:	b0ffffc4 	addi	r3,r22,-1
1800a874:	45406f2e 	bgeu	r8,r21,1800aa34 <__umoddi3+0x584>
1800a878:	182d883a 	mov	r22,r3
1800a87c:	880e943a 	slli	r7,r17,16
1800a880:	9006d43a 	srli	r3,r18,16
1800a884:	91bfffcc 	andi	r6,r18,65535
1800a888:	3dacb03a 	or	r22,r7,r22
1800a88c:	b02ed43a 	srli	r23,r22,16
1800a890:	b5bfffcc 	andi	r22,r22,65535
1800a894:	300b883a 	mov	r5,r6
1800a898:	b009883a 	mov	r4,r22
1800a89c:	40a3c83a 	sub	r17,r8,r2
1800a8a0:	d8c00115 	stw	r3,4(sp)
1800a8a4:	d9800215 	stw	r6,8(sp)
1800a8a8:	8000b740 	call	18000b74 <__mulsi3>
1800a8ac:	d9800217 	ldw	r6,8(sp)
1800a8b0:	b809883a 	mov	r4,r23
1800a8b4:	1039883a 	mov	fp,r2
1800a8b8:	300b883a 	mov	r5,r6
1800a8bc:	8000b740 	call	18000b74 <__mulsi3>
1800a8c0:	d8c00117 	ldw	r3,4(sp)
1800a8c4:	b809883a 	mov	r4,r23
1800a8c8:	d8800215 	stw	r2,8(sp)
1800a8cc:	180b883a 	mov	r5,r3
1800a8d0:	8000b740 	call	18000b74 <__mulsi3>
1800a8d4:	d8c00117 	ldw	r3,4(sp)
1800a8d8:	b009883a 	mov	r4,r22
1800a8dc:	102f883a 	mov	r23,r2
1800a8e0:	180b883a 	mov	r5,r3
1800a8e4:	8000b740 	call	18000b74 <__mulsi3>
1800a8e8:	d9800217 	ldw	r6,8(sp)
1800a8ec:	e006d43a 	srli	r3,fp,16
1800a8f0:	1185883a 	add	r2,r2,r6
1800a8f4:	1885883a 	add	r2,r3,r2
1800a8f8:	1180022e 	bgeu	r2,r6,1800a904 <__umoddi3+0x454>
1800a8fc:	00c00074 	movhi	r3,1
1800a900:	b8ef883a 	add	r23,r23,r3
1800a904:	1006d43a 	srli	r3,r2,16
1800a908:	1004943a 	slli	r2,r2,16
1800a90c:	e73fffcc 	andi	fp,fp,65535
1800a910:	1dc7883a 	add	r3,r3,r23
1800a914:	1739883a 	add	fp,r2,fp
1800a918:	88c03a36 	bltu	r17,r3,1800aa04 <__umoddi3+0x554>
1800a91c:	88c05126 	beq	r17,r3,1800aa64 <__umoddi3+0x5b4>
1800a920:	88c9c83a 	sub	r4,r17,r3
1800a924:	e00f883a 	mov	r7,fp
1800a928:	81cfc83a 	sub	r7,r16,r7
1800a92c:	81c7803a 	cmpltu	r3,r16,r7
1800a930:	20c7c83a 	sub	r3,r4,r3
1800a934:	1cc4983a 	sll	r2,r3,r19
1800a938:	3d0ed83a 	srl	r7,r7,r20
1800a93c:	1d06d83a 	srl	r3,r3,r20
1800a940:	11c4b03a 	or	r2,r2,r7
1800a944:	003f7c06 	br	1800a738 <__alt_data_end+0xf800a738>
1800a948:	9ca6983a 	sll	r19,r19,r18
1800a94c:	88f8d83a 	srl	fp,r17,r3
1800a950:	80c4d83a 	srl	r2,r16,r3
1800a954:	982cd43a 	srli	r22,r19,16
1800a958:	8ca2983a 	sll	r17,r17,r18
1800a95c:	e009883a 	mov	r4,fp
1800a960:	b00b883a 	mov	r5,r22
1800a964:	146ab03a 	or	r21,r2,r17
1800a968:	8000b1c0 	call	18000b1c <__umodsi3>
1800a96c:	b00b883a 	mov	r5,r22
1800a970:	e009883a 	mov	r4,fp
1800a974:	1029883a 	mov	r20,r2
1800a978:	9dffffcc 	andi	r23,r19,65535
1800a97c:	8000ab80 	call	18000ab8 <__udivsi3>
1800a980:	b809883a 	mov	r4,r23
1800a984:	100b883a 	mov	r5,r2
1800a988:	8000b740 	call	18000b74 <__mulsi3>
1800a98c:	a008943a 	slli	r4,r20,16
1800a990:	a806d43a 	srli	r3,r21,16
1800a994:	84a8983a 	sll	r20,r16,r18
1800a998:	1906b03a 	or	r3,r3,r4
1800a99c:	1880042e 	bgeu	r3,r2,1800a9b0 <__umoddi3+0x500>
1800a9a0:	1cc7883a 	add	r3,r3,r19
1800a9a4:	1cc00236 	bltu	r3,r19,1800a9b0 <__umoddi3+0x500>
1800a9a8:	1880012e 	bgeu	r3,r2,1800a9b0 <__umoddi3+0x500>
1800a9ac:	1cc7883a 	add	r3,r3,r19
1800a9b0:	18a3c83a 	sub	r17,r3,r2
1800a9b4:	b00b883a 	mov	r5,r22
1800a9b8:	8809883a 	mov	r4,r17
1800a9bc:	8000b1c0 	call	18000b1c <__umodsi3>
1800a9c0:	b00b883a 	mov	r5,r22
1800a9c4:	8809883a 	mov	r4,r17
1800a9c8:	1021883a 	mov	r16,r2
1800a9cc:	8000ab80 	call	18000ab8 <__udivsi3>
1800a9d0:	100b883a 	mov	r5,r2
1800a9d4:	b809883a 	mov	r4,r23
1800a9d8:	8020943a 	slli	r16,r16,16
1800a9dc:	8000b740 	call	18000b74 <__mulsi3>
1800a9e0:	a8ffffcc 	andi	r3,r21,65535
1800a9e4:	1c06b03a 	or	r3,r3,r16
1800a9e8:	1880042e 	bgeu	r3,r2,1800a9fc <__umoddi3+0x54c>
1800a9ec:	1cc7883a 	add	r3,r3,r19
1800a9f0:	1cc00236 	bltu	r3,r19,1800a9fc <__umoddi3+0x54c>
1800a9f4:	1880012e 	bgeu	r3,r2,1800a9fc <__umoddi3+0x54c>
1800a9f8:	1cc7883a 	add	r3,r3,r19
1800a9fc:	18a3c83a 	sub	r17,r3,r2
1800aa00:	003f2906 	br	1800a6a8 <__alt_data_end+0xf800a6a8>
1800aa04:	e48fc83a 	sub	r7,fp,r18
1800aa08:	1d49c83a 	sub	r4,r3,r21
1800aa0c:	e1f9803a 	cmpltu	fp,fp,r7
1800aa10:	2739c83a 	sub	fp,r4,fp
1800aa14:	8f09c83a 	sub	r4,r17,fp
1800aa18:	003fc306 	br	1800a928 <__alt_data_end+0xf800a928>
1800aa1c:	01000604 	movi	r4,24
1800aa20:	003ef906 	br	1800a608 <__alt_data_end+0xf800a608>
1800aa24:	00800604 	movi	r2,24
1800aa28:	003f1306 	br	1800a678 <__alt_data_end+0xf800a678>
1800aa2c:	01000604 	movi	r4,24
1800aa30:	003eb606 	br	1800a50c <__alt_data_end+0xf800a50c>
1800aa34:	40bf902e 	bgeu	r8,r2,1800a878 <__alt_data_end+0xf800a878>
1800aa38:	b5bfff84 	addi	r22,r22,-2
1800aa3c:	4551883a 	add	r8,r8,r21
1800aa40:	003f8e06 	br	1800a87c <__alt_data_end+0xf800a87c>
1800aa44:	18bf762e 	bgeu	r3,r2,1800a820 <__alt_data_end+0xf800a820>
1800aa48:	8c7fff84 	addi	r17,r17,-2
1800aa4c:	1d47883a 	add	r3,r3,r21
1800aa50:	003f7406 	br	1800a824 <__alt_data_end+0xf800a824>
1800aa54:	1cc7883a 	add	r3,r3,r19
1800aa58:	003ecd06 	br	1800a590 <__alt_data_end+0xf800a590>
1800aa5c:	8005883a 	mov	r2,r16
1800aa60:	003ef806 	br	1800a644 <__alt_data_end+0xf800a644>
1800aa64:	873fe736 	bltu	r16,fp,1800aa04 <__alt_data_end+0xf800aa04>
1800aa68:	e00f883a 	mov	r7,fp
1800aa6c:	0009883a 	mov	r4,zero
1800aa70:	003fad06 	br	1800a928 <__alt_data_end+0xf800a928>

1800aa74 <__adddf3>:
1800aa74:	02c00434 	movhi	r11,16
1800aa78:	5affffc4 	addi	r11,r11,-1
1800aa7c:	2806d7fa 	srli	r3,r5,31
1800aa80:	2ad4703a 	and	r10,r5,r11
1800aa84:	3ad2703a 	and	r9,r7,r11
1800aa88:	3804d53a 	srli	r2,r7,20
1800aa8c:	3018d77a 	srli	r12,r6,29
1800aa90:	280ad53a 	srli	r5,r5,20
1800aa94:	501490fa 	slli	r10,r10,3
1800aa98:	2010d77a 	srli	r8,r4,29
1800aa9c:	481290fa 	slli	r9,r9,3
1800aaa0:	380ed7fa 	srli	r7,r7,31
1800aaa4:	defffb04 	addi	sp,sp,-20
1800aaa8:	dc800215 	stw	r18,8(sp)
1800aaac:	dc400115 	stw	r17,4(sp)
1800aab0:	dc000015 	stw	r16,0(sp)
1800aab4:	dfc00415 	stw	ra,16(sp)
1800aab8:	dcc00315 	stw	r19,12(sp)
1800aabc:	1c803fcc 	andi	r18,r3,255
1800aac0:	2c01ffcc 	andi	r16,r5,2047
1800aac4:	5210b03a 	or	r8,r10,r8
1800aac8:	202290fa 	slli	r17,r4,3
1800aacc:	1081ffcc 	andi	r2,r2,2047
1800aad0:	4b12b03a 	or	r9,r9,r12
1800aad4:	300c90fa 	slli	r6,r6,3
1800aad8:	91c07526 	beq	r18,r7,1800acb0 <__adddf3+0x23c>
1800aadc:	8087c83a 	sub	r3,r16,r2
1800aae0:	00c0ab0e 	bge	zero,r3,1800ad90 <__adddf3+0x31c>
1800aae4:	10002a1e 	bne	r2,zero,1800ab90 <__adddf3+0x11c>
1800aae8:	4984b03a 	or	r2,r9,r6
1800aaec:	1000961e 	bne	r2,zero,1800ad48 <__adddf3+0x2d4>
1800aaf0:	888001cc 	andi	r2,r17,7
1800aaf4:	10000726 	beq	r2,zero,1800ab14 <__adddf3+0xa0>
1800aaf8:	888003cc 	andi	r2,r17,15
1800aafc:	00c00104 	movi	r3,4
1800ab00:	10c00426 	beq	r2,r3,1800ab14 <__adddf3+0xa0>
1800ab04:	88c7883a 	add	r3,r17,r3
1800ab08:	1c63803a 	cmpltu	r17,r3,r17
1800ab0c:	4451883a 	add	r8,r8,r17
1800ab10:	1823883a 	mov	r17,r3
1800ab14:	4080202c 	andhi	r2,r8,128
1800ab18:	10005926 	beq	r2,zero,1800ac80 <__adddf3+0x20c>
1800ab1c:	84000044 	addi	r16,r16,1
1800ab20:	0081ffc4 	movi	r2,2047
1800ab24:	8080ba26 	beq	r16,r2,1800ae10 <__adddf3+0x39c>
1800ab28:	00bfe034 	movhi	r2,65408
1800ab2c:	10bfffc4 	addi	r2,r2,-1
1800ab30:	4090703a 	and	r8,r8,r2
1800ab34:	4004977a 	slli	r2,r8,29
1800ab38:	4010927a 	slli	r8,r8,9
1800ab3c:	8822d0fa 	srli	r17,r17,3
1800ab40:	8401ffcc 	andi	r16,r16,2047
1800ab44:	4010d33a 	srli	r8,r8,12
1800ab48:	9007883a 	mov	r3,r18
1800ab4c:	1444b03a 	or	r2,r2,r17
1800ab50:	8401ffcc 	andi	r16,r16,2047
1800ab54:	8020953a 	slli	r16,r16,20
1800ab58:	18c03fcc 	andi	r3,r3,255
1800ab5c:	01000434 	movhi	r4,16
1800ab60:	213fffc4 	addi	r4,r4,-1
1800ab64:	180697fa 	slli	r3,r3,31
1800ab68:	4110703a 	and	r8,r8,r4
1800ab6c:	4410b03a 	or	r8,r8,r16
1800ab70:	40c6b03a 	or	r3,r8,r3
1800ab74:	dfc00417 	ldw	ra,16(sp)
1800ab78:	dcc00317 	ldw	r19,12(sp)
1800ab7c:	dc800217 	ldw	r18,8(sp)
1800ab80:	dc400117 	ldw	r17,4(sp)
1800ab84:	dc000017 	ldw	r16,0(sp)
1800ab88:	dec00504 	addi	sp,sp,20
1800ab8c:	f800283a 	ret
1800ab90:	0081ffc4 	movi	r2,2047
1800ab94:	80bfd626 	beq	r16,r2,1800aaf0 <__alt_data_end+0xf800aaf0>
1800ab98:	4a402034 	orhi	r9,r9,128
1800ab9c:	00800e04 	movi	r2,56
1800aba0:	10c09f16 	blt	r2,r3,1800ae20 <__adddf3+0x3ac>
1800aba4:	008007c4 	movi	r2,31
1800aba8:	10c0c216 	blt	r2,r3,1800aeb4 <__adddf3+0x440>
1800abac:	00800804 	movi	r2,32
1800abb0:	10c5c83a 	sub	r2,r2,r3
1800abb4:	488a983a 	sll	r5,r9,r2
1800abb8:	30c8d83a 	srl	r4,r6,r3
1800abbc:	3084983a 	sll	r2,r6,r2
1800abc0:	48c6d83a 	srl	r3,r9,r3
1800abc4:	290cb03a 	or	r6,r5,r4
1800abc8:	1004c03a 	cmpne	r2,r2,zero
1800abcc:	308cb03a 	or	r6,r6,r2
1800abd0:	898dc83a 	sub	r6,r17,r6
1800abd4:	89a3803a 	cmpltu	r17,r17,r6
1800abd8:	40d1c83a 	sub	r8,r8,r3
1800abdc:	4451c83a 	sub	r8,r8,r17
1800abe0:	3023883a 	mov	r17,r6
1800abe4:	4080202c 	andhi	r2,r8,128
1800abe8:	10002326 	beq	r2,zero,1800ac78 <__adddf3+0x204>
1800abec:	04c02034 	movhi	r19,128
1800abf0:	9cffffc4 	addi	r19,r19,-1
1800abf4:	44e6703a 	and	r19,r8,r19
1800abf8:	98007626 	beq	r19,zero,1800add4 <__adddf3+0x360>
1800abfc:	9809883a 	mov	r4,r19
1800ac00:	800d2b40 	call	1800d2b4 <__clzsi2>
1800ac04:	10fffe04 	addi	r3,r2,-8
1800ac08:	010007c4 	movi	r4,31
1800ac0c:	20c07716 	blt	r4,r3,1800adec <__adddf3+0x378>
1800ac10:	00800804 	movi	r2,32
1800ac14:	10c5c83a 	sub	r2,r2,r3
1800ac18:	8884d83a 	srl	r2,r17,r2
1800ac1c:	98d0983a 	sll	r8,r19,r3
1800ac20:	88e2983a 	sll	r17,r17,r3
1800ac24:	1204b03a 	or	r2,r2,r8
1800ac28:	1c007416 	blt	r3,r16,1800adfc <__adddf3+0x388>
1800ac2c:	1c21c83a 	sub	r16,r3,r16
1800ac30:	82000044 	addi	r8,r16,1
1800ac34:	00c007c4 	movi	r3,31
1800ac38:	1a009116 	blt	r3,r8,1800ae80 <__adddf3+0x40c>
1800ac3c:	00c00804 	movi	r3,32
1800ac40:	1a07c83a 	sub	r3,r3,r8
1800ac44:	8a08d83a 	srl	r4,r17,r8
1800ac48:	88e2983a 	sll	r17,r17,r3
1800ac4c:	10c6983a 	sll	r3,r2,r3
1800ac50:	1210d83a 	srl	r8,r2,r8
1800ac54:	8804c03a 	cmpne	r2,r17,zero
1800ac58:	1906b03a 	or	r3,r3,r4
1800ac5c:	18a2b03a 	or	r17,r3,r2
1800ac60:	0021883a 	mov	r16,zero
1800ac64:	003fa206 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800ac68:	1890b03a 	or	r8,r3,r2
1800ac6c:	40017d26 	beq	r8,zero,1800b264 <__adddf3+0x7f0>
1800ac70:	1011883a 	mov	r8,r2
1800ac74:	1823883a 	mov	r17,r3
1800ac78:	888001cc 	andi	r2,r17,7
1800ac7c:	103f9e1e 	bne	r2,zero,1800aaf8 <__alt_data_end+0xf800aaf8>
1800ac80:	4004977a 	slli	r2,r8,29
1800ac84:	8822d0fa 	srli	r17,r17,3
1800ac88:	4010d0fa 	srli	r8,r8,3
1800ac8c:	9007883a 	mov	r3,r18
1800ac90:	1444b03a 	or	r2,r2,r17
1800ac94:	0101ffc4 	movi	r4,2047
1800ac98:	81002426 	beq	r16,r4,1800ad2c <__adddf3+0x2b8>
1800ac9c:	8120703a 	and	r16,r16,r4
1800aca0:	01000434 	movhi	r4,16
1800aca4:	213fffc4 	addi	r4,r4,-1
1800aca8:	4110703a 	and	r8,r8,r4
1800acac:	003fa806 	br	1800ab50 <__alt_data_end+0xf800ab50>
1800acb0:	8089c83a 	sub	r4,r16,r2
1800acb4:	01005e0e 	bge	zero,r4,1800ae30 <__adddf3+0x3bc>
1800acb8:	10002b26 	beq	r2,zero,1800ad68 <__adddf3+0x2f4>
1800acbc:	0081ffc4 	movi	r2,2047
1800acc0:	80bf8b26 	beq	r16,r2,1800aaf0 <__alt_data_end+0xf800aaf0>
1800acc4:	4a402034 	orhi	r9,r9,128
1800acc8:	00800e04 	movi	r2,56
1800accc:	1100a40e 	bge	r2,r4,1800af60 <__adddf3+0x4ec>
1800acd0:	498cb03a 	or	r6,r9,r6
1800acd4:	300ac03a 	cmpne	r5,r6,zero
1800acd8:	0013883a 	mov	r9,zero
1800acdc:	2c4b883a 	add	r5,r5,r17
1800ace0:	2c63803a 	cmpltu	r17,r5,r17
1800ace4:	4a11883a 	add	r8,r9,r8
1800ace8:	8a11883a 	add	r8,r17,r8
1800acec:	2823883a 	mov	r17,r5
1800acf0:	4080202c 	andhi	r2,r8,128
1800acf4:	103fe026 	beq	r2,zero,1800ac78 <__alt_data_end+0xf800ac78>
1800acf8:	84000044 	addi	r16,r16,1
1800acfc:	0081ffc4 	movi	r2,2047
1800ad00:	8080d226 	beq	r16,r2,1800b04c <__adddf3+0x5d8>
1800ad04:	00bfe034 	movhi	r2,65408
1800ad08:	10bfffc4 	addi	r2,r2,-1
1800ad0c:	4090703a 	and	r8,r8,r2
1800ad10:	880ad07a 	srli	r5,r17,1
1800ad14:	400897fa 	slli	r4,r8,31
1800ad18:	88c0004c 	andi	r3,r17,1
1800ad1c:	28e2b03a 	or	r17,r5,r3
1800ad20:	4010d07a 	srli	r8,r8,1
1800ad24:	2462b03a 	or	r17,r4,r17
1800ad28:	003f7106 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800ad2c:	4088b03a 	or	r4,r8,r2
1800ad30:	20014526 	beq	r4,zero,1800b248 <__adddf3+0x7d4>
1800ad34:	01000434 	movhi	r4,16
1800ad38:	42000234 	orhi	r8,r8,8
1800ad3c:	213fffc4 	addi	r4,r4,-1
1800ad40:	4110703a 	and	r8,r8,r4
1800ad44:	003f8206 	br	1800ab50 <__alt_data_end+0xf800ab50>
1800ad48:	18ffffc4 	addi	r3,r3,-1
1800ad4c:	1800491e 	bne	r3,zero,1800ae74 <__adddf3+0x400>
1800ad50:	898bc83a 	sub	r5,r17,r6
1800ad54:	8963803a 	cmpltu	r17,r17,r5
1800ad58:	4251c83a 	sub	r8,r8,r9
1800ad5c:	4451c83a 	sub	r8,r8,r17
1800ad60:	2823883a 	mov	r17,r5
1800ad64:	003f9f06 	br	1800abe4 <__alt_data_end+0xf800abe4>
1800ad68:	4984b03a 	or	r2,r9,r6
1800ad6c:	103f6026 	beq	r2,zero,1800aaf0 <__alt_data_end+0xf800aaf0>
1800ad70:	213fffc4 	addi	r4,r4,-1
1800ad74:	2000931e 	bne	r4,zero,1800afc4 <__adddf3+0x550>
1800ad78:	898d883a 	add	r6,r17,r6
1800ad7c:	3463803a 	cmpltu	r17,r6,r17
1800ad80:	4251883a 	add	r8,r8,r9
1800ad84:	8a11883a 	add	r8,r17,r8
1800ad88:	3023883a 	mov	r17,r6
1800ad8c:	003fd806 	br	1800acf0 <__alt_data_end+0xf800acf0>
1800ad90:	1800541e 	bne	r3,zero,1800aee4 <__adddf3+0x470>
1800ad94:	80800044 	addi	r2,r16,1
1800ad98:	1081ffcc 	andi	r2,r2,2047
1800ad9c:	00c00044 	movi	r3,1
1800ada0:	1880a00e 	bge	r3,r2,1800b024 <__adddf3+0x5b0>
1800ada4:	8989c83a 	sub	r4,r17,r6
1800ada8:	8905803a 	cmpltu	r2,r17,r4
1800adac:	4267c83a 	sub	r19,r8,r9
1800adb0:	98a7c83a 	sub	r19,r19,r2
1800adb4:	9880202c 	andhi	r2,r19,128
1800adb8:	10006326 	beq	r2,zero,1800af48 <__adddf3+0x4d4>
1800adbc:	3463c83a 	sub	r17,r6,r17
1800adc0:	4a07c83a 	sub	r3,r9,r8
1800adc4:	344d803a 	cmpltu	r6,r6,r17
1800adc8:	19a7c83a 	sub	r19,r3,r6
1800adcc:	3825883a 	mov	r18,r7
1800add0:	983f8a1e 	bne	r19,zero,1800abfc <__alt_data_end+0xf800abfc>
1800add4:	8809883a 	mov	r4,r17
1800add8:	800d2b40 	call	1800d2b4 <__clzsi2>
1800addc:	10800804 	addi	r2,r2,32
1800ade0:	10fffe04 	addi	r3,r2,-8
1800ade4:	010007c4 	movi	r4,31
1800ade8:	20ff890e 	bge	r4,r3,1800ac10 <__alt_data_end+0xf800ac10>
1800adec:	10bff604 	addi	r2,r2,-40
1800adf0:	8884983a 	sll	r2,r17,r2
1800adf4:	0023883a 	mov	r17,zero
1800adf8:	1c3f8c0e 	bge	r3,r16,1800ac2c <__alt_data_end+0xf800ac2c>
1800adfc:	023fe034 	movhi	r8,65408
1800ae00:	423fffc4 	addi	r8,r8,-1
1800ae04:	80e1c83a 	sub	r16,r16,r3
1800ae08:	1210703a 	and	r8,r2,r8
1800ae0c:	003f3806 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800ae10:	9007883a 	mov	r3,r18
1800ae14:	0011883a 	mov	r8,zero
1800ae18:	0005883a 	mov	r2,zero
1800ae1c:	003f4c06 	br	1800ab50 <__alt_data_end+0xf800ab50>
1800ae20:	498cb03a 	or	r6,r9,r6
1800ae24:	300cc03a 	cmpne	r6,r6,zero
1800ae28:	0007883a 	mov	r3,zero
1800ae2c:	003f6806 	br	1800abd0 <__alt_data_end+0xf800abd0>
1800ae30:	20009c1e 	bne	r4,zero,1800b0a4 <__adddf3+0x630>
1800ae34:	80800044 	addi	r2,r16,1
1800ae38:	1141ffcc 	andi	r5,r2,2047
1800ae3c:	01000044 	movi	r4,1
1800ae40:	2140670e 	bge	r4,r5,1800afe0 <__adddf3+0x56c>
1800ae44:	0101ffc4 	movi	r4,2047
1800ae48:	11007f26 	beq	r2,r4,1800b048 <__adddf3+0x5d4>
1800ae4c:	898d883a 	add	r6,r17,r6
1800ae50:	4247883a 	add	r3,r8,r9
1800ae54:	3451803a 	cmpltu	r8,r6,r17
1800ae58:	40d1883a 	add	r8,r8,r3
1800ae5c:	402297fa 	slli	r17,r8,31
1800ae60:	300cd07a 	srli	r6,r6,1
1800ae64:	4010d07a 	srli	r8,r8,1
1800ae68:	1021883a 	mov	r16,r2
1800ae6c:	89a2b03a 	or	r17,r17,r6
1800ae70:	003f1f06 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800ae74:	0081ffc4 	movi	r2,2047
1800ae78:	80bf481e 	bne	r16,r2,1800ab9c <__alt_data_end+0xf800ab9c>
1800ae7c:	003f1c06 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800ae80:	843ff844 	addi	r16,r16,-31
1800ae84:	01000804 	movi	r4,32
1800ae88:	1406d83a 	srl	r3,r2,r16
1800ae8c:	41005026 	beq	r8,r4,1800afd0 <__adddf3+0x55c>
1800ae90:	01001004 	movi	r4,64
1800ae94:	2211c83a 	sub	r8,r4,r8
1800ae98:	1204983a 	sll	r2,r2,r8
1800ae9c:	88a2b03a 	or	r17,r17,r2
1800aea0:	8822c03a 	cmpne	r17,r17,zero
1800aea4:	1c62b03a 	or	r17,r3,r17
1800aea8:	0011883a 	mov	r8,zero
1800aeac:	0021883a 	mov	r16,zero
1800aeb0:	003f7106 	br	1800ac78 <__alt_data_end+0xf800ac78>
1800aeb4:	193ff804 	addi	r4,r3,-32
1800aeb8:	00800804 	movi	r2,32
1800aebc:	4908d83a 	srl	r4,r9,r4
1800aec0:	18804526 	beq	r3,r2,1800afd8 <__adddf3+0x564>
1800aec4:	00801004 	movi	r2,64
1800aec8:	10c5c83a 	sub	r2,r2,r3
1800aecc:	4886983a 	sll	r3,r9,r2
1800aed0:	198cb03a 	or	r6,r3,r6
1800aed4:	300cc03a 	cmpne	r6,r6,zero
1800aed8:	218cb03a 	or	r6,r4,r6
1800aedc:	0007883a 	mov	r3,zero
1800aee0:	003f3b06 	br	1800abd0 <__alt_data_end+0xf800abd0>
1800aee4:	80002a26 	beq	r16,zero,1800af90 <__adddf3+0x51c>
1800aee8:	0101ffc4 	movi	r4,2047
1800aeec:	11006826 	beq	r2,r4,1800b090 <__adddf3+0x61c>
1800aef0:	00c7c83a 	sub	r3,zero,r3
1800aef4:	42002034 	orhi	r8,r8,128
1800aef8:	01000e04 	movi	r4,56
1800aefc:	20c07c16 	blt	r4,r3,1800b0f0 <__adddf3+0x67c>
1800af00:	010007c4 	movi	r4,31
1800af04:	20c0da16 	blt	r4,r3,1800b270 <__adddf3+0x7fc>
1800af08:	01000804 	movi	r4,32
1800af0c:	20c9c83a 	sub	r4,r4,r3
1800af10:	4114983a 	sll	r10,r8,r4
1800af14:	88cad83a 	srl	r5,r17,r3
1800af18:	8908983a 	sll	r4,r17,r4
1800af1c:	40c6d83a 	srl	r3,r8,r3
1800af20:	5162b03a 	or	r17,r10,r5
1800af24:	2008c03a 	cmpne	r4,r4,zero
1800af28:	8922b03a 	or	r17,r17,r4
1800af2c:	3463c83a 	sub	r17,r6,r17
1800af30:	48c7c83a 	sub	r3,r9,r3
1800af34:	344d803a 	cmpltu	r6,r6,r17
1800af38:	1991c83a 	sub	r8,r3,r6
1800af3c:	1021883a 	mov	r16,r2
1800af40:	3825883a 	mov	r18,r7
1800af44:	003f2706 	br	1800abe4 <__alt_data_end+0xf800abe4>
1800af48:	24d0b03a 	or	r8,r4,r19
1800af4c:	40001b1e 	bne	r8,zero,1800afbc <__adddf3+0x548>
1800af50:	0005883a 	mov	r2,zero
1800af54:	0007883a 	mov	r3,zero
1800af58:	0021883a 	mov	r16,zero
1800af5c:	003f4d06 	br	1800ac94 <__alt_data_end+0xf800ac94>
1800af60:	008007c4 	movi	r2,31
1800af64:	11003c16 	blt	r2,r4,1800b058 <__adddf3+0x5e4>
1800af68:	00800804 	movi	r2,32
1800af6c:	1105c83a 	sub	r2,r2,r4
1800af70:	488e983a 	sll	r7,r9,r2
1800af74:	310ad83a 	srl	r5,r6,r4
1800af78:	3084983a 	sll	r2,r6,r2
1800af7c:	4912d83a 	srl	r9,r9,r4
1800af80:	394ab03a 	or	r5,r7,r5
1800af84:	1004c03a 	cmpne	r2,r2,zero
1800af88:	288ab03a 	or	r5,r5,r2
1800af8c:	003f5306 	br	1800acdc <__alt_data_end+0xf800acdc>
1800af90:	4448b03a 	or	r4,r8,r17
1800af94:	20003e26 	beq	r4,zero,1800b090 <__adddf3+0x61c>
1800af98:	00c6303a 	nor	r3,zero,r3
1800af9c:	18003a1e 	bne	r3,zero,1800b088 <__adddf3+0x614>
1800afa0:	3463c83a 	sub	r17,r6,r17
1800afa4:	4a07c83a 	sub	r3,r9,r8
1800afa8:	344d803a 	cmpltu	r6,r6,r17
1800afac:	1991c83a 	sub	r8,r3,r6
1800afb0:	1021883a 	mov	r16,r2
1800afb4:	3825883a 	mov	r18,r7
1800afb8:	003f0a06 	br	1800abe4 <__alt_data_end+0xf800abe4>
1800afbc:	2023883a 	mov	r17,r4
1800afc0:	003f0d06 	br	1800abf8 <__alt_data_end+0xf800abf8>
1800afc4:	0081ffc4 	movi	r2,2047
1800afc8:	80bf3f1e 	bne	r16,r2,1800acc8 <__alt_data_end+0xf800acc8>
1800afcc:	003ec806 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800afd0:	0005883a 	mov	r2,zero
1800afd4:	003fb106 	br	1800ae9c <__alt_data_end+0xf800ae9c>
1800afd8:	0007883a 	mov	r3,zero
1800afdc:	003fbc06 	br	1800aed0 <__alt_data_end+0xf800aed0>
1800afe0:	4444b03a 	or	r2,r8,r17
1800afe4:	8000871e 	bne	r16,zero,1800b204 <__adddf3+0x790>
1800afe8:	1000ba26 	beq	r2,zero,1800b2d4 <__adddf3+0x860>
1800afec:	4984b03a 	or	r2,r9,r6
1800aff0:	103ebf26 	beq	r2,zero,1800aaf0 <__alt_data_end+0xf800aaf0>
1800aff4:	8985883a 	add	r2,r17,r6
1800aff8:	4247883a 	add	r3,r8,r9
1800affc:	1451803a 	cmpltu	r8,r2,r17
1800b000:	40d1883a 	add	r8,r8,r3
1800b004:	40c0202c 	andhi	r3,r8,128
1800b008:	1023883a 	mov	r17,r2
1800b00c:	183f1a26 	beq	r3,zero,1800ac78 <__alt_data_end+0xf800ac78>
1800b010:	00bfe034 	movhi	r2,65408
1800b014:	10bfffc4 	addi	r2,r2,-1
1800b018:	2021883a 	mov	r16,r4
1800b01c:	4090703a 	and	r8,r8,r2
1800b020:	003eb306 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b024:	4444b03a 	or	r2,r8,r17
1800b028:	8000291e 	bne	r16,zero,1800b0d0 <__adddf3+0x65c>
1800b02c:	10004b1e 	bne	r2,zero,1800b15c <__adddf3+0x6e8>
1800b030:	4990b03a 	or	r8,r9,r6
1800b034:	40008b26 	beq	r8,zero,1800b264 <__adddf3+0x7f0>
1800b038:	4811883a 	mov	r8,r9
1800b03c:	3023883a 	mov	r17,r6
1800b040:	3825883a 	mov	r18,r7
1800b044:	003eaa06 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b048:	1021883a 	mov	r16,r2
1800b04c:	0011883a 	mov	r8,zero
1800b050:	0005883a 	mov	r2,zero
1800b054:	003f0f06 	br	1800ac94 <__alt_data_end+0xf800ac94>
1800b058:	217ff804 	addi	r5,r4,-32
1800b05c:	00800804 	movi	r2,32
1800b060:	494ad83a 	srl	r5,r9,r5
1800b064:	20807d26 	beq	r4,r2,1800b25c <__adddf3+0x7e8>
1800b068:	00801004 	movi	r2,64
1800b06c:	1109c83a 	sub	r4,r2,r4
1800b070:	4912983a 	sll	r9,r9,r4
1800b074:	498cb03a 	or	r6,r9,r6
1800b078:	300cc03a 	cmpne	r6,r6,zero
1800b07c:	298ab03a 	or	r5,r5,r6
1800b080:	0013883a 	mov	r9,zero
1800b084:	003f1506 	br	1800acdc <__alt_data_end+0xf800acdc>
1800b088:	0101ffc4 	movi	r4,2047
1800b08c:	113f9a1e 	bne	r2,r4,1800aef8 <__alt_data_end+0xf800aef8>
1800b090:	4811883a 	mov	r8,r9
1800b094:	3023883a 	mov	r17,r6
1800b098:	1021883a 	mov	r16,r2
1800b09c:	3825883a 	mov	r18,r7
1800b0a0:	003e9306 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b0a4:	8000161e 	bne	r16,zero,1800b100 <__adddf3+0x68c>
1800b0a8:	444ab03a 	or	r5,r8,r17
1800b0ac:	28005126 	beq	r5,zero,1800b1f4 <__adddf3+0x780>
1800b0b0:	0108303a 	nor	r4,zero,r4
1800b0b4:	20004d1e 	bne	r4,zero,1800b1ec <__adddf3+0x778>
1800b0b8:	89a3883a 	add	r17,r17,r6
1800b0bc:	4253883a 	add	r9,r8,r9
1800b0c0:	898d803a 	cmpltu	r6,r17,r6
1800b0c4:	3251883a 	add	r8,r6,r9
1800b0c8:	1021883a 	mov	r16,r2
1800b0cc:	003f0806 	br	1800acf0 <__alt_data_end+0xf800acf0>
1800b0d0:	1000301e 	bne	r2,zero,1800b194 <__adddf3+0x720>
1800b0d4:	4984b03a 	or	r2,r9,r6
1800b0d8:	10007126 	beq	r2,zero,1800b2a0 <__adddf3+0x82c>
1800b0dc:	4811883a 	mov	r8,r9
1800b0e0:	3023883a 	mov	r17,r6
1800b0e4:	3825883a 	mov	r18,r7
1800b0e8:	0401ffc4 	movi	r16,2047
1800b0ec:	003e8006 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b0f0:	4462b03a 	or	r17,r8,r17
1800b0f4:	8822c03a 	cmpne	r17,r17,zero
1800b0f8:	0007883a 	mov	r3,zero
1800b0fc:	003f8b06 	br	1800af2c <__alt_data_end+0xf800af2c>
1800b100:	0141ffc4 	movi	r5,2047
1800b104:	11403b26 	beq	r2,r5,1800b1f4 <__adddf3+0x780>
1800b108:	0109c83a 	sub	r4,zero,r4
1800b10c:	42002034 	orhi	r8,r8,128
1800b110:	01400e04 	movi	r5,56
1800b114:	29006716 	blt	r5,r4,1800b2b4 <__adddf3+0x840>
1800b118:	014007c4 	movi	r5,31
1800b11c:	29007016 	blt	r5,r4,1800b2e0 <__adddf3+0x86c>
1800b120:	01400804 	movi	r5,32
1800b124:	290bc83a 	sub	r5,r5,r4
1800b128:	4154983a 	sll	r10,r8,r5
1800b12c:	890ed83a 	srl	r7,r17,r4
1800b130:	894a983a 	sll	r5,r17,r5
1800b134:	4108d83a 	srl	r4,r8,r4
1800b138:	51e2b03a 	or	r17,r10,r7
1800b13c:	280ac03a 	cmpne	r5,r5,zero
1800b140:	8962b03a 	or	r17,r17,r5
1800b144:	89a3883a 	add	r17,r17,r6
1800b148:	2253883a 	add	r9,r4,r9
1800b14c:	898d803a 	cmpltu	r6,r17,r6
1800b150:	3251883a 	add	r8,r6,r9
1800b154:	1021883a 	mov	r16,r2
1800b158:	003ee506 	br	1800acf0 <__alt_data_end+0xf800acf0>
1800b15c:	4984b03a 	or	r2,r9,r6
1800b160:	103e6326 	beq	r2,zero,1800aaf0 <__alt_data_end+0xf800aaf0>
1800b164:	8987c83a 	sub	r3,r17,r6
1800b168:	88c9803a 	cmpltu	r4,r17,r3
1800b16c:	4245c83a 	sub	r2,r8,r9
1800b170:	1105c83a 	sub	r2,r2,r4
1800b174:	1100202c 	andhi	r4,r2,128
1800b178:	203ebb26 	beq	r4,zero,1800ac68 <__alt_data_end+0xf800ac68>
1800b17c:	3463c83a 	sub	r17,r6,r17
1800b180:	4a07c83a 	sub	r3,r9,r8
1800b184:	344d803a 	cmpltu	r6,r6,r17
1800b188:	1991c83a 	sub	r8,r3,r6
1800b18c:	3825883a 	mov	r18,r7
1800b190:	003e5706 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b194:	4984b03a 	or	r2,r9,r6
1800b198:	10002e26 	beq	r2,zero,1800b254 <__adddf3+0x7e0>
1800b19c:	4004d0fa 	srli	r2,r8,3
1800b1a0:	8822d0fa 	srli	r17,r17,3
1800b1a4:	4010977a 	slli	r8,r8,29
1800b1a8:	10c0022c 	andhi	r3,r2,8
1800b1ac:	4462b03a 	or	r17,r8,r17
1800b1b0:	18000826 	beq	r3,zero,1800b1d4 <__adddf3+0x760>
1800b1b4:	4808d0fa 	srli	r4,r9,3
1800b1b8:	20c0022c 	andhi	r3,r4,8
1800b1bc:	1800051e 	bne	r3,zero,1800b1d4 <__adddf3+0x760>
1800b1c0:	300cd0fa 	srli	r6,r6,3
1800b1c4:	4806977a 	slli	r3,r9,29
1800b1c8:	2005883a 	mov	r2,r4
1800b1cc:	3825883a 	mov	r18,r7
1800b1d0:	19a2b03a 	or	r17,r3,r6
1800b1d4:	8810d77a 	srli	r8,r17,29
1800b1d8:	100490fa 	slli	r2,r2,3
1800b1dc:	882290fa 	slli	r17,r17,3
1800b1e0:	0401ffc4 	movi	r16,2047
1800b1e4:	4090b03a 	or	r8,r8,r2
1800b1e8:	003e4106 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b1ec:	0141ffc4 	movi	r5,2047
1800b1f0:	117fc71e 	bne	r2,r5,1800b110 <__alt_data_end+0xf800b110>
1800b1f4:	4811883a 	mov	r8,r9
1800b1f8:	3023883a 	mov	r17,r6
1800b1fc:	1021883a 	mov	r16,r2
1800b200:	003e3b06 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b204:	10002f26 	beq	r2,zero,1800b2c4 <__adddf3+0x850>
1800b208:	4984b03a 	or	r2,r9,r6
1800b20c:	10001126 	beq	r2,zero,1800b254 <__adddf3+0x7e0>
1800b210:	4004d0fa 	srli	r2,r8,3
1800b214:	8822d0fa 	srli	r17,r17,3
1800b218:	4010977a 	slli	r8,r8,29
1800b21c:	10c0022c 	andhi	r3,r2,8
1800b220:	4462b03a 	or	r17,r8,r17
1800b224:	183feb26 	beq	r3,zero,1800b1d4 <__alt_data_end+0xf800b1d4>
1800b228:	4808d0fa 	srli	r4,r9,3
1800b22c:	20c0022c 	andhi	r3,r4,8
1800b230:	183fe81e 	bne	r3,zero,1800b1d4 <__alt_data_end+0xf800b1d4>
1800b234:	300cd0fa 	srli	r6,r6,3
1800b238:	4806977a 	slli	r3,r9,29
1800b23c:	2005883a 	mov	r2,r4
1800b240:	19a2b03a 	or	r17,r3,r6
1800b244:	003fe306 	br	1800b1d4 <__alt_data_end+0xf800b1d4>
1800b248:	0011883a 	mov	r8,zero
1800b24c:	0005883a 	mov	r2,zero
1800b250:	003e3f06 	br	1800ab50 <__alt_data_end+0xf800ab50>
1800b254:	0401ffc4 	movi	r16,2047
1800b258:	003e2506 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b25c:	0013883a 	mov	r9,zero
1800b260:	003f8406 	br	1800b074 <__alt_data_end+0xf800b074>
1800b264:	0005883a 	mov	r2,zero
1800b268:	0007883a 	mov	r3,zero
1800b26c:	003e8906 	br	1800ac94 <__alt_data_end+0xf800ac94>
1800b270:	197ff804 	addi	r5,r3,-32
1800b274:	01000804 	movi	r4,32
1800b278:	414ad83a 	srl	r5,r8,r5
1800b27c:	19002426 	beq	r3,r4,1800b310 <__adddf3+0x89c>
1800b280:	01001004 	movi	r4,64
1800b284:	20c7c83a 	sub	r3,r4,r3
1800b288:	40c6983a 	sll	r3,r8,r3
1800b28c:	1c46b03a 	or	r3,r3,r17
1800b290:	1806c03a 	cmpne	r3,r3,zero
1800b294:	28e2b03a 	or	r17,r5,r3
1800b298:	0007883a 	mov	r3,zero
1800b29c:	003f2306 	br	1800af2c <__alt_data_end+0xf800af2c>
1800b2a0:	0007883a 	mov	r3,zero
1800b2a4:	5811883a 	mov	r8,r11
1800b2a8:	00bfffc4 	movi	r2,-1
1800b2ac:	0401ffc4 	movi	r16,2047
1800b2b0:	003e7806 	br	1800ac94 <__alt_data_end+0xf800ac94>
1800b2b4:	4462b03a 	or	r17,r8,r17
1800b2b8:	8822c03a 	cmpne	r17,r17,zero
1800b2bc:	0009883a 	mov	r4,zero
1800b2c0:	003fa006 	br	1800b144 <__alt_data_end+0xf800b144>
1800b2c4:	4811883a 	mov	r8,r9
1800b2c8:	3023883a 	mov	r17,r6
1800b2cc:	0401ffc4 	movi	r16,2047
1800b2d0:	003e0706 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b2d4:	4811883a 	mov	r8,r9
1800b2d8:	3023883a 	mov	r17,r6
1800b2dc:	003e0406 	br	1800aaf0 <__alt_data_end+0xf800aaf0>
1800b2e0:	21fff804 	addi	r7,r4,-32
1800b2e4:	01400804 	movi	r5,32
1800b2e8:	41ced83a 	srl	r7,r8,r7
1800b2ec:	21400a26 	beq	r4,r5,1800b318 <__adddf3+0x8a4>
1800b2f0:	01401004 	movi	r5,64
1800b2f4:	2909c83a 	sub	r4,r5,r4
1800b2f8:	4108983a 	sll	r4,r8,r4
1800b2fc:	2448b03a 	or	r4,r4,r17
1800b300:	2008c03a 	cmpne	r4,r4,zero
1800b304:	3922b03a 	or	r17,r7,r4
1800b308:	0009883a 	mov	r4,zero
1800b30c:	003f8d06 	br	1800b144 <__alt_data_end+0xf800b144>
1800b310:	0007883a 	mov	r3,zero
1800b314:	003fdd06 	br	1800b28c <__alt_data_end+0xf800b28c>
1800b318:	0009883a 	mov	r4,zero
1800b31c:	003ff706 	br	1800b2fc <__alt_data_end+0xf800b2fc>

1800b320 <__divdf3>:
1800b320:	defff004 	addi	sp,sp,-64
1800b324:	dc800815 	stw	r18,32(sp)
1800b328:	2824d53a 	srli	r18,r5,20
1800b32c:	dd800c15 	stw	r22,48(sp)
1800b330:	282cd7fa 	srli	r22,r5,31
1800b334:	dc000615 	stw	r16,24(sp)
1800b338:	04000434 	movhi	r16,16
1800b33c:	843fffc4 	addi	r16,r16,-1
1800b340:	dfc00f15 	stw	ra,60(sp)
1800b344:	df000e15 	stw	fp,56(sp)
1800b348:	ddc00d15 	stw	r23,52(sp)
1800b34c:	dd400b15 	stw	r21,44(sp)
1800b350:	dd000a15 	stw	r20,40(sp)
1800b354:	dcc00915 	stw	r19,36(sp)
1800b358:	dc400715 	stw	r17,28(sp)
1800b35c:	9481ffcc 	andi	r18,r18,2047
1800b360:	2c20703a 	and	r16,r5,r16
1800b364:	b2003fcc 	andi	r8,r22,255
1800b368:	90006126 	beq	r18,zero,1800b4f0 <__divdf3+0x1d0>
1800b36c:	0081ffc4 	movi	r2,2047
1800b370:	202b883a 	mov	r21,r4
1800b374:	90803726 	beq	r18,r2,1800b454 <__divdf3+0x134>
1800b378:	80800434 	orhi	r2,r16,16
1800b37c:	100490fa 	slli	r2,r2,3
1800b380:	2020d77a 	srli	r16,r4,29
1800b384:	202a90fa 	slli	r21,r4,3
1800b388:	94bf0044 	addi	r18,r18,-1023
1800b38c:	80a0b03a 	or	r16,r16,r2
1800b390:	0013883a 	mov	r9,zero
1800b394:	000b883a 	mov	r5,zero
1800b398:	3806d53a 	srli	r3,r7,20
1800b39c:	382ed7fa 	srli	r23,r7,31
1800b3a0:	04400434 	movhi	r17,16
1800b3a4:	8c7fffc4 	addi	r17,r17,-1
1800b3a8:	18c1ffcc 	andi	r3,r3,2047
1800b3ac:	3029883a 	mov	r20,r6
1800b3b0:	3c62703a 	and	r17,r7,r17
1800b3b4:	bf003fcc 	andi	fp,r23,255
1800b3b8:	18006e26 	beq	r3,zero,1800b574 <__divdf3+0x254>
1800b3bc:	0081ffc4 	movi	r2,2047
1800b3c0:	18806626 	beq	r3,r2,1800b55c <__divdf3+0x23c>
1800b3c4:	88800434 	orhi	r2,r17,16
1800b3c8:	100490fa 	slli	r2,r2,3
1800b3cc:	3022d77a 	srli	r17,r6,29
1800b3d0:	302890fa 	slli	r20,r6,3
1800b3d4:	18ff0044 	addi	r3,r3,-1023
1800b3d8:	88a2b03a 	or	r17,r17,r2
1800b3dc:	000f883a 	mov	r7,zero
1800b3e0:	b5e6f03a 	xor	r19,r22,r23
1800b3e4:	3a4cb03a 	or	r6,r7,r9
1800b3e8:	008003c4 	movi	r2,15
1800b3ec:	9809883a 	mov	r4,r19
1800b3f0:	90c7c83a 	sub	r3,r18,r3
1800b3f4:	9cc03fcc 	andi	r19,r19,255
1800b3f8:	11809636 	bltu	r2,r6,1800b654 <__divdf3+0x334>
1800b3fc:	300c90ba 	slli	r6,r6,2
1800b400:	00860074 	movhi	r2,6145
1800b404:	10ad0504 	addi	r2,r2,-19436
1800b408:	308d883a 	add	r6,r6,r2
1800b40c:	30800017 	ldw	r2,0(r6)
1800b410:	1000683a 	jmp	r2
1800b414:	1800b654 	ori	zero,r3,729
1800b418:	1800b48c 	andi	zero,r3,722
1800b41c:	1800b644 	addi	zero,r3,729
1800b420:	1800b480 	call	11800b48 <__alt_mem_onchip_memory2_0+0x11800b48>
1800b424:	1800b644 	addi	zero,r3,729
1800b428:	1800b618 	cmpnei	zero,r3,728
1800b42c:	1800b644 	addi	zero,r3,729
1800b430:	1800b480 	call	11800b48 <__alt_mem_onchip_memory2_0+0x11800b48>
1800b434:	1800b48c 	andi	zero,r3,722
1800b438:	1800b48c 	andi	zero,r3,722
1800b43c:	1800b618 	cmpnei	zero,r3,728
1800b440:	1800b480 	call	11800b48 <__alt_mem_onchip_memory2_0+0x11800b48>
1800b444:	1800b470 	cmpltui	zero,r3,721
1800b448:	1800b470 	cmpltui	zero,r3,721
1800b44c:	1800b470 	cmpltui	zero,r3,721
1800b450:	1800b9dc 	xori	zero,r3,743
1800b454:	2404b03a 	or	r2,r4,r16
1800b458:	10006c1e 	bne	r2,zero,1800b60c <__divdf3+0x2ec>
1800b45c:	02400204 	movi	r9,8
1800b460:	0021883a 	mov	r16,zero
1800b464:	002b883a 	mov	r21,zero
1800b468:	01400084 	movi	r5,2
1800b46c:	003fca06 	br	1800b398 <__alt_data_end+0xf800b398>
1800b470:	8023883a 	mov	r17,r16
1800b474:	a829883a 	mov	r20,r21
1800b478:	4039883a 	mov	fp,r8
1800b47c:	280f883a 	mov	r7,r5
1800b480:	00800084 	movi	r2,2
1800b484:	3881601e 	bne	r7,r2,1800ba08 <__divdf3+0x6e8>
1800b488:	e027883a 	mov	r19,fp
1800b48c:	9900004c 	andi	r4,r19,1
1800b490:	0081ffc4 	movi	r2,2047
1800b494:	0021883a 	mov	r16,zero
1800b498:	002b883a 	mov	r21,zero
1800b49c:	1004953a 	slli	r2,r2,20
1800b4a0:	20c03fcc 	andi	r3,r4,255
1800b4a4:	01400434 	movhi	r5,16
1800b4a8:	297fffc4 	addi	r5,r5,-1
1800b4ac:	180697fa 	slli	r3,r3,31
1800b4b0:	8160703a 	and	r16,r16,r5
1800b4b4:	80a0b03a 	or	r16,r16,r2
1800b4b8:	80c6b03a 	or	r3,r16,r3
1800b4bc:	a805883a 	mov	r2,r21
1800b4c0:	dfc00f17 	ldw	ra,60(sp)
1800b4c4:	df000e17 	ldw	fp,56(sp)
1800b4c8:	ddc00d17 	ldw	r23,52(sp)
1800b4cc:	dd800c17 	ldw	r22,48(sp)
1800b4d0:	dd400b17 	ldw	r21,44(sp)
1800b4d4:	dd000a17 	ldw	r20,40(sp)
1800b4d8:	dcc00917 	ldw	r19,36(sp)
1800b4dc:	dc800817 	ldw	r18,32(sp)
1800b4e0:	dc400717 	ldw	r17,28(sp)
1800b4e4:	dc000617 	ldw	r16,24(sp)
1800b4e8:	dec01004 	addi	sp,sp,64
1800b4ec:	f800283a 	ret
1800b4f0:	2404b03a 	or	r2,r4,r16
1800b4f4:	2023883a 	mov	r17,r4
1800b4f8:	10003f26 	beq	r2,zero,1800b5f8 <__divdf3+0x2d8>
1800b4fc:	80015e26 	beq	r16,zero,1800ba78 <__divdf3+0x758>
1800b500:	8009883a 	mov	r4,r16
1800b504:	d9800215 	stw	r6,8(sp)
1800b508:	d9c00515 	stw	r7,20(sp)
1800b50c:	da000415 	stw	r8,16(sp)
1800b510:	800d2b40 	call	1800d2b4 <__clzsi2>
1800b514:	d9800217 	ldw	r6,8(sp)
1800b518:	d9c00517 	ldw	r7,20(sp)
1800b51c:	da000417 	ldw	r8,16(sp)
1800b520:	113ffd44 	addi	r4,r2,-11
1800b524:	00c00704 	movi	r3,28
1800b528:	19014f16 	blt	r3,r4,1800ba68 <__divdf3+0x748>
1800b52c:	00c00744 	movi	r3,29
1800b530:	157ffe04 	addi	r21,r2,-8
1800b534:	1907c83a 	sub	r3,r3,r4
1800b538:	8560983a 	sll	r16,r16,r21
1800b53c:	88c6d83a 	srl	r3,r17,r3
1800b540:	8d6a983a 	sll	r21,r17,r21
1800b544:	1c20b03a 	or	r16,r3,r16
1800b548:	1080fcc4 	addi	r2,r2,1011
1800b54c:	00a5c83a 	sub	r18,zero,r2
1800b550:	0013883a 	mov	r9,zero
1800b554:	000b883a 	mov	r5,zero
1800b558:	003f8f06 	br	1800b398 <__alt_data_end+0xf800b398>
1800b55c:	3444b03a 	or	r2,r6,r17
1800b560:	1000231e 	bne	r2,zero,1800b5f0 <__divdf3+0x2d0>
1800b564:	0023883a 	mov	r17,zero
1800b568:	0029883a 	mov	r20,zero
1800b56c:	01c00084 	movi	r7,2
1800b570:	003f9b06 	br	1800b3e0 <__alt_data_end+0xf800b3e0>
1800b574:	3444b03a 	or	r2,r6,r17
1800b578:	10001926 	beq	r2,zero,1800b5e0 <__divdf3+0x2c0>
1800b57c:	88014b26 	beq	r17,zero,1800baac <__divdf3+0x78c>
1800b580:	8809883a 	mov	r4,r17
1800b584:	d9400115 	stw	r5,4(sp)
1800b588:	d9800215 	stw	r6,8(sp)
1800b58c:	da000415 	stw	r8,16(sp)
1800b590:	da400315 	stw	r9,12(sp)
1800b594:	800d2b40 	call	1800d2b4 <__clzsi2>
1800b598:	d9400117 	ldw	r5,4(sp)
1800b59c:	d9800217 	ldw	r6,8(sp)
1800b5a0:	da000417 	ldw	r8,16(sp)
1800b5a4:	da400317 	ldw	r9,12(sp)
1800b5a8:	113ffd44 	addi	r4,r2,-11
1800b5ac:	00c00704 	movi	r3,28
1800b5b0:	19013a16 	blt	r3,r4,1800ba9c <__divdf3+0x77c>
1800b5b4:	00c00744 	movi	r3,29
1800b5b8:	153ffe04 	addi	r20,r2,-8
1800b5bc:	1907c83a 	sub	r3,r3,r4
1800b5c0:	8d22983a 	sll	r17,r17,r20
1800b5c4:	30c6d83a 	srl	r3,r6,r3
1800b5c8:	3528983a 	sll	r20,r6,r20
1800b5cc:	1c62b03a 	or	r17,r3,r17
1800b5d0:	1080fcc4 	addi	r2,r2,1011
1800b5d4:	0087c83a 	sub	r3,zero,r2
1800b5d8:	000f883a 	mov	r7,zero
1800b5dc:	003f8006 	br	1800b3e0 <__alt_data_end+0xf800b3e0>
1800b5e0:	0023883a 	mov	r17,zero
1800b5e4:	0029883a 	mov	r20,zero
1800b5e8:	01c00044 	movi	r7,1
1800b5ec:	003f7c06 	br	1800b3e0 <__alt_data_end+0xf800b3e0>
1800b5f0:	01c000c4 	movi	r7,3
1800b5f4:	003f7a06 	br	1800b3e0 <__alt_data_end+0xf800b3e0>
1800b5f8:	02400104 	movi	r9,4
1800b5fc:	0021883a 	mov	r16,zero
1800b600:	002b883a 	mov	r21,zero
1800b604:	01400044 	movi	r5,1
1800b608:	003f6306 	br	1800b398 <__alt_data_end+0xf800b398>
1800b60c:	02400304 	movi	r9,12
1800b610:	014000c4 	movi	r5,3
1800b614:	003f6006 	br	1800b398 <__alt_data_end+0xf800b398>
1800b618:	04000434 	movhi	r16,16
1800b61c:	0009883a 	mov	r4,zero
1800b620:	843fffc4 	addi	r16,r16,-1
1800b624:	057fffc4 	movi	r21,-1
1800b628:	0081ffc4 	movi	r2,2047
1800b62c:	003f9b06 	br	1800b49c <__alt_data_end+0xf800b49c>
1800b630:	00c00044 	movi	r3,1
1800b634:	1887c83a 	sub	r3,r3,r2
1800b638:	01000e04 	movi	r4,56
1800b63c:	20c1530e 	bge	r4,r3,1800bb8c <__divdf3+0x86c>
1800b640:	9900004c 	andi	r4,r19,1
1800b644:	0005883a 	mov	r2,zero
1800b648:	0021883a 	mov	r16,zero
1800b64c:	002b883a 	mov	r21,zero
1800b650:	003f9206 	br	1800b49c <__alt_data_end+0xf800b49c>
1800b654:	8c012e36 	bltu	r17,r16,1800bb10 <__divdf3+0x7f0>
1800b658:	84412c26 	beq	r16,r17,1800bb0c <__divdf3+0x7ec>
1800b65c:	a82f883a 	mov	r23,r21
1800b660:	18ffffc4 	addi	r3,r3,-1
1800b664:	002b883a 	mov	r21,zero
1800b668:	a004d63a 	srli	r2,r20,24
1800b66c:	8822923a 	slli	r17,r17,8
1800b670:	a028923a 	slli	r20,r20,8
1800b674:	8009883a 	mov	r4,r16
1800b678:	88acb03a 	or	r22,r17,r2
1800b67c:	dd000015 	stw	r20,0(sp)
1800b680:	b028d43a 	srli	r20,r22,16
1800b684:	d8c00215 	stw	r3,8(sp)
1800b688:	b4bfffcc 	andi	r18,r22,65535
1800b68c:	a00b883a 	mov	r5,r20
1800b690:	8000ab80 	call	18000ab8 <__udivsi3>
1800b694:	100b883a 	mov	r5,r2
1800b698:	9009883a 	mov	r4,r18
1800b69c:	1023883a 	mov	r17,r2
1800b6a0:	8000b740 	call	18000b74 <__mulsi3>
1800b6a4:	8009883a 	mov	r4,r16
1800b6a8:	a00b883a 	mov	r5,r20
1800b6ac:	1039883a 	mov	fp,r2
1800b6b0:	8000b1c0 	call	18000b1c <__umodsi3>
1800b6b4:	1004943a 	slli	r2,r2,16
1800b6b8:	b808d43a 	srli	r4,r23,16
1800b6bc:	d8c00217 	ldw	r3,8(sp)
1800b6c0:	2084b03a 	or	r2,r4,r2
1800b6c4:	1700062e 	bgeu	r2,fp,1800b6e0 <__divdf3+0x3c0>
1800b6c8:	1585883a 	add	r2,r2,r22
1800b6cc:	893fffc4 	addi	r4,r17,-1
1800b6d0:	15811d36 	bltu	r2,r22,1800bb48 <__divdf3+0x828>
1800b6d4:	17011c2e 	bgeu	r2,fp,1800bb48 <__divdf3+0x828>
1800b6d8:	8c7fff84 	addi	r17,r17,-2
1800b6dc:	1585883a 	add	r2,r2,r22
1800b6e0:	1739c83a 	sub	fp,r2,fp
1800b6e4:	a00b883a 	mov	r5,r20
1800b6e8:	e009883a 	mov	r4,fp
1800b6ec:	d8c00215 	stw	r3,8(sp)
1800b6f0:	8000ab80 	call	18000ab8 <__udivsi3>
1800b6f4:	100b883a 	mov	r5,r2
1800b6f8:	9009883a 	mov	r4,r18
1800b6fc:	1021883a 	mov	r16,r2
1800b700:	8000b740 	call	18000b74 <__mulsi3>
1800b704:	a00b883a 	mov	r5,r20
1800b708:	e009883a 	mov	r4,fp
1800b70c:	d8800415 	stw	r2,16(sp)
1800b710:	8000b1c0 	call	18000b1c <__umodsi3>
1800b714:	1004943a 	slli	r2,r2,16
1800b718:	da000417 	ldw	r8,16(sp)
1800b71c:	bdffffcc 	andi	r23,r23,65535
1800b720:	b884b03a 	or	r2,r23,r2
1800b724:	d8c00217 	ldw	r3,8(sp)
1800b728:	1200062e 	bgeu	r2,r8,1800b744 <__divdf3+0x424>
1800b72c:	1585883a 	add	r2,r2,r22
1800b730:	813fffc4 	addi	r4,r16,-1
1800b734:	15810236 	bltu	r2,r22,1800bb40 <__divdf3+0x820>
1800b738:	1201012e 	bgeu	r2,r8,1800bb40 <__divdf3+0x820>
1800b73c:	843fff84 	addi	r16,r16,-2
1800b740:	1585883a 	add	r2,r2,r22
1800b744:	8822943a 	slli	r17,r17,16
1800b748:	d9800017 	ldw	r6,0(sp)
1800b74c:	1211c83a 	sub	r8,r2,r8
1800b750:	8c22b03a 	or	r17,r17,r16
1800b754:	373fffcc 	andi	fp,r6,65535
1800b758:	8abfffcc 	andi	r10,r17,65535
1800b75c:	8820d43a 	srli	r16,r17,16
1800b760:	5009883a 	mov	r4,r10
1800b764:	e00b883a 	mov	r5,fp
1800b768:	302ed43a 	srli	r23,r6,16
1800b76c:	d8c00215 	stw	r3,8(sp)
1800b770:	da000415 	stw	r8,16(sp)
1800b774:	da800115 	stw	r10,4(sp)
1800b778:	8000b740 	call	18000b74 <__mulsi3>
1800b77c:	800b883a 	mov	r5,r16
1800b780:	e009883a 	mov	r4,fp
1800b784:	d8800515 	stw	r2,20(sp)
1800b788:	8000b740 	call	18000b74 <__mulsi3>
1800b78c:	8009883a 	mov	r4,r16
1800b790:	b80b883a 	mov	r5,r23
1800b794:	d8800315 	stw	r2,12(sp)
1800b798:	8000b740 	call	18000b74 <__mulsi3>
1800b79c:	da800117 	ldw	r10,4(sp)
1800b7a0:	b80b883a 	mov	r5,r23
1800b7a4:	1021883a 	mov	r16,r2
1800b7a8:	5009883a 	mov	r4,r10
1800b7ac:	8000b740 	call	18000b74 <__mulsi3>
1800b7b0:	d9c00517 	ldw	r7,20(sp)
1800b7b4:	da400317 	ldw	r9,12(sp)
1800b7b8:	d8c00217 	ldw	r3,8(sp)
1800b7bc:	3808d43a 	srli	r4,r7,16
1800b7c0:	1245883a 	add	r2,r2,r9
1800b7c4:	da000417 	ldw	r8,16(sp)
1800b7c8:	2085883a 	add	r2,r4,r2
1800b7cc:	1240022e 	bgeu	r2,r9,1800b7d8 <__divdf3+0x4b8>
1800b7d0:	01000074 	movhi	r4,1
1800b7d4:	8121883a 	add	r16,r16,r4
1800b7d8:	1008d43a 	srli	r4,r2,16
1800b7dc:	1004943a 	slli	r2,r2,16
1800b7e0:	39ffffcc 	andi	r7,r7,65535
1800b7e4:	2409883a 	add	r4,r4,r16
1800b7e8:	11c5883a 	add	r2,r2,r7
1800b7ec:	4100bb36 	bltu	r8,r4,1800badc <__divdf3+0x7bc>
1800b7f0:	4100d726 	beq	r8,r4,1800bb50 <__divdf3+0x830>
1800b7f4:	4109c83a 	sub	r4,r8,r4
1800b7f8:	a8a1c83a 	sub	r16,r21,r2
1800b7fc:	ac2b803a 	cmpltu	r21,r21,r16
1800b800:	256bc83a 	sub	r21,r4,r21
1800b804:	b540d926 	beq	r22,r21,1800bb6c <__divdf3+0x84c>
1800b808:	a00b883a 	mov	r5,r20
1800b80c:	a809883a 	mov	r4,r21
1800b810:	d8c00215 	stw	r3,8(sp)
1800b814:	8000ab80 	call	18000ab8 <__udivsi3>
1800b818:	100b883a 	mov	r5,r2
1800b81c:	9009883a 	mov	r4,r18
1800b820:	d8800515 	stw	r2,20(sp)
1800b824:	8000b740 	call	18000b74 <__mulsi3>
1800b828:	a809883a 	mov	r4,r21
1800b82c:	a00b883a 	mov	r5,r20
1800b830:	d8800415 	stw	r2,16(sp)
1800b834:	8000b1c0 	call	18000b1c <__umodsi3>
1800b838:	1004943a 	slli	r2,r2,16
1800b83c:	8008d43a 	srli	r4,r16,16
1800b840:	da000417 	ldw	r8,16(sp)
1800b844:	d8c00217 	ldw	r3,8(sp)
1800b848:	2084b03a 	or	r2,r4,r2
1800b84c:	d9c00517 	ldw	r7,20(sp)
1800b850:	1200062e 	bgeu	r2,r8,1800b86c <__divdf3+0x54c>
1800b854:	1585883a 	add	r2,r2,r22
1800b858:	393fffc4 	addi	r4,r7,-1
1800b85c:	1580c536 	bltu	r2,r22,1800bb74 <__divdf3+0x854>
1800b860:	1200c42e 	bgeu	r2,r8,1800bb74 <__divdf3+0x854>
1800b864:	39ffff84 	addi	r7,r7,-2
1800b868:	1585883a 	add	r2,r2,r22
1800b86c:	122bc83a 	sub	r21,r2,r8
1800b870:	a00b883a 	mov	r5,r20
1800b874:	a809883a 	mov	r4,r21
1800b878:	d8c00215 	stw	r3,8(sp)
1800b87c:	d9c00515 	stw	r7,20(sp)
1800b880:	8000ab80 	call	18000ab8 <__udivsi3>
1800b884:	9009883a 	mov	r4,r18
1800b888:	100b883a 	mov	r5,r2
1800b88c:	d8800415 	stw	r2,16(sp)
1800b890:	8000b740 	call	18000b74 <__mulsi3>
1800b894:	a809883a 	mov	r4,r21
1800b898:	a00b883a 	mov	r5,r20
1800b89c:	1025883a 	mov	r18,r2
1800b8a0:	8000b1c0 	call	18000b1c <__umodsi3>
1800b8a4:	1004943a 	slli	r2,r2,16
1800b8a8:	813fffcc 	andi	r4,r16,65535
1800b8ac:	d8c00217 	ldw	r3,8(sp)
1800b8b0:	20a0b03a 	or	r16,r4,r2
1800b8b4:	d9c00517 	ldw	r7,20(sp)
1800b8b8:	da000417 	ldw	r8,16(sp)
1800b8bc:	8480062e 	bgeu	r16,r18,1800b8d8 <__divdf3+0x5b8>
1800b8c0:	85a1883a 	add	r16,r16,r22
1800b8c4:	40bfffc4 	addi	r2,r8,-1
1800b8c8:	8580ac36 	bltu	r16,r22,1800bb7c <__divdf3+0x85c>
1800b8cc:	8480ab2e 	bgeu	r16,r18,1800bb7c <__divdf3+0x85c>
1800b8d0:	423fff84 	addi	r8,r8,-2
1800b8d4:	85a1883a 	add	r16,r16,r22
1800b8d8:	3804943a 	slli	r2,r7,16
1800b8dc:	84a1c83a 	sub	r16,r16,r18
1800b8e0:	e009883a 	mov	r4,fp
1800b8e4:	1228b03a 	or	r20,r2,r8
1800b8e8:	a1ffffcc 	andi	r7,r20,65535
1800b8ec:	a024d43a 	srli	r18,r20,16
1800b8f0:	380b883a 	mov	r5,r7
1800b8f4:	d8c00215 	stw	r3,8(sp)
1800b8f8:	d9c00515 	stw	r7,20(sp)
1800b8fc:	8000b740 	call	18000b74 <__mulsi3>
1800b900:	900b883a 	mov	r5,r18
1800b904:	e009883a 	mov	r4,fp
1800b908:	102b883a 	mov	r21,r2
1800b90c:	8000b740 	call	18000b74 <__mulsi3>
1800b910:	900b883a 	mov	r5,r18
1800b914:	b809883a 	mov	r4,r23
1800b918:	1039883a 	mov	fp,r2
1800b91c:	8000b740 	call	18000b74 <__mulsi3>
1800b920:	d9c00517 	ldw	r7,20(sp)
1800b924:	b80b883a 	mov	r5,r23
1800b928:	1025883a 	mov	r18,r2
1800b92c:	3809883a 	mov	r4,r7
1800b930:	8000b740 	call	18000b74 <__mulsi3>
1800b934:	a808d43a 	srli	r4,r21,16
1800b938:	1705883a 	add	r2,r2,fp
1800b93c:	d8c00217 	ldw	r3,8(sp)
1800b940:	2085883a 	add	r2,r4,r2
1800b944:	1700022e 	bgeu	r2,fp,1800b950 <__divdf3+0x630>
1800b948:	01000074 	movhi	r4,1
1800b94c:	9125883a 	add	r18,r18,r4
1800b950:	1008d43a 	srli	r4,r2,16
1800b954:	1004943a 	slli	r2,r2,16
1800b958:	ad7fffcc 	andi	r21,r21,65535
1800b95c:	2489883a 	add	r4,r4,r18
1800b960:	1545883a 	add	r2,r2,r21
1800b964:	81003836 	bltu	r16,r4,1800ba48 <__divdf3+0x728>
1800b968:	81003626 	beq	r16,r4,1800ba44 <__divdf3+0x724>
1800b96c:	a5000054 	ori	r20,r20,1
1800b970:	1880ffc4 	addi	r2,r3,1023
1800b974:	00bf2e0e 	bge	zero,r2,1800b630 <__alt_data_end+0xf800b630>
1800b978:	a10001cc 	andi	r4,r20,7
1800b97c:	20000726 	beq	r4,zero,1800b99c <__divdf3+0x67c>
1800b980:	a10003cc 	andi	r4,r20,15
1800b984:	01400104 	movi	r5,4
1800b988:	21400426 	beq	r4,r5,1800b99c <__divdf3+0x67c>
1800b98c:	a149883a 	add	r4,r20,r5
1800b990:	2529803a 	cmpltu	r20,r4,r20
1800b994:	8d23883a 	add	r17,r17,r20
1800b998:	2029883a 	mov	r20,r4
1800b99c:	8900402c 	andhi	r4,r17,256
1800b9a0:	20000426 	beq	r4,zero,1800b9b4 <__divdf3+0x694>
1800b9a4:	18810004 	addi	r2,r3,1024
1800b9a8:	00ffc034 	movhi	r3,65280
1800b9ac:	18ffffc4 	addi	r3,r3,-1
1800b9b0:	88e2703a 	and	r17,r17,r3
1800b9b4:	00c1ff84 	movi	r3,2046
1800b9b8:	18beb416 	blt	r3,r2,1800b48c <__alt_data_end+0xf800b48c>
1800b9bc:	a028d0fa 	srli	r20,r20,3
1800b9c0:	882a977a 	slli	r21,r17,29
1800b9c4:	8820927a 	slli	r16,r17,9
1800b9c8:	1081ffcc 	andi	r2,r2,2047
1800b9cc:	ad2ab03a 	or	r21,r21,r20
1800b9d0:	8020d33a 	srli	r16,r16,12
1800b9d4:	9900004c 	andi	r4,r19,1
1800b9d8:	003eb006 	br	1800b49c <__alt_data_end+0xf800b49c>
1800b9dc:	8080022c 	andhi	r2,r16,8
1800b9e0:	10001226 	beq	r2,zero,1800ba2c <__divdf3+0x70c>
1800b9e4:	8880022c 	andhi	r2,r17,8
1800b9e8:	1000101e 	bne	r2,zero,1800ba2c <__divdf3+0x70c>
1800b9ec:	00800434 	movhi	r2,16
1800b9f0:	8c000234 	orhi	r16,r17,8
1800b9f4:	10bfffc4 	addi	r2,r2,-1
1800b9f8:	b809883a 	mov	r4,r23
1800b9fc:	80a0703a 	and	r16,r16,r2
1800ba00:	a02b883a 	mov	r21,r20
1800ba04:	003f0806 	br	1800b628 <__alt_data_end+0xf800b628>
1800ba08:	008000c4 	movi	r2,3
1800ba0c:	3880b126 	beq	r7,r2,1800bcd4 <__divdf3+0x9b4>
1800ba10:	00800044 	movi	r2,1
1800ba14:	38805b1e 	bne	r7,r2,1800bb84 <__divdf3+0x864>
1800ba18:	e009883a 	mov	r4,fp
1800ba1c:	0005883a 	mov	r2,zero
1800ba20:	0021883a 	mov	r16,zero
1800ba24:	002b883a 	mov	r21,zero
1800ba28:	003e9c06 	br	1800b49c <__alt_data_end+0xf800b49c>
1800ba2c:	00800434 	movhi	r2,16
1800ba30:	84000234 	orhi	r16,r16,8
1800ba34:	10bfffc4 	addi	r2,r2,-1
1800ba38:	b009883a 	mov	r4,r22
1800ba3c:	80a0703a 	and	r16,r16,r2
1800ba40:	003ef906 	br	1800b628 <__alt_data_end+0xf800b628>
1800ba44:	103fca26 	beq	r2,zero,1800b970 <__alt_data_end+0xf800b970>
1800ba48:	b421883a 	add	r16,r22,r16
1800ba4c:	a17fffc4 	addi	r5,r20,-1
1800ba50:	8580422e 	bgeu	r16,r22,1800bb5c <__divdf3+0x83c>
1800ba54:	2829883a 	mov	r20,r5
1800ba58:	813fc41e 	bne	r16,r4,1800b96c <__alt_data_end+0xf800b96c>
1800ba5c:	d9800017 	ldw	r6,0(sp)
1800ba60:	30bfc21e 	bne	r6,r2,1800b96c <__alt_data_end+0xf800b96c>
1800ba64:	003fc206 	br	1800b970 <__alt_data_end+0xf800b970>
1800ba68:	143ff604 	addi	r16,r2,-40
1800ba6c:	8c20983a 	sll	r16,r17,r16
1800ba70:	002b883a 	mov	r21,zero
1800ba74:	003eb406 	br	1800b548 <__alt_data_end+0xf800b548>
1800ba78:	d9800215 	stw	r6,8(sp)
1800ba7c:	d9c00515 	stw	r7,20(sp)
1800ba80:	da000415 	stw	r8,16(sp)
1800ba84:	800d2b40 	call	1800d2b4 <__clzsi2>
1800ba88:	10800804 	addi	r2,r2,32
1800ba8c:	da000417 	ldw	r8,16(sp)
1800ba90:	d9c00517 	ldw	r7,20(sp)
1800ba94:	d9800217 	ldw	r6,8(sp)
1800ba98:	003ea106 	br	1800b520 <__alt_data_end+0xf800b520>
1800ba9c:	147ff604 	addi	r17,r2,-40
1800baa0:	3462983a 	sll	r17,r6,r17
1800baa4:	0029883a 	mov	r20,zero
1800baa8:	003ec906 	br	1800b5d0 <__alt_data_end+0xf800b5d0>
1800baac:	3009883a 	mov	r4,r6
1800bab0:	d9400115 	stw	r5,4(sp)
1800bab4:	d9800215 	stw	r6,8(sp)
1800bab8:	da000415 	stw	r8,16(sp)
1800babc:	da400315 	stw	r9,12(sp)
1800bac0:	800d2b40 	call	1800d2b4 <__clzsi2>
1800bac4:	10800804 	addi	r2,r2,32
1800bac8:	da400317 	ldw	r9,12(sp)
1800bacc:	da000417 	ldw	r8,16(sp)
1800bad0:	d9800217 	ldw	r6,8(sp)
1800bad4:	d9400117 	ldw	r5,4(sp)
1800bad8:	003eb306 	br	1800b5a8 <__alt_data_end+0xf800b5a8>
1800badc:	d9800017 	ldw	r6,0(sp)
1800bae0:	a9ab883a 	add	r21,r21,r6
1800bae4:	a98b803a 	cmpltu	r5,r21,r6
1800bae8:	2d8b883a 	add	r5,r5,r22
1800baec:	2a11883a 	add	r8,r5,r8
1800baf0:	897fffc4 	addi	r5,r17,-1
1800baf4:	b2000c2e 	bgeu	r22,r8,1800bb28 <__divdf3+0x808>
1800baf8:	41003f36 	bltu	r8,r4,1800bbf8 <__divdf3+0x8d8>
1800bafc:	22006c26 	beq	r4,r8,1800bcb0 <__divdf3+0x990>
1800bb00:	4109c83a 	sub	r4,r8,r4
1800bb04:	2823883a 	mov	r17,r5
1800bb08:	003f3b06 	br	1800b7f8 <__alt_data_end+0xf800b7f8>
1800bb0c:	ad3ed336 	bltu	r21,r20,1800b65c <__alt_data_end+0xf800b65c>
1800bb10:	a804d07a 	srli	r2,r21,1
1800bb14:	802e97fa 	slli	r23,r16,31
1800bb18:	a82a97fa 	slli	r21,r21,31
1800bb1c:	8020d07a 	srli	r16,r16,1
1800bb20:	b8aeb03a 	or	r23,r23,r2
1800bb24:	003ed006 	br	1800b668 <__alt_data_end+0xf800b668>
1800bb28:	b23ff51e 	bne	r22,r8,1800bb00 <__alt_data_end+0xf800bb00>
1800bb2c:	d9800017 	ldw	r6,0(sp)
1800bb30:	a9bff12e 	bgeu	r21,r6,1800baf8 <__alt_data_end+0xf800baf8>
1800bb34:	b109c83a 	sub	r4,r22,r4
1800bb38:	2823883a 	mov	r17,r5
1800bb3c:	003f2e06 	br	1800b7f8 <__alt_data_end+0xf800b7f8>
1800bb40:	2021883a 	mov	r16,r4
1800bb44:	003eff06 	br	1800b744 <__alt_data_end+0xf800b744>
1800bb48:	2023883a 	mov	r17,r4
1800bb4c:	003ee406 	br	1800b6e0 <__alt_data_end+0xf800b6e0>
1800bb50:	a8bfe236 	bltu	r21,r2,1800badc <__alt_data_end+0xf800badc>
1800bb54:	0009883a 	mov	r4,zero
1800bb58:	003f2706 	br	1800b7f8 <__alt_data_end+0xf800b7f8>
1800bb5c:	81002d36 	bltu	r16,r4,1800bc14 <__divdf3+0x8f4>
1800bb60:	24005626 	beq	r4,r16,1800bcbc <__divdf3+0x99c>
1800bb64:	2829883a 	mov	r20,r5
1800bb68:	003f8006 	br	1800b96c <__alt_data_end+0xf800b96c>
1800bb6c:	053fffc4 	movi	r20,-1
1800bb70:	003f7f06 	br	1800b970 <__alt_data_end+0xf800b970>
1800bb74:	200f883a 	mov	r7,r4
1800bb78:	003f3c06 	br	1800b86c <__alt_data_end+0xf800b86c>
1800bb7c:	1011883a 	mov	r8,r2
1800bb80:	003f5506 	br	1800b8d8 <__alt_data_end+0xf800b8d8>
1800bb84:	e027883a 	mov	r19,fp
1800bb88:	003f7906 	br	1800b970 <__alt_data_end+0xf800b970>
1800bb8c:	010007c4 	movi	r4,31
1800bb90:	20c02816 	blt	r4,r3,1800bc34 <__divdf3+0x914>
1800bb94:	00800804 	movi	r2,32
1800bb98:	10c5c83a 	sub	r2,r2,r3
1800bb9c:	888a983a 	sll	r5,r17,r2
1800bba0:	a0c8d83a 	srl	r4,r20,r3
1800bba4:	a084983a 	sll	r2,r20,r2
1800bba8:	88e2d83a 	srl	r17,r17,r3
1800bbac:	2906b03a 	or	r3,r5,r4
1800bbb0:	1004c03a 	cmpne	r2,r2,zero
1800bbb4:	1886b03a 	or	r3,r3,r2
1800bbb8:	188001cc 	andi	r2,r3,7
1800bbbc:	10000726 	beq	r2,zero,1800bbdc <__divdf3+0x8bc>
1800bbc0:	188003cc 	andi	r2,r3,15
1800bbc4:	01000104 	movi	r4,4
1800bbc8:	11000426 	beq	r2,r4,1800bbdc <__divdf3+0x8bc>
1800bbcc:	1805883a 	mov	r2,r3
1800bbd0:	10c00104 	addi	r3,r2,4
1800bbd4:	1885803a 	cmpltu	r2,r3,r2
1800bbd8:	88a3883a 	add	r17,r17,r2
1800bbdc:	8880202c 	andhi	r2,r17,128
1800bbe0:	10002926 	beq	r2,zero,1800bc88 <__divdf3+0x968>
1800bbe4:	9900004c 	andi	r4,r19,1
1800bbe8:	00800044 	movi	r2,1
1800bbec:	0021883a 	mov	r16,zero
1800bbf0:	002b883a 	mov	r21,zero
1800bbf4:	003e2906 	br	1800b49c <__alt_data_end+0xf800b49c>
1800bbf8:	d9800017 	ldw	r6,0(sp)
1800bbfc:	8c7fff84 	addi	r17,r17,-2
1800bc00:	a9ab883a 	add	r21,r21,r6
1800bc04:	a98b803a 	cmpltu	r5,r21,r6
1800bc08:	2d8b883a 	add	r5,r5,r22
1800bc0c:	2a11883a 	add	r8,r5,r8
1800bc10:	003ef806 	br	1800b7f4 <__alt_data_end+0xf800b7f4>
1800bc14:	d9800017 	ldw	r6,0(sp)
1800bc18:	318f883a 	add	r7,r6,r6
1800bc1c:	398b803a 	cmpltu	r5,r7,r6
1800bc20:	2d8d883a 	add	r6,r5,r22
1800bc24:	81a1883a 	add	r16,r16,r6
1800bc28:	a17fff84 	addi	r5,r20,-2
1800bc2c:	d9c00015 	stw	r7,0(sp)
1800bc30:	003f8806 	br	1800ba54 <__alt_data_end+0xf800ba54>
1800bc34:	013ff844 	movi	r4,-31
1800bc38:	2085c83a 	sub	r2,r4,r2
1800bc3c:	8888d83a 	srl	r4,r17,r2
1800bc40:	00800804 	movi	r2,32
1800bc44:	18802126 	beq	r3,r2,1800bccc <__divdf3+0x9ac>
1800bc48:	04001004 	movi	r16,64
1800bc4c:	80c7c83a 	sub	r3,r16,r3
1800bc50:	88e0983a 	sll	r16,r17,r3
1800bc54:	8504b03a 	or	r2,r16,r20
1800bc58:	1004c03a 	cmpne	r2,r2,zero
1800bc5c:	2084b03a 	or	r2,r4,r2
1800bc60:	144001cc 	andi	r17,r2,7
1800bc64:	88000d1e 	bne	r17,zero,1800bc9c <__divdf3+0x97c>
1800bc68:	0021883a 	mov	r16,zero
1800bc6c:	102ad0fa 	srli	r21,r2,3
1800bc70:	9900004c 	andi	r4,r19,1
1800bc74:	0005883a 	mov	r2,zero
1800bc78:	ac6ab03a 	or	r21,r21,r17
1800bc7c:	003e0706 	br	1800b49c <__alt_data_end+0xf800b49c>
1800bc80:	1007883a 	mov	r3,r2
1800bc84:	0023883a 	mov	r17,zero
1800bc88:	8820927a 	slli	r16,r17,9
1800bc8c:	1805883a 	mov	r2,r3
1800bc90:	8822977a 	slli	r17,r17,29
1800bc94:	8020d33a 	srli	r16,r16,12
1800bc98:	003ff406 	br	1800bc6c <__alt_data_end+0xf800bc6c>
1800bc9c:	10c003cc 	andi	r3,r2,15
1800bca0:	01000104 	movi	r4,4
1800bca4:	193ff626 	beq	r3,r4,1800bc80 <__alt_data_end+0xf800bc80>
1800bca8:	0023883a 	mov	r17,zero
1800bcac:	003fc806 	br	1800bbd0 <__alt_data_end+0xf800bbd0>
1800bcb0:	a8bfd136 	bltu	r21,r2,1800bbf8 <__alt_data_end+0xf800bbf8>
1800bcb4:	2823883a 	mov	r17,r5
1800bcb8:	003fa606 	br	1800bb54 <__alt_data_end+0xf800bb54>
1800bcbc:	d9800017 	ldw	r6,0(sp)
1800bcc0:	30bfd436 	bltu	r6,r2,1800bc14 <__alt_data_end+0xf800bc14>
1800bcc4:	2829883a 	mov	r20,r5
1800bcc8:	003f6406 	br	1800ba5c <__alt_data_end+0xf800ba5c>
1800bccc:	0021883a 	mov	r16,zero
1800bcd0:	003fe006 	br	1800bc54 <__alt_data_end+0xf800bc54>
1800bcd4:	00800434 	movhi	r2,16
1800bcd8:	8c000234 	orhi	r16,r17,8
1800bcdc:	10bfffc4 	addi	r2,r2,-1
1800bce0:	e009883a 	mov	r4,fp
1800bce4:	80a0703a 	and	r16,r16,r2
1800bce8:	a02b883a 	mov	r21,r20
1800bcec:	003e4e06 	br	1800b628 <__alt_data_end+0xf800b628>

1800bcf0 <__eqdf2>:
1800bcf0:	2804d53a 	srli	r2,r5,20
1800bcf4:	3806d53a 	srli	r3,r7,20
1800bcf8:	02000434 	movhi	r8,16
1800bcfc:	423fffc4 	addi	r8,r8,-1
1800bd00:	1081ffcc 	andi	r2,r2,2047
1800bd04:	0281ffc4 	movi	r10,2047
1800bd08:	2a12703a 	and	r9,r5,r8
1800bd0c:	18c1ffcc 	andi	r3,r3,2047
1800bd10:	3a10703a 	and	r8,r7,r8
1800bd14:	280ad7fa 	srli	r5,r5,31
1800bd18:	380ed7fa 	srli	r7,r7,31
1800bd1c:	12801026 	beq	r2,r10,1800bd60 <__eqdf2+0x70>
1800bd20:	0281ffc4 	movi	r10,2047
1800bd24:	1a800a26 	beq	r3,r10,1800bd50 <__eqdf2+0x60>
1800bd28:	10c00226 	beq	r2,r3,1800bd34 <__eqdf2+0x44>
1800bd2c:	00800044 	movi	r2,1
1800bd30:	f800283a 	ret
1800bd34:	4a3ffd1e 	bne	r9,r8,1800bd2c <__alt_data_end+0xf800bd2c>
1800bd38:	21bffc1e 	bne	r4,r6,1800bd2c <__alt_data_end+0xf800bd2c>
1800bd3c:	29c00c26 	beq	r5,r7,1800bd70 <__eqdf2+0x80>
1800bd40:	103ffa1e 	bne	r2,zero,1800bd2c <__alt_data_end+0xf800bd2c>
1800bd44:	2244b03a 	or	r2,r4,r9
1800bd48:	1004c03a 	cmpne	r2,r2,zero
1800bd4c:	f800283a 	ret
1800bd50:	3214b03a 	or	r10,r6,r8
1800bd54:	503ff426 	beq	r10,zero,1800bd28 <__alt_data_end+0xf800bd28>
1800bd58:	00800044 	movi	r2,1
1800bd5c:	f800283a 	ret
1800bd60:	2254b03a 	or	r10,r4,r9
1800bd64:	503fee26 	beq	r10,zero,1800bd20 <__alt_data_end+0xf800bd20>
1800bd68:	00800044 	movi	r2,1
1800bd6c:	f800283a 	ret
1800bd70:	0005883a 	mov	r2,zero
1800bd74:	f800283a 	ret

1800bd78 <__gedf2>:
1800bd78:	2804d53a 	srli	r2,r5,20
1800bd7c:	3806d53a 	srli	r3,r7,20
1800bd80:	02000434 	movhi	r8,16
1800bd84:	423fffc4 	addi	r8,r8,-1
1800bd88:	1081ffcc 	andi	r2,r2,2047
1800bd8c:	0241ffc4 	movi	r9,2047
1800bd90:	2a14703a 	and	r10,r5,r8
1800bd94:	18c1ffcc 	andi	r3,r3,2047
1800bd98:	3a10703a 	and	r8,r7,r8
1800bd9c:	280ad7fa 	srli	r5,r5,31
1800bda0:	380ed7fa 	srli	r7,r7,31
1800bda4:	12401d26 	beq	r2,r9,1800be1c <__gedf2+0xa4>
1800bda8:	0241ffc4 	movi	r9,2047
1800bdac:	1a401226 	beq	r3,r9,1800bdf8 <__gedf2+0x80>
1800bdb0:	1000081e 	bne	r2,zero,1800bdd4 <__gedf2+0x5c>
1800bdb4:	2296b03a 	or	r11,r4,r10
1800bdb8:	5813003a 	cmpeq	r9,r11,zero
1800bdbc:	1800091e 	bne	r3,zero,1800bde4 <__gedf2+0x6c>
1800bdc0:	3218b03a 	or	r12,r6,r8
1800bdc4:	6000071e 	bne	r12,zero,1800bde4 <__gedf2+0x6c>
1800bdc8:	0005883a 	mov	r2,zero
1800bdcc:	5800101e 	bne	r11,zero,1800be10 <__gedf2+0x98>
1800bdd0:	f800283a 	ret
1800bdd4:	18000c1e 	bne	r3,zero,1800be08 <__gedf2+0x90>
1800bdd8:	3212b03a 	or	r9,r6,r8
1800bddc:	48000c26 	beq	r9,zero,1800be10 <__gedf2+0x98>
1800bde0:	0013883a 	mov	r9,zero
1800bde4:	39c03fcc 	andi	r7,r7,255
1800bde8:	48000826 	beq	r9,zero,1800be0c <__gedf2+0x94>
1800bdec:	38000926 	beq	r7,zero,1800be14 <__gedf2+0x9c>
1800bdf0:	00800044 	movi	r2,1
1800bdf4:	f800283a 	ret
1800bdf8:	3212b03a 	or	r9,r6,r8
1800bdfc:	483fec26 	beq	r9,zero,1800bdb0 <__alt_data_end+0xf800bdb0>
1800be00:	00bfff84 	movi	r2,-2
1800be04:	f800283a 	ret
1800be08:	39c03fcc 	andi	r7,r7,255
1800be0c:	29c00626 	beq	r5,r7,1800be28 <__gedf2+0xb0>
1800be10:	283ff726 	beq	r5,zero,1800bdf0 <__alt_data_end+0xf800bdf0>
1800be14:	00bfffc4 	movi	r2,-1
1800be18:	f800283a 	ret
1800be1c:	2292b03a 	or	r9,r4,r10
1800be20:	483fe126 	beq	r9,zero,1800bda8 <__alt_data_end+0xf800bda8>
1800be24:	003ff606 	br	1800be00 <__alt_data_end+0xf800be00>
1800be28:	18bff916 	blt	r3,r2,1800be10 <__alt_data_end+0xf800be10>
1800be2c:	10c00316 	blt	r2,r3,1800be3c <__gedf2+0xc4>
1800be30:	42bff736 	bltu	r8,r10,1800be10 <__alt_data_end+0xf800be10>
1800be34:	52000326 	beq	r10,r8,1800be44 <__gedf2+0xcc>
1800be38:	5200042e 	bgeu	r10,r8,1800be4c <__gedf2+0xd4>
1800be3c:	283fec1e 	bne	r5,zero,1800bdf0 <__alt_data_end+0xf800bdf0>
1800be40:	003ff406 	br	1800be14 <__alt_data_end+0xf800be14>
1800be44:	313ff236 	bltu	r6,r4,1800be10 <__alt_data_end+0xf800be10>
1800be48:	21bffc36 	bltu	r4,r6,1800be3c <__alt_data_end+0xf800be3c>
1800be4c:	0005883a 	mov	r2,zero
1800be50:	f800283a 	ret

1800be54 <__ledf2>:
1800be54:	2804d53a 	srli	r2,r5,20
1800be58:	3810d53a 	srli	r8,r7,20
1800be5c:	00c00434 	movhi	r3,16
1800be60:	18ffffc4 	addi	r3,r3,-1
1800be64:	1081ffcc 	andi	r2,r2,2047
1800be68:	0241ffc4 	movi	r9,2047
1800be6c:	28d4703a 	and	r10,r5,r3
1800be70:	4201ffcc 	andi	r8,r8,2047
1800be74:	38c6703a 	and	r3,r7,r3
1800be78:	280ad7fa 	srli	r5,r5,31
1800be7c:	380ed7fa 	srli	r7,r7,31
1800be80:	12401f26 	beq	r2,r9,1800bf00 <__ledf2+0xac>
1800be84:	0241ffc4 	movi	r9,2047
1800be88:	42401426 	beq	r8,r9,1800bedc <__ledf2+0x88>
1800be8c:	1000091e 	bne	r2,zero,1800beb4 <__ledf2+0x60>
1800be90:	2296b03a 	or	r11,r4,r10
1800be94:	5813003a 	cmpeq	r9,r11,zero
1800be98:	29403fcc 	andi	r5,r5,255
1800be9c:	40000a1e 	bne	r8,zero,1800bec8 <__ledf2+0x74>
1800bea0:	30d8b03a 	or	r12,r6,r3
1800bea4:	6000081e 	bne	r12,zero,1800bec8 <__ledf2+0x74>
1800bea8:	0005883a 	mov	r2,zero
1800beac:	5800111e 	bne	r11,zero,1800bef4 <__ledf2+0xa0>
1800beb0:	f800283a 	ret
1800beb4:	29403fcc 	andi	r5,r5,255
1800beb8:	40000c1e 	bne	r8,zero,1800beec <__ledf2+0x98>
1800bebc:	30d2b03a 	or	r9,r6,r3
1800bec0:	48000c26 	beq	r9,zero,1800bef4 <__ledf2+0xa0>
1800bec4:	0013883a 	mov	r9,zero
1800bec8:	39c03fcc 	andi	r7,r7,255
1800becc:	48000826 	beq	r9,zero,1800bef0 <__ledf2+0x9c>
1800bed0:	38001126 	beq	r7,zero,1800bf18 <__ledf2+0xc4>
1800bed4:	00800044 	movi	r2,1
1800bed8:	f800283a 	ret
1800bedc:	30d2b03a 	or	r9,r6,r3
1800bee0:	483fea26 	beq	r9,zero,1800be8c <__alt_data_end+0xf800be8c>
1800bee4:	00800084 	movi	r2,2
1800bee8:	f800283a 	ret
1800beec:	39c03fcc 	andi	r7,r7,255
1800bef0:	39400726 	beq	r7,r5,1800bf10 <__ledf2+0xbc>
1800bef4:	2800081e 	bne	r5,zero,1800bf18 <__ledf2+0xc4>
1800bef8:	00800044 	movi	r2,1
1800befc:	f800283a 	ret
1800bf00:	2292b03a 	or	r9,r4,r10
1800bf04:	483fdf26 	beq	r9,zero,1800be84 <__alt_data_end+0xf800be84>
1800bf08:	00800084 	movi	r2,2
1800bf0c:	f800283a 	ret
1800bf10:	4080030e 	bge	r8,r2,1800bf20 <__ledf2+0xcc>
1800bf14:	383fef26 	beq	r7,zero,1800bed4 <__alt_data_end+0xf800bed4>
1800bf18:	00bfffc4 	movi	r2,-1
1800bf1c:	f800283a 	ret
1800bf20:	123feb16 	blt	r2,r8,1800bed0 <__alt_data_end+0xf800bed0>
1800bf24:	1abff336 	bltu	r3,r10,1800bef4 <__alt_data_end+0xf800bef4>
1800bf28:	50c00326 	beq	r10,r3,1800bf38 <__ledf2+0xe4>
1800bf2c:	50c0042e 	bgeu	r10,r3,1800bf40 <__ledf2+0xec>
1800bf30:	283fe81e 	bne	r5,zero,1800bed4 <__alt_data_end+0xf800bed4>
1800bf34:	003ff806 	br	1800bf18 <__alt_data_end+0xf800bf18>
1800bf38:	313fee36 	bltu	r6,r4,1800bef4 <__alt_data_end+0xf800bef4>
1800bf3c:	21bffc36 	bltu	r4,r6,1800bf30 <__alt_data_end+0xf800bf30>
1800bf40:	0005883a 	mov	r2,zero
1800bf44:	f800283a 	ret

1800bf48 <__muldf3>:
1800bf48:	deffee04 	addi	sp,sp,-72
1800bf4c:	dd000c15 	stw	r20,48(sp)
1800bf50:	2828d53a 	srli	r20,r5,20
1800bf54:	ddc00f15 	stw	r23,60(sp)
1800bf58:	282ed7fa 	srli	r23,r5,31
1800bf5c:	dc000815 	stw	r16,32(sp)
1800bf60:	04000434 	movhi	r16,16
1800bf64:	dcc00b15 	stw	r19,44(sp)
1800bf68:	843fffc4 	addi	r16,r16,-1
1800bf6c:	dfc01115 	stw	ra,68(sp)
1800bf70:	df001015 	stw	fp,64(sp)
1800bf74:	dd800e15 	stw	r22,56(sp)
1800bf78:	dd400d15 	stw	r21,52(sp)
1800bf7c:	dc800a15 	stw	r18,40(sp)
1800bf80:	dc400915 	stw	r17,36(sp)
1800bf84:	a501ffcc 	andi	r20,r20,2047
1800bf88:	2c20703a 	and	r16,r5,r16
1800bf8c:	b827883a 	mov	r19,r23
1800bf90:	ba403fcc 	andi	r9,r23,255
1800bf94:	a0006026 	beq	r20,zero,1800c118 <__muldf3+0x1d0>
1800bf98:	0081ffc4 	movi	r2,2047
1800bf9c:	202d883a 	mov	r22,r4
1800bfa0:	a0803626 	beq	r20,r2,1800c07c <__muldf3+0x134>
1800bfa4:	84000434 	orhi	r16,r16,16
1800bfa8:	200ad77a 	srli	r5,r4,29
1800bfac:	800490fa 	slli	r2,r16,3
1800bfb0:	202c90fa 	slli	r22,r4,3
1800bfb4:	a53f0044 	addi	r20,r20,-1023
1800bfb8:	28a0b03a 	or	r16,r5,r2
1800bfbc:	002b883a 	mov	r21,zero
1800bfc0:	000b883a 	mov	r5,zero
1800bfc4:	3804d53a 	srli	r2,r7,20
1800bfc8:	3838d7fa 	srli	fp,r7,31
1800bfcc:	04400434 	movhi	r17,16
1800bfd0:	8c7fffc4 	addi	r17,r17,-1
1800bfd4:	1081ffcc 	andi	r2,r2,2047
1800bfd8:	3025883a 	mov	r18,r6
1800bfdc:	3c62703a 	and	r17,r7,r17
1800bfe0:	e2803fcc 	andi	r10,fp,255
1800bfe4:	10006d26 	beq	r2,zero,1800c19c <__muldf3+0x254>
1800bfe8:	00c1ffc4 	movi	r3,2047
1800bfec:	10c06526 	beq	r2,r3,1800c184 <__muldf3+0x23c>
1800bff0:	8c400434 	orhi	r17,r17,16
1800bff4:	300ed77a 	srli	r7,r6,29
1800bff8:	880690fa 	slli	r3,r17,3
1800bffc:	302490fa 	slli	r18,r6,3
1800c000:	10bf0044 	addi	r2,r2,-1023
1800c004:	38e2b03a 	or	r17,r7,r3
1800c008:	000f883a 	mov	r7,zero
1800c00c:	a087883a 	add	r3,r20,r2
1800c010:	010003c4 	movi	r4,15
1800c014:	3d44b03a 	or	r2,r7,r21
1800c018:	e5ccf03a 	xor	r6,fp,r23
1800c01c:	1a000044 	addi	r8,r3,1
1800c020:	20809b36 	bltu	r4,r2,1800c290 <__muldf3+0x348>
1800c024:	100490ba 	slli	r2,r2,2
1800c028:	01060074 	movhi	r4,6145
1800c02c:	21300f04 	addi	r4,r4,-16324
1800c030:	1105883a 	add	r2,r2,r4
1800c034:	10800017 	ldw	r2,0(r2)
1800c038:	1000683a 	jmp	r2
1800c03c:	1800c290 	cmplti	zero,r3,778
1800c040:	1800c09c 	xori	zero,r3,770
1800c044:	1800c09c 	xori	zero,r3,770
1800c048:	1800c098 	cmpnei	zero,r3,770
1800c04c:	1800c26c 	andhi	zero,r3,777
1800c050:	1800c26c 	andhi	zero,r3,777
1800c054:	1800c254 	ori	zero,r3,777
1800c058:	1800c098 	cmpnei	zero,r3,770
1800c05c:	1800c26c 	andhi	zero,r3,777
1800c060:	1800c254 	ori	zero,r3,777
1800c064:	1800c26c 	andhi	zero,r3,777
1800c068:	1800c098 	cmpnei	zero,r3,770
1800c06c:	1800c27c 	xorhi	zero,r3,777
1800c070:	1800c27c 	xorhi	zero,r3,777
1800c074:	1800c27c 	xorhi	zero,r3,777
1800c078:	1800c5dc 	xori	zero,r3,791
1800c07c:	2404b03a 	or	r2,r4,r16
1800c080:	1000711e 	bne	r2,zero,1800c248 <__muldf3+0x300>
1800c084:	05400204 	movi	r21,8
1800c088:	0021883a 	mov	r16,zero
1800c08c:	002d883a 	mov	r22,zero
1800c090:	01400084 	movi	r5,2
1800c094:	003fcb06 	br	1800bfc4 <__alt_data_end+0xf800bfc4>
1800c098:	500d883a 	mov	r6,r10
1800c09c:	00800084 	movi	r2,2
1800c0a0:	38805926 	beq	r7,r2,1800c208 <__muldf3+0x2c0>
1800c0a4:	008000c4 	movi	r2,3
1800c0a8:	3881bb26 	beq	r7,r2,1800c798 <__muldf3+0x850>
1800c0ac:	00800044 	movi	r2,1
1800c0b0:	3881961e 	bne	r7,r2,1800c70c <__muldf3+0x7c4>
1800c0b4:	3027883a 	mov	r19,r6
1800c0b8:	0005883a 	mov	r2,zero
1800c0bc:	0021883a 	mov	r16,zero
1800c0c0:	002d883a 	mov	r22,zero
1800c0c4:	1004953a 	slli	r2,r2,20
1800c0c8:	98c03fcc 	andi	r3,r19,255
1800c0cc:	04400434 	movhi	r17,16
1800c0d0:	8c7fffc4 	addi	r17,r17,-1
1800c0d4:	180697fa 	slli	r3,r3,31
1800c0d8:	8460703a 	and	r16,r16,r17
1800c0dc:	80a0b03a 	or	r16,r16,r2
1800c0e0:	80c6b03a 	or	r3,r16,r3
1800c0e4:	b005883a 	mov	r2,r22
1800c0e8:	dfc01117 	ldw	ra,68(sp)
1800c0ec:	df001017 	ldw	fp,64(sp)
1800c0f0:	ddc00f17 	ldw	r23,60(sp)
1800c0f4:	dd800e17 	ldw	r22,56(sp)
1800c0f8:	dd400d17 	ldw	r21,52(sp)
1800c0fc:	dd000c17 	ldw	r20,48(sp)
1800c100:	dcc00b17 	ldw	r19,44(sp)
1800c104:	dc800a17 	ldw	r18,40(sp)
1800c108:	dc400917 	ldw	r17,36(sp)
1800c10c:	dc000817 	ldw	r16,32(sp)
1800c110:	dec01204 	addi	sp,sp,72
1800c114:	f800283a 	ret
1800c118:	2404b03a 	or	r2,r4,r16
1800c11c:	202b883a 	mov	r21,r4
1800c120:	10004426 	beq	r2,zero,1800c234 <__muldf3+0x2ec>
1800c124:	80015126 	beq	r16,zero,1800c66c <__muldf3+0x724>
1800c128:	8009883a 	mov	r4,r16
1800c12c:	d9800715 	stw	r6,28(sp)
1800c130:	d9c00215 	stw	r7,8(sp)
1800c134:	da400415 	stw	r9,16(sp)
1800c138:	800d2b40 	call	1800d2b4 <__clzsi2>
1800c13c:	d9800717 	ldw	r6,28(sp)
1800c140:	d9c00217 	ldw	r7,8(sp)
1800c144:	da400417 	ldw	r9,16(sp)
1800c148:	113ffd44 	addi	r4,r2,-11
1800c14c:	00c00704 	movi	r3,28
1800c150:	19014216 	blt	r3,r4,1800c65c <__muldf3+0x714>
1800c154:	00c00744 	movi	r3,29
1800c158:	15bffe04 	addi	r22,r2,-8
1800c15c:	1907c83a 	sub	r3,r3,r4
1800c160:	85a0983a 	sll	r16,r16,r22
1800c164:	a8c6d83a 	srl	r3,r21,r3
1800c168:	adac983a 	sll	r22,r21,r22
1800c16c:	1c20b03a 	or	r16,r3,r16
1800c170:	1080fcc4 	addi	r2,r2,1011
1800c174:	00a9c83a 	sub	r20,zero,r2
1800c178:	002b883a 	mov	r21,zero
1800c17c:	000b883a 	mov	r5,zero
1800c180:	003f9006 	br	1800bfc4 <__alt_data_end+0xf800bfc4>
1800c184:	3446b03a 	or	r3,r6,r17
1800c188:	1800281e 	bne	r3,zero,1800c22c <__muldf3+0x2e4>
1800c18c:	0023883a 	mov	r17,zero
1800c190:	0025883a 	mov	r18,zero
1800c194:	01c00084 	movi	r7,2
1800c198:	003f9c06 	br	1800c00c <__alt_data_end+0xf800c00c>
1800c19c:	3446b03a 	or	r3,r6,r17
1800c1a0:	18001e26 	beq	r3,zero,1800c21c <__muldf3+0x2d4>
1800c1a4:	88012126 	beq	r17,zero,1800c62c <__muldf3+0x6e4>
1800c1a8:	8809883a 	mov	r4,r17
1800c1ac:	d9400215 	stw	r5,8(sp)
1800c1b0:	d9800715 	stw	r6,28(sp)
1800c1b4:	da400415 	stw	r9,16(sp)
1800c1b8:	da800315 	stw	r10,12(sp)
1800c1bc:	800d2b40 	call	1800d2b4 <__clzsi2>
1800c1c0:	d9400217 	ldw	r5,8(sp)
1800c1c4:	d9800717 	ldw	r6,28(sp)
1800c1c8:	da400417 	ldw	r9,16(sp)
1800c1cc:	da800317 	ldw	r10,12(sp)
1800c1d0:	113ffd44 	addi	r4,r2,-11
1800c1d4:	00c00704 	movi	r3,28
1800c1d8:	19011016 	blt	r3,r4,1800c61c <__muldf3+0x6d4>
1800c1dc:	00c00744 	movi	r3,29
1800c1e0:	14bffe04 	addi	r18,r2,-8
1800c1e4:	1907c83a 	sub	r3,r3,r4
1800c1e8:	8ca2983a 	sll	r17,r17,r18
1800c1ec:	30c6d83a 	srl	r3,r6,r3
1800c1f0:	34a4983a 	sll	r18,r6,r18
1800c1f4:	1c62b03a 	or	r17,r3,r17
1800c1f8:	1080fcc4 	addi	r2,r2,1011
1800c1fc:	0085c83a 	sub	r2,zero,r2
1800c200:	000f883a 	mov	r7,zero
1800c204:	003f8106 	br	1800c00c <__alt_data_end+0xf800c00c>
1800c208:	3027883a 	mov	r19,r6
1800c20c:	0081ffc4 	movi	r2,2047
1800c210:	0021883a 	mov	r16,zero
1800c214:	002d883a 	mov	r22,zero
1800c218:	003faa06 	br	1800c0c4 <__alt_data_end+0xf800c0c4>
1800c21c:	0023883a 	mov	r17,zero
1800c220:	0025883a 	mov	r18,zero
1800c224:	01c00044 	movi	r7,1
1800c228:	003f7806 	br	1800c00c <__alt_data_end+0xf800c00c>
1800c22c:	01c000c4 	movi	r7,3
1800c230:	003f7606 	br	1800c00c <__alt_data_end+0xf800c00c>
1800c234:	05400104 	movi	r21,4
1800c238:	0021883a 	mov	r16,zero
1800c23c:	002d883a 	mov	r22,zero
1800c240:	01400044 	movi	r5,1
1800c244:	003f5f06 	br	1800bfc4 <__alt_data_end+0xf800bfc4>
1800c248:	05400304 	movi	r21,12
1800c24c:	014000c4 	movi	r5,3
1800c250:	003f5c06 	br	1800bfc4 <__alt_data_end+0xf800bfc4>
1800c254:	04000434 	movhi	r16,16
1800c258:	0027883a 	mov	r19,zero
1800c25c:	843fffc4 	addi	r16,r16,-1
1800c260:	05bfffc4 	movi	r22,-1
1800c264:	0081ffc4 	movi	r2,2047
1800c268:	003f9606 	br	1800c0c4 <__alt_data_end+0xf800c0c4>
1800c26c:	8023883a 	mov	r17,r16
1800c270:	b025883a 	mov	r18,r22
1800c274:	280f883a 	mov	r7,r5
1800c278:	003f8806 	br	1800c09c <__alt_data_end+0xf800c09c>
1800c27c:	8023883a 	mov	r17,r16
1800c280:	b025883a 	mov	r18,r22
1800c284:	480d883a 	mov	r6,r9
1800c288:	280f883a 	mov	r7,r5
1800c28c:	003f8306 	br	1800c09c <__alt_data_end+0xf800c09c>
1800c290:	b026d43a 	srli	r19,r22,16
1800c294:	902ed43a 	srli	r23,r18,16
1800c298:	b5bfffcc 	andi	r22,r22,65535
1800c29c:	94bfffcc 	andi	r18,r18,65535
1800c2a0:	b00b883a 	mov	r5,r22
1800c2a4:	9009883a 	mov	r4,r18
1800c2a8:	d8c00515 	stw	r3,20(sp)
1800c2ac:	d9800715 	stw	r6,28(sp)
1800c2b0:	da000615 	stw	r8,24(sp)
1800c2b4:	8000b740 	call	18000b74 <__mulsi3>
1800c2b8:	980b883a 	mov	r5,r19
1800c2bc:	9009883a 	mov	r4,r18
1800c2c0:	1029883a 	mov	r20,r2
1800c2c4:	8000b740 	call	18000b74 <__mulsi3>
1800c2c8:	b80b883a 	mov	r5,r23
1800c2cc:	9809883a 	mov	r4,r19
1800c2d0:	102b883a 	mov	r21,r2
1800c2d4:	8000b740 	call	18000b74 <__mulsi3>
1800c2d8:	b809883a 	mov	r4,r23
1800c2dc:	b00b883a 	mov	r5,r22
1800c2e0:	1039883a 	mov	fp,r2
1800c2e4:	8000b740 	call	18000b74 <__mulsi3>
1800c2e8:	a008d43a 	srli	r4,r20,16
1800c2ec:	1545883a 	add	r2,r2,r21
1800c2f0:	d8c00517 	ldw	r3,20(sp)
1800c2f4:	2085883a 	add	r2,r4,r2
1800c2f8:	d9800717 	ldw	r6,28(sp)
1800c2fc:	da000617 	ldw	r8,24(sp)
1800c300:	1540022e 	bgeu	r2,r21,1800c30c <__muldf3+0x3c4>
1800c304:	01000074 	movhi	r4,1
1800c308:	e139883a 	add	fp,fp,r4
1800c30c:	100e943a 	slli	r7,r2,16
1800c310:	1004d43a 	srli	r2,r2,16
1800c314:	882ad43a 	srli	r21,r17,16
1800c318:	a53fffcc 	andi	r20,r20,65535
1800c31c:	8c7fffcc 	andi	r17,r17,65535
1800c320:	3d29883a 	add	r20,r7,r20
1800c324:	b00b883a 	mov	r5,r22
1800c328:	8809883a 	mov	r4,r17
1800c32c:	d8c00515 	stw	r3,20(sp)
1800c330:	d9800715 	stw	r6,28(sp)
1800c334:	da000615 	stw	r8,24(sp)
1800c338:	dd000115 	stw	r20,4(sp)
1800c33c:	d8800015 	stw	r2,0(sp)
1800c340:	8000b740 	call	18000b74 <__mulsi3>
1800c344:	980b883a 	mov	r5,r19
1800c348:	8809883a 	mov	r4,r17
1800c34c:	d8800215 	stw	r2,8(sp)
1800c350:	8000b740 	call	18000b74 <__mulsi3>
1800c354:	9809883a 	mov	r4,r19
1800c358:	a80b883a 	mov	r5,r21
1800c35c:	1029883a 	mov	r20,r2
1800c360:	8000b740 	call	18000b74 <__mulsi3>
1800c364:	b00b883a 	mov	r5,r22
1800c368:	a809883a 	mov	r4,r21
1800c36c:	d8800415 	stw	r2,16(sp)
1800c370:	8000b740 	call	18000b74 <__mulsi3>
1800c374:	d9c00217 	ldw	r7,8(sp)
1800c378:	1505883a 	add	r2,r2,r20
1800c37c:	d8c00517 	ldw	r3,20(sp)
1800c380:	3826d43a 	srli	r19,r7,16
1800c384:	d9800717 	ldw	r6,28(sp)
1800c388:	da000617 	ldw	r8,24(sp)
1800c38c:	9885883a 	add	r2,r19,r2
1800c390:	da400417 	ldw	r9,16(sp)
1800c394:	1500022e 	bgeu	r2,r20,1800c3a0 <__muldf3+0x458>
1800c398:	01000074 	movhi	r4,1
1800c39c:	4913883a 	add	r9,r9,r4
1800c3a0:	1028d43a 	srli	r20,r2,16
1800c3a4:	1004943a 	slli	r2,r2,16
1800c3a8:	802cd43a 	srli	r22,r16,16
1800c3ac:	843fffcc 	andi	r16,r16,65535
1800c3b0:	3cffffcc 	andi	r19,r7,65535
1800c3b4:	9009883a 	mov	r4,r18
1800c3b8:	800b883a 	mov	r5,r16
1800c3bc:	a269883a 	add	r20,r20,r9
1800c3c0:	d8c00515 	stw	r3,20(sp)
1800c3c4:	d9800715 	stw	r6,28(sp)
1800c3c8:	da000615 	stw	r8,24(sp)
1800c3cc:	14e7883a 	add	r19,r2,r19
1800c3d0:	8000b740 	call	18000b74 <__mulsi3>
1800c3d4:	9009883a 	mov	r4,r18
1800c3d8:	b00b883a 	mov	r5,r22
1800c3dc:	d8800315 	stw	r2,12(sp)
1800c3e0:	8000b740 	call	18000b74 <__mulsi3>
1800c3e4:	b809883a 	mov	r4,r23
1800c3e8:	b00b883a 	mov	r5,r22
1800c3ec:	d8800215 	stw	r2,8(sp)
1800c3f0:	8000b740 	call	18000b74 <__mulsi3>
1800c3f4:	b80b883a 	mov	r5,r23
1800c3f8:	8009883a 	mov	r4,r16
1800c3fc:	d8800415 	stw	r2,16(sp)
1800c400:	8000b740 	call	18000b74 <__mulsi3>
1800c404:	da800317 	ldw	r10,12(sp)
1800c408:	d9c00217 	ldw	r7,8(sp)
1800c40c:	d9000017 	ldw	r4,0(sp)
1800c410:	502ed43a 	srli	r23,r10,16
1800c414:	11c5883a 	add	r2,r2,r7
1800c418:	24e5883a 	add	r18,r4,r19
1800c41c:	b885883a 	add	r2,r23,r2
1800c420:	d8c00517 	ldw	r3,20(sp)
1800c424:	d9800717 	ldw	r6,28(sp)
1800c428:	da000617 	ldw	r8,24(sp)
1800c42c:	da400417 	ldw	r9,16(sp)
1800c430:	11c0022e 	bgeu	r2,r7,1800c43c <__muldf3+0x4f4>
1800c434:	01000074 	movhi	r4,1
1800c438:	4913883a 	add	r9,r9,r4
1800c43c:	100ed43a 	srli	r7,r2,16
1800c440:	1004943a 	slli	r2,r2,16
1800c444:	55ffffcc 	andi	r23,r10,65535
1800c448:	3a53883a 	add	r9,r7,r9
1800c44c:	8809883a 	mov	r4,r17
1800c450:	800b883a 	mov	r5,r16
1800c454:	d8c00515 	stw	r3,20(sp)
1800c458:	d9800715 	stw	r6,28(sp)
1800c45c:	da000615 	stw	r8,24(sp)
1800c460:	da400415 	stw	r9,16(sp)
1800c464:	15ef883a 	add	r23,r2,r23
1800c468:	8000b740 	call	18000b74 <__mulsi3>
1800c46c:	8809883a 	mov	r4,r17
1800c470:	b00b883a 	mov	r5,r22
1800c474:	d8800215 	stw	r2,8(sp)
1800c478:	8000b740 	call	18000b74 <__mulsi3>
1800c47c:	b00b883a 	mov	r5,r22
1800c480:	a809883a 	mov	r4,r21
1800c484:	d8800315 	stw	r2,12(sp)
1800c488:	8000b740 	call	18000b74 <__mulsi3>
1800c48c:	8009883a 	mov	r4,r16
1800c490:	a80b883a 	mov	r5,r21
1800c494:	1023883a 	mov	r17,r2
1800c498:	8000b740 	call	18000b74 <__mulsi3>
1800c49c:	d9c00217 	ldw	r7,8(sp)
1800c4a0:	da800317 	ldw	r10,12(sp)
1800c4a4:	d8c00517 	ldw	r3,20(sp)
1800c4a8:	3808d43a 	srli	r4,r7,16
1800c4ac:	1285883a 	add	r2,r2,r10
1800c4b0:	d9800717 	ldw	r6,28(sp)
1800c4b4:	2085883a 	add	r2,r4,r2
1800c4b8:	da000617 	ldw	r8,24(sp)
1800c4bc:	da400417 	ldw	r9,16(sp)
1800c4c0:	1280022e 	bgeu	r2,r10,1800c4cc <__muldf3+0x584>
1800c4c4:	01000074 	movhi	r4,1
1800c4c8:	8923883a 	add	r17,r17,r4
1800c4cc:	1008943a 	slli	r4,r2,16
1800c4d0:	39ffffcc 	andi	r7,r7,65535
1800c4d4:	e4b9883a 	add	fp,fp,r18
1800c4d8:	21cf883a 	add	r7,r4,r7
1800c4dc:	e4e7803a 	cmpltu	r19,fp,r19
1800c4e0:	3d0f883a 	add	r7,r7,r20
1800c4e4:	bf39883a 	add	fp,r23,fp
1800c4e8:	99c9883a 	add	r4,r19,r7
1800c4ec:	e5ef803a 	cmpltu	r23,fp,r23
1800c4f0:	490b883a 	add	r5,r9,r4
1800c4f4:	1004d43a 	srli	r2,r2,16
1800c4f8:	b965883a 	add	r18,r23,r5
1800c4fc:	24c9803a 	cmpltu	r4,r4,r19
1800c500:	3d29803a 	cmpltu	r20,r7,r20
1800c504:	a128b03a 	or	r20,r20,r4
1800c508:	95ef803a 	cmpltu	r23,r18,r23
1800c50c:	2a53803a 	cmpltu	r9,r5,r9
1800c510:	a0a9883a 	add	r20,r20,r2
1800c514:	4deeb03a 	or	r23,r9,r23
1800c518:	a5ef883a 	add	r23,r20,r23
1800c51c:	bc63883a 	add	r17,r23,r17
1800c520:	e004927a 	slli	r2,fp,9
1800c524:	d9000117 	ldw	r4,4(sp)
1800c528:	882e927a 	slli	r23,r17,9
1800c52c:	9022d5fa 	srli	r17,r18,23
1800c530:	e038d5fa 	srli	fp,fp,23
1800c534:	1104b03a 	or	r2,r2,r4
1800c538:	9024927a 	slli	r18,r18,9
1800c53c:	1004c03a 	cmpne	r2,r2,zero
1800c540:	bc62b03a 	or	r17,r23,r17
1800c544:	1738b03a 	or	fp,r2,fp
1800c548:	8880402c 	andhi	r2,r17,256
1800c54c:	e4a4b03a 	or	r18,fp,r18
1800c550:	10000726 	beq	r2,zero,1800c570 <__muldf3+0x628>
1800c554:	9006d07a 	srli	r3,r18,1
1800c558:	880497fa 	slli	r2,r17,31
1800c55c:	9480004c 	andi	r18,r18,1
1800c560:	8822d07a 	srli	r17,r17,1
1800c564:	1ca4b03a 	or	r18,r3,r18
1800c568:	14a4b03a 	or	r18,r2,r18
1800c56c:	4007883a 	mov	r3,r8
1800c570:	1880ffc4 	addi	r2,r3,1023
1800c574:	0080460e 	bge	zero,r2,1800c690 <__muldf3+0x748>
1800c578:	910001cc 	andi	r4,r18,7
1800c57c:	20000726 	beq	r4,zero,1800c59c <__muldf3+0x654>
1800c580:	910003cc 	andi	r4,r18,15
1800c584:	01400104 	movi	r5,4
1800c588:	21400426 	beq	r4,r5,1800c59c <__muldf3+0x654>
1800c58c:	9149883a 	add	r4,r18,r5
1800c590:	24a5803a 	cmpltu	r18,r4,r18
1800c594:	8ca3883a 	add	r17,r17,r18
1800c598:	2025883a 	mov	r18,r4
1800c59c:	8900402c 	andhi	r4,r17,256
1800c5a0:	20000426 	beq	r4,zero,1800c5b4 <__muldf3+0x66c>
1800c5a4:	18810004 	addi	r2,r3,1024
1800c5a8:	00ffc034 	movhi	r3,65280
1800c5ac:	18ffffc4 	addi	r3,r3,-1
1800c5b0:	88e2703a 	and	r17,r17,r3
1800c5b4:	00c1ff84 	movi	r3,2046
1800c5b8:	18bf1316 	blt	r3,r2,1800c208 <__alt_data_end+0xf800c208>
1800c5bc:	882c977a 	slli	r22,r17,29
1800c5c0:	9024d0fa 	srli	r18,r18,3
1800c5c4:	8822927a 	slli	r17,r17,9
1800c5c8:	1081ffcc 	andi	r2,r2,2047
1800c5cc:	b4acb03a 	or	r22,r22,r18
1800c5d0:	8820d33a 	srli	r16,r17,12
1800c5d4:	3027883a 	mov	r19,r6
1800c5d8:	003eba06 	br	1800c0c4 <__alt_data_end+0xf800c0c4>
1800c5dc:	8080022c 	andhi	r2,r16,8
1800c5e0:	10000926 	beq	r2,zero,1800c608 <__muldf3+0x6c0>
1800c5e4:	8880022c 	andhi	r2,r17,8
1800c5e8:	1000071e 	bne	r2,zero,1800c608 <__muldf3+0x6c0>
1800c5ec:	00800434 	movhi	r2,16
1800c5f0:	8c000234 	orhi	r16,r17,8
1800c5f4:	10bfffc4 	addi	r2,r2,-1
1800c5f8:	e027883a 	mov	r19,fp
1800c5fc:	80a0703a 	and	r16,r16,r2
1800c600:	902d883a 	mov	r22,r18
1800c604:	003f1706 	br	1800c264 <__alt_data_end+0xf800c264>
1800c608:	00800434 	movhi	r2,16
1800c60c:	84000234 	orhi	r16,r16,8
1800c610:	10bfffc4 	addi	r2,r2,-1
1800c614:	80a0703a 	and	r16,r16,r2
1800c618:	003f1206 	br	1800c264 <__alt_data_end+0xf800c264>
1800c61c:	147ff604 	addi	r17,r2,-40
1800c620:	3462983a 	sll	r17,r6,r17
1800c624:	0025883a 	mov	r18,zero
1800c628:	003ef306 	br	1800c1f8 <__alt_data_end+0xf800c1f8>
1800c62c:	3009883a 	mov	r4,r6
1800c630:	d9400215 	stw	r5,8(sp)
1800c634:	d9800715 	stw	r6,28(sp)
1800c638:	da400415 	stw	r9,16(sp)
1800c63c:	da800315 	stw	r10,12(sp)
1800c640:	800d2b40 	call	1800d2b4 <__clzsi2>
1800c644:	10800804 	addi	r2,r2,32
1800c648:	da800317 	ldw	r10,12(sp)
1800c64c:	da400417 	ldw	r9,16(sp)
1800c650:	d9800717 	ldw	r6,28(sp)
1800c654:	d9400217 	ldw	r5,8(sp)
1800c658:	003edd06 	br	1800c1d0 <__alt_data_end+0xf800c1d0>
1800c65c:	143ff604 	addi	r16,r2,-40
1800c660:	ac20983a 	sll	r16,r21,r16
1800c664:	002d883a 	mov	r22,zero
1800c668:	003ec106 	br	1800c170 <__alt_data_end+0xf800c170>
1800c66c:	d9800715 	stw	r6,28(sp)
1800c670:	d9c00215 	stw	r7,8(sp)
1800c674:	da400415 	stw	r9,16(sp)
1800c678:	800d2b40 	call	1800d2b4 <__clzsi2>
1800c67c:	10800804 	addi	r2,r2,32
1800c680:	da400417 	ldw	r9,16(sp)
1800c684:	d9c00217 	ldw	r7,8(sp)
1800c688:	d9800717 	ldw	r6,28(sp)
1800c68c:	003eae06 	br	1800c148 <__alt_data_end+0xf800c148>
1800c690:	00c00044 	movi	r3,1
1800c694:	1887c83a 	sub	r3,r3,r2
1800c698:	01000e04 	movi	r4,56
1800c69c:	20fe8516 	blt	r4,r3,1800c0b4 <__alt_data_end+0xf800c0b4>
1800c6a0:	010007c4 	movi	r4,31
1800c6a4:	20c01b16 	blt	r4,r3,1800c714 <__muldf3+0x7cc>
1800c6a8:	00800804 	movi	r2,32
1800c6ac:	10c5c83a 	sub	r2,r2,r3
1800c6b0:	888a983a 	sll	r5,r17,r2
1800c6b4:	90c8d83a 	srl	r4,r18,r3
1800c6b8:	9084983a 	sll	r2,r18,r2
1800c6bc:	88e2d83a 	srl	r17,r17,r3
1800c6c0:	2906b03a 	or	r3,r5,r4
1800c6c4:	1004c03a 	cmpne	r2,r2,zero
1800c6c8:	1886b03a 	or	r3,r3,r2
1800c6cc:	188001cc 	andi	r2,r3,7
1800c6d0:	10000726 	beq	r2,zero,1800c6f0 <__muldf3+0x7a8>
1800c6d4:	188003cc 	andi	r2,r3,15
1800c6d8:	01000104 	movi	r4,4
1800c6dc:	11000426 	beq	r2,r4,1800c6f0 <__muldf3+0x7a8>
1800c6e0:	1805883a 	mov	r2,r3
1800c6e4:	10c00104 	addi	r3,r2,4
1800c6e8:	1885803a 	cmpltu	r2,r3,r2
1800c6ec:	88a3883a 	add	r17,r17,r2
1800c6f0:	8880202c 	andhi	r2,r17,128
1800c6f4:	10001c26 	beq	r2,zero,1800c768 <__muldf3+0x820>
1800c6f8:	3027883a 	mov	r19,r6
1800c6fc:	00800044 	movi	r2,1
1800c700:	0021883a 	mov	r16,zero
1800c704:	002d883a 	mov	r22,zero
1800c708:	003e6e06 	br	1800c0c4 <__alt_data_end+0xf800c0c4>
1800c70c:	4007883a 	mov	r3,r8
1800c710:	003f9706 	br	1800c570 <__alt_data_end+0xf800c570>
1800c714:	017ff844 	movi	r5,-31
1800c718:	2885c83a 	sub	r2,r5,r2
1800c71c:	888ad83a 	srl	r5,r17,r2
1800c720:	00800804 	movi	r2,32
1800c724:	18801a26 	beq	r3,r2,1800c790 <__muldf3+0x848>
1800c728:	01001004 	movi	r4,64
1800c72c:	20c7c83a 	sub	r3,r4,r3
1800c730:	88e2983a 	sll	r17,r17,r3
1800c734:	8ca4b03a 	or	r18,r17,r18
1800c738:	9004c03a 	cmpne	r2,r18,zero
1800c73c:	2884b03a 	or	r2,r5,r2
1800c740:	144001cc 	andi	r17,r2,7
1800c744:	88000d1e 	bne	r17,zero,1800c77c <__muldf3+0x834>
1800c748:	0021883a 	mov	r16,zero
1800c74c:	102cd0fa 	srli	r22,r2,3
1800c750:	3027883a 	mov	r19,r6
1800c754:	0005883a 	mov	r2,zero
1800c758:	b46cb03a 	or	r22,r22,r17
1800c75c:	003e5906 	br	1800c0c4 <__alt_data_end+0xf800c0c4>
1800c760:	1007883a 	mov	r3,r2
1800c764:	0023883a 	mov	r17,zero
1800c768:	8820927a 	slli	r16,r17,9
1800c76c:	1805883a 	mov	r2,r3
1800c770:	8822977a 	slli	r17,r17,29
1800c774:	8020d33a 	srli	r16,r16,12
1800c778:	003ff406 	br	1800c74c <__alt_data_end+0xf800c74c>
1800c77c:	10c003cc 	andi	r3,r2,15
1800c780:	01000104 	movi	r4,4
1800c784:	193ff626 	beq	r3,r4,1800c760 <__alt_data_end+0xf800c760>
1800c788:	0023883a 	mov	r17,zero
1800c78c:	003fd506 	br	1800c6e4 <__alt_data_end+0xf800c6e4>
1800c790:	0023883a 	mov	r17,zero
1800c794:	003fe706 	br	1800c734 <__alt_data_end+0xf800c734>
1800c798:	00800434 	movhi	r2,16
1800c79c:	8c000234 	orhi	r16,r17,8
1800c7a0:	10bfffc4 	addi	r2,r2,-1
1800c7a4:	3027883a 	mov	r19,r6
1800c7a8:	80a0703a 	and	r16,r16,r2
1800c7ac:	902d883a 	mov	r22,r18
1800c7b0:	003eac06 	br	1800c264 <__alt_data_end+0xf800c264>

1800c7b4 <__subdf3>:
1800c7b4:	02000434 	movhi	r8,16
1800c7b8:	423fffc4 	addi	r8,r8,-1
1800c7bc:	defffb04 	addi	sp,sp,-20
1800c7c0:	2a14703a 	and	r10,r5,r8
1800c7c4:	3812d53a 	srli	r9,r7,20
1800c7c8:	3a10703a 	and	r8,r7,r8
1800c7cc:	2006d77a 	srli	r3,r4,29
1800c7d0:	3004d77a 	srli	r2,r6,29
1800c7d4:	dc000015 	stw	r16,0(sp)
1800c7d8:	501490fa 	slli	r10,r10,3
1800c7dc:	2820d53a 	srli	r16,r5,20
1800c7e0:	401090fa 	slli	r8,r8,3
1800c7e4:	dc800215 	stw	r18,8(sp)
1800c7e8:	dc400115 	stw	r17,4(sp)
1800c7ec:	dfc00415 	stw	ra,16(sp)
1800c7f0:	202290fa 	slli	r17,r4,3
1800c7f4:	dcc00315 	stw	r19,12(sp)
1800c7f8:	4a41ffcc 	andi	r9,r9,2047
1800c7fc:	0101ffc4 	movi	r4,2047
1800c800:	2824d7fa 	srli	r18,r5,31
1800c804:	8401ffcc 	andi	r16,r16,2047
1800c808:	50c6b03a 	or	r3,r10,r3
1800c80c:	380ed7fa 	srli	r7,r7,31
1800c810:	408ab03a 	or	r5,r8,r2
1800c814:	300c90fa 	slli	r6,r6,3
1800c818:	49009626 	beq	r9,r4,1800ca74 <__subdf3+0x2c0>
1800c81c:	39c0005c 	xori	r7,r7,1
1800c820:	8245c83a 	sub	r2,r16,r9
1800c824:	3c807426 	beq	r7,r18,1800c9f8 <__subdf3+0x244>
1800c828:	0080af0e 	bge	zero,r2,1800cae8 <__subdf3+0x334>
1800c82c:	48002a1e 	bne	r9,zero,1800c8d8 <__subdf3+0x124>
1800c830:	2988b03a 	or	r4,r5,r6
1800c834:	20009a1e 	bne	r4,zero,1800caa0 <__subdf3+0x2ec>
1800c838:	888001cc 	andi	r2,r17,7
1800c83c:	10000726 	beq	r2,zero,1800c85c <__subdf3+0xa8>
1800c840:	888003cc 	andi	r2,r17,15
1800c844:	01000104 	movi	r4,4
1800c848:	11000426 	beq	r2,r4,1800c85c <__subdf3+0xa8>
1800c84c:	890b883a 	add	r5,r17,r4
1800c850:	2c63803a 	cmpltu	r17,r5,r17
1800c854:	1c47883a 	add	r3,r3,r17
1800c858:	2823883a 	mov	r17,r5
1800c85c:	1880202c 	andhi	r2,r3,128
1800c860:	10005926 	beq	r2,zero,1800c9c8 <__subdf3+0x214>
1800c864:	84000044 	addi	r16,r16,1
1800c868:	0081ffc4 	movi	r2,2047
1800c86c:	8080be26 	beq	r16,r2,1800cb68 <__subdf3+0x3b4>
1800c870:	017fe034 	movhi	r5,65408
1800c874:	297fffc4 	addi	r5,r5,-1
1800c878:	1946703a 	and	r3,r3,r5
1800c87c:	1804977a 	slli	r2,r3,29
1800c880:	1806927a 	slli	r3,r3,9
1800c884:	8822d0fa 	srli	r17,r17,3
1800c888:	8401ffcc 	andi	r16,r16,2047
1800c88c:	180ad33a 	srli	r5,r3,12
1800c890:	9100004c 	andi	r4,r18,1
1800c894:	1444b03a 	or	r2,r2,r17
1800c898:	80c1ffcc 	andi	r3,r16,2047
1800c89c:	1820953a 	slli	r16,r3,20
1800c8a0:	20c03fcc 	andi	r3,r4,255
1800c8a4:	180897fa 	slli	r4,r3,31
1800c8a8:	00c00434 	movhi	r3,16
1800c8ac:	18ffffc4 	addi	r3,r3,-1
1800c8b0:	28c6703a 	and	r3,r5,r3
1800c8b4:	1c06b03a 	or	r3,r3,r16
1800c8b8:	1906b03a 	or	r3,r3,r4
1800c8bc:	dfc00417 	ldw	ra,16(sp)
1800c8c0:	dcc00317 	ldw	r19,12(sp)
1800c8c4:	dc800217 	ldw	r18,8(sp)
1800c8c8:	dc400117 	ldw	r17,4(sp)
1800c8cc:	dc000017 	ldw	r16,0(sp)
1800c8d0:	dec00504 	addi	sp,sp,20
1800c8d4:	f800283a 	ret
1800c8d8:	0101ffc4 	movi	r4,2047
1800c8dc:	813fd626 	beq	r16,r4,1800c838 <__alt_data_end+0xf800c838>
1800c8e0:	29402034 	orhi	r5,r5,128
1800c8e4:	01000e04 	movi	r4,56
1800c8e8:	2080a316 	blt	r4,r2,1800cb78 <__subdf3+0x3c4>
1800c8ec:	010007c4 	movi	r4,31
1800c8f0:	2080c616 	blt	r4,r2,1800cc0c <__subdf3+0x458>
1800c8f4:	01000804 	movi	r4,32
1800c8f8:	2089c83a 	sub	r4,r4,r2
1800c8fc:	2910983a 	sll	r8,r5,r4
1800c900:	308ed83a 	srl	r7,r6,r2
1800c904:	3108983a 	sll	r4,r6,r4
1800c908:	2884d83a 	srl	r2,r5,r2
1800c90c:	41ccb03a 	or	r6,r8,r7
1800c910:	2008c03a 	cmpne	r4,r4,zero
1800c914:	310cb03a 	or	r6,r6,r4
1800c918:	898dc83a 	sub	r6,r17,r6
1800c91c:	89a3803a 	cmpltu	r17,r17,r6
1800c920:	1887c83a 	sub	r3,r3,r2
1800c924:	1c47c83a 	sub	r3,r3,r17
1800c928:	3023883a 	mov	r17,r6
1800c92c:	1880202c 	andhi	r2,r3,128
1800c930:	10002326 	beq	r2,zero,1800c9c0 <__subdf3+0x20c>
1800c934:	04c02034 	movhi	r19,128
1800c938:	9cffffc4 	addi	r19,r19,-1
1800c93c:	1ce6703a 	and	r19,r3,r19
1800c940:	98007a26 	beq	r19,zero,1800cb2c <__subdf3+0x378>
1800c944:	9809883a 	mov	r4,r19
1800c948:	800d2b40 	call	1800d2b4 <__clzsi2>
1800c94c:	113ffe04 	addi	r4,r2,-8
1800c950:	00c007c4 	movi	r3,31
1800c954:	19007b16 	blt	r3,r4,1800cb44 <__subdf3+0x390>
1800c958:	00800804 	movi	r2,32
1800c95c:	1105c83a 	sub	r2,r2,r4
1800c960:	8884d83a 	srl	r2,r17,r2
1800c964:	9906983a 	sll	r3,r19,r4
1800c968:	8922983a 	sll	r17,r17,r4
1800c96c:	10c4b03a 	or	r2,r2,r3
1800c970:	24007816 	blt	r4,r16,1800cb54 <__subdf3+0x3a0>
1800c974:	2421c83a 	sub	r16,r4,r16
1800c978:	80c00044 	addi	r3,r16,1
1800c97c:	010007c4 	movi	r4,31
1800c980:	20c09516 	blt	r4,r3,1800cbd8 <__subdf3+0x424>
1800c984:	01400804 	movi	r5,32
1800c988:	28cbc83a 	sub	r5,r5,r3
1800c98c:	88c8d83a 	srl	r4,r17,r3
1800c990:	8962983a 	sll	r17,r17,r5
1800c994:	114a983a 	sll	r5,r2,r5
1800c998:	10c6d83a 	srl	r3,r2,r3
1800c99c:	8804c03a 	cmpne	r2,r17,zero
1800c9a0:	290ab03a 	or	r5,r5,r4
1800c9a4:	28a2b03a 	or	r17,r5,r2
1800c9a8:	0021883a 	mov	r16,zero
1800c9ac:	003fa206 	br	1800c838 <__alt_data_end+0xf800c838>
1800c9b0:	2090b03a 	or	r8,r4,r2
1800c9b4:	40018e26 	beq	r8,zero,1800cff0 <__subdf3+0x83c>
1800c9b8:	1007883a 	mov	r3,r2
1800c9bc:	2023883a 	mov	r17,r4
1800c9c0:	888001cc 	andi	r2,r17,7
1800c9c4:	103f9e1e 	bne	r2,zero,1800c840 <__alt_data_end+0xf800c840>
1800c9c8:	1804977a 	slli	r2,r3,29
1800c9cc:	8822d0fa 	srli	r17,r17,3
1800c9d0:	1810d0fa 	srli	r8,r3,3
1800c9d4:	9100004c 	andi	r4,r18,1
1800c9d8:	1444b03a 	or	r2,r2,r17
1800c9dc:	00c1ffc4 	movi	r3,2047
1800c9e0:	80c02826 	beq	r16,r3,1800ca84 <__subdf3+0x2d0>
1800c9e4:	01400434 	movhi	r5,16
1800c9e8:	297fffc4 	addi	r5,r5,-1
1800c9ec:	80e0703a 	and	r16,r16,r3
1800c9f0:	414a703a 	and	r5,r8,r5
1800c9f4:	003fa806 	br	1800c898 <__alt_data_end+0xf800c898>
1800c9f8:	0080630e 	bge	zero,r2,1800cb88 <__subdf3+0x3d4>
1800c9fc:	48003026 	beq	r9,zero,1800cac0 <__subdf3+0x30c>
1800ca00:	0101ffc4 	movi	r4,2047
1800ca04:	813f8c26 	beq	r16,r4,1800c838 <__alt_data_end+0xf800c838>
1800ca08:	29402034 	orhi	r5,r5,128
1800ca0c:	01000e04 	movi	r4,56
1800ca10:	2080a90e 	bge	r4,r2,1800ccb8 <__subdf3+0x504>
1800ca14:	298cb03a 	or	r6,r5,r6
1800ca18:	3012c03a 	cmpne	r9,r6,zero
1800ca1c:	0005883a 	mov	r2,zero
1800ca20:	4c53883a 	add	r9,r9,r17
1800ca24:	4c63803a 	cmpltu	r17,r9,r17
1800ca28:	10c7883a 	add	r3,r2,r3
1800ca2c:	88c7883a 	add	r3,r17,r3
1800ca30:	4823883a 	mov	r17,r9
1800ca34:	1880202c 	andhi	r2,r3,128
1800ca38:	1000d026 	beq	r2,zero,1800cd7c <__subdf3+0x5c8>
1800ca3c:	84000044 	addi	r16,r16,1
1800ca40:	0081ffc4 	movi	r2,2047
1800ca44:	8080fe26 	beq	r16,r2,1800ce40 <__subdf3+0x68c>
1800ca48:	00bfe034 	movhi	r2,65408
1800ca4c:	10bfffc4 	addi	r2,r2,-1
1800ca50:	1886703a 	and	r3,r3,r2
1800ca54:	880ad07a 	srli	r5,r17,1
1800ca58:	180497fa 	slli	r2,r3,31
1800ca5c:	8900004c 	andi	r4,r17,1
1800ca60:	2922b03a 	or	r17,r5,r4
1800ca64:	1806d07a 	srli	r3,r3,1
1800ca68:	1462b03a 	or	r17,r2,r17
1800ca6c:	3825883a 	mov	r18,r7
1800ca70:	003f7106 	br	1800c838 <__alt_data_end+0xf800c838>
1800ca74:	2984b03a 	or	r2,r5,r6
1800ca78:	103f6826 	beq	r2,zero,1800c81c <__alt_data_end+0xf800c81c>
1800ca7c:	39c03fcc 	andi	r7,r7,255
1800ca80:	003f6706 	br	1800c820 <__alt_data_end+0xf800c820>
1800ca84:	4086b03a 	or	r3,r8,r2
1800ca88:	18015226 	beq	r3,zero,1800cfd4 <__subdf3+0x820>
1800ca8c:	00c00434 	movhi	r3,16
1800ca90:	41400234 	orhi	r5,r8,8
1800ca94:	18ffffc4 	addi	r3,r3,-1
1800ca98:	28ca703a 	and	r5,r5,r3
1800ca9c:	003f7e06 	br	1800c898 <__alt_data_end+0xf800c898>
1800caa0:	10bfffc4 	addi	r2,r2,-1
1800caa4:	1000491e 	bne	r2,zero,1800cbcc <__subdf3+0x418>
1800caa8:	898fc83a 	sub	r7,r17,r6
1800caac:	89e3803a 	cmpltu	r17,r17,r7
1800cab0:	1947c83a 	sub	r3,r3,r5
1800cab4:	1c47c83a 	sub	r3,r3,r17
1800cab8:	3823883a 	mov	r17,r7
1800cabc:	003f9b06 	br	1800c92c <__alt_data_end+0xf800c92c>
1800cac0:	2988b03a 	or	r4,r5,r6
1800cac4:	203f5c26 	beq	r4,zero,1800c838 <__alt_data_end+0xf800c838>
1800cac8:	10bfffc4 	addi	r2,r2,-1
1800cacc:	1000931e 	bne	r2,zero,1800cd1c <__subdf3+0x568>
1800cad0:	898d883a 	add	r6,r17,r6
1800cad4:	3463803a 	cmpltu	r17,r6,r17
1800cad8:	1947883a 	add	r3,r3,r5
1800cadc:	88c7883a 	add	r3,r17,r3
1800cae0:	3023883a 	mov	r17,r6
1800cae4:	003fd306 	br	1800ca34 <__alt_data_end+0xf800ca34>
1800cae8:	1000541e 	bne	r2,zero,1800cc3c <__subdf3+0x488>
1800caec:	80800044 	addi	r2,r16,1
1800caf0:	1081ffcc 	andi	r2,r2,2047
1800caf4:	01000044 	movi	r4,1
1800caf8:	2080a20e 	bge	r4,r2,1800cd84 <__subdf3+0x5d0>
1800cafc:	8989c83a 	sub	r4,r17,r6
1800cb00:	8905803a 	cmpltu	r2,r17,r4
1800cb04:	1967c83a 	sub	r19,r3,r5
1800cb08:	98a7c83a 	sub	r19,r19,r2
1800cb0c:	9880202c 	andhi	r2,r19,128
1800cb10:	10006326 	beq	r2,zero,1800cca0 <__subdf3+0x4ec>
1800cb14:	3463c83a 	sub	r17,r6,r17
1800cb18:	28c7c83a 	sub	r3,r5,r3
1800cb1c:	344d803a 	cmpltu	r6,r6,r17
1800cb20:	19a7c83a 	sub	r19,r3,r6
1800cb24:	3825883a 	mov	r18,r7
1800cb28:	983f861e 	bne	r19,zero,1800c944 <__alt_data_end+0xf800c944>
1800cb2c:	8809883a 	mov	r4,r17
1800cb30:	800d2b40 	call	1800d2b4 <__clzsi2>
1800cb34:	10800804 	addi	r2,r2,32
1800cb38:	113ffe04 	addi	r4,r2,-8
1800cb3c:	00c007c4 	movi	r3,31
1800cb40:	193f850e 	bge	r3,r4,1800c958 <__alt_data_end+0xf800c958>
1800cb44:	10bff604 	addi	r2,r2,-40
1800cb48:	8884983a 	sll	r2,r17,r2
1800cb4c:	0023883a 	mov	r17,zero
1800cb50:	243f880e 	bge	r4,r16,1800c974 <__alt_data_end+0xf800c974>
1800cb54:	00ffe034 	movhi	r3,65408
1800cb58:	18ffffc4 	addi	r3,r3,-1
1800cb5c:	8121c83a 	sub	r16,r16,r4
1800cb60:	10c6703a 	and	r3,r2,r3
1800cb64:	003f3406 	br	1800c838 <__alt_data_end+0xf800c838>
1800cb68:	9100004c 	andi	r4,r18,1
1800cb6c:	000b883a 	mov	r5,zero
1800cb70:	0005883a 	mov	r2,zero
1800cb74:	003f4806 	br	1800c898 <__alt_data_end+0xf800c898>
1800cb78:	298cb03a 	or	r6,r5,r6
1800cb7c:	300cc03a 	cmpne	r6,r6,zero
1800cb80:	0005883a 	mov	r2,zero
1800cb84:	003f6406 	br	1800c918 <__alt_data_end+0xf800c918>
1800cb88:	10009a1e 	bne	r2,zero,1800cdf4 <__subdf3+0x640>
1800cb8c:	82400044 	addi	r9,r16,1
1800cb90:	4881ffcc 	andi	r2,r9,2047
1800cb94:	02800044 	movi	r10,1
1800cb98:	5080670e 	bge	r10,r2,1800cd38 <__subdf3+0x584>
1800cb9c:	0081ffc4 	movi	r2,2047
1800cba0:	4880af26 	beq	r9,r2,1800ce60 <__subdf3+0x6ac>
1800cba4:	898d883a 	add	r6,r17,r6
1800cba8:	1945883a 	add	r2,r3,r5
1800cbac:	3447803a 	cmpltu	r3,r6,r17
1800cbb0:	1887883a 	add	r3,r3,r2
1800cbb4:	182297fa 	slli	r17,r3,31
1800cbb8:	300cd07a 	srli	r6,r6,1
1800cbbc:	1806d07a 	srli	r3,r3,1
1800cbc0:	4821883a 	mov	r16,r9
1800cbc4:	89a2b03a 	or	r17,r17,r6
1800cbc8:	003f1b06 	br	1800c838 <__alt_data_end+0xf800c838>
1800cbcc:	0101ffc4 	movi	r4,2047
1800cbd0:	813f441e 	bne	r16,r4,1800c8e4 <__alt_data_end+0xf800c8e4>
1800cbd4:	003f1806 	br	1800c838 <__alt_data_end+0xf800c838>
1800cbd8:	843ff844 	addi	r16,r16,-31
1800cbdc:	01400804 	movi	r5,32
1800cbe0:	1408d83a 	srl	r4,r2,r16
1800cbe4:	19405026 	beq	r3,r5,1800cd28 <__subdf3+0x574>
1800cbe8:	01401004 	movi	r5,64
1800cbec:	28c7c83a 	sub	r3,r5,r3
1800cbf0:	10c4983a 	sll	r2,r2,r3
1800cbf4:	88a2b03a 	or	r17,r17,r2
1800cbf8:	8822c03a 	cmpne	r17,r17,zero
1800cbfc:	2462b03a 	or	r17,r4,r17
1800cc00:	0007883a 	mov	r3,zero
1800cc04:	0021883a 	mov	r16,zero
1800cc08:	003f6d06 	br	1800c9c0 <__alt_data_end+0xf800c9c0>
1800cc0c:	11fff804 	addi	r7,r2,-32
1800cc10:	01000804 	movi	r4,32
1800cc14:	29ced83a 	srl	r7,r5,r7
1800cc18:	11004526 	beq	r2,r4,1800cd30 <__subdf3+0x57c>
1800cc1c:	01001004 	movi	r4,64
1800cc20:	2089c83a 	sub	r4,r4,r2
1800cc24:	2904983a 	sll	r2,r5,r4
1800cc28:	118cb03a 	or	r6,r2,r6
1800cc2c:	300cc03a 	cmpne	r6,r6,zero
1800cc30:	398cb03a 	or	r6,r7,r6
1800cc34:	0005883a 	mov	r2,zero
1800cc38:	003f3706 	br	1800c918 <__alt_data_end+0xf800c918>
1800cc3c:	80002a26 	beq	r16,zero,1800cce8 <__subdf3+0x534>
1800cc40:	0101ffc4 	movi	r4,2047
1800cc44:	49006626 	beq	r9,r4,1800cde0 <__subdf3+0x62c>
1800cc48:	0085c83a 	sub	r2,zero,r2
1800cc4c:	18c02034 	orhi	r3,r3,128
1800cc50:	01000e04 	movi	r4,56
1800cc54:	20807e16 	blt	r4,r2,1800ce50 <__subdf3+0x69c>
1800cc58:	010007c4 	movi	r4,31
1800cc5c:	2080e716 	blt	r4,r2,1800cffc <__subdf3+0x848>
1800cc60:	01000804 	movi	r4,32
1800cc64:	2089c83a 	sub	r4,r4,r2
1800cc68:	1914983a 	sll	r10,r3,r4
1800cc6c:	8890d83a 	srl	r8,r17,r2
1800cc70:	8908983a 	sll	r4,r17,r4
1800cc74:	1884d83a 	srl	r2,r3,r2
1800cc78:	5222b03a 	or	r17,r10,r8
1800cc7c:	2006c03a 	cmpne	r3,r4,zero
1800cc80:	88e2b03a 	or	r17,r17,r3
1800cc84:	3463c83a 	sub	r17,r6,r17
1800cc88:	2885c83a 	sub	r2,r5,r2
1800cc8c:	344d803a 	cmpltu	r6,r6,r17
1800cc90:	1187c83a 	sub	r3,r2,r6
1800cc94:	4821883a 	mov	r16,r9
1800cc98:	3825883a 	mov	r18,r7
1800cc9c:	003f2306 	br	1800c92c <__alt_data_end+0xf800c92c>
1800cca0:	24d0b03a 	or	r8,r4,r19
1800cca4:	40001b1e 	bne	r8,zero,1800cd14 <__subdf3+0x560>
1800cca8:	0005883a 	mov	r2,zero
1800ccac:	0009883a 	mov	r4,zero
1800ccb0:	0021883a 	mov	r16,zero
1800ccb4:	003f4906 	br	1800c9dc <__alt_data_end+0xf800c9dc>
1800ccb8:	010007c4 	movi	r4,31
1800ccbc:	20803a16 	blt	r4,r2,1800cda8 <__subdf3+0x5f4>
1800ccc0:	01000804 	movi	r4,32
1800ccc4:	2089c83a 	sub	r4,r4,r2
1800ccc8:	2912983a 	sll	r9,r5,r4
1800cccc:	3090d83a 	srl	r8,r6,r2
1800ccd0:	3108983a 	sll	r4,r6,r4
1800ccd4:	2884d83a 	srl	r2,r5,r2
1800ccd8:	4a12b03a 	or	r9,r9,r8
1800ccdc:	2008c03a 	cmpne	r4,r4,zero
1800cce0:	4912b03a 	or	r9,r9,r4
1800cce4:	003f4e06 	br	1800ca20 <__alt_data_end+0xf800ca20>
1800cce8:	1c48b03a 	or	r4,r3,r17
1800ccec:	20003c26 	beq	r4,zero,1800cde0 <__subdf3+0x62c>
1800ccf0:	0084303a 	nor	r2,zero,r2
1800ccf4:	1000381e 	bne	r2,zero,1800cdd8 <__subdf3+0x624>
1800ccf8:	3463c83a 	sub	r17,r6,r17
1800ccfc:	28c5c83a 	sub	r2,r5,r3
1800cd00:	344d803a 	cmpltu	r6,r6,r17
1800cd04:	1187c83a 	sub	r3,r2,r6
1800cd08:	4821883a 	mov	r16,r9
1800cd0c:	3825883a 	mov	r18,r7
1800cd10:	003f0606 	br	1800c92c <__alt_data_end+0xf800c92c>
1800cd14:	2023883a 	mov	r17,r4
1800cd18:	003f0906 	br	1800c940 <__alt_data_end+0xf800c940>
1800cd1c:	0101ffc4 	movi	r4,2047
1800cd20:	813f3a1e 	bne	r16,r4,1800ca0c <__alt_data_end+0xf800ca0c>
1800cd24:	003ec406 	br	1800c838 <__alt_data_end+0xf800c838>
1800cd28:	0005883a 	mov	r2,zero
1800cd2c:	003fb106 	br	1800cbf4 <__alt_data_end+0xf800cbf4>
1800cd30:	0005883a 	mov	r2,zero
1800cd34:	003fbc06 	br	1800cc28 <__alt_data_end+0xf800cc28>
1800cd38:	1c44b03a 	or	r2,r3,r17
1800cd3c:	80008e1e 	bne	r16,zero,1800cf78 <__subdf3+0x7c4>
1800cd40:	1000c826 	beq	r2,zero,1800d064 <__subdf3+0x8b0>
1800cd44:	2984b03a 	or	r2,r5,r6
1800cd48:	103ebb26 	beq	r2,zero,1800c838 <__alt_data_end+0xf800c838>
1800cd4c:	8989883a 	add	r4,r17,r6
1800cd50:	1945883a 	add	r2,r3,r5
1800cd54:	2447803a 	cmpltu	r3,r4,r17
1800cd58:	1887883a 	add	r3,r3,r2
1800cd5c:	1880202c 	andhi	r2,r3,128
1800cd60:	2023883a 	mov	r17,r4
1800cd64:	103f1626 	beq	r2,zero,1800c9c0 <__alt_data_end+0xf800c9c0>
1800cd68:	00bfe034 	movhi	r2,65408
1800cd6c:	10bfffc4 	addi	r2,r2,-1
1800cd70:	5021883a 	mov	r16,r10
1800cd74:	1886703a 	and	r3,r3,r2
1800cd78:	003eaf06 	br	1800c838 <__alt_data_end+0xf800c838>
1800cd7c:	3825883a 	mov	r18,r7
1800cd80:	003f0f06 	br	1800c9c0 <__alt_data_end+0xf800c9c0>
1800cd84:	1c44b03a 	or	r2,r3,r17
1800cd88:	8000251e 	bne	r16,zero,1800ce20 <__subdf3+0x66c>
1800cd8c:	1000661e 	bne	r2,zero,1800cf28 <__subdf3+0x774>
1800cd90:	2990b03a 	or	r8,r5,r6
1800cd94:	40009626 	beq	r8,zero,1800cff0 <__subdf3+0x83c>
1800cd98:	2807883a 	mov	r3,r5
1800cd9c:	3023883a 	mov	r17,r6
1800cda0:	3825883a 	mov	r18,r7
1800cda4:	003ea406 	br	1800c838 <__alt_data_end+0xf800c838>
1800cda8:	127ff804 	addi	r9,r2,-32
1800cdac:	01000804 	movi	r4,32
1800cdb0:	2a52d83a 	srl	r9,r5,r9
1800cdb4:	11008c26 	beq	r2,r4,1800cfe8 <__subdf3+0x834>
1800cdb8:	01001004 	movi	r4,64
1800cdbc:	2085c83a 	sub	r2,r4,r2
1800cdc0:	2884983a 	sll	r2,r5,r2
1800cdc4:	118cb03a 	or	r6,r2,r6
1800cdc8:	300cc03a 	cmpne	r6,r6,zero
1800cdcc:	4992b03a 	or	r9,r9,r6
1800cdd0:	0005883a 	mov	r2,zero
1800cdd4:	003f1206 	br	1800ca20 <__alt_data_end+0xf800ca20>
1800cdd8:	0101ffc4 	movi	r4,2047
1800cddc:	493f9c1e 	bne	r9,r4,1800cc50 <__alt_data_end+0xf800cc50>
1800cde0:	2807883a 	mov	r3,r5
1800cde4:	3023883a 	mov	r17,r6
1800cde8:	4821883a 	mov	r16,r9
1800cdec:	3825883a 	mov	r18,r7
1800cdf0:	003e9106 	br	1800c838 <__alt_data_end+0xf800c838>
1800cdf4:	80001f1e 	bne	r16,zero,1800ce74 <__subdf3+0x6c0>
1800cdf8:	1c48b03a 	or	r4,r3,r17
1800cdfc:	20005a26 	beq	r4,zero,1800cf68 <__subdf3+0x7b4>
1800ce00:	0084303a 	nor	r2,zero,r2
1800ce04:	1000561e 	bne	r2,zero,1800cf60 <__subdf3+0x7ac>
1800ce08:	89a3883a 	add	r17,r17,r6
1800ce0c:	1945883a 	add	r2,r3,r5
1800ce10:	898d803a 	cmpltu	r6,r17,r6
1800ce14:	3087883a 	add	r3,r6,r2
1800ce18:	4821883a 	mov	r16,r9
1800ce1c:	003f0506 	br	1800ca34 <__alt_data_end+0xf800ca34>
1800ce20:	10002b1e 	bne	r2,zero,1800ced0 <__subdf3+0x71c>
1800ce24:	2984b03a 	or	r2,r5,r6
1800ce28:	10008026 	beq	r2,zero,1800d02c <__subdf3+0x878>
1800ce2c:	2807883a 	mov	r3,r5
1800ce30:	3023883a 	mov	r17,r6
1800ce34:	3825883a 	mov	r18,r7
1800ce38:	0401ffc4 	movi	r16,2047
1800ce3c:	003e7e06 	br	1800c838 <__alt_data_end+0xf800c838>
1800ce40:	3809883a 	mov	r4,r7
1800ce44:	0011883a 	mov	r8,zero
1800ce48:	0005883a 	mov	r2,zero
1800ce4c:	003ee306 	br	1800c9dc <__alt_data_end+0xf800c9dc>
1800ce50:	1c62b03a 	or	r17,r3,r17
1800ce54:	8822c03a 	cmpne	r17,r17,zero
1800ce58:	0005883a 	mov	r2,zero
1800ce5c:	003f8906 	br	1800cc84 <__alt_data_end+0xf800cc84>
1800ce60:	3809883a 	mov	r4,r7
1800ce64:	4821883a 	mov	r16,r9
1800ce68:	0011883a 	mov	r8,zero
1800ce6c:	0005883a 	mov	r2,zero
1800ce70:	003eda06 	br	1800c9dc <__alt_data_end+0xf800c9dc>
1800ce74:	0101ffc4 	movi	r4,2047
1800ce78:	49003b26 	beq	r9,r4,1800cf68 <__subdf3+0x7b4>
1800ce7c:	0085c83a 	sub	r2,zero,r2
1800ce80:	18c02034 	orhi	r3,r3,128
1800ce84:	01000e04 	movi	r4,56
1800ce88:	20806e16 	blt	r4,r2,1800d044 <__subdf3+0x890>
1800ce8c:	010007c4 	movi	r4,31
1800ce90:	20807716 	blt	r4,r2,1800d070 <__subdf3+0x8bc>
1800ce94:	01000804 	movi	r4,32
1800ce98:	2089c83a 	sub	r4,r4,r2
1800ce9c:	1914983a 	sll	r10,r3,r4
1800cea0:	8890d83a 	srl	r8,r17,r2
1800cea4:	8908983a 	sll	r4,r17,r4
1800cea8:	1884d83a 	srl	r2,r3,r2
1800ceac:	5222b03a 	or	r17,r10,r8
1800ceb0:	2006c03a 	cmpne	r3,r4,zero
1800ceb4:	88e2b03a 	or	r17,r17,r3
1800ceb8:	89a3883a 	add	r17,r17,r6
1800cebc:	1145883a 	add	r2,r2,r5
1800cec0:	898d803a 	cmpltu	r6,r17,r6
1800cec4:	3087883a 	add	r3,r6,r2
1800cec8:	4821883a 	mov	r16,r9
1800cecc:	003ed906 	br	1800ca34 <__alt_data_end+0xf800ca34>
1800ced0:	2984b03a 	or	r2,r5,r6
1800ced4:	10004226 	beq	r2,zero,1800cfe0 <__subdf3+0x82c>
1800ced8:	1808d0fa 	srli	r4,r3,3
1800cedc:	8822d0fa 	srli	r17,r17,3
1800cee0:	1806977a 	slli	r3,r3,29
1800cee4:	2080022c 	andhi	r2,r4,8
1800cee8:	1c62b03a 	or	r17,r3,r17
1800ceec:	10000826 	beq	r2,zero,1800cf10 <__subdf3+0x75c>
1800cef0:	2812d0fa 	srli	r9,r5,3
1800cef4:	4880022c 	andhi	r2,r9,8
1800cef8:	1000051e 	bne	r2,zero,1800cf10 <__subdf3+0x75c>
1800cefc:	300cd0fa 	srli	r6,r6,3
1800cf00:	2804977a 	slli	r2,r5,29
1800cf04:	4809883a 	mov	r4,r9
1800cf08:	3825883a 	mov	r18,r7
1800cf0c:	11a2b03a 	or	r17,r2,r6
1800cf10:	8806d77a 	srli	r3,r17,29
1800cf14:	200890fa 	slli	r4,r4,3
1800cf18:	882290fa 	slli	r17,r17,3
1800cf1c:	0401ffc4 	movi	r16,2047
1800cf20:	1906b03a 	or	r3,r3,r4
1800cf24:	003e4406 	br	1800c838 <__alt_data_end+0xf800c838>
1800cf28:	2984b03a 	or	r2,r5,r6
1800cf2c:	103e4226 	beq	r2,zero,1800c838 <__alt_data_end+0xf800c838>
1800cf30:	8989c83a 	sub	r4,r17,r6
1800cf34:	8911803a 	cmpltu	r8,r17,r4
1800cf38:	1945c83a 	sub	r2,r3,r5
1800cf3c:	1205c83a 	sub	r2,r2,r8
1800cf40:	1200202c 	andhi	r8,r2,128
1800cf44:	403e9a26 	beq	r8,zero,1800c9b0 <__alt_data_end+0xf800c9b0>
1800cf48:	3463c83a 	sub	r17,r6,r17
1800cf4c:	28c5c83a 	sub	r2,r5,r3
1800cf50:	344d803a 	cmpltu	r6,r6,r17
1800cf54:	1187c83a 	sub	r3,r2,r6
1800cf58:	3825883a 	mov	r18,r7
1800cf5c:	003e3606 	br	1800c838 <__alt_data_end+0xf800c838>
1800cf60:	0101ffc4 	movi	r4,2047
1800cf64:	493fc71e 	bne	r9,r4,1800ce84 <__alt_data_end+0xf800ce84>
1800cf68:	2807883a 	mov	r3,r5
1800cf6c:	3023883a 	mov	r17,r6
1800cf70:	4821883a 	mov	r16,r9
1800cf74:	003e3006 	br	1800c838 <__alt_data_end+0xf800c838>
1800cf78:	10003626 	beq	r2,zero,1800d054 <__subdf3+0x8a0>
1800cf7c:	2984b03a 	or	r2,r5,r6
1800cf80:	10001726 	beq	r2,zero,1800cfe0 <__subdf3+0x82c>
1800cf84:	1808d0fa 	srli	r4,r3,3
1800cf88:	8822d0fa 	srli	r17,r17,3
1800cf8c:	1806977a 	slli	r3,r3,29
1800cf90:	2080022c 	andhi	r2,r4,8
1800cf94:	1c62b03a 	or	r17,r3,r17
1800cf98:	10000726 	beq	r2,zero,1800cfb8 <__subdf3+0x804>
1800cf9c:	2812d0fa 	srli	r9,r5,3
1800cfa0:	4880022c 	andhi	r2,r9,8
1800cfa4:	1000041e 	bne	r2,zero,1800cfb8 <__subdf3+0x804>
1800cfa8:	300cd0fa 	srli	r6,r6,3
1800cfac:	2804977a 	slli	r2,r5,29
1800cfb0:	4809883a 	mov	r4,r9
1800cfb4:	11a2b03a 	or	r17,r2,r6
1800cfb8:	8806d77a 	srli	r3,r17,29
1800cfbc:	200890fa 	slli	r4,r4,3
1800cfc0:	882290fa 	slli	r17,r17,3
1800cfc4:	3825883a 	mov	r18,r7
1800cfc8:	1906b03a 	or	r3,r3,r4
1800cfcc:	0401ffc4 	movi	r16,2047
1800cfd0:	003e1906 	br	1800c838 <__alt_data_end+0xf800c838>
1800cfd4:	000b883a 	mov	r5,zero
1800cfd8:	0005883a 	mov	r2,zero
1800cfdc:	003e2e06 	br	1800c898 <__alt_data_end+0xf800c898>
1800cfe0:	0401ffc4 	movi	r16,2047
1800cfe4:	003e1406 	br	1800c838 <__alt_data_end+0xf800c838>
1800cfe8:	0005883a 	mov	r2,zero
1800cfec:	003f7506 	br	1800cdc4 <__alt_data_end+0xf800cdc4>
1800cff0:	0005883a 	mov	r2,zero
1800cff4:	0009883a 	mov	r4,zero
1800cff8:	003e7806 	br	1800c9dc <__alt_data_end+0xf800c9dc>
1800cffc:	123ff804 	addi	r8,r2,-32
1800d000:	01000804 	movi	r4,32
1800d004:	1a10d83a 	srl	r8,r3,r8
1800d008:	11002526 	beq	r2,r4,1800d0a0 <__subdf3+0x8ec>
1800d00c:	01001004 	movi	r4,64
1800d010:	2085c83a 	sub	r2,r4,r2
1800d014:	1884983a 	sll	r2,r3,r2
1800d018:	1444b03a 	or	r2,r2,r17
1800d01c:	1004c03a 	cmpne	r2,r2,zero
1800d020:	40a2b03a 	or	r17,r8,r2
1800d024:	0005883a 	mov	r2,zero
1800d028:	003f1606 	br	1800cc84 <__alt_data_end+0xf800cc84>
1800d02c:	02000434 	movhi	r8,16
1800d030:	0009883a 	mov	r4,zero
1800d034:	423fffc4 	addi	r8,r8,-1
1800d038:	00bfffc4 	movi	r2,-1
1800d03c:	0401ffc4 	movi	r16,2047
1800d040:	003e6606 	br	1800c9dc <__alt_data_end+0xf800c9dc>
1800d044:	1c62b03a 	or	r17,r3,r17
1800d048:	8822c03a 	cmpne	r17,r17,zero
1800d04c:	0005883a 	mov	r2,zero
1800d050:	003f9906 	br	1800ceb8 <__alt_data_end+0xf800ceb8>
1800d054:	2807883a 	mov	r3,r5
1800d058:	3023883a 	mov	r17,r6
1800d05c:	0401ffc4 	movi	r16,2047
1800d060:	003df506 	br	1800c838 <__alt_data_end+0xf800c838>
1800d064:	2807883a 	mov	r3,r5
1800d068:	3023883a 	mov	r17,r6
1800d06c:	003df206 	br	1800c838 <__alt_data_end+0xf800c838>
1800d070:	123ff804 	addi	r8,r2,-32
1800d074:	01000804 	movi	r4,32
1800d078:	1a10d83a 	srl	r8,r3,r8
1800d07c:	11000a26 	beq	r2,r4,1800d0a8 <__subdf3+0x8f4>
1800d080:	01001004 	movi	r4,64
1800d084:	2085c83a 	sub	r2,r4,r2
1800d088:	1884983a 	sll	r2,r3,r2
1800d08c:	1444b03a 	or	r2,r2,r17
1800d090:	1004c03a 	cmpne	r2,r2,zero
1800d094:	40a2b03a 	or	r17,r8,r2
1800d098:	0005883a 	mov	r2,zero
1800d09c:	003f8606 	br	1800ceb8 <__alt_data_end+0xf800ceb8>
1800d0a0:	0005883a 	mov	r2,zero
1800d0a4:	003fdc06 	br	1800d018 <__alt_data_end+0xf800d018>
1800d0a8:	0005883a 	mov	r2,zero
1800d0ac:	003ff706 	br	1800d08c <__alt_data_end+0xf800d08c>

1800d0b0 <__fixdfsi>:
1800d0b0:	280cd53a 	srli	r6,r5,20
1800d0b4:	00c00434 	movhi	r3,16
1800d0b8:	18ffffc4 	addi	r3,r3,-1
1800d0bc:	3181ffcc 	andi	r6,r6,2047
1800d0c0:	01c0ff84 	movi	r7,1022
1800d0c4:	28c6703a 	and	r3,r5,r3
1800d0c8:	280ad7fa 	srli	r5,r5,31
1800d0cc:	3980120e 	bge	r7,r6,1800d118 <__fixdfsi+0x68>
1800d0d0:	00810744 	movi	r2,1053
1800d0d4:	11800c16 	blt	r2,r6,1800d108 <__fixdfsi+0x58>
1800d0d8:	00810cc4 	movi	r2,1075
1800d0dc:	1185c83a 	sub	r2,r2,r6
1800d0e0:	01c007c4 	movi	r7,31
1800d0e4:	18c00434 	orhi	r3,r3,16
1800d0e8:	38800d16 	blt	r7,r2,1800d120 <__fixdfsi+0x70>
1800d0ec:	31befb44 	addi	r6,r6,-1043
1800d0f0:	2084d83a 	srl	r2,r4,r2
1800d0f4:	1986983a 	sll	r3,r3,r6
1800d0f8:	1884b03a 	or	r2,r3,r2
1800d0fc:	28000726 	beq	r5,zero,1800d11c <__fixdfsi+0x6c>
1800d100:	0085c83a 	sub	r2,zero,r2
1800d104:	f800283a 	ret
1800d108:	00a00034 	movhi	r2,32768
1800d10c:	10bfffc4 	addi	r2,r2,-1
1800d110:	2885883a 	add	r2,r5,r2
1800d114:	f800283a 	ret
1800d118:	0005883a 	mov	r2,zero
1800d11c:	f800283a 	ret
1800d120:	008104c4 	movi	r2,1043
1800d124:	1185c83a 	sub	r2,r2,r6
1800d128:	1884d83a 	srl	r2,r3,r2
1800d12c:	003ff306 	br	1800d0fc <__alt_data_end+0xf800d0fc>

1800d130 <__floatsidf>:
1800d130:	defffd04 	addi	sp,sp,-12
1800d134:	dfc00215 	stw	ra,8(sp)
1800d138:	dc400115 	stw	r17,4(sp)
1800d13c:	dc000015 	stw	r16,0(sp)
1800d140:	20002b26 	beq	r4,zero,1800d1f0 <__floatsidf+0xc0>
1800d144:	2023883a 	mov	r17,r4
1800d148:	2020d7fa 	srli	r16,r4,31
1800d14c:	20002d16 	blt	r4,zero,1800d204 <__floatsidf+0xd4>
1800d150:	8809883a 	mov	r4,r17
1800d154:	800d2b40 	call	1800d2b4 <__clzsi2>
1800d158:	01410784 	movi	r5,1054
1800d15c:	288bc83a 	sub	r5,r5,r2
1800d160:	01010cc4 	movi	r4,1075
1800d164:	2149c83a 	sub	r4,r4,r5
1800d168:	00c007c4 	movi	r3,31
1800d16c:	1900160e 	bge	r3,r4,1800d1c8 <__floatsidf+0x98>
1800d170:	00c104c4 	movi	r3,1043
1800d174:	1947c83a 	sub	r3,r3,r5
1800d178:	88c6983a 	sll	r3,r17,r3
1800d17c:	00800434 	movhi	r2,16
1800d180:	10bfffc4 	addi	r2,r2,-1
1800d184:	1886703a 	and	r3,r3,r2
1800d188:	2941ffcc 	andi	r5,r5,2047
1800d18c:	800d883a 	mov	r6,r16
1800d190:	0005883a 	mov	r2,zero
1800d194:	280a953a 	slli	r5,r5,20
1800d198:	31803fcc 	andi	r6,r6,255
1800d19c:	01000434 	movhi	r4,16
1800d1a0:	300c97fa 	slli	r6,r6,31
1800d1a4:	213fffc4 	addi	r4,r4,-1
1800d1a8:	1906703a 	and	r3,r3,r4
1800d1ac:	1946b03a 	or	r3,r3,r5
1800d1b0:	1986b03a 	or	r3,r3,r6
1800d1b4:	dfc00217 	ldw	ra,8(sp)
1800d1b8:	dc400117 	ldw	r17,4(sp)
1800d1bc:	dc000017 	ldw	r16,0(sp)
1800d1c0:	dec00304 	addi	sp,sp,12
1800d1c4:	f800283a 	ret
1800d1c8:	00c002c4 	movi	r3,11
1800d1cc:	1887c83a 	sub	r3,r3,r2
1800d1d0:	88c6d83a 	srl	r3,r17,r3
1800d1d4:	8904983a 	sll	r2,r17,r4
1800d1d8:	01000434 	movhi	r4,16
1800d1dc:	213fffc4 	addi	r4,r4,-1
1800d1e0:	2941ffcc 	andi	r5,r5,2047
1800d1e4:	1906703a 	and	r3,r3,r4
1800d1e8:	800d883a 	mov	r6,r16
1800d1ec:	003fe906 	br	1800d194 <__alt_data_end+0xf800d194>
1800d1f0:	000d883a 	mov	r6,zero
1800d1f4:	000b883a 	mov	r5,zero
1800d1f8:	0007883a 	mov	r3,zero
1800d1fc:	0005883a 	mov	r2,zero
1800d200:	003fe406 	br	1800d194 <__alt_data_end+0xf800d194>
1800d204:	0123c83a 	sub	r17,zero,r4
1800d208:	003fd106 	br	1800d150 <__alt_data_end+0xf800d150>

1800d20c <__floatunsidf>:
1800d20c:	defffe04 	addi	sp,sp,-8
1800d210:	dc000015 	stw	r16,0(sp)
1800d214:	dfc00115 	stw	ra,4(sp)
1800d218:	2021883a 	mov	r16,r4
1800d21c:	20002226 	beq	r4,zero,1800d2a8 <__floatunsidf+0x9c>
1800d220:	800d2b40 	call	1800d2b4 <__clzsi2>
1800d224:	01010784 	movi	r4,1054
1800d228:	2089c83a 	sub	r4,r4,r2
1800d22c:	01810cc4 	movi	r6,1075
1800d230:	310dc83a 	sub	r6,r6,r4
1800d234:	00c007c4 	movi	r3,31
1800d238:	1980120e 	bge	r3,r6,1800d284 <__floatunsidf+0x78>
1800d23c:	00c104c4 	movi	r3,1043
1800d240:	1907c83a 	sub	r3,r3,r4
1800d244:	80ca983a 	sll	r5,r16,r3
1800d248:	00800434 	movhi	r2,16
1800d24c:	10bfffc4 	addi	r2,r2,-1
1800d250:	2101ffcc 	andi	r4,r4,2047
1800d254:	0021883a 	mov	r16,zero
1800d258:	288a703a 	and	r5,r5,r2
1800d25c:	2008953a 	slli	r4,r4,20
1800d260:	00c00434 	movhi	r3,16
1800d264:	18ffffc4 	addi	r3,r3,-1
1800d268:	28c6703a 	and	r3,r5,r3
1800d26c:	8005883a 	mov	r2,r16
1800d270:	1906b03a 	or	r3,r3,r4
1800d274:	dfc00117 	ldw	ra,4(sp)
1800d278:	dc000017 	ldw	r16,0(sp)
1800d27c:	dec00204 	addi	sp,sp,8
1800d280:	f800283a 	ret
1800d284:	00c002c4 	movi	r3,11
1800d288:	188bc83a 	sub	r5,r3,r2
1800d28c:	814ad83a 	srl	r5,r16,r5
1800d290:	00c00434 	movhi	r3,16
1800d294:	18ffffc4 	addi	r3,r3,-1
1800d298:	81a0983a 	sll	r16,r16,r6
1800d29c:	2101ffcc 	andi	r4,r4,2047
1800d2a0:	28ca703a 	and	r5,r5,r3
1800d2a4:	003fed06 	br	1800d25c <__alt_data_end+0xf800d25c>
1800d2a8:	0009883a 	mov	r4,zero
1800d2ac:	000b883a 	mov	r5,zero
1800d2b0:	003fea06 	br	1800d25c <__alt_data_end+0xf800d25c>

1800d2b4 <__clzsi2>:
1800d2b4:	00bfffd4 	movui	r2,65535
1800d2b8:	11000536 	bltu	r2,r4,1800d2d0 <__clzsi2+0x1c>
1800d2bc:	00803fc4 	movi	r2,255
1800d2c0:	11000f36 	bltu	r2,r4,1800d300 <__clzsi2+0x4c>
1800d2c4:	00800804 	movi	r2,32
1800d2c8:	0007883a 	mov	r3,zero
1800d2cc:	00000506 	br	1800d2e4 <__clzsi2+0x30>
1800d2d0:	00804034 	movhi	r2,256
1800d2d4:	10bfffc4 	addi	r2,r2,-1
1800d2d8:	11000c2e 	bgeu	r2,r4,1800d30c <__clzsi2+0x58>
1800d2dc:	00800204 	movi	r2,8
1800d2e0:	00c00604 	movi	r3,24
1800d2e4:	20c8d83a 	srl	r4,r4,r3
1800d2e8:	00c60074 	movhi	r3,6145
1800d2ec:	18ff6a04 	addi	r3,r3,-600
1800d2f0:	1909883a 	add	r4,r3,r4
1800d2f4:	20c00003 	ldbu	r3,0(r4)
1800d2f8:	10c5c83a 	sub	r2,r2,r3
1800d2fc:	f800283a 	ret
1800d300:	00800604 	movi	r2,24
1800d304:	00c00204 	movi	r3,8
1800d308:	003ff606 	br	1800d2e4 <__alt_data_end+0xf800d2e4>
1800d30c:	00800404 	movi	r2,16
1800d310:	1007883a 	mov	r3,r2
1800d314:	003ff306 	br	1800d2e4 <__alt_data_end+0xf800d2e4>

1800d318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800d318:	defffe04 	addi	sp,sp,-8
1800d31c:	dfc00115 	stw	ra,4(sp)
1800d320:	df000015 	stw	fp,0(sp)
1800d324:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800d328:	d0a00d17 	ldw	r2,-32716(gp)
1800d32c:	10000326 	beq	r2,zero,1800d33c <alt_get_errno+0x24>
1800d330:	d0a00d17 	ldw	r2,-32716(gp)
1800d334:	103ee83a 	callr	r2
1800d338:	00000106 	br	1800d340 <alt_get_errno+0x28>
1800d33c:	d0a7e904 	addi	r2,gp,-24668
}
1800d340:	e037883a 	mov	sp,fp
1800d344:	dfc00117 	ldw	ra,4(sp)
1800d348:	df000017 	ldw	fp,0(sp)
1800d34c:	dec00204 	addi	sp,sp,8
1800d350:	f800283a 	ret

1800d354 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1800d354:	defffb04 	addi	sp,sp,-20
1800d358:	dfc00415 	stw	ra,16(sp)
1800d35c:	df000315 	stw	fp,12(sp)
1800d360:	df000304 	addi	fp,sp,12
1800d364:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1800d368:	e0bfff17 	ldw	r2,-4(fp)
1800d36c:	10000816 	blt	r2,zero,1800d390 <close+0x3c>
1800d370:	01400304 	movi	r5,12
1800d374:	e13fff17 	ldw	r4,-4(fp)
1800d378:	8000b740 	call	18000b74 <__mulsi3>
1800d37c:	1007883a 	mov	r3,r2
1800d380:	00860074 	movhi	r2,6145
1800d384:	1082fe04 	addi	r2,r2,3064
1800d388:	1885883a 	add	r2,r3,r2
1800d38c:	00000106 	br	1800d394 <close+0x40>
1800d390:	0005883a 	mov	r2,zero
1800d394:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1800d398:	e0bffd17 	ldw	r2,-12(fp)
1800d39c:	10001926 	beq	r2,zero,1800d404 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1800d3a0:	e0bffd17 	ldw	r2,-12(fp)
1800d3a4:	10800017 	ldw	r2,0(r2)
1800d3a8:	10800417 	ldw	r2,16(r2)
1800d3ac:	10000626 	beq	r2,zero,1800d3c8 <close+0x74>
1800d3b0:	e0bffd17 	ldw	r2,-12(fp)
1800d3b4:	10800017 	ldw	r2,0(r2)
1800d3b8:	10800417 	ldw	r2,16(r2)
1800d3bc:	e13ffd17 	ldw	r4,-12(fp)
1800d3c0:	103ee83a 	callr	r2
1800d3c4:	00000106 	br	1800d3cc <close+0x78>
1800d3c8:	0005883a 	mov	r2,zero
1800d3cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1800d3d0:	e13fff17 	ldw	r4,-4(fp)
1800d3d4:	800da3c0 	call	1800da3c <alt_release_fd>
    if (rval < 0)
1800d3d8:	e0bffe17 	ldw	r2,-8(fp)
1800d3dc:	1000070e 	bge	r2,zero,1800d3fc <close+0xa8>
    {
      ALT_ERRNO = -rval;
1800d3e0:	800d3180 	call	1800d318 <alt_get_errno>
1800d3e4:	1007883a 	mov	r3,r2
1800d3e8:	e0bffe17 	ldw	r2,-8(fp)
1800d3ec:	0085c83a 	sub	r2,zero,r2
1800d3f0:	18800015 	stw	r2,0(r3)
      return -1;
1800d3f4:	00bfffc4 	movi	r2,-1
1800d3f8:	00000706 	br	1800d418 <close+0xc4>
    }
    return 0;
1800d3fc:	0005883a 	mov	r2,zero
1800d400:	00000506 	br	1800d418 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1800d404:	800d3180 	call	1800d318 <alt_get_errno>
1800d408:	1007883a 	mov	r3,r2
1800d40c:	00801444 	movi	r2,81
1800d410:	18800015 	stw	r2,0(r3)
    return -1;
1800d414:	00bfffc4 	movi	r2,-1
  }
}
1800d418:	e037883a 	mov	sp,fp
1800d41c:	dfc00117 	ldw	ra,4(sp)
1800d420:	df000017 	ldw	fp,0(sp)
1800d424:	dec00204 	addi	sp,sp,8
1800d428:	f800283a 	ret

1800d42c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1800d42c:	defffc04 	addi	sp,sp,-16
1800d430:	df000315 	stw	fp,12(sp)
1800d434:	df000304 	addi	fp,sp,12
1800d438:	e13ffd15 	stw	r4,-12(fp)
1800d43c:	e17ffe15 	stw	r5,-8(fp)
1800d440:	e1bfff15 	stw	r6,-4(fp)
  return len;
1800d444:	e0bfff17 	ldw	r2,-4(fp)
}
1800d448:	e037883a 	mov	sp,fp
1800d44c:	df000017 	ldw	fp,0(sp)
1800d450:	dec00104 	addi	sp,sp,4
1800d454:	f800283a 	ret

1800d458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800d458:	defffe04 	addi	sp,sp,-8
1800d45c:	dfc00115 	stw	ra,4(sp)
1800d460:	df000015 	stw	fp,0(sp)
1800d464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800d468:	d0a00d17 	ldw	r2,-32716(gp)
1800d46c:	10000326 	beq	r2,zero,1800d47c <alt_get_errno+0x24>
1800d470:	d0a00d17 	ldw	r2,-32716(gp)
1800d474:	103ee83a 	callr	r2
1800d478:	00000106 	br	1800d480 <alt_get_errno+0x28>
1800d47c:	d0a7e904 	addi	r2,gp,-24668
}
1800d480:	e037883a 	mov	sp,fp
1800d484:	dfc00117 	ldw	ra,4(sp)
1800d488:	df000017 	ldw	fp,0(sp)
1800d48c:	dec00204 	addi	sp,sp,8
1800d490:	f800283a 	ret

1800d494 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1800d494:	defffb04 	addi	sp,sp,-20
1800d498:	dfc00415 	stw	ra,16(sp)
1800d49c:	df000315 	stw	fp,12(sp)
1800d4a0:	df000304 	addi	fp,sp,12
1800d4a4:	e13ffe15 	stw	r4,-8(fp)
1800d4a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1800d4ac:	e0bffe17 	ldw	r2,-8(fp)
1800d4b0:	10000816 	blt	r2,zero,1800d4d4 <fstat+0x40>
1800d4b4:	01400304 	movi	r5,12
1800d4b8:	e13ffe17 	ldw	r4,-8(fp)
1800d4bc:	8000b740 	call	18000b74 <__mulsi3>
1800d4c0:	1007883a 	mov	r3,r2
1800d4c4:	00860074 	movhi	r2,6145
1800d4c8:	1082fe04 	addi	r2,r2,3064
1800d4cc:	1885883a 	add	r2,r3,r2
1800d4d0:	00000106 	br	1800d4d8 <fstat+0x44>
1800d4d4:	0005883a 	mov	r2,zero
1800d4d8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1800d4dc:	e0bffd17 	ldw	r2,-12(fp)
1800d4e0:	10001026 	beq	r2,zero,1800d524 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1800d4e4:	e0bffd17 	ldw	r2,-12(fp)
1800d4e8:	10800017 	ldw	r2,0(r2)
1800d4ec:	10800817 	ldw	r2,32(r2)
1800d4f0:	10000726 	beq	r2,zero,1800d510 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1800d4f4:	e0bffd17 	ldw	r2,-12(fp)
1800d4f8:	10800017 	ldw	r2,0(r2)
1800d4fc:	10800817 	ldw	r2,32(r2)
1800d500:	e17fff17 	ldw	r5,-4(fp)
1800d504:	e13ffd17 	ldw	r4,-12(fp)
1800d508:	103ee83a 	callr	r2
1800d50c:	00000a06 	br	1800d538 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1800d510:	e0bfff17 	ldw	r2,-4(fp)
1800d514:	00c80004 	movi	r3,8192
1800d518:	10c00115 	stw	r3,4(r2)
      return 0;
1800d51c:	0005883a 	mov	r2,zero
1800d520:	00000506 	br	1800d538 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1800d524:	800d4580 	call	1800d458 <alt_get_errno>
1800d528:	1007883a 	mov	r3,r2
1800d52c:	00801444 	movi	r2,81
1800d530:	18800015 	stw	r2,0(r3)
    return -1;
1800d534:	00bfffc4 	movi	r2,-1
  }
}
1800d538:	e037883a 	mov	sp,fp
1800d53c:	dfc00117 	ldw	ra,4(sp)
1800d540:	df000017 	ldw	fp,0(sp)
1800d544:	dec00204 	addi	sp,sp,8
1800d548:	f800283a 	ret

1800d54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800d54c:	defffe04 	addi	sp,sp,-8
1800d550:	dfc00115 	stw	ra,4(sp)
1800d554:	df000015 	stw	fp,0(sp)
1800d558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800d55c:	d0a00d17 	ldw	r2,-32716(gp)
1800d560:	10000326 	beq	r2,zero,1800d570 <alt_get_errno+0x24>
1800d564:	d0a00d17 	ldw	r2,-32716(gp)
1800d568:	103ee83a 	callr	r2
1800d56c:	00000106 	br	1800d574 <alt_get_errno+0x28>
1800d570:	d0a7e904 	addi	r2,gp,-24668
}
1800d574:	e037883a 	mov	sp,fp
1800d578:	dfc00117 	ldw	ra,4(sp)
1800d57c:	df000017 	ldw	fp,0(sp)
1800d580:	dec00204 	addi	sp,sp,8
1800d584:	f800283a 	ret

1800d588 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1800d588:	deffed04 	addi	sp,sp,-76
1800d58c:	dfc01215 	stw	ra,72(sp)
1800d590:	df001115 	stw	fp,68(sp)
1800d594:	df001104 	addi	fp,sp,68
1800d598:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1800d59c:	e0bfff17 	ldw	r2,-4(fp)
1800d5a0:	10000816 	blt	r2,zero,1800d5c4 <isatty+0x3c>
1800d5a4:	01400304 	movi	r5,12
1800d5a8:	e13fff17 	ldw	r4,-4(fp)
1800d5ac:	8000b740 	call	18000b74 <__mulsi3>
1800d5b0:	1007883a 	mov	r3,r2
1800d5b4:	00860074 	movhi	r2,6145
1800d5b8:	1082fe04 	addi	r2,r2,3064
1800d5bc:	1885883a 	add	r2,r3,r2
1800d5c0:	00000106 	br	1800d5c8 <isatty+0x40>
1800d5c4:	0005883a 	mov	r2,zero
1800d5c8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1800d5cc:	e0bfef17 	ldw	r2,-68(fp)
1800d5d0:	10000e26 	beq	r2,zero,1800d60c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1800d5d4:	e0bfef17 	ldw	r2,-68(fp)
1800d5d8:	10800017 	ldw	r2,0(r2)
1800d5dc:	10800817 	ldw	r2,32(r2)
1800d5e0:	1000021e 	bne	r2,zero,1800d5ec <isatty+0x64>
    {
      return 1;
1800d5e4:	00800044 	movi	r2,1
1800d5e8:	00000d06 	br	1800d620 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1800d5ec:	e0bff004 	addi	r2,fp,-64
1800d5f0:	100b883a 	mov	r5,r2
1800d5f4:	e13fff17 	ldw	r4,-4(fp)
1800d5f8:	800d4940 	call	1800d494 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1800d5fc:	e0bff117 	ldw	r2,-60(fp)
1800d600:	10880020 	cmpeqi	r2,r2,8192
1800d604:	10803fcc 	andi	r2,r2,255
1800d608:	00000506 	br	1800d620 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1800d60c:	800d54c0 	call	1800d54c <alt_get_errno>
1800d610:	1007883a 	mov	r3,r2
1800d614:	00801444 	movi	r2,81
1800d618:	18800015 	stw	r2,0(r3)
    return 0;
1800d61c:	0005883a 	mov	r2,zero
  }
}
1800d620:	e037883a 	mov	sp,fp
1800d624:	dfc00117 	ldw	ra,4(sp)
1800d628:	df000017 	ldw	fp,0(sp)
1800d62c:	dec00204 	addi	sp,sp,8
1800d630:	f800283a 	ret

1800d634 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1800d634:	defffc04 	addi	sp,sp,-16
1800d638:	df000315 	stw	fp,12(sp)
1800d63c:	df000304 	addi	fp,sp,12
1800d640:	e13ffd15 	stw	r4,-12(fp)
1800d644:	e17ffe15 	stw	r5,-8(fp)
1800d648:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1800d64c:	e0fffe17 	ldw	r3,-8(fp)
1800d650:	e0bffd17 	ldw	r2,-12(fp)
1800d654:	18800c26 	beq	r3,r2,1800d688 <alt_load_section+0x54>
  {
    while( to != end )
1800d658:	00000806 	br	1800d67c <alt_load_section+0x48>
    {
      *to++ = *from++;
1800d65c:	e0bffe17 	ldw	r2,-8(fp)
1800d660:	10c00104 	addi	r3,r2,4
1800d664:	e0fffe15 	stw	r3,-8(fp)
1800d668:	e0fffd17 	ldw	r3,-12(fp)
1800d66c:	19000104 	addi	r4,r3,4
1800d670:	e13ffd15 	stw	r4,-12(fp)
1800d674:	18c00017 	ldw	r3,0(r3)
1800d678:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1800d67c:	e0fffe17 	ldw	r3,-8(fp)
1800d680:	e0bfff17 	ldw	r2,-4(fp)
1800d684:	18bff51e 	bne	r3,r2,1800d65c <__alt_data_end+0xf800d65c>
    {
      *to++ = *from++;
    }
  }
}
1800d688:	0001883a 	nop
1800d68c:	e037883a 	mov	sp,fp
1800d690:	df000017 	ldw	fp,0(sp)
1800d694:	dec00104 	addi	sp,sp,4
1800d698:	f800283a 	ret

1800d69c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1800d69c:	defffe04 	addi	sp,sp,-8
1800d6a0:	dfc00115 	stw	ra,4(sp)
1800d6a4:	df000015 	stw	fp,0(sp)
1800d6a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1800d6ac:	01860074 	movhi	r6,6145
1800d6b0:	31878804 	addi	r6,r6,7712
1800d6b4:	01460074 	movhi	r5,6145
1800d6b8:	297fb704 	addi	r5,r5,-292
1800d6bc:	01060074 	movhi	r4,6145
1800d6c0:	21078804 	addi	r4,r4,7712
1800d6c4:	800d6340 	call	1800d634 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1800d6c8:	01860034 	movhi	r6,6144
1800d6cc:	31808c04 	addi	r6,r6,560
1800d6d0:	01460034 	movhi	r5,6144
1800d6d4:	29400804 	addi	r5,r5,32
1800d6d8:	01060034 	movhi	r4,6144
1800d6dc:	21000804 	addi	r4,r4,32
1800d6e0:	800d6340 	call	1800d634 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1800d6e4:	01860074 	movhi	r6,6145
1800d6e8:	31bfb704 	addi	r6,r6,-292
1800d6ec:	01460074 	movhi	r5,6145
1800d6f0:	297ece04 	addi	r5,r5,-1224
1800d6f4:	01060074 	movhi	r4,6145
1800d6f8:	213ece04 	addi	r4,r4,-1224
1800d6fc:	800d6340 	call	1800d634 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1800d700:	800ea800 	call	1800ea80 <alt_dcache_flush_all>
  alt_icache_flush_all();
1800d704:	800ec400 	call	1800ec40 <alt_icache_flush_all>
}
1800d708:	0001883a 	nop
1800d70c:	e037883a 	mov	sp,fp
1800d710:	dfc00117 	ldw	ra,4(sp)
1800d714:	df000017 	ldw	fp,0(sp)
1800d718:	dec00204 	addi	sp,sp,8
1800d71c:	f800283a 	ret

1800d720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800d720:	defffe04 	addi	sp,sp,-8
1800d724:	dfc00115 	stw	ra,4(sp)
1800d728:	df000015 	stw	fp,0(sp)
1800d72c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800d730:	d0a00d17 	ldw	r2,-32716(gp)
1800d734:	10000326 	beq	r2,zero,1800d744 <alt_get_errno+0x24>
1800d738:	d0a00d17 	ldw	r2,-32716(gp)
1800d73c:	103ee83a 	callr	r2
1800d740:	00000106 	br	1800d748 <alt_get_errno+0x28>
1800d744:	d0a7e904 	addi	r2,gp,-24668
}
1800d748:	e037883a 	mov	sp,fp
1800d74c:	dfc00117 	ldw	ra,4(sp)
1800d750:	df000017 	ldw	fp,0(sp)
1800d754:	dec00204 	addi	sp,sp,8
1800d758:	f800283a 	ret

1800d75c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1800d75c:	defff904 	addi	sp,sp,-28
1800d760:	dfc00615 	stw	ra,24(sp)
1800d764:	df000515 	stw	fp,20(sp)
1800d768:	df000504 	addi	fp,sp,20
1800d76c:	e13ffd15 	stw	r4,-12(fp)
1800d770:	e17ffe15 	stw	r5,-8(fp)
1800d774:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1800d778:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1800d77c:	e0bffd17 	ldw	r2,-12(fp)
1800d780:	10000816 	blt	r2,zero,1800d7a4 <lseek+0x48>
1800d784:	01400304 	movi	r5,12
1800d788:	e13ffd17 	ldw	r4,-12(fp)
1800d78c:	8000b740 	call	18000b74 <__mulsi3>
1800d790:	1007883a 	mov	r3,r2
1800d794:	00860074 	movhi	r2,6145
1800d798:	1082fe04 	addi	r2,r2,3064
1800d79c:	1885883a 	add	r2,r3,r2
1800d7a0:	00000106 	br	1800d7a8 <lseek+0x4c>
1800d7a4:	0005883a 	mov	r2,zero
1800d7a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1800d7ac:	e0bffc17 	ldw	r2,-16(fp)
1800d7b0:	10001026 	beq	r2,zero,1800d7f4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1800d7b4:	e0bffc17 	ldw	r2,-16(fp)
1800d7b8:	10800017 	ldw	r2,0(r2)
1800d7bc:	10800717 	ldw	r2,28(r2)
1800d7c0:	10000926 	beq	r2,zero,1800d7e8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1800d7c4:	e0bffc17 	ldw	r2,-16(fp)
1800d7c8:	10800017 	ldw	r2,0(r2)
1800d7cc:	10800717 	ldw	r2,28(r2)
1800d7d0:	e1bfff17 	ldw	r6,-4(fp)
1800d7d4:	e17ffe17 	ldw	r5,-8(fp)
1800d7d8:	e13ffc17 	ldw	r4,-16(fp)
1800d7dc:	103ee83a 	callr	r2
1800d7e0:	e0bffb15 	stw	r2,-20(fp)
1800d7e4:	00000506 	br	1800d7fc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1800d7e8:	00bfde84 	movi	r2,-134
1800d7ec:	e0bffb15 	stw	r2,-20(fp)
1800d7f0:	00000206 	br	1800d7fc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1800d7f4:	00bfebc4 	movi	r2,-81
1800d7f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1800d7fc:	e0bffb17 	ldw	r2,-20(fp)
1800d800:	1000070e 	bge	r2,zero,1800d820 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1800d804:	800d7200 	call	1800d720 <alt_get_errno>
1800d808:	1007883a 	mov	r3,r2
1800d80c:	e0bffb17 	ldw	r2,-20(fp)
1800d810:	0085c83a 	sub	r2,zero,r2
1800d814:	18800015 	stw	r2,0(r3)
    rc = -1;
1800d818:	00bfffc4 	movi	r2,-1
1800d81c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1800d820:	e0bffb17 	ldw	r2,-20(fp)
}
1800d824:	e037883a 	mov	sp,fp
1800d828:	dfc00117 	ldw	ra,4(sp)
1800d82c:	df000017 	ldw	fp,0(sp)
1800d830:	dec00204 	addi	sp,sp,8
1800d834:	f800283a 	ret

1800d838 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1800d838:	defffd04 	addi	sp,sp,-12
1800d83c:	dfc00215 	stw	ra,8(sp)
1800d840:	df000115 	stw	fp,4(sp)
1800d844:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1800d848:	0009883a 	mov	r4,zero
1800d84c:	800dd100 	call	1800dd10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1800d850:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1800d854:	800dd480 	call	1800dd48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1800d858:	01860074 	movhi	r6,6145
1800d85c:	31bfad04 	addi	r6,r6,-332
1800d860:	01460074 	movhi	r5,6145
1800d864:	297fad04 	addi	r5,r5,-332
1800d868:	01060074 	movhi	r4,6145
1800d86c:	213fad04 	addi	r4,r4,-332
1800d870:	800efe40 	call	1800efe4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1800d874:	800eb800 	call	1800eb80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1800d878:	01060074 	movhi	r4,6145
1800d87c:	213af804 	addi	r4,r4,-5152
1800d880:	800f7a40 	call	1800f7a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1800d884:	d0a7ea17 	ldw	r2,-24664(gp)
1800d888:	d0e7eb17 	ldw	r3,-24660(gp)
1800d88c:	d127ec17 	ldw	r4,-24656(gp)
1800d890:	200d883a 	mov	r6,r4
1800d894:	180b883a 	mov	r5,r3
1800d898:	1009883a 	mov	r4,r2
1800d89c:	800026c0 	call	1800026c <main>
1800d8a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1800d8a4:	01000044 	movi	r4,1
1800d8a8:	800d3540 	call	1800d354 <close>
  exit (result);
1800d8ac:	e13fff17 	ldw	r4,-4(fp)
1800d8b0:	800f7b80 	call	1800f7b8 <exit>

1800d8b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1800d8b4:	defffe04 	addi	sp,sp,-8
1800d8b8:	df000115 	stw	fp,4(sp)
1800d8bc:	df000104 	addi	fp,sp,4
1800d8c0:	e13fff15 	stw	r4,-4(fp)
}
1800d8c4:	0001883a 	nop
1800d8c8:	e037883a 	mov	sp,fp
1800d8cc:	df000017 	ldw	fp,0(sp)
1800d8d0:	dec00104 	addi	sp,sp,4
1800d8d4:	f800283a 	ret

1800d8d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1800d8d8:	defffe04 	addi	sp,sp,-8
1800d8dc:	df000115 	stw	fp,4(sp)
1800d8e0:	df000104 	addi	fp,sp,4
1800d8e4:	e13fff15 	stw	r4,-4(fp)
}
1800d8e8:	0001883a 	nop
1800d8ec:	e037883a 	mov	sp,fp
1800d8f0:	df000017 	ldw	fp,0(sp)
1800d8f4:	dec00104 	addi	sp,sp,4
1800d8f8:	f800283a 	ret

1800d8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800d8fc:	defffe04 	addi	sp,sp,-8
1800d900:	dfc00115 	stw	ra,4(sp)
1800d904:	df000015 	stw	fp,0(sp)
1800d908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800d90c:	d0a00d17 	ldw	r2,-32716(gp)
1800d910:	10000326 	beq	r2,zero,1800d920 <alt_get_errno+0x24>
1800d914:	d0a00d17 	ldw	r2,-32716(gp)
1800d918:	103ee83a 	callr	r2
1800d91c:	00000106 	br	1800d924 <alt_get_errno+0x28>
1800d920:	d0a7e904 	addi	r2,gp,-24668
}
1800d924:	e037883a 	mov	sp,fp
1800d928:	dfc00117 	ldw	ra,4(sp)
1800d92c:	df000017 	ldw	fp,0(sp)
1800d930:	dec00204 	addi	sp,sp,8
1800d934:	f800283a 	ret

1800d938 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1800d938:	defff904 	addi	sp,sp,-28
1800d93c:	dfc00615 	stw	ra,24(sp)
1800d940:	df000515 	stw	fp,20(sp)
1800d944:	df000504 	addi	fp,sp,20
1800d948:	e13ffd15 	stw	r4,-12(fp)
1800d94c:	e17ffe15 	stw	r5,-8(fp)
1800d950:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1800d954:	e0bffd17 	ldw	r2,-12(fp)
1800d958:	10000816 	blt	r2,zero,1800d97c <read+0x44>
1800d95c:	01400304 	movi	r5,12
1800d960:	e13ffd17 	ldw	r4,-12(fp)
1800d964:	8000b740 	call	18000b74 <__mulsi3>
1800d968:	1007883a 	mov	r3,r2
1800d96c:	00860074 	movhi	r2,6145
1800d970:	1082fe04 	addi	r2,r2,3064
1800d974:	1885883a 	add	r2,r3,r2
1800d978:	00000106 	br	1800d980 <read+0x48>
1800d97c:	0005883a 	mov	r2,zero
1800d980:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1800d984:	e0bffb17 	ldw	r2,-20(fp)
1800d988:	10002226 	beq	r2,zero,1800da14 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1800d98c:	e0bffb17 	ldw	r2,-20(fp)
1800d990:	10800217 	ldw	r2,8(r2)
1800d994:	108000cc 	andi	r2,r2,3
1800d998:	10800060 	cmpeqi	r2,r2,1
1800d99c:	1000181e 	bne	r2,zero,1800da00 <read+0xc8>
        (fd->dev->read))
1800d9a0:	e0bffb17 	ldw	r2,-20(fp)
1800d9a4:	10800017 	ldw	r2,0(r2)
1800d9a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1800d9ac:	10001426 	beq	r2,zero,1800da00 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1800d9b0:	e0bffb17 	ldw	r2,-20(fp)
1800d9b4:	10800017 	ldw	r2,0(r2)
1800d9b8:	10800517 	ldw	r2,20(r2)
1800d9bc:	e0ffff17 	ldw	r3,-4(fp)
1800d9c0:	180d883a 	mov	r6,r3
1800d9c4:	e17ffe17 	ldw	r5,-8(fp)
1800d9c8:	e13ffb17 	ldw	r4,-20(fp)
1800d9cc:	103ee83a 	callr	r2
1800d9d0:	e0bffc15 	stw	r2,-16(fp)
1800d9d4:	e0bffc17 	ldw	r2,-16(fp)
1800d9d8:	1000070e 	bge	r2,zero,1800d9f8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1800d9dc:	800d8fc0 	call	1800d8fc <alt_get_errno>
1800d9e0:	1007883a 	mov	r3,r2
1800d9e4:	e0bffc17 	ldw	r2,-16(fp)
1800d9e8:	0085c83a 	sub	r2,zero,r2
1800d9ec:	18800015 	stw	r2,0(r3)
          return -1;
1800d9f0:	00bfffc4 	movi	r2,-1
1800d9f4:	00000c06 	br	1800da28 <read+0xf0>
        }
        return rval;
1800d9f8:	e0bffc17 	ldw	r2,-16(fp)
1800d9fc:	00000a06 	br	1800da28 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1800da00:	800d8fc0 	call	1800d8fc <alt_get_errno>
1800da04:	1007883a 	mov	r3,r2
1800da08:	00800344 	movi	r2,13
1800da0c:	18800015 	stw	r2,0(r3)
1800da10:	00000406 	br	1800da24 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1800da14:	800d8fc0 	call	1800d8fc <alt_get_errno>
1800da18:	1007883a 	mov	r3,r2
1800da1c:	00801444 	movi	r2,81
1800da20:	18800015 	stw	r2,0(r3)
  }
  return -1;
1800da24:	00bfffc4 	movi	r2,-1
}
1800da28:	e037883a 	mov	sp,fp
1800da2c:	dfc00117 	ldw	ra,4(sp)
1800da30:	df000017 	ldw	fp,0(sp)
1800da34:	dec00204 	addi	sp,sp,8
1800da38:	f800283a 	ret

1800da3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1800da3c:	defffc04 	addi	sp,sp,-16
1800da40:	dfc00315 	stw	ra,12(sp)
1800da44:	df000215 	stw	fp,8(sp)
1800da48:	dc000115 	stw	r16,4(sp)
1800da4c:	df000204 	addi	fp,sp,8
1800da50:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1800da54:	e0bffe17 	ldw	r2,-8(fp)
1800da58:	108000d0 	cmplti	r2,r2,3
1800da5c:	1000111e 	bne	r2,zero,1800daa4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1800da60:	04060074 	movhi	r16,6145
1800da64:	8402fe04 	addi	r16,r16,3064
1800da68:	e0bffe17 	ldw	r2,-8(fp)
1800da6c:	01400304 	movi	r5,12
1800da70:	1009883a 	mov	r4,r2
1800da74:	8000b740 	call	18000b74 <__mulsi3>
1800da78:	8085883a 	add	r2,r16,r2
1800da7c:	10800204 	addi	r2,r2,8
1800da80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1800da84:	04060074 	movhi	r16,6145
1800da88:	8402fe04 	addi	r16,r16,3064
1800da8c:	e0bffe17 	ldw	r2,-8(fp)
1800da90:	01400304 	movi	r5,12
1800da94:	1009883a 	mov	r4,r2
1800da98:	8000b740 	call	18000b74 <__mulsi3>
1800da9c:	8085883a 	add	r2,r16,r2
1800daa0:	10000015 	stw	zero,0(r2)
  }
}
1800daa4:	0001883a 	nop
1800daa8:	e6ffff04 	addi	sp,fp,-4
1800daac:	dfc00217 	ldw	ra,8(sp)
1800dab0:	df000117 	ldw	fp,4(sp)
1800dab4:	dc000017 	ldw	r16,0(sp)
1800dab8:	dec00304 	addi	sp,sp,12
1800dabc:	f800283a 	ret

1800dac0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1800dac0:	defff904 	addi	sp,sp,-28
1800dac4:	df000615 	stw	fp,24(sp)
1800dac8:	df000604 	addi	fp,sp,24
1800dacc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800dad0:	0005303a 	rdctl	r2,status
1800dad4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800dad8:	e0fffe17 	ldw	r3,-8(fp)
1800dadc:	00bfff84 	movi	r2,-2
1800dae0:	1884703a 	and	r2,r3,r2
1800dae4:	1001703a 	wrctl	status,r2
  
  return context;
1800dae8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1800daec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1800daf0:	d0a00e17 	ldw	r2,-32712(gp)
1800daf4:	10c000c4 	addi	r3,r2,3
1800daf8:	00bfff04 	movi	r2,-4
1800dafc:	1884703a 	and	r2,r3,r2
1800db00:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1800db04:	d0e00e17 	ldw	r3,-32712(gp)
1800db08:	e0bfff17 	ldw	r2,-4(fp)
1800db0c:	1887883a 	add	r3,r3,r2
1800db10:	00880034 	movhi	r2,8192
1800db14:	10800004 	addi	r2,r2,0
1800db18:	10c0062e 	bgeu	r2,r3,1800db34 <sbrk+0x74>
1800db1c:	e0bffb17 	ldw	r2,-20(fp)
1800db20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800db24:	e0bffa17 	ldw	r2,-24(fp)
1800db28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1800db2c:	00bfffc4 	movi	r2,-1
1800db30:	00000b06 	br	1800db60 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1800db34:	d0a00e17 	ldw	r2,-32712(gp)
1800db38:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1800db3c:	d0e00e17 	ldw	r3,-32712(gp)
1800db40:	e0bfff17 	ldw	r2,-4(fp)
1800db44:	1885883a 	add	r2,r3,r2
1800db48:	d0a00e15 	stw	r2,-32712(gp)
1800db4c:	e0bffb17 	ldw	r2,-20(fp)
1800db50:	e0bffc15 	stw	r2,-16(fp)
1800db54:	e0bffc17 	ldw	r2,-16(fp)
1800db58:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1800db5c:	e0bffd17 	ldw	r2,-12(fp)
} 
1800db60:	e037883a 	mov	sp,fp
1800db64:	df000017 	ldw	fp,0(sp)
1800db68:	dec00104 	addi	sp,sp,4
1800db6c:	f800283a 	ret

1800db70 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1800db70:	defffd04 	addi	sp,sp,-12
1800db74:	dfc00215 	stw	ra,8(sp)
1800db78:	df000115 	stw	fp,4(sp)
1800db7c:	df000104 	addi	fp,sp,4
1800db80:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1800db84:	e13fff17 	ldw	r4,-4(fp)
1800db88:	800e9280 	call	1800e928 <alt_busy_sleep>
}
1800db8c:	e037883a 	mov	sp,fp
1800db90:	dfc00117 	ldw	ra,4(sp)
1800db94:	df000017 	ldw	fp,0(sp)
1800db98:	dec00204 	addi	sp,sp,8
1800db9c:	f800283a 	ret

1800dba0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800dba0:	defffe04 	addi	sp,sp,-8
1800dba4:	dfc00115 	stw	ra,4(sp)
1800dba8:	df000015 	stw	fp,0(sp)
1800dbac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800dbb0:	d0a00d17 	ldw	r2,-32716(gp)
1800dbb4:	10000326 	beq	r2,zero,1800dbc4 <alt_get_errno+0x24>
1800dbb8:	d0a00d17 	ldw	r2,-32716(gp)
1800dbbc:	103ee83a 	callr	r2
1800dbc0:	00000106 	br	1800dbc8 <alt_get_errno+0x28>
1800dbc4:	d0a7e904 	addi	r2,gp,-24668
}
1800dbc8:	e037883a 	mov	sp,fp
1800dbcc:	dfc00117 	ldw	ra,4(sp)
1800dbd0:	df000017 	ldw	fp,0(sp)
1800dbd4:	dec00204 	addi	sp,sp,8
1800dbd8:	f800283a 	ret

1800dbdc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1800dbdc:	defff904 	addi	sp,sp,-28
1800dbe0:	dfc00615 	stw	ra,24(sp)
1800dbe4:	df000515 	stw	fp,20(sp)
1800dbe8:	df000504 	addi	fp,sp,20
1800dbec:	e13ffd15 	stw	r4,-12(fp)
1800dbf0:	e17ffe15 	stw	r5,-8(fp)
1800dbf4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1800dbf8:	e0bffd17 	ldw	r2,-12(fp)
1800dbfc:	10000816 	blt	r2,zero,1800dc20 <write+0x44>
1800dc00:	01400304 	movi	r5,12
1800dc04:	e13ffd17 	ldw	r4,-12(fp)
1800dc08:	8000b740 	call	18000b74 <__mulsi3>
1800dc0c:	1007883a 	mov	r3,r2
1800dc10:	00860074 	movhi	r2,6145
1800dc14:	1082fe04 	addi	r2,r2,3064
1800dc18:	1885883a 	add	r2,r3,r2
1800dc1c:	00000106 	br	1800dc24 <write+0x48>
1800dc20:	0005883a 	mov	r2,zero
1800dc24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1800dc28:	e0bffb17 	ldw	r2,-20(fp)
1800dc2c:	10002126 	beq	r2,zero,1800dcb4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1800dc30:	e0bffb17 	ldw	r2,-20(fp)
1800dc34:	10800217 	ldw	r2,8(r2)
1800dc38:	108000cc 	andi	r2,r2,3
1800dc3c:	10001826 	beq	r2,zero,1800dca0 <write+0xc4>
1800dc40:	e0bffb17 	ldw	r2,-20(fp)
1800dc44:	10800017 	ldw	r2,0(r2)
1800dc48:	10800617 	ldw	r2,24(r2)
1800dc4c:	10001426 	beq	r2,zero,1800dca0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1800dc50:	e0bffb17 	ldw	r2,-20(fp)
1800dc54:	10800017 	ldw	r2,0(r2)
1800dc58:	10800617 	ldw	r2,24(r2)
1800dc5c:	e0ffff17 	ldw	r3,-4(fp)
1800dc60:	180d883a 	mov	r6,r3
1800dc64:	e17ffe17 	ldw	r5,-8(fp)
1800dc68:	e13ffb17 	ldw	r4,-20(fp)
1800dc6c:	103ee83a 	callr	r2
1800dc70:	e0bffc15 	stw	r2,-16(fp)
1800dc74:	e0bffc17 	ldw	r2,-16(fp)
1800dc78:	1000070e 	bge	r2,zero,1800dc98 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1800dc7c:	800dba00 	call	1800dba0 <alt_get_errno>
1800dc80:	1007883a 	mov	r3,r2
1800dc84:	e0bffc17 	ldw	r2,-16(fp)
1800dc88:	0085c83a 	sub	r2,zero,r2
1800dc8c:	18800015 	stw	r2,0(r3)
        return -1;
1800dc90:	00bfffc4 	movi	r2,-1
1800dc94:	00000c06 	br	1800dcc8 <write+0xec>
      }
      return rval;
1800dc98:	e0bffc17 	ldw	r2,-16(fp)
1800dc9c:	00000a06 	br	1800dcc8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1800dca0:	800dba00 	call	1800dba0 <alt_get_errno>
1800dca4:	1007883a 	mov	r3,r2
1800dca8:	00800344 	movi	r2,13
1800dcac:	18800015 	stw	r2,0(r3)
1800dcb0:	00000406 	br	1800dcc4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1800dcb4:	800dba00 	call	1800dba0 <alt_get_errno>
1800dcb8:	1007883a 	mov	r3,r2
1800dcbc:	00801444 	movi	r2,81
1800dcc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1800dcc4:	00bfffc4 	movi	r2,-1
}
1800dcc8:	e037883a 	mov	sp,fp
1800dccc:	dfc00117 	ldw	ra,4(sp)
1800dcd0:	df000017 	ldw	fp,0(sp)
1800dcd4:	dec00204 	addi	sp,sp,8
1800dcd8:	f800283a 	ret

1800dcdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1800dcdc:	defffd04 	addi	sp,sp,-12
1800dce0:	dfc00215 	stw	ra,8(sp)
1800dce4:	df000115 	stw	fp,4(sp)
1800dce8:	df000104 	addi	fp,sp,4
1800dcec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1800dcf0:	d1600a04 	addi	r5,gp,-32728
1800dcf4:	e13fff17 	ldw	r4,-4(fp)
1800dcf8:	800eadc0 	call	1800eadc <alt_dev_llist_insert>
}
1800dcfc:	e037883a 	mov	sp,fp
1800dd00:	dfc00117 	ldw	ra,4(sp)
1800dd04:	df000017 	ldw	fp,0(sp)
1800dd08:	dec00204 	addi	sp,sp,8
1800dd0c:	f800283a 	ret

1800dd10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1800dd10:	defffd04 	addi	sp,sp,-12
1800dd14:	dfc00215 	stw	ra,8(sp)
1800dd18:	df000115 	stw	fp,4(sp)
1800dd1c:	df000104 	addi	fp,sp,4
1800dd20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1800dd24:	800f4880 	call	1800f488 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1800dd28:	00800044 	movi	r2,1
1800dd2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1800dd30:	0001883a 	nop
1800dd34:	e037883a 	mov	sp,fp
1800dd38:	dfc00117 	ldw	ra,4(sp)
1800dd3c:	df000017 	ldw	fp,0(sp)
1800dd40:	dec00204 	addi	sp,sp,8
1800dd44:	f800283a 	ret

1800dd48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1800dd48:	defffe04 	addi	sp,sp,-8
1800dd4c:	dfc00115 	stw	ra,4(sp)
1800dd50:	df000015 	stw	fp,0(sp)
1800dd54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1800dd58:	01800144 	movi	r6,5
1800dd5c:	000b883a 	mov	r5,zero
1800dd60:	01060074 	movhi	r4,6145
1800dd64:	21036804 	addi	r4,r4,3488
1800dd68:	800def80 	call	1800def8 <altera_avalon_jtag_uart_init>
1800dd6c:	01060074 	movhi	r4,6145
1800dd70:	21035e04 	addi	r4,r4,3448
1800dd74:	800dcdc0 	call	1800dcdc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1800dd78:	0001883a 	nop
}
1800dd7c:	0001883a 	nop
1800dd80:	e037883a 	mov	sp,fp
1800dd84:	dfc00117 	ldw	ra,4(sp)
1800dd88:	df000017 	ldw	fp,0(sp)
1800dd8c:	dec00204 	addi	sp,sp,8
1800dd90:	f800283a 	ret

1800dd94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1800dd94:	defffa04 	addi	sp,sp,-24
1800dd98:	dfc00515 	stw	ra,20(sp)
1800dd9c:	df000415 	stw	fp,16(sp)
1800dda0:	df000404 	addi	fp,sp,16
1800dda4:	e13ffd15 	stw	r4,-12(fp)
1800dda8:	e17ffe15 	stw	r5,-8(fp)
1800ddac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1800ddb0:	e0bffd17 	ldw	r2,-12(fp)
1800ddb4:	10800017 	ldw	r2,0(r2)
1800ddb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1800ddbc:	e0bffc17 	ldw	r2,-16(fp)
1800ddc0:	10c00a04 	addi	r3,r2,40
1800ddc4:	e0bffd17 	ldw	r2,-12(fp)
1800ddc8:	10800217 	ldw	r2,8(r2)
1800ddcc:	100f883a 	mov	r7,r2
1800ddd0:	e1bfff17 	ldw	r6,-4(fp)
1800ddd4:	e17ffe17 	ldw	r5,-8(fp)
1800ddd8:	1809883a 	mov	r4,r3
1800dddc:	800e3bc0 	call	1800e3bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1800dde0:	e037883a 	mov	sp,fp
1800dde4:	dfc00117 	ldw	ra,4(sp)
1800dde8:	df000017 	ldw	fp,0(sp)
1800ddec:	dec00204 	addi	sp,sp,8
1800ddf0:	f800283a 	ret

1800ddf4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1800ddf4:	defffa04 	addi	sp,sp,-24
1800ddf8:	dfc00515 	stw	ra,20(sp)
1800ddfc:	df000415 	stw	fp,16(sp)
1800de00:	df000404 	addi	fp,sp,16
1800de04:	e13ffd15 	stw	r4,-12(fp)
1800de08:	e17ffe15 	stw	r5,-8(fp)
1800de0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1800de10:	e0bffd17 	ldw	r2,-12(fp)
1800de14:	10800017 	ldw	r2,0(r2)
1800de18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1800de1c:	e0bffc17 	ldw	r2,-16(fp)
1800de20:	10c00a04 	addi	r3,r2,40
1800de24:	e0bffd17 	ldw	r2,-12(fp)
1800de28:	10800217 	ldw	r2,8(r2)
1800de2c:	100f883a 	mov	r7,r2
1800de30:	e1bfff17 	ldw	r6,-4(fp)
1800de34:	e17ffe17 	ldw	r5,-8(fp)
1800de38:	1809883a 	mov	r4,r3
1800de3c:	800e5d80 	call	1800e5d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1800de40:	e037883a 	mov	sp,fp
1800de44:	dfc00117 	ldw	ra,4(sp)
1800de48:	df000017 	ldw	fp,0(sp)
1800de4c:	dec00204 	addi	sp,sp,8
1800de50:	f800283a 	ret

1800de54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1800de54:	defffc04 	addi	sp,sp,-16
1800de58:	dfc00315 	stw	ra,12(sp)
1800de5c:	df000215 	stw	fp,8(sp)
1800de60:	df000204 	addi	fp,sp,8
1800de64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1800de68:	e0bfff17 	ldw	r2,-4(fp)
1800de6c:	10800017 	ldw	r2,0(r2)
1800de70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1800de74:	e0bffe17 	ldw	r2,-8(fp)
1800de78:	10c00a04 	addi	r3,r2,40
1800de7c:	e0bfff17 	ldw	r2,-4(fp)
1800de80:	10800217 	ldw	r2,8(r2)
1800de84:	100b883a 	mov	r5,r2
1800de88:	1809883a 	mov	r4,r3
1800de8c:	800e2640 	call	1800e264 <altera_avalon_jtag_uart_close>
}
1800de90:	e037883a 	mov	sp,fp
1800de94:	dfc00117 	ldw	ra,4(sp)
1800de98:	df000017 	ldw	fp,0(sp)
1800de9c:	dec00204 	addi	sp,sp,8
1800dea0:	f800283a 	ret

1800dea4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1800dea4:	defffa04 	addi	sp,sp,-24
1800dea8:	dfc00515 	stw	ra,20(sp)
1800deac:	df000415 	stw	fp,16(sp)
1800deb0:	df000404 	addi	fp,sp,16
1800deb4:	e13ffd15 	stw	r4,-12(fp)
1800deb8:	e17ffe15 	stw	r5,-8(fp)
1800debc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1800dec0:	e0bffd17 	ldw	r2,-12(fp)
1800dec4:	10800017 	ldw	r2,0(r2)
1800dec8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1800decc:	e0bffc17 	ldw	r2,-16(fp)
1800ded0:	10800a04 	addi	r2,r2,40
1800ded4:	e1bfff17 	ldw	r6,-4(fp)
1800ded8:	e17ffe17 	ldw	r5,-8(fp)
1800dedc:	1009883a 	mov	r4,r2
1800dee0:	800e2cc0 	call	1800e2cc <altera_avalon_jtag_uart_ioctl>
}
1800dee4:	e037883a 	mov	sp,fp
1800dee8:	dfc00117 	ldw	ra,4(sp)
1800deec:	df000017 	ldw	fp,0(sp)
1800def0:	dec00204 	addi	sp,sp,8
1800def4:	f800283a 	ret

1800def8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1800def8:	defffa04 	addi	sp,sp,-24
1800defc:	dfc00515 	stw	ra,20(sp)
1800df00:	df000415 	stw	fp,16(sp)
1800df04:	df000404 	addi	fp,sp,16
1800df08:	e13ffd15 	stw	r4,-12(fp)
1800df0c:	e17ffe15 	stw	r5,-8(fp)
1800df10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1800df14:	e0bffd17 	ldw	r2,-12(fp)
1800df18:	00c00044 	movi	r3,1
1800df1c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1800df20:	e0bffd17 	ldw	r2,-12(fp)
1800df24:	10800017 	ldw	r2,0(r2)
1800df28:	10800104 	addi	r2,r2,4
1800df2c:	1007883a 	mov	r3,r2
1800df30:	e0bffd17 	ldw	r2,-12(fp)
1800df34:	10800817 	ldw	r2,32(r2)
1800df38:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1800df3c:	e0bffe17 	ldw	r2,-8(fp)
1800df40:	e0ffff17 	ldw	r3,-4(fp)
1800df44:	d8000015 	stw	zero,0(sp)
1800df48:	e1fffd17 	ldw	r7,-12(fp)
1800df4c:	01860074 	movhi	r6,6145
1800df50:	31b7ee04 	addi	r6,r6,-8264
1800df54:	180b883a 	mov	r5,r3
1800df58:	1009883a 	mov	r4,r2
1800df5c:	800ec600 	call	1800ec60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1800df60:	e0bffd17 	ldw	r2,-12(fp)
1800df64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1800df68:	e0bffd17 	ldw	r2,-12(fp)
1800df6c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1800df70:	d0e7ee17 	ldw	r3,-24648(gp)
1800df74:	e1fffd17 	ldw	r7,-12(fp)
1800df78:	01860074 	movhi	r6,6145
1800df7c:	31b87104 	addi	r6,r6,-7740
1800df80:	180b883a 	mov	r5,r3
1800df84:	1009883a 	mov	r4,r2
1800df88:	800e7fc0 	call	1800e7fc <alt_alarm_start>
1800df8c:	1000040e 	bge	r2,zero,1800dfa0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1800df90:	e0fffd17 	ldw	r3,-12(fp)
1800df94:	00a00034 	movhi	r2,32768
1800df98:	10bfffc4 	addi	r2,r2,-1
1800df9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1800dfa0:	0001883a 	nop
1800dfa4:	e037883a 	mov	sp,fp
1800dfa8:	dfc00117 	ldw	ra,4(sp)
1800dfac:	df000017 	ldw	fp,0(sp)
1800dfb0:	dec00204 	addi	sp,sp,8
1800dfb4:	f800283a 	ret

1800dfb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1800dfb8:	defff804 	addi	sp,sp,-32
1800dfbc:	df000715 	stw	fp,28(sp)
1800dfc0:	df000704 	addi	fp,sp,28
1800dfc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1800dfc8:	e0bfff17 	ldw	r2,-4(fp)
1800dfcc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1800dfd0:	e0bffb17 	ldw	r2,-20(fp)
1800dfd4:	10800017 	ldw	r2,0(r2)
1800dfd8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1800dfdc:	e0bffc17 	ldw	r2,-16(fp)
1800dfe0:	10800104 	addi	r2,r2,4
1800dfe4:	10800037 	ldwio	r2,0(r2)
1800dfe8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1800dfec:	e0bffd17 	ldw	r2,-12(fp)
1800dff0:	1080c00c 	andi	r2,r2,768
1800dff4:	10006d26 	beq	r2,zero,1800e1ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1800dff8:	e0bffd17 	ldw	r2,-12(fp)
1800dffc:	1080400c 	andi	r2,r2,256
1800e000:	10003526 	beq	r2,zero,1800e0d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1800e004:	00800074 	movhi	r2,1
1800e008:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1800e00c:	e0bffb17 	ldw	r2,-20(fp)
1800e010:	10800a17 	ldw	r2,40(r2)
1800e014:	10800044 	addi	r2,r2,1
1800e018:	1081ffcc 	andi	r2,r2,2047
1800e01c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1800e020:	e0bffb17 	ldw	r2,-20(fp)
1800e024:	10c00b17 	ldw	r3,44(r2)
1800e028:	e0bffe17 	ldw	r2,-8(fp)
1800e02c:	18801526 	beq	r3,r2,1800e084 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1800e030:	e0bffc17 	ldw	r2,-16(fp)
1800e034:	10800037 	ldwio	r2,0(r2)
1800e038:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1800e03c:	e0bff917 	ldw	r2,-28(fp)
1800e040:	10a0000c 	andi	r2,r2,32768
1800e044:	10001126 	beq	r2,zero,1800e08c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1800e048:	e0bffb17 	ldw	r2,-20(fp)
1800e04c:	10800a17 	ldw	r2,40(r2)
1800e050:	e0fff917 	ldw	r3,-28(fp)
1800e054:	1809883a 	mov	r4,r3
1800e058:	e0fffb17 	ldw	r3,-20(fp)
1800e05c:	1885883a 	add	r2,r3,r2
1800e060:	10800e04 	addi	r2,r2,56
1800e064:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1800e068:	e0bffb17 	ldw	r2,-20(fp)
1800e06c:	10800a17 	ldw	r2,40(r2)
1800e070:	10800044 	addi	r2,r2,1
1800e074:	10c1ffcc 	andi	r3,r2,2047
1800e078:	e0bffb17 	ldw	r2,-20(fp)
1800e07c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1800e080:	003fe206 	br	1800e00c <__alt_data_end+0xf800e00c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1800e084:	0001883a 	nop
1800e088:	00000106 	br	1800e090 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1800e08c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1800e090:	e0bff917 	ldw	r2,-28(fp)
1800e094:	10bfffec 	andhi	r2,r2,65535
1800e098:	10000f26 	beq	r2,zero,1800e0d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1800e09c:	e0bffb17 	ldw	r2,-20(fp)
1800e0a0:	10c00817 	ldw	r3,32(r2)
1800e0a4:	00bfff84 	movi	r2,-2
1800e0a8:	1886703a 	and	r3,r3,r2
1800e0ac:	e0bffb17 	ldw	r2,-20(fp)
1800e0b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1800e0b4:	e0bffc17 	ldw	r2,-16(fp)
1800e0b8:	10800104 	addi	r2,r2,4
1800e0bc:	1007883a 	mov	r3,r2
1800e0c0:	e0bffb17 	ldw	r2,-20(fp)
1800e0c4:	10800817 	ldw	r2,32(r2)
1800e0c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1800e0cc:	e0bffc17 	ldw	r2,-16(fp)
1800e0d0:	10800104 	addi	r2,r2,4
1800e0d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1800e0d8:	e0bffd17 	ldw	r2,-12(fp)
1800e0dc:	1080800c 	andi	r2,r2,512
1800e0e0:	103fbe26 	beq	r2,zero,1800dfdc <__alt_data_end+0xf800dfdc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1800e0e4:	e0bffd17 	ldw	r2,-12(fp)
1800e0e8:	1004d43a 	srli	r2,r2,16
1800e0ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1800e0f0:	00001406 	br	1800e144 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1800e0f4:	e0bffc17 	ldw	r2,-16(fp)
1800e0f8:	e0fffb17 	ldw	r3,-20(fp)
1800e0fc:	18c00d17 	ldw	r3,52(r3)
1800e100:	e13ffb17 	ldw	r4,-20(fp)
1800e104:	20c7883a 	add	r3,r4,r3
1800e108:	18c20e04 	addi	r3,r3,2104
1800e10c:	18c00003 	ldbu	r3,0(r3)
1800e110:	18c03fcc 	andi	r3,r3,255
1800e114:	18c0201c 	xori	r3,r3,128
1800e118:	18ffe004 	addi	r3,r3,-128
1800e11c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1800e120:	e0bffb17 	ldw	r2,-20(fp)
1800e124:	10800d17 	ldw	r2,52(r2)
1800e128:	10800044 	addi	r2,r2,1
1800e12c:	10c1ffcc 	andi	r3,r2,2047
1800e130:	e0bffb17 	ldw	r2,-20(fp)
1800e134:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1800e138:	e0bffa17 	ldw	r2,-24(fp)
1800e13c:	10bfffc4 	addi	r2,r2,-1
1800e140:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1800e144:	e0bffa17 	ldw	r2,-24(fp)
1800e148:	10000526 	beq	r2,zero,1800e160 <altera_avalon_jtag_uart_irq+0x1a8>
1800e14c:	e0bffb17 	ldw	r2,-20(fp)
1800e150:	10c00d17 	ldw	r3,52(r2)
1800e154:	e0bffb17 	ldw	r2,-20(fp)
1800e158:	10800c17 	ldw	r2,48(r2)
1800e15c:	18bfe51e 	bne	r3,r2,1800e0f4 <__alt_data_end+0xf800e0f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1800e160:	e0bffa17 	ldw	r2,-24(fp)
1800e164:	103f9d26 	beq	r2,zero,1800dfdc <__alt_data_end+0xf800dfdc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1800e168:	e0bffb17 	ldw	r2,-20(fp)
1800e16c:	10c00817 	ldw	r3,32(r2)
1800e170:	00bfff44 	movi	r2,-3
1800e174:	1886703a 	and	r3,r3,r2
1800e178:	e0bffb17 	ldw	r2,-20(fp)
1800e17c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1800e180:	e0bffb17 	ldw	r2,-20(fp)
1800e184:	10800017 	ldw	r2,0(r2)
1800e188:	10800104 	addi	r2,r2,4
1800e18c:	1007883a 	mov	r3,r2
1800e190:	e0bffb17 	ldw	r2,-20(fp)
1800e194:	10800817 	ldw	r2,32(r2)
1800e198:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1800e19c:	e0bffc17 	ldw	r2,-16(fp)
1800e1a0:	10800104 	addi	r2,r2,4
1800e1a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1800e1a8:	003f8c06 	br	1800dfdc <__alt_data_end+0xf800dfdc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1800e1ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1800e1b0:	0001883a 	nop
1800e1b4:	e037883a 	mov	sp,fp
1800e1b8:	df000017 	ldw	fp,0(sp)
1800e1bc:	dec00104 	addi	sp,sp,4
1800e1c0:	f800283a 	ret

1800e1c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1800e1c4:	defff804 	addi	sp,sp,-32
1800e1c8:	df000715 	stw	fp,28(sp)
1800e1cc:	df000704 	addi	fp,sp,28
1800e1d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1800e1d4:	e0bffb17 	ldw	r2,-20(fp)
1800e1d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1800e1dc:	e0bff917 	ldw	r2,-28(fp)
1800e1e0:	10800017 	ldw	r2,0(r2)
1800e1e4:	10800104 	addi	r2,r2,4
1800e1e8:	10800037 	ldwio	r2,0(r2)
1800e1ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1800e1f0:	e0bffa17 	ldw	r2,-24(fp)
1800e1f4:	1081000c 	andi	r2,r2,1024
1800e1f8:	10000b26 	beq	r2,zero,1800e228 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1800e1fc:	e0bff917 	ldw	r2,-28(fp)
1800e200:	10800017 	ldw	r2,0(r2)
1800e204:	10800104 	addi	r2,r2,4
1800e208:	1007883a 	mov	r3,r2
1800e20c:	e0bff917 	ldw	r2,-28(fp)
1800e210:	10800817 	ldw	r2,32(r2)
1800e214:	10810014 	ori	r2,r2,1024
1800e218:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1800e21c:	e0bff917 	ldw	r2,-28(fp)
1800e220:	10000915 	stw	zero,36(r2)
1800e224:	00000a06 	br	1800e250 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1800e228:	e0bff917 	ldw	r2,-28(fp)
1800e22c:	10c00917 	ldw	r3,36(r2)
1800e230:	00a00034 	movhi	r2,32768
1800e234:	10bfff04 	addi	r2,r2,-4
1800e238:	10c00536 	bltu	r2,r3,1800e250 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1800e23c:	e0bff917 	ldw	r2,-28(fp)
1800e240:	10800917 	ldw	r2,36(r2)
1800e244:	10c00044 	addi	r3,r2,1
1800e248:	e0bff917 	ldw	r2,-28(fp)
1800e24c:	10c00915 	stw	r3,36(r2)
1800e250:	d0a7ee17 	ldw	r2,-24648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1800e254:	e037883a 	mov	sp,fp
1800e258:	df000017 	ldw	fp,0(sp)
1800e25c:	dec00104 	addi	sp,sp,4
1800e260:	f800283a 	ret

1800e264 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1800e264:	defffd04 	addi	sp,sp,-12
1800e268:	df000215 	stw	fp,8(sp)
1800e26c:	df000204 	addi	fp,sp,8
1800e270:	e13ffe15 	stw	r4,-8(fp)
1800e274:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1800e278:	00000506 	br	1800e290 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1800e27c:	e0bfff17 	ldw	r2,-4(fp)
1800e280:	1090000c 	andi	r2,r2,16384
1800e284:	10000226 	beq	r2,zero,1800e290 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1800e288:	00bffd44 	movi	r2,-11
1800e28c:	00000b06 	br	1800e2bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1800e290:	e0bffe17 	ldw	r2,-8(fp)
1800e294:	10c00d17 	ldw	r3,52(r2)
1800e298:	e0bffe17 	ldw	r2,-8(fp)
1800e29c:	10800c17 	ldw	r2,48(r2)
1800e2a0:	18800526 	beq	r3,r2,1800e2b8 <altera_avalon_jtag_uart_close+0x54>
1800e2a4:	e0bffe17 	ldw	r2,-8(fp)
1800e2a8:	10c00917 	ldw	r3,36(r2)
1800e2ac:	e0bffe17 	ldw	r2,-8(fp)
1800e2b0:	10800117 	ldw	r2,4(r2)
1800e2b4:	18bff136 	bltu	r3,r2,1800e27c <__alt_data_end+0xf800e27c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1800e2b8:	0005883a 	mov	r2,zero
}
1800e2bc:	e037883a 	mov	sp,fp
1800e2c0:	df000017 	ldw	fp,0(sp)
1800e2c4:	dec00104 	addi	sp,sp,4
1800e2c8:	f800283a 	ret

1800e2cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1800e2cc:	defffa04 	addi	sp,sp,-24
1800e2d0:	df000515 	stw	fp,20(sp)
1800e2d4:	df000504 	addi	fp,sp,20
1800e2d8:	e13ffd15 	stw	r4,-12(fp)
1800e2dc:	e17ffe15 	stw	r5,-8(fp)
1800e2e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1800e2e4:	00bff9c4 	movi	r2,-25
1800e2e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1800e2ec:	e0bffe17 	ldw	r2,-8(fp)
1800e2f0:	10da8060 	cmpeqi	r3,r2,27137
1800e2f4:	1800031e 	bne	r3,zero,1800e304 <altera_avalon_jtag_uart_ioctl+0x38>
1800e2f8:	109a80a0 	cmpeqi	r2,r2,27138
1800e2fc:	1000181e 	bne	r2,zero,1800e360 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1800e300:	00002906 	br	1800e3a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1800e304:	e0bffd17 	ldw	r2,-12(fp)
1800e308:	10c00117 	ldw	r3,4(r2)
1800e30c:	00a00034 	movhi	r2,32768
1800e310:	10bfffc4 	addi	r2,r2,-1
1800e314:	18802126 	beq	r3,r2,1800e39c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1800e318:	e0bfff17 	ldw	r2,-4(fp)
1800e31c:	10800017 	ldw	r2,0(r2)
1800e320:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1800e324:	e0bffc17 	ldw	r2,-16(fp)
1800e328:	10800090 	cmplti	r2,r2,2
1800e32c:	1000061e 	bne	r2,zero,1800e348 <altera_avalon_jtag_uart_ioctl+0x7c>
1800e330:	e0fffc17 	ldw	r3,-16(fp)
1800e334:	00a00034 	movhi	r2,32768
1800e338:	10bfffc4 	addi	r2,r2,-1
1800e33c:	18800226 	beq	r3,r2,1800e348 <altera_avalon_jtag_uart_ioctl+0x7c>
1800e340:	e0bffc17 	ldw	r2,-16(fp)
1800e344:	00000206 	br	1800e350 <altera_avalon_jtag_uart_ioctl+0x84>
1800e348:	00a00034 	movhi	r2,32768
1800e34c:	10bfff84 	addi	r2,r2,-2
1800e350:	e0fffd17 	ldw	r3,-12(fp)
1800e354:	18800115 	stw	r2,4(r3)
      rc = 0;
1800e358:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1800e35c:	00000f06 	br	1800e39c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1800e360:	e0bffd17 	ldw	r2,-12(fp)
1800e364:	10c00117 	ldw	r3,4(r2)
1800e368:	00a00034 	movhi	r2,32768
1800e36c:	10bfffc4 	addi	r2,r2,-1
1800e370:	18800c26 	beq	r3,r2,1800e3a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1800e374:	e0bffd17 	ldw	r2,-12(fp)
1800e378:	10c00917 	ldw	r3,36(r2)
1800e37c:	e0bffd17 	ldw	r2,-12(fp)
1800e380:	10800117 	ldw	r2,4(r2)
1800e384:	1885803a 	cmpltu	r2,r3,r2
1800e388:	10c03fcc 	andi	r3,r2,255
1800e38c:	e0bfff17 	ldw	r2,-4(fp)
1800e390:	10c00015 	stw	r3,0(r2)
      rc = 0;
1800e394:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1800e398:	00000206 	br	1800e3a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1800e39c:	0001883a 	nop
1800e3a0:	00000106 	br	1800e3a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1800e3a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
1800e3a8:	e0bffb17 	ldw	r2,-20(fp)
}
1800e3ac:	e037883a 	mov	sp,fp
1800e3b0:	df000017 	ldw	fp,0(sp)
1800e3b4:	dec00104 	addi	sp,sp,4
1800e3b8:	f800283a 	ret

1800e3bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1800e3bc:	defff304 	addi	sp,sp,-52
1800e3c0:	dfc00c15 	stw	ra,48(sp)
1800e3c4:	df000b15 	stw	fp,44(sp)
1800e3c8:	df000b04 	addi	fp,sp,44
1800e3cc:	e13ffc15 	stw	r4,-16(fp)
1800e3d0:	e17ffd15 	stw	r5,-12(fp)
1800e3d4:	e1bffe15 	stw	r6,-8(fp)
1800e3d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1800e3dc:	e0bffd17 	ldw	r2,-12(fp)
1800e3e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1800e3e4:	00004706 	br	1800e504 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1800e3e8:	e0bffc17 	ldw	r2,-16(fp)
1800e3ec:	10800a17 	ldw	r2,40(r2)
1800e3f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1800e3f4:	e0bffc17 	ldw	r2,-16(fp)
1800e3f8:	10800b17 	ldw	r2,44(r2)
1800e3fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1800e400:	e0fff717 	ldw	r3,-36(fp)
1800e404:	e0bff817 	ldw	r2,-32(fp)
1800e408:	18800536 	bltu	r3,r2,1800e420 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1800e40c:	e0fff717 	ldw	r3,-36(fp)
1800e410:	e0bff817 	ldw	r2,-32(fp)
1800e414:	1885c83a 	sub	r2,r3,r2
1800e418:	e0bff615 	stw	r2,-40(fp)
1800e41c:	00000406 	br	1800e430 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1800e420:	00c20004 	movi	r3,2048
1800e424:	e0bff817 	ldw	r2,-32(fp)
1800e428:	1885c83a 	sub	r2,r3,r2
1800e42c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1800e430:	e0bff617 	ldw	r2,-40(fp)
1800e434:	10001e26 	beq	r2,zero,1800e4b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1800e438:	e0fffe17 	ldw	r3,-8(fp)
1800e43c:	e0bff617 	ldw	r2,-40(fp)
1800e440:	1880022e 	bgeu	r3,r2,1800e44c <altera_avalon_jtag_uart_read+0x90>
        n = space;
1800e444:	e0bffe17 	ldw	r2,-8(fp)
1800e448:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1800e44c:	e0bffc17 	ldw	r2,-16(fp)
1800e450:	10c00e04 	addi	r3,r2,56
1800e454:	e0bff817 	ldw	r2,-32(fp)
1800e458:	1885883a 	add	r2,r3,r2
1800e45c:	e1bff617 	ldw	r6,-40(fp)
1800e460:	100b883a 	mov	r5,r2
1800e464:	e13ff517 	ldw	r4,-44(fp)
1800e468:	8005d800 	call	18005d80 <memcpy>
      ptr   += n;
1800e46c:	e0fff517 	ldw	r3,-44(fp)
1800e470:	e0bff617 	ldw	r2,-40(fp)
1800e474:	1885883a 	add	r2,r3,r2
1800e478:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1800e47c:	e0fffe17 	ldw	r3,-8(fp)
1800e480:	e0bff617 	ldw	r2,-40(fp)
1800e484:	1885c83a 	sub	r2,r3,r2
1800e488:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1800e48c:	e0fff817 	ldw	r3,-32(fp)
1800e490:	e0bff617 	ldw	r2,-40(fp)
1800e494:	1885883a 	add	r2,r3,r2
1800e498:	10c1ffcc 	andi	r3,r2,2047
1800e49c:	e0bffc17 	ldw	r2,-16(fp)
1800e4a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1800e4a4:	e0bffe17 	ldw	r2,-8(fp)
1800e4a8:	00bfcf16 	blt	zero,r2,1800e3e8 <__alt_data_end+0xf800e3e8>
1800e4ac:	00000106 	br	1800e4b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1800e4b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1800e4b4:	e0fff517 	ldw	r3,-44(fp)
1800e4b8:	e0bffd17 	ldw	r2,-12(fp)
1800e4bc:	1880141e 	bne	r3,r2,1800e510 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1800e4c0:	e0bfff17 	ldw	r2,-4(fp)
1800e4c4:	1090000c 	andi	r2,r2,16384
1800e4c8:	1000131e 	bne	r2,zero,1800e518 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1800e4cc:	0001883a 	nop
1800e4d0:	e0bffc17 	ldw	r2,-16(fp)
1800e4d4:	10c00a17 	ldw	r3,40(r2)
1800e4d8:	e0bff717 	ldw	r2,-36(fp)
1800e4dc:	1880051e 	bne	r3,r2,1800e4f4 <altera_avalon_jtag_uart_read+0x138>
1800e4e0:	e0bffc17 	ldw	r2,-16(fp)
1800e4e4:	10c00917 	ldw	r3,36(r2)
1800e4e8:	e0bffc17 	ldw	r2,-16(fp)
1800e4ec:	10800117 	ldw	r2,4(r2)
1800e4f0:	18bff736 	bltu	r3,r2,1800e4d0 <__alt_data_end+0xf800e4d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1800e4f4:	e0bffc17 	ldw	r2,-16(fp)
1800e4f8:	10c00a17 	ldw	r3,40(r2)
1800e4fc:	e0bff717 	ldw	r2,-36(fp)
1800e500:	18800726 	beq	r3,r2,1800e520 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1800e504:	e0bffe17 	ldw	r2,-8(fp)
1800e508:	00bfb716 	blt	zero,r2,1800e3e8 <__alt_data_end+0xf800e3e8>
1800e50c:	00000506 	br	1800e524 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1800e510:	0001883a 	nop
1800e514:	00000306 	br	1800e524 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1800e518:	0001883a 	nop
1800e51c:	00000106 	br	1800e524 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1800e520:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1800e524:	e0fff517 	ldw	r3,-44(fp)
1800e528:	e0bffd17 	ldw	r2,-12(fp)
1800e52c:	18801826 	beq	r3,r2,1800e590 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800e530:	0005303a 	rdctl	r2,status
1800e534:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800e538:	e0fffb17 	ldw	r3,-20(fp)
1800e53c:	00bfff84 	movi	r2,-2
1800e540:	1884703a 	and	r2,r3,r2
1800e544:	1001703a 	wrctl	status,r2
  
  return context;
1800e548:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1800e54c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1800e550:	e0bffc17 	ldw	r2,-16(fp)
1800e554:	10800817 	ldw	r2,32(r2)
1800e558:	10c00054 	ori	r3,r2,1
1800e55c:	e0bffc17 	ldw	r2,-16(fp)
1800e560:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1800e564:	e0bffc17 	ldw	r2,-16(fp)
1800e568:	10800017 	ldw	r2,0(r2)
1800e56c:	10800104 	addi	r2,r2,4
1800e570:	1007883a 	mov	r3,r2
1800e574:	e0bffc17 	ldw	r2,-16(fp)
1800e578:	10800817 	ldw	r2,32(r2)
1800e57c:	18800035 	stwio	r2,0(r3)
1800e580:	e0bffa17 	ldw	r2,-24(fp)
1800e584:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800e588:	e0bff917 	ldw	r2,-28(fp)
1800e58c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1800e590:	e0fff517 	ldw	r3,-44(fp)
1800e594:	e0bffd17 	ldw	r2,-12(fp)
1800e598:	18800426 	beq	r3,r2,1800e5ac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1800e59c:	e0fff517 	ldw	r3,-44(fp)
1800e5a0:	e0bffd17 	ldw	r2,-12(fp)
1800e5a4:	1885c83a 	sub	r2,r3,r2
1800e5a8:	00000606 	br	1800e5c4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1800e5ac:	e0bfff17 	ldw	r2,-4(fp)
1800e5b0:	1090000c 	andi	r2,r2,16384
1800e5b4:	10000226 	beq	r2,zero,1800e5c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1800e5b8:	00bffd44 	movi	r2,-11
1800e5bc:	00000106 	br	1800e5c4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1800e5c0:	00bffec4 	movi	r2,-5
}
1800e5c4:	e037883a 	mov	sp,fp
1800e5c8:	dfc00117 	ldw	ra,4(sp)
1800e5cc:	df000017 	ldw	fp,0(sp)
1800e5d0:	dec00204 	addi	sp,sp,8
1800e5d4:	f800283a 	ret

1800e5d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1800e5d8:	defff304 	addi	sp,sp,-52
1800e5dc:	dfc00c15 	stw	ra,48(sp)
1800e5e0:	df000b15 	stw	fp,44(sp)
1800e5e4:	df000b04 	addi	fp,sp,44
1800e5e8:	e13ffc15 	stw	r4,-16(fp)
1800e5ec:	e17ffd15 	stw	r5,-12(fp)
1800e5f0:	e1bffe15 	stw	r6,-8(fp)
1800e5f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1800e5f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1800e5fc:	e0bffd17 	ldw	r2,-12(fp)
1800e600:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1800e604:	00003706 	br	1800e6e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1800e608:	e0bffc17 	ldw	r2,-16(fp)
1800e60c:	10800c17 	ldw	r2,48(r2)
1800e610:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1800e614:	e0bffc17 	ldw	r2,-16(fp)
1800e618:	10800d17 	ldw	r2,52(r2)
1800e61c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1800e620:	e0fff917 	ldw	r3,-28(fp)
1800e624:	e0bff517 	ldw	r2,-44(fp)
1800e628:	1880062e 	bgeu	r3,r2,1800e644 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1800e62c:	e0fff517 	ldw	r3,-44(fp)
1800e630:	e0bff917 	ldw	r2,-28(fp)
1800e634:	1885c83a 	sub	r2,r3,r2
1800e638:	10bfffc4 	addi	r2,r2,-1
1800e63c:	e0bff615 	stw	r2,-40(fp)
1800e640:	00000b06 	br	1800e670 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1800e644:	e0bff517 	ldw	r2,-44(fp)
1800e648:	10000526 	beq	r2,zero,1800e660 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1800e64c:	00c20004 	movi	r3,2048
1800e650:	e0bff917 	ldw	r2,-28(fp)
1800e654:	1885c83a 	sub	r2,r3,r2
1800e658:	e0bff615 	stw	r2,-40(fp)
1800e65c:	00000406 	br	1800e670 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1800e660:	00c1ffc4 	movi	r3,2047
1800e664:	e0bff917 	ldw	r2,-28(fp)
1800e668:	1885c83a 	sub	r2,r3,r2
1800e66c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1800e670:	e0bff617 	ldw	r2,-40(fp)
1800e674:	10001e26 	beq	r2,zero,1800e6f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1800e678:	e0fffe17 	ldw	r3,-8(fp)
1800e67c:	e0bff617 	ldw	r2,-40(fp)
1800e680:	1880022e 	bgeu	r3,r2,1800e68c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1800e684:	e0bffe17 	ldw	r2,-8(fp)
1800e688:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1800e68c:	e0bffc17 	ldw	r2,-16(fp)
1800e690:	10c20e04 	addi	r3,r2,2104
1800e694:	e0bff917 	ldw	r2,-28(fp)
1800e698:	1885883a 	add	r2,r3,r2
1800e69c:	e1bff617 	ldw	r6,-40(fp)
1800e6a0:	e17ffd17 	ldw	r5,-12(fp)
1800e6a4:	1009883a 	mov	r4,r2
1800e6a8:	8005d800 	call	18005d80 <memcpy>
      ptr   += n;
1800e6ac:	e0fffd17 	ldw	r3,-12(fp)
1800e6b0:	e0bff617 	ldw	r2,-40(fp)
1800e6b4:	1885883a 	add	r2,r3,r2
1800e6b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1800e6bc:	e0fffe17 	ldw	r3,-8(fp)
1800e6c0:	e0bff617 	ldw	r2,-40(fp)
1800e6c4:	1885c83a 	sub	r2,r3,r2
1800e6c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1800e6cc:	e0fff917 	ldw	r3,-28(fp)
1800e6d0:	e0bff617 	ldw	r2,-40(fp)
1800e6d4:	1885883a 	add	r2,r3,r2
1800e6d8:	10c1ffcc 	andi	r3,r2,2047
1800e6dc:	e0bffc17 	ldw	r2,-16(fp)
1800e6e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1800e6e4:	e0bffe17 	ldw	r2,-8(fp)
1800e6e8:	00bfc716 	blt	zero,r2,1800e608 <__alt_data_end+0xf800e608>
1800e6ec:	00000106 	br	1800e6f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1800e6f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800e6f4:	0005303a 	rdctl	r2,status
1800e6f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800e6fc:	e0fffb17 	ldw	r3,-20(fp)
1800e700:	00bfff84 	movi	r2,-2
1800e704:	1884703a 	and	r2,r3,r2
1800e708:	1001703a 	wrctl	status,r2
  
  return context;
1800e70c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1800e710:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1800e714:	e0bffc17 	ldw	r2,-16(fp)
1800e718:	10800817 	ldw	r2,32(r2)
1800e71c:	10c00094 	ori	r3,r2,2
1800e720:	e0bffc17 	ldw	r2,-16(fp)
1800e724:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1800e728:	e0bffc17 	ldw	r2,-16(fp)
1800e72c:	10800017 	ldw	r2,0(r2)
1800e730:	10800104 	addi	r2,r2,4
1800e734:	1007883a 	mov	r3,r2
1800e738:	e0bffc17 	ldw	r2,-16(fp)
1800e73c:	10800817 	ldw	r2,32(r2)
1800e740:	18800035 	stwio	r2,0(r3)
1800e744:	e0bffa17 	ldw	r2,-24(fp)
1800e748:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800e74c:	e0bff817 	ldw	r2,-32(fp)
1800e750:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1800e754:	e0bffe17 	ldw	r2,-8(fp)
1800e758:	0080100e 	bge	zero,r2,1800e79c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1800e75c:	e0bfff17 	ldw	r2,-4(fp)
1800e760:	1090000c 	andi	r2,r2,16384
1800e764:	1000101e 	bne	r2,zero,1800e7a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1800e768:	0001883a 	nop
1800e76c:	e0bffc17 	ldw	r2,-16(fp)
1800e770:	10c00d17 	ldw	r3,52(r2)
1800e774:	e0bff517 	ldw	r2,-44(fp)
1800e778:	1880051e 	bne	r3,r2,1800e790 <altera_avalon_jtag_uart_write+0x1b8>
1800e77c:	e0bffc17 	ldw	r2,-16(fp)
1800e780:	10c00917 	ldw	r3,36(r2)
1800e784:	e0bffc17 	ldw	r2,-16(fp)
1800e788:	10800117 	ldw	r2,4(r2)
1800e78c:	18bff736 	bltu	r3,r2,1800e76c <__alt_data_end+0xf800e76c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1800e790:	e0bffc17 	ldw	r2,-16(fp)
1800e794:	10800917 	ldw	r2,36(r2)
1800e798:	1000051e 	bne	r2,zero,1800e7b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1800e79c:	e0bffe17 	ldw	r2,-8(fp)
1800e7a0:	00bfd016 	blt	zero,r2,1800e6e4 <__alt_data_end+0xf800e6e4>
1800e7a4:	00000306 	br	1800e7b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1800e7a8:	0001883a 	nop
1800e7ac:	00000106 	br	1800e7b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1800e7b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1800e7b4:	e0fffd17 	ldw	r3,-12(fp)
1800e7b8:	e0bff717 	ldw	r2,-36(fp)
1800e7bc:	18800426 	beq	r3,r2,1800e7d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1800e7c0:	e0fffd17 	ldw	r3,-12(fp)
1800e7c4:	e0bff717 	ldw	r2,-36(fp)
1800e7c8:	1885c83a 	sub	r2,r3,r2
1800e7cc:	00000606 	br	1800e7e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1800e7d0:	e0bfff17 	ldw	r2,-4(fp)
1800e7d4:	1090000c 	andi	r2,r2,16384
1800e7d8:	10000226 	beq	r2,zero,1800e7e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1800e7dc:	00bffd44 	movi	r2,-11
1800e7e0:	00000106 	br	1800e7e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1800e7e4:	00bffec4 	movi	r2,-5
}
1800e7e8:	e037883a 	mov	sp,fp
1800e7ec:	dfc00117 	ldw	ra,4(sp)
1800e7f0:	df000017 	ldw	fp,0(sp)
1800e7f4:	dec00204 	addi	sp,sp,8
1800e7f8:	f800283a 	ret

1800e7fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1800e7fc:	defff504 	addi	sp,sp,-44
1800e800:	df000a15 	stw	fp,40(sp)
1800e804:	df000a04 	addi	fp,sp,40
1800e808:	e13ffc15 	stw	r4,-16(fp)
1800e80c:	e17ffd15 	stw	r5,-12(fp)
1800e810:	e1bffe15 	stw	r6,-8(fp)
1800e814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1800e818:	e03ff615 	stw	zero,-40(fp)
1800e81c:	d0a7ee17 	ldw	r2,-24648(gp)
  
  if (alt_ticks_per_second ())
1800e820:	10003c26 	beq	r2,zero,1800e914 <alt_alarm_start+0x118>
  {
    if (alarm)
1800e824:	e0bffc17 	ldw	r2,-16(fp)
1800e828:	10003826 	beq	r2,zero,1800e90c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1800e82c:	e0bffc17 	ldw	r2,-16(fp)
1800e830:	e0fffe17 	ldw	r3,-8(fp)
1800e834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1800e838:	e0bffc17 	ldw	r2,-16(fp)
1800e83c:	e0ffff17 	ldw	r3,-4(fp)
1800e840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800e844:	0005303a 	rdctl	r2,status
1800e848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800e84c:	e0fff917 	ldw	r3,-28(fp)
1800e850:	00bfff84 	movi	r2,-2
1800e854:	1884703a 	and	r2,r3,r2
1800e858:	1001703a 	wrctl	status,r2
  
  return context;
1800e85c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1800e860:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1800e864:	d0a7ef17 	ldw	r2,-24644(gp)
      
      current_nticks = alt_nticks();
1800e868:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1800e86c:	e0fffd17 	ldw	r3,-12(fp)
1800e870:	e0bff617 	ldw	r2,-40(fp)
1800e874:	1885883a 	add	r2,r3,r2
1800e878:	10c00044 	addi	r3,r2,1
1800e87c:	e0bffc17 	ldw	r2,-16(fp)
1800e880:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1800e884:	e0bffc17 	ldw	r2,-16(fp)
1800e888:	10c00217 	ldw	r3,8(r2)
1800e88c:	e0bff617 	ldw	r2,-40(fp)
1800e890:	1880042e 	bgeu	r3,r2,1800e8a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1800e894:	e0bffc17 	ldw	r2,-16(fp)
1800e898:	00c00044 	movi	r3,1
1800e89c:	10c00405 	stb	r3,16(r2)
1800e8a0:	00000206 	br	1800e8ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1800e8a4:	e0bffc17 	ldw	r2,-16(fp)
1800e8a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1800e8ac:	e0bffc17 	ldw	r2,-16(fp)
1800e8b0:	d0e01004 	addi	r3,gp,-32704
1800e8b4:	e0fffa15 	stw	r3,-24(fp)
1800e8b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1800e8bc:	e0bffb17 	ldw	r2,-20(fp)
1800e8c0:	e0fffa17 	ldw	r3,-24(fp)
1800e8c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1800e8c8:	e0bffa17 	ldw	r2,-24(fp)
1800e8cc:	10c00017 	ldw	r3,0(r2)
1800e8d0:	e0bffb17 	ldw	r2,-20(fp)
1800e8d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1800e8d8:	e0bffa17 	ldw	r2,-24(fp)
1800e8dc:	10800017 	ldw	r2,0(r2)
1800e8e0:	e0fffb17 	ldw	r3,-20(fp)
1800e8e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1800e8e8:	e0bffa17 	ldw	r2,-24(fp)
1800e8ec:	e0fffb17 	ldw	r3,-20(fp)
1800e8f0:	10c00015 	stw	r3,0(r2)
1800e8f4:	e0bff817 	ldw	r2,-32(fp)
1800e8f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800e8fc:	e0bff717 	ldw	r2,-36(fp)
1800e900:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1800e904:	0005883a 	mov	r2,zero
1800e908:	00000306 	br	1800e918 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1800e90c:	00bffa84 	movi	r2,-22
1800e910:	00000106 	br	1800e918 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1800e914:	00bfde84 	movi	r2,-134
  }
}
1800e918:	e037883a 	mov	sp,fp
1800e91c:	df000017 	ldw	fp,0(sp)
1800e920:	dec00104 	addi	sp,sp,4
1800e924:	f800283a 	ret

1800e928 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1800e928:	defffa04 	addi	sp,sp,-24
1800e92c:	dfc00515 	stw	ra,20(sp)
1800e930:	df000415 	stw	fp,16(sp)
1800e934:	df000404 	addi	fp,sp,16
1800e938:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1800e93c:	00800244 	movi	r2,9
1800e940:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1800e944:	014003f4 	movhi	r5,15
1800e948:	29509004 	addi	r5,r5,16960
1800e94c:	e13ffd17 	ldw	r4,-12(fp)
1800e950:	8000b740 	call	18000b74 <__mulsi3>
1800e954:	100b883a 	mov	r5,r2
1800e958:	0100bef4 	movhi	r4,763
1800e95c:	213c2004 	addi	r4,r4,-3968
1800e960:	8000ab80 	call	18000ab8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1800e964:	100b883a 	mov	r5,r2
1800e968:	01200034 	movhi	r4,32768
1800e96c:	213fffc4 	addi	r4,r4,-1
1800e970:	8000ab80 	call	18000ab8 <__udivsi3>
1800e974:	100b883a 	mov	r5,r2
1800e978:	e13fff17 	ldw	r4,-4(fp)
1800e97c:	8000ab80 	call	18000ab8 <__udivsi3>
1800e980:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1800e984:	e0bffe17 	ldw	r2,-8(fp)
1800e988:	10002a26 	beq	r2,zero,1800ea34 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1800e98c:	e03ffc15 	stw	zero,-16(fp)
1800e990:	00001706 	br	1800e9f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1800e994:	00a00034 	movhi	r2,32768
1800e998:	10bfffc4 	addi	r2,r2,-1
1800e99c:	10bfffc4 	addi	r2,r2,-1
1800e9a0:	103ffe1e 	bne	r2,zero,1800e99c <__alt_data_end+0xf800e99c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1800e9a4:	014003f4 	movhi	r5,15
1800e9a8:	29509004 	addi	r5,r5,16960
1800e9ac:	e13ffd17 	ldw	r4,-12(fp)
1800e9b0:	8000b740 	call	18000b74 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1800e9b4:	100b883a 	mov	r5,r2
1800e9b8:	0100bef4 	movhi	r4,763
1800e9bc:	213c2004 	addi	r4,r4,-3968
1800e9c0:	8000ab80 	call	18000ab8 <__udivsi3>
1800e9c4:	100b883a 	mov	r5,r2
1800e9c8:	01200034 	movhi	r4,32768
1800e9cc:	213fffc4 	addi	r4,r4,-1
1800e9d0:	8000ab80 	call	18000ab8 <__udivsi3>
1800e9d4:	1007883a 	mov	r3,r2
1800e9d8:	e0bfff17 	ldw	r2,-4(fp)
1800e9dc:	10c5c83a 	sub	r2,r2,r3
1800e9e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1800e9e4:	e0bffc17 	ldw	r2,-16(fp)
1800e9e8:	10800044 	addi	r2,r2,1
1800e9ec:	e0bffc15 	stw	r2,-16(fp)
1800e9f0:	e0fffc17 	ldw	r3,-16(fp)
1800e9f4:	e0bffe17 	ldw	r2,-8(fp)
1800e9f8:	18bfe616 	blt	r3,r2,1800e994 <__alt_data_end+0xf800e994>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1800e9fc:	014003f4 	movhi	r5,15
1800ea00:	29509004 	addi	r5,r5,16960
1800ea04:	e13ffd17 	ldw	r4,-12(fp)
1800ea08:	8000b740 	call	18000b74 <__mulsi3>
1800ea0c:	100b883a 	mov	r5,r2
1800ea10:	0100bef4 	movhi	r4,763
1800ea14:	213c2004 	addi	r4,r4,-3968
1800ea18:	8000ab80 	call	18000ab8 <__udivsi3>
1800ea1c:	e17fff17 	ldw	r5,-4(fp)
1800ea20:	1009883a 	mov	r4,r2
1800ea24:	8000b740 	call	18000b74 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1800ea28:	10bfffc4 	addi	r2,r2,-1
1800ea2c:	103ffe1e 	bne	r2,zero,1800ea28 <__alt_data_end+0xf800ea28>
1800ea30:	00000d06 	br	1800ea68 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1800ea34:	014003f4 	movhi	r5,15
1800ea38:	29509004 	addi	r5,r5,16960
1800ea3c:	e13ffd17 	ldw	r4,-12(fp)
1800ea40:	8000b740 	call	18000b74 <__mulsi3>
1800ea44:	100b883a 	mov	r5,r2
1800ea48:	0100bef4 	movhi	r4,763
1800ea4c:	213c2004 	addi	r4,r4,-3968
1800ea50:	8000ab80 	call	18000ab8 <__udivsi3>
1800ea54:	e17fff17 	ldw	r5,-4(fp)
1800ea58:	1009883a 	mov	r4,r2
1800ea5c:	8000b740 	call	18000b74 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1800ea60:	10bfffc4 	addi	r2,r2,-1
1800ea64:	00bffe16 	blt	zero,r2,1800ea60 <__alt_data_end+0xf800ea60>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1800ea68:	0005883a 	mov	r2,zero
}
1800ea6c:	e037883a 	mov	sp,fp
1800ea70:	dfc00117 	ldw	ra,4(sp)
1800ea74:	df000017 	ldw	fp,0(sp)
1800ea78:	dec00204 	addi	sp,sp,8
1800ea7c:	f800283a 	ret

1800ea80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1800ea80:	deffff04 	addi	sp,sp,-4
1800ea84:	df000015 	stw	fp,0(sp)
1800ea88:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1800ea8c:	0001883a 	nop
1800ea90:	e037883a 	mov	sp,fp
1800ea94:	df000017 	ldw	fp,0(sp)
1800ea98:	dec00104 	addi	sp,sp,4
1800ea9c:	f800283a 	ret

1800eaa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800eaa0:	defffe04 	addi	sp,sp,-8
1800eaa4:	dfc00115 	stw	ra,4(sp)
1800eaa8:	df000015 	stw	fp,0(sp)
1800eaac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800eab0:	d0a00d17 	ldw	r2,-32716(gp)
1800eab4:	10000326 	beq	r2,zero,1800eac4 <alt_get_errno+0x24>
1800eab8:	d0a00d17 	ldw	r2,-32716(gp)
1800eabc:	103ee83a 	callr	r2
1800eac0:	00000106 	br	1800eac8 <alt_get_errno+0x28>
1800eac4:	d0a7e904 	addi	r2,gp,-24668
}
1800eac8:	e037883a 	mov	sp,fp
1800eacc:	dfc00117 	ldw	ra,4(sp)
1800ead0:	df000017 	ldw	fp,0(sp)
1800ead4:	dec00204 	addi	sp,sp,8
1800ead8:	f800283a 	ret

1800eadc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1800eadc:	defffa04 	addi	sp,sp,-24
1800eae0:	dfc00515 	stw	ra,20(sp)
1800eae4:	df000415 	stw	fp,16(sp)
1800eae8:	df000404 	addi	fp,sp,16
1800eaec:	e13ffe15 	stw	r4,-8(fp)
1800eaf0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1800eaf4:	e0bffe17 	ldw	r2,-8(fp)
1800eaf8:	10000326 	beq	r2,zero,1800eb08 <alt_dev_llist_insert+0x2c>
1800eafc:	e0bffe17 	ldw	r2,-8(fp)
1800eb00:	10800217 	ldw	r2,8(r2)
1800eb04:	1000061e 	bne	r2,zero,1800eb20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1800eb08:	800eaa00 	call	1800eaa0 <alt_get_errno>
1800eb0c:	1007883a 	mov	r3,r2
1800eb10:	00800584 	movi	r2,22
1800eb14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1800eb18:	00bffa84 	movi	r2,-22
1800eb1c:	00001306 	br	1800eb6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1800eb20:	e0bffe17 	ldw	r2,-8(fp)
1800eb24:	e0ffff17 	ldw	r3,-4(fp)
1800eb28:	e0fffc15 	stw	r3,-16(fp)
1800eb2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1800eb30:	e0bffd17 	ldw	r2,-12(fp)
1800eb34:	e0fffc17 	ldw	r3,-16(fp)
1800eb38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1800eb3c:	e0bffc17 	ldw	r2,-16(fp)
1800eb40:	10c00017 	ldw	r3,0(r2)
1800eb44:	e0bffd17 	ldw	r2,-12(fp)
1800eb48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1800eb4c:	e0bffc17 	ldw	r2,-16(fp)
1800eb50:	10800017 	ldw	r2,0(r2)
1800eb54:	e0fffd17 	ldw	r3,-12(fp)
1800eb58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1800eb5c:	e0bffc17 	ldw	r2,-16(fp)
1800eb60:	e0fffd17 	ldw	r3,-12(fp)
1800eb64:	10c00015 	stw	r3,0(r2)

  return 0;  
1800eb68:	0005883a 	mov	r2,zero
}
1800eb6c:	e037883a 	mov	sp,fp
1800eb70:	dfc00117 	ldw	ra,4(sp)
1800eb74:	df000017 	ldw	fp,0(sp)
1800eb78:	dec00204 	addi	sp,sp,8
1800eb7c:	f800283a 	ret

1800eb80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1800eb80:	defffd04 	addi	sp,sp,-12
1800eb84:	dfc00215 	stw	ra,8(sp)
1800eb88:	df000115 	stw	fp,4(sp)
1800eb8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1800eb90:	00860074 	movhi	r2,6145
1800eb94:	10becd04 	addi	r2,r2,-1228
1800eb98:	e0bfff15 	stw	r2,-4(fp)
1800eb9c:	00000606 	br	1800ebb8 <_do_ctors+0x38>
        (*ctor) (); 
1800eba0:	e0bfff17 	ldw	r2,-4(fp)
1800eba4:	10800017 	ldw	r2,0(r2)
1800eba8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1800ebac:	e0bfff17 	ldw	r2,-4(fp)
1800ebb0:	10bfff04 	addi	r2,r2,-4
1800ebb4:	e0bfff15 	stw	r2,-4(fp)
1800ebb8:	e0ffff17 	ldw	r3,-4(fp)
1800ebbc:	00860074 	movhi	r2,6145
1800ebc0:	10bece04 	addi	r2,r2,-1224
1800ebc4:	18bff62e 	bgeu	r3,r2,1800eba0 <__alt_data_end+0xf800eba0>
        (*ctor) (); 
}
1800ebc8:	0001883a 	nop
1800ebcc:	e037883a 	mov	sp,fp
1800ebd0:	dfc00117 	ldw	ra,4(sp)
1800ebd4:	df000017 	ldw	fp,0(sp)
1800ebd8:	dec00204 	addi	sp,sp,8
1800ebdc:	f800283a 	ret

1800ebe0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1800ebe0:	defffd04 	addi	sp,sp,-12
1800ebe4:	dfc00215 	stw	ra,8(sp)
1800ebe8:	df000115 	stw	fp,4(sp)
1800ebec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1800ebf0:	00860074 	movhi	r2,6145
1800ebf4:	10becd04 	addi	r2,r2,-1228
1800ebf8:	e0bfff15 	stw	r2,-4(fp)
1800ebfc:	00000606 	br	1800ec18 <_do_dtors+0x38>
        (*dtor) (); 
1800ec00:	e0bfff17 	ldw	r2,-4(fp)
1800ec04:	10800017 	ldw	r2,0(r2)
1800ec08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1800ec0c:	e0bfff17 	ldw	r2,-4(fp)
1800ec10:	10bfff04 	addi	r2,r2,-4
1800ec14:	e0bfff15 	stw	r2,-4(fp)
1800ec18:	e0ffff17 	ldw	r3,-4(fp)
1800ec1c:	00860074 	movhi	r2,6145
1800ec20:	10bece04 	addi	r2,r2,-1224
1800ec24:	18bff62e 	bgeu	r3,r2,1800ec00 <__alt_data_end+0xf800ec00>
        (*dtor) (); 
}
1800ec28:	0001883a 	nop
1800ec2c:	e037883a 	mov	sp,fp
1800ec30:	dfc00117 	ldw	ra,4(sp)
1800ec34:	df000017 	ldw	fp,0(sp)
1800ec38:	dec00204 	addi	sp,sp,8
1800ec3c:	f800283a 	ret

1800ec40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1800ec40:	deffff04 	addi	sp,sp,-4
1800ec44:	df000015 	stw	fp,0(sp)
1800ec48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1800ec4c:	0001883a 	nop
1800ec50:	e037883a 	mov	sp,fp
1800ec54:	df000017 	ldw	fp,0(sp)
1800ec58:	dec00104 	addi	sp,sp,4
1800ec5c:	f800283a 	ret

1800ec60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1800ec60:	defff904 	addi	sp,sp,-28
1800ec64:	dfc00615 	stw	ra,24(sp)
1800ec68:	df000515 	stw	fp,20(sp)
1800ec6c:	df000504 	addi	fp,sp,20
1800ec70:	e13ffc15 	stw	r4,-16(fp)
1800ec74:	e17ffd15 	stw	r5,-12(fp)
1800ec78:	e1bffe15 	stw	r6,-8(fp)
1800ec7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1800ec80:	e0800217 	ldw	r2,8(fp)
1800ec84:	d8800015 	stw	r2,0(sp)
1800ec88:	e1ffff17 	ldw	r7,-4(fp)
1800ec8c:	e1bffe17 	ldw	r6,-8(fp)
1800ec90:	e17ffd17 	ldw	r5,-12(fp)
1800ec94:	e13ffc17 	ldw	r4,-16(fp)
1800ec98:	800ee100 	call	1800ee10 <alt_iic_isr_register>
}  
1800ec9c:	e037883a 	mov	sp,fp
1800eca0:	dfc00117 	ldw	ra,4(sp)
1800eca4:	df000017 	ldw	fp,0(sp)
1800eca8:	dec00204 	addi	sp,sp,8
1800ecac:	f800283a 	ret

1800ecb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1800ecb0:	defff904 	addi	sp,sp,-28
1800ecb4:	df000615 	stw	fp,24(sp)
1800ecb8:	df000604 	addi	fp,sp,24
1800ecbc:	e13ffe15 	stw	r4,-8(fp)
1800ecc0:	e17fff15 	stw	r5,-4(fp)
1800ecc4:	e0bfff17 	ldw	r2,-4(fp)
1800ecc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800eccc:	0005303a 	rdctl	r2,status
1800ecd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800ecd4:	e0fffb17 	ldw	r3,-20(fp)
1800ecd8:	00bfff84 	movi	r2,-2
1800ecdc:	1884703a 	and	r2,r3,r2
1800ece0:	1001703a 	wrctl	status,r2
  
  return context;
1800ece4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1800ece8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1800ecec:	00c00044 	movi	r3,1
1800ecf0:	e0bffa17 	ldw	r2,-24(fp)
1800ecf4:	1884983a 	sll	r2,r3,r2
1800ecf8:	1007883a 	mov	r3,r2
1800ecfc:	d0a7ed17 	ldw	r2,-24652(gp)
1800ed00:	1884b03a 	or	r2,r3,r2
1800ed04:	d0a7ed15 	stw	r2,-24652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1800ed08:	d0a7ed17 	ldw	r2,-24652(gp)
1800ed0c:	100170fa 	wrctl	ienable,r2
1800ed10:	e0bffc17 	ldw	r2,-16(fp)
1800ed14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800ed18:	e0bffd17 	ldw	r2,-12(fp)
1800ed1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1800ed20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1800ed24:	0001883a 	nop
}
1800ed28:	e037883a 	mov	sp,fp
1800ed2c:	df000017 	ldw	fp,0(sp)
1800ed30:	dec00104 	addi	sp,sp,4
1800ed34:	f800283a 	ret

1800ed38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1800ed38:	defff904 	addi	sp,sp,-28
1800ed3c:	df000615 	stw	fp,24(sp)
1800ed40:	df000604 	addi	fp,sp,24
1800ed44:	e13ffe15 	stw	r4,-8(fp)
1800ed48:	e17fff15 	stw	r5,-4(fp)
1800ed4c:	e0bfff17 	ldw	r2,-4(fp)
1800ed50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800ed54:	0005303a 	rdctl	r2,status
1800ed58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800ed5c:	e0fffb17 	ldw	r3,-20(fp)
1800ed60:	00bfff84 	movi	r2,-2
1800ed64:	1884703a 	and	r2,r3,r2
1800ed68:	1001703a 	wrctl	status,r2
  
  return context;
1800ed6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1800ed70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1800ed74:	00c00044 	movi	r3,1
1800ed78:	e0bffa17 	ldw	r2,-24(fp)
1800ed7c:	1884983a 	sll	r2,r3,r2
1800ed80:	0084303a 	nor	r2,zero,r2
1800ed84:	1007883a 	mov	r3,r2
1800ed88:	d0a7ed17 	ldw	r2,-24652(gp)
1800ed8c:	1884703a 	and	r2,r3,r2
1800ed90:	d0a7ed15 	stw	r2,-24652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1800ed94:	d0a7ed17 	ldw	r2,-24652(gp)
1800ed98:	100170fa 	wrctl	ienable,r2
1800ed9c:	e0bffc17 	ldw	r2,-16(fp)
1800eda0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800eda4:	e0bffd17 	ldw	r2,-12(fp)
1800eda8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1800edac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1800edb0:	0001883a 	nop
}
1800edb4:	e037883a 	mov	sp,fp
1800edb8:	df000017 	ldw	fp,0(sp)
1800edbc:	dec00104 	addi	sp,sp,4
1800edc0:	f800283a 	ret

1800edc4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1800edc4:	defffc04 	addi	sp,sp,-16
1800edc8:	df000315 	stw	fp,12(sp)
1800edcc:	df000304 	addi	fp,sp,12
1800edd0:	e13ffe15 	stw	r4,-8(fp)
1800edd4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1800edd8:	000530fa 	rdctl	r2,ienable
1800eddc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1800ede0:	00c00044 	movi	r3,1
1800ede4:	e0bfff17 	ldw	r2,-4(fp)
1800ede8:	1884983a 	sll	r2,r3,r2
1800edec:	1007883a 	mov	r3,r2
1800edf0:	e0bffd17 	ldw	r2,-12(fp)
1800edf4:	1884703a 	and	r2,r3,r2
1800edf8:	1004c03a 	cmpne	r2,r2,zero
1800edfc:	10803fcc 	andi	r2,r2,255
}
1800ee00:	e037883a 	mov	sp,fp
1800ee04:	df000017 	ldw	fp,0(sp)
1800ee08:	dec00104 	addi	sp,sp,4
1800ee0c:	f800283a 	ret

1800ee10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1800ee10:	defff504 	addi	sp,sp,-44
1800ee14:	dfc00a15 	stw	ra,40(sp)
1800ee18:	df000915 	stw	fp,36(sp)
1800ee1c:	df000904 	addi	fp,sp,36
1800ee20:	e13ffc15 	stw	r4,-16(fp)
1800ee24:	e17ffd15 	stw	r5,-12(fp)
1800ee28:	e1bffe15 	stw	r6,-8(fp)
1800ee2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1800ee30:	00bffa84 	movi	r2,-22
1800ee34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1800ee38:	e0bffd17 	ldw	r2,-12(fp)
1800ee3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1800ee40:	e0bff817 	ldw	r2,-32(fp)
1800ee44:	10800808 	cmpgei	r2,r2,32
1800ee48:	1000271e 	bne	r2,zero,1800eee8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800ee4c:	0005303a 	rdctl	r2,status
1800ee50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800ee54:	e0fffb17 	ldw	r3,-20(fp)
1800ee58:	00bfff84 	movi	r2,-2
1800ee5c:	1884703a 	and	r2,r3,r2
1800ee60:	1001703a 	wrctl	status,r2
  
  return context;
1800ee64:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1800ee68:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1800ee6c:	00860074 	movhi	r2,6145
1800ee70:	108f7104 	addi	r2,r2,15812
1800ee74:	e0fff817 	ldw	r3,-32(fp)
1800ee78:	180690fa 	slli	r3,r3,3
1800ee7c:	10c5883a 	add	r2,r2,r3
1800ee80:	e0fffe17 	ldw	r3,-8(fp)
1800ee84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1800ee88:	00860074 	movhi	r2,6145
1800ee8c:	108f7104 	addi	r2,r2,15812
1800ee90:	e0fff817 	ldw	r3,-32(fp)
1800ee94:	180690fa 	slli	r3,r3,3
1800ee98:	10c5883a 	add	r2,r2,r3
1800ee9c:	10800104 	addi	r2,r2,4
1800eea0:	e0ffff17 	ldw	r3,-4(fp)
1800eea4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1800eea8:	e0bffe17 	ldw	r2,-8(fp)
1800eeac:	10000526 	beq	r2,zero,1800eec4 <alt_iic_isr_register+0xb4>
1800eeb0:	e0bff817 	ldw	r2,-32(fp)
1800eeb4:	100b883a 	mov	r5,r2
1800eeb8:	e13ffc17 	ldw	r4,-16(fp)
1800eebc:	800ecb00 	call	1800ecb0 <alt_ic_irq_enable>
1800eec0:	00000406 	br	1800eed4 <alt_iic_isr_register+0xc4>
1800eec4:	e0bff817 	ldw	r2,-32(fp)
1800eec8:	100b883a 	mov	r5,r2
1800eecc:	e13ffc17 	ldw	r4,-16(fp)
1800eed0:	800ed380 	call	1800ed38 <alt_ic_irq_disable>
1800eed4:	e0bff715 	stw	r2,-36(fp)
1800eed8:	e0bffa17 	ldw	r2,-24(fp)
1800eedc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800eee0:	e0bff917 	ldw	r2,-28(fp)
1800eee4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1800eee8:	e0bff717 	ldw	r2,-36(fp)
}
1800eeec:	e037883a 	mov	sp,fp
1800eef0:	dfc00117 	ldw	ra,4(sp)
1800eef4:	df000017 	ldw	fp,0(sp)
1800eef8:	dec00204 	addi	sp,sp,8
1800eefc:	f800283a 	ret

1800ef00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1800ef00:	defff804 	addi	sp,sp,-32
1800ef04:	dfc00715 	stw	ra,28(sp)
1800ef08:	df000615 	stw	fp,24(sp)
1800ef0c:	dc000515 	stw	r16,20(sp)
1800ef10:	df000604 	addi	fp,sp,24
1800ef14:	e13ffb15 	stw	r4,-20(fp)
1800ef18:	e17ffc15 	stw	r5,-16(fp)
1800ef1c:	e1bffd15 	stw	r6,-12(fp)
1800ef20:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1800ef24:	e1bffe17 	ldw	r6,-8(fp)
1800ef28:	e17ffd17 	ldw	r5,-12(fp)
1800ef2c:	e13ffc17 	ldw	r4,-16(fp)
1800ef30:	800f1880 	call	1800f188 <open>
1800ef34:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1800ef38:	e0bffa17 	ldw	r2,-24(fp)
1800ef3c:	10002216 	blt	r2,zero,1800efc8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1800ef40:	04060074 	movhi	r16,6145
1800ef44:	8402fe04 	addi	r16,r16,3064
1800ef48:	e0bffa17 	ldw	r2,-24(fp)
1800ef4c:	01400304 	movi	r5,12
1800ef50:	1009883a 	mov	r4,r2
1800ef54:	8000b740 	call	18000b74 <__mulsi3>
1800ef58:	8085883a 	add	r2,r16,r2
1800ef5c:	10c00017 	ldw	r3,0(r2)
1800ef60:	e0bffb17 	ldw	r2,-20(fp)
1800ef64:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1800ef68:	04060074 	movhi	r16,6145
1800ef6c:	8402fe04 	addi	r16,r16,3064
1800ef70:	e0bffa17 	ldw	r2,-24(fp)
1800ef74:	01400304 	movi	r5,12
1800ef78:	1009883a 	mov	r4,r2
1800ef7c:	8000b740 	call	18000b74 <__mulsi3>
1800ef80:	8085883a 	add	r2,r16,r2
1800ef84:	10800104 	addi	r2,r2,4
1800ef88:	10c00017 	ldw	r3,0(r2)
1800ef8c:	e0bffb17 	ldw	r2,-20(fp)
1800ef90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1800ef94:	04060074 	movhi	r16,6145
1800ef98:	8402fe04 	addi	r16,r16,3064
1800ef9c:	e0bffa17 	ldw	r2,-24(fp)
1800efa0:	01400304 	movi	r5,12
1800efa4:	1009883a 	mov	r4,r2
1800efa8:	8000b740 	call	18000b74 <__mulsi3>
1800efac:	8085883a 	add	r2,r16,r2
1800efb0:	10800204 	addi	r2,r2,8
1800efb4:	10c00017 	ldw	r3,0(r2)
1800efb8:	e0bffb17 	ldw	r2,-20(fp)
1800efbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1800efc0:	e13ffa17 	ldw	r4,-24(fp)
1800efc4:	800da3c0 	call	1800da3c <alt_release_fd>
  }
} 
1800efc8:	0001883a 	nop
1800efcc:	e6ffff04 	addi	sp,fp,-4
1800efd0:	dfc00217 	ldw	ra,8(sp)
1800efd4:	df000117 	ldw	fp,4(sp)
1800efd8:	dc000017 	ldw	r16,0(sp)
1800efdc:	dec00304 	addi	sp,sp,12
1800efe0:	f800283a 	ret

1800efe4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1800efe4:	defffb04 	addi	sp,sp,-20
1800efe8:	dfc00415 	stw	ra,16(sp)
1800efec:	df000315 	stw	fp,12(sp)
1800eff0:	df000304 	addi	fp,sp,12
1800eff4:	e13ffd15 	stw	r4,-12(fp)
1800eff8:	e17ffe15 	stw	r5,-8(fp)
1800effc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1800f000:	01c07fc4 	movi	r7,511
1800f004:	01800044 	movi	r6,1
1800f008:	e17ffd17 	ldw	r5,-12(fp)
1800f00c:	01060074 	movhi	r4,6145
1800f010:	21030104 	addi	r4,r4,3076
1800f014:	800ef000 	call	1800ef00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1800f018:	01c07fc4 	movi	r7,511
1800f01c:	000d883a 	mov	r6,zero
1800f020:	e17ffe17 	ldw	r5,-8(fp)
1800f024:	01060074 	movhi	r4,6145
1800f028:	2102fe04 	addi	r4,r4,3064
1800f02c:	800ef000 	call	1800ef00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1800f030:	01c07fc4 	movi	r7,511
1800f034:	01800044 	movi	r6,1
1800f038:	e17fff17 	ldw	r5,-4(fp)
1800f03c:	01060074 	movhi	r4,6145
1800f040:	21030404 	addi	r4,r4,3088
1800f044:	800ef000 	call	1800ef00 <alt_open_fd>
}  
1800f048:	0001883a 	nop
1800f04c:	e037883a 	mov	sp,fp
1800f050:	dfc00117 	ldw	ra,4(sp)
1800f054:	df000017 	ldw	fp,0(sp)
1800f058:	dec00204 	addi	sp,sp,8
1800f05c:	f800283a 	ret

1800f060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1800f060:	defffe04 	addi	sp,sp,-8
1800f064:	dfc00115 	stw	ra,4(sp)
1800f068:	df000015 	stw	fp,0(sp)
1800f06c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1800f070:	d0a00d17 	ldw	r2,-32716(gp)
1800f074:	10000326 	beq	r2,zero,1800f084 <alt_get_errno+0x24>
1800f078:	d0a00d17 	ldw	r2,-32716(gp)
1800f07c:	103ee83a 	callr	r2
1800f080:	00000106 	br	1800f088 <alt_get_errno+0x28>
1800f084:	d0a7e904 	addi	r2,gp,-24668
}
1800f088:	e037883a 	mov	sp,fp
1800f08c:	dfc00117 	ldw	ra,4(sp)
1800f090:	df000017 	ldw	fp,0(sp)
1800f094:	dec00204 	addi	sp,sp,8
1800f098:	f800283a 	ret

1800f09c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1800f09c:	defffb04 	addi	sp,sp,-20
1800f0a0:	dfc00415 	stw	ra,16(sp)
1800f0a4:	df000315 	stw	fp,12(sp)
1800f0a8:	dc000215 	stw	r16,8(sp)
1800f0ac:	df000304 	addi	fp,sp,12
1800f0b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1800f0b4:	e0bffe17 	ldw	r2,-8(fp)
1800f0b8:	10800217 	ldw	r2,8(r2)
1800f0bc:	10d00034 	orhi	r3,r2,16384
1800f0c0:	e0bffe17 	ldw	r2,-8(fp)
1800f0c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1800f0c8:	e03ffd15 	stw	zero,-12(fp)
1800f0cc:	00002306 	br	1800f15c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1800f0d0:	04060074 	movhi	r16,6145
1800f0d4:	8402fe04 	addi	r16,r16,3064
1800f0d8:	e0bffd17 	ldw	r2,-12(fp)
1800f0dc:	01400304 	movi	r5,12
1800f0e0:	1009883a 	mov	r4,r2
1800f0e4:	8000b740 	call	18000b74 <__mulsi3>
1800f0e8:	8085883a 	add	r2,r16,r2
1800f0ec:	10c00017 	ldw	r3,0(r2)
1800f0f0:	e0bffe17 	ldw	r2,-8(fp)
1800f0f4:	10800017 	ldw	r2,0(r2)
1800f0f8:	1880151e 	bne	r3,r2,1800f150 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1800f0fc:	04060074 	movhi	r16,6145
1800f100:	8402fe04 	addi	r16,r16,3064
1800f104:	e0bffd17 	ldw	r2,-12(fp)
1800f108:	01400304 	movi	r5,12
1800f10c:	1009883a 	mov	r4,r2
1800f110:	8000b740 	call	18000b74 <__mulsi3>
1800f114:	8085883a 	add	r2,r16,r2
1800f118:	10800204 	addi	r2,r2,8
1800f11c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1800f120:	10000b0e 	bge	r2,zero,1800f150 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1800f124:	01400304 	movi	r5,12
1800f128:	e13ffd17 	ldw	r4,-12(fp)
1800f12c:	8000b740 	call	18000b74 <__mulsi3>
1800f130:	1007883a 	mov	r3,r2
1800f134:	00860074 	movhi	r2,6145
1800f138:	1082fe04 	addi	r2,r2,3064
1800f13c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1800f140:	e0bffe17 	ldw	r2,-8(fp)
1800f144:	18800226 	beq	r3,r2,1800f150 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1800f148:	00bffcc4 	movi	r2,-13
1800f14c:	00000806 	br	1800f170 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1800f150:	e0bffd17 	ldw	r2,-12(fp)
1800f154:	10800044 	addi	r2,r2,1
1800f158:	e0bffd15 	stw	r2,-12(fp)
1800f15c:	d0a00c17 	ldw	r2,-32720(gp)
1800f160:	1007883a 	mov	r3,r2
1800f164:	e0bffd17 	ldw	r2,-12(fp)
1800f168:	18bfd92e 	bgeu	r3,r2,1800f0d0 <__alt_data_end+0xf800f0d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1800f16c:	0005883a 	mov	r2,zero
}
1800f170:	e6ffff04 	addi	sp,fp,-4
1800f174:	dfc00217 	ldw	ra,8(sp)
1800f178:	df000117 	ldw	fp,4(sp)
1800f17c:	dc000017 	ldw	r16,0(sp)
1800f180:	dec00304 	addi	sp,sp,12
1800f184:	f800283a 	ret

1800f188 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1800f188:	defff604 	addi	sp,sp,-40
1800f18c:	dfc00915 	stw	ra,36(sp)
1800f190:	df000815 	stw	fp,32(sp)
1800f194:	df000804 	addi	fp,sp,32
1800f198:	e13ffd15 	stw	r4,-12(fp)
1800f19c:	e17ffe15 	stw	r5,-8(fp)
1800f1a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1800f1a4:	00bfffc4 	movi	r2,-1
1800f1a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1800f1ac:	00bffb44 	movi	r2,-19
1800f1b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1800f1b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1800f1b8:	d1600a04 	addi	r5,gp,-32728
1800f1bc:	e13ffd17 	ldw	r4,-12(fp)
1800f1c0:	800f4ac0 	call	1800f4ac <alt_find_dev>
1800f1c4:	e0bff815 	stw	r2,-32(fp)
1800f1c8:	e0bff817 	ldw	r2,-32(fp)
1800f1cc:	1000051e 	bne	r2,zero,1800f1e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1800f1d0:	e13ffd17 	ldw	r4,-12(fp)
1800f1d4:	800f53c0 	call	1800f53c <alt_find_file>
1800f1d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1800f1dc:	00800044 	movi	r2,1
1800f1e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1800f1e4:	e0bff817 	ldw	r2,-32(fp)
1800f1e8:	10002b26 	beq	r2,zero,1800f298 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1800f1ec:	e13ff817 	ldw	r4,-32(fp)
1800f1f0:	800f6440 	call	1800f644 <alt_get_fd>
1800f1f4:	e0bff915 	stw	r2,-28(fp)
1800f1f8:	e0bff917 	ldw	r2,-28(fp)
1800f1fc:	1000030e 	bge	r2,zero,1800f20c <open+0x84>
    {
      status = index;
1800f200:	e0bff917 	ldw	r2,-28(fp)
1800f204:	e0bffa15 	stw	r2,-24(fp)
1800f208:	00002506 	br	1800f2a0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1800f20c:	01400304 	movi	r5,12
1800f210:	e13ff917 	ldw	r4,-28(fp)
1800f214:	8000b740 	call	18000b74 <__mulsi3>
1800f218:	1007883a 	mov	r3,r2
1800f21c:	00860074 	movhi	r2,6145
1800f220:	1082fe04 	addi	r2,r2,3064
1800f224:	1885883a 	add	r2,r3,r2
1800f228:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1800f22c:	e0fffe17 	ldw	r3,-8(fp)
1800f230:	00900034 	movhi	r2,16384
1800f234:	10bfffc4 	addi	r2,r2,-1
1800f238:	1886703a 	and	r3,r3,r2
1800f23c:	e0bffc17 	ldw	r2,-16(fp)
1800f240:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1800f244:	e0bffb17 	ldw	r2,-20(fp)
1800f248:	1000051e 	bne	r2,zero,1800f260 <open+0xd8>
1800f24c:	e13ffc17 	ldw	r4,-16(fp)
1800f250:	800f09c0 	call	1800f09c <alt_file_locked>
1800f254:	e0bffa15 	stw	r2,-24(fp)
1800f258:	e0bffa17 	ldw	r2,-24(fp)
1800f25c:	10001016 	blt	r2,zero,1800f2a0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1800f260:	e0bff817 	ldw	r2,-32(fp)
1800f264:	10800317 	ldw	r2,12(r2)
1800f268:	10000826 	beq	r2,zero,1800f28c <open+0x104>
1800f26c:	e0bff817 	ldw	r2,-32(fp)
1800f270:	10800317 	ldw	r2,12(r2)
1800f274:	e1ffff17 	ldw	r7,-4(fp)
1800f278:	e1bffe17 	ldw	r6,-8(fp)
1800f27c:	e17ffd17 	ldw	r5,-12(fp)
1800f280:	e13ffc17 	ldw	r4,-16(fp)
1800f284:	103ee83a 	callr	r2
1800f288:	00000106 	br	1800f290 <open+0x108>
1800f28c:	0005883a 	mov	r2,zero
1800f290:	e0bffa15 	stw	r2,-24(fp)
1800f294:	00000206 	br	1800f2a0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1800f298:	00bffb44 	movi	r2,-19
1800f29c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1800f2a0:	e0bffa17 	ldw	r2,-24(fp)
1800f2a4:	1000090e 	bge	r2,zero,1800f2cc <open+0x144>
  {
    alt_release_fd (index);  
1800f2a8:	e13ff917 	ldw	r4,-28(fp)
1800f2ac:	800da3c0 	call	1800da3c <alt_release_fd>
    ALT_ERRNO = -status;
1800f2b0:	800f0600 	call	1800f060 <alt_get_errno>
1800f2b4:	1007883a 	mov	r3,r2
1800f2b8:	e0bffa17 	ldw	r2,-24(fp)
1800f2bc:	0085c83a 	sub	r2,zero,r2
1800f2c0:	18800015 	stw	r2,0(r3)
    return -1;
1800f2c4:	00bfffc4 	movi	r2,-1
1800f2c8:	00000106 	br	1800f2d0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1800f2cc:	e0bff917 	ldw	r2,-28(fp)
}
1800f2d0:	e037883a 	mov	sp,fp
1800f2d4:	dfc00117 	ldw	ra,4(sp)
1800f2d8:	df000017 	ldw	fp,0(sp)
1800f2dc:	dec00204 	addi	sp,sp,8
1800f2e0:	f800283a 	ret

1800f2e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1800f2e4:	defffa04 	addi	sp,sp,-24
1800f2e8:	df000515 	stw	fp,20(sp)
1800f2ec:	df000504 	addi	fp,sp,20
1800f2f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1800f2f4:	0005303a 	rdctl	r2,status
1800f2f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1800f2fc:	e0fffc17 	ldw	r3,-16(fp)
1800f300:	00bfff84 	movi	r2,-2
1800f304:	1884703a 	and	r2,r3,r2
1800f308:	1001703a 	wrctl	status,r2
  
  return context;
1800f30c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1800f310:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1800f314:	e0bfff17 	ldw	r2,-4(fp)
1800f318:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1800f31c:	e0bffd17 	ldw	r2,-12(fp)
1800f320:	10800017 	ldw	r2,0(r2)
1800f324:	e0fffd17 	ldw	r3,-12(fp)
1800f328:	18c00117 	ldw	r3,4(r3)
1800f32c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1800f330:	e0bffd17 	ldw	r2,-12(fp)
1800f334:	10800117 	ldw	r2,4(r2)
1800f338:	e0fffd17 	ldw	r3,-12(fp)
1800f33c:	18c00017 	ldw	r3,0(r3)
1800f340:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1800f344:	e0bffd17 	ldw	r2,-12(fp)
1800f348:	e0fffd17 	ldw	r3,-12(fp)
1800f34c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1800f350:	e0bffd17 	ldw	r2,-12(fp)
1800f354:	e0fffd17 	ldw	r3,-12(fp)
1800f358:	10c00015 	stw	r3,0(r2)
1800f35c:	e0bffb17 	ldw	r2,-20(fp)
1800f360:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1800f364:	e0bffe17 	ldw	r2,-8(fp)
1800f368:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1800f36c:	0001883a 	nop
1800f370:	e037883a 	mov	sp,fp
1800f374:	df000017 	ldw	fp,0(sp)
1800f378:	dec00104 	addi	sp,sp,4
1800f37c:	f800283a 	ret

1800f380 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1800f380:	defffb04 	addi	sp,sp,-20
1800f384:	dfc00415 	stw	ra,16(sp)
1800f388:	df000315 	stw	fp,12(sp)
1800f38c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1800f390:	d0a01017 	ldw	r2,-32704(gp)
1800f394:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1800f398:	d0a7ef17 	ldw	r2,-24644(gp)
1800f39c:	10800044 	addi	r2,r2,1
1800f3a0:	d0a7ef15 	stw	r2,-24644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1800f3a4:	00002e06 	br	1800f460 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1800f3a8:	e0bffd17 	ldw	r2,-12(fp)
1800f3ac:	10800017 	ldw	r2,0(r2)
1800f3b0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1800f3b4:	e0bffd17 	ldw	r2,-12(fp)
1800f3b8:	10800403 	ldbu	r2,16(r2)
1800f3bc:	10803fcc 	andi	r2,r2,255
1800f3c0:	10000426 	beq	r2,zero,1800f3d4 <alt_tick+0x54>
1800f3c4:	d0a7ef17 	ldw	r2,-24644(gp)
1800f3c8:	1000021e 	bne	r2,zero,1800f3d4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1800f3cc:	e0bffd17 	ldw	r2,-12(fp)
1800f3d0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1800f3d4:	e0bffd17 	ldw	r2,-12(fp)
1800f3d8:	10800217 	ldw	r2,8(r2)
1800f3dc:	d0e7ef17 	ldw	r3,-24644(gp)
1800f3e0:	18801d36 	bltu	r3,r2,1800f458 <alt_tick+0xd8>
1800f3e4:	e0bffd17 	ldw	r2,-12(fp)
1800f3e8:	10800403 	ldbu	r2,16(r2)
1800f3ec:	10803fcc 	andi	r2,r2,255
1800f3f0:	1000191e 	bne	r2,zero,1800f458 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1800f3f4:	e0bffd17 	ldw	r2,-12(fp)
1800f3f8:	10800317 	ldw	r2,12(r2)
1800f3fc:	e0fffd17 	ldw	r3,-12(fp)
1800f400:	18c00517 	ldw	r3,20(r3)
1800f404:	1809883a 	mov	r4,r3
1800f408:	103ee83a 	callr	r2
1800f40c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1800f410:	e0bfff17 	ldw	r2,-4(fp)
1800f414:	1000031e 	bne	r2,zero,1800f424 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1800f418:	e13ffd17 	ldw	r4,-12(fp)
1800f41c:	800f2e40 	call	1800f2e4 <alt_alarm_stop>
1800f420:	00000d06 	br	1800f458 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1800f424:	e0bffd17 	ldw	r2,-12(fp)
1800f428:	10c00217 	ldw	r3,8(r2)
1800f42c:	e0bfff17 	ldw	r2,-4(fp)
1800f430:	1887883a 	add	r3,r3,r2
1800f434:	e0bffd17 	ldw	r2,-12(fp)
1800f438:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1800f43c:	e0bffd17 	ldw	r2,-12(fp)
1800f440:	10c00217 	ldw	r3,8(r2)
1800f444:	d0a7ef17 	ldw	r2,-24644(gp)
1800f448:	1880032e 	bgeu	r3,r2,1800f458 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1800f44c:	e0bffd17 	ldw	r2,-12(fp)
1800f450:	00c00044 	movi	r3,1
1800f454:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1800f458:	e0bffe17 	ldw	r2,-8(fp)
1800f45c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1800f460:	e0fffd17 	ldw	r3,-12(fp)
1800f464:	d0a01004 	addi	r2,gp,-32704
1800f468:	18bfcf1e 	bne	r3,r2,1800f3a8 <__alt_data_end+0xf800f3a8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1800f46c:	0001883a 	nop
}
1800f470:	0001883a 	nop
1800f474:	e037883a 	mov	sp,fp
1800f478:	dfc00117 	ldw	ra,4(sp)
1800f47c:	df000017 	ldw	fp,0(sp)
1800f480:	dec00204 	addi	sp,sp,8
1800f484:	f800283a 	ret

1800f488 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1800f488:	deffff04 	addi	sp,sp,-4
1800f48c:	df000015 	stw	fp,0(sp)
1800f490:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1800f494:	000170fa 	wrctl	ienable,zero
}
1800f498:	0001883a 	nop
1800f49c:	e037883a 	mov	sp,fp
1800f4a0:	df000017 	ldw	fp,0(sp)
1800f4a4:	dec00104 	addi	sp,sp,4
1800f4a8:	f800283a 	ret

1800f4ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1800f4ac:	defffa04 	addi	sp,sp,-24
1800f4b0:	dfc00515 	stw	ra,20(sp)
1800f4b4:	df000415 	stw	fp,16(sp)
1800f4b8:	df000404 	addi	fp,sp,16
1800f4bc:	e13ffe15 	stw	r4,-8(fp)
1800f4c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1800f4c4:	e0bfff17 	ldw	r2,-4(fp)
1800f4c8:	10800017 	ldw	r2,0(r2)
1800f4cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1800f4d0:	e13ffe17 	ldw	r4,-8(fp)
1800f4d4:	8000db00 	call	18000db0 <strlen>
1800f4d8:	10800044 	addi	r2,r2,1
1800f4dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1800f4e0:	00000d06 	br	1800f518 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1800f4e4:	e0bffc17 	ldw	r2,-16(fp)
1800f4e8:	10800217 	ldw	r2,8(r2)
1800f4ec:	e0fffd17 	ldw	r3,-12(fp)
1800f4f0:	180d883a 	mov	r6,r3
1800f4f4:	e17ffe17 	ldw	r5,-8(fp)
1800f4f8:	1009883a 	mov	r4,r2
1800f4fc:	800f7f00 	call	1800f7f0 <memcmp>
1800f500:	1000021e 	bne	r2,zero,1800f50c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1800f504:	e0bffc17 	ldw	r2,-16(fp)
1800f508:	00000706 	br	1800f528 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1800f50c:	e0bffc17 	ldw	r2,-16(fp)
1800f510:	10800017 	ldw	r2,0(r2)
1800f514:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1800f518:	e0fffc17 	ldw	r3,-16(fp)
1800f51c:	e0bfff17 	ldw	r2,-4(fp)
1800f520:	18bff01e 	bne	r3,r2,1800f4e4 <__alt_data_end+0xf800f4e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1800f524:	0005883a 	mov	r2,zero
}
1800f528:	e037883a 	mov	sp,fp
1800f52c:	dfc00117 	ldw	ra,4(sp)
1800f530:	df000017 	ldw	fp,0(sp)
1800f534:	dec00204 	addi	sp,sp,8
1800f538:	f800283a 	ret

1800f53c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1800f53c:	defffb04 	addi	sp,sp,-20
1800f540:	dfc00415 	stw	ra,16(sp)
1800f544:	df000315 	stw	fp,12(sp)
1800f548:	df000304 	addi	fp,sp,12
1800f54c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1800f550:	d0a00817 	ldw	r2,-32736(gp)
1800f554:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1800f558:	00003106 	br	1800f620 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1800f55c:	e0bffd17 	ldw	r2,-12(fp)
1800f560:	10800217 	ldw	r2,8(r2)
1800f564:	1009883a 	mov	r4,r2
1800f568:	8000db00 	call	18000db0 <strlen>
1800f56c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1800f570:	e0bffd17 	ldw	r2,-12(fp)
1800f574:	10c00217 	ldw	r3,8(r2)
1800f578:	e0bffe17 	ldw	r2,-8(fp)
1800f57c:	10bfffc4 	addi	r2,r2,-1
1800f580:	1885883a 	add	r2,r3,r2
1800f584:	10800003 	ldbu	r2,0(r2)
1800f588:	10803fcc 	andi	r2,r2,255
1800f58c:	1080201c 	xori	r2,r2,128
1800f590:	10bfe004 	addi	r2,r2,-128
1800f594:	10800bd8 	cmpnei	r2,r2,47
1800f598:	1000031e 	bne	r2,zero,1800f5a8 <alt_find_file+0x6c>
    {
      len -= 1;
1800f59c:	e0bffe17 	ldw	r2,-8(fp)
1800f5a0:	10bfffc4 	addi	r2,r2,-1
1800f5a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1800f5a8:	e0bffe17 	ldw	r2,-8(fp)
1800f5ac:	e0ffff17 	ldw	r3,-4(fp)
1800f5b0:	1885883a 	add	r2,r3,r2
1800f5b4:	10800003 	ldbu	r2,0(r2)
1800f5b8:	10803fcc 	andi	r2,r2,255
1800f5bc:	1080201c 	xori	r2,r2,128
1800f5c0:	10bfe004 	addi	r2,r2,-128
1800f5c4:	10800be0 	cmpeqi	r2,r2,47
1800f5c8:	1000081e 	bne	r2,zero,1800f5ec <alt_find_file+0xb0>
1800f5cc:	e0bffe17 	ldw	r2,-8(fp)
1800f5d0:	e0ffff17 	ldw	r3,-4(fp)
1800f5d4:	1885883a 	add	r2,r3,r2
1800f5d8:	10800003 	ldbu	r2,0(r2)
1800f5dc:	10803fcc 	andi	r2,r2,255
1800f5e0:	1080201c 	xori	r2,r2,128
1800f5e4:	10bfe004 	addi	r2,r2,-128
1800f5e8:	10000a1e 	bne	r2,zero,1800f614 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1800f5ec:	e0bffd17 	ldw	r2,-12(fp)
1800f5f0:	10800217 	ldw	r2,8(r2)
1800f5f4:	e0fffe17 	ldw	r3,-8(fp)
1800f5f8:	180d883a 	mov	r6,r3
1800f5fc:	e17fff17 	ldw	r5,-4(fp)
1800f600:	1009883a 	mov	r4,r2
1800f604:	800f7f00 	call	1800f7f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1800f608:	1000021e 	bne	r2,zero,1800f614 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1800f60c:	e0bffd17 	ldw	r2,-12(fp)
1800f610:	00000706 	br	1800f630 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1800f614:	e0bffd17 	ldw	r2,-12(fp)
1800f618:	10800017 	ldw	r2,0(r2)
1800f61c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1800f620:	e0fffd17 	ldw	r3,-12(fp)
1800f624:	d0a00804 	addi	r2,gp,-32736
1800f628:	18bfcc1e 	bne	r3,r2,1800f55c <__alt_data_end+0xf800f55c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1800f62c:	0005883a 	mov	r2,zero
}
1800f630:	e037883a 	mov	sp,fp
1800f634:	dfc00117 	ldw	ra,4(sp)
1800f638:	df000017 	ldw	fp,0(sp)
1800f63c:	dec00204 	addi	sp,sp,8
1800f640:	f800283a 	ret

1800f644 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1800f644:	defffa04 	addi	sp,sp,-24
1800f648:	dfc00515 	stw	ra,20(sp)
1800f64c:	df000415 	stw	fp,16(sp)
1800f650:	dc000315 	stw	r16,12(sp)
1800f654:	df000404 	addi	fp,sp,16
1800f658:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1800f65c:	00bffa04 	movi	r2,-24
1800f660:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1800f664:	e03ffc15 	stw	zero,-16(fp)
1800f668:	00001d06 	br	1800f6e0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1800f66c:	04060074 	movhi	r16,6145
1800f670:	8402fe04 	addi	r16,r16,3064
1800f674:	e0bffc17 	ldw	r2,-16(fp)
1800f678:	01400304 	movi	r5,12
1800f67c:	1009883a 	mov	r4,r2
1800f680:	8000b740 	call	18000b74 <__mulsi3>
1800f684:	8085883a 	add	r2,r16,r2
1800f688:	10800017 	ldw	r2,0(r2)
1800f68c:	1000111e 	bne	r2,zero,1800f6d4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
1800f690:	04060074 	movhi	r16,6145
1800f694:	8402fe04 	addi	r16,r16,3064
1800f698:	e0bffc17 	ldw	r2,-16(fp)
1800f69c:	01400304 	movi	r5,12
1800f6a0:	1009883a 	mov	r4,r2
1800f6a4:	8000b740 	call	18000b74 <__mulsi3>
1800f6a8:	8085883a 	add	r2,r16,r2
1800f6ac:	e0fffe17 	ldw	r3,-8(fp)
1800f6b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1800f6b4:	d0e00c17 	ldw	r3,-32720(gp)
1800f6b8:	e0bffc17 	ldw	r2,-16(fp)
1800f6bc:	1880020e 	bge	r3,r2,1800f6c8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
1800f6c0:	e0bffc17 	ldw	r2,-16(fp)
1800f6c4:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
1800f6c8:	e0bffc17 	ldw	r2,-16(fp)
1800f6cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1800f6d0:	00000606 	br	1800f6ec <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1800f6d4:	e0bffc17 	ldw	r2,-16(fp)
1800f6d8:	10800044 	addi	r2,r2,1
1800f6dc:	e0bffc15 	stw	r2,-16(fp)
1800f6e0:	e0bffc17 	ldw	r2,-16(fp)
1800f6e4:	10800810 	cmplti	r2,r2,32
1800f6e8:	103fe01e 	bne	r2,zero,1800f66c <__alt_data_end+0xf800f66c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1800f6ec:	e0bffd17 	ldw	r2,-12(fp)
}
1800f6f0:	e6ffff04 	addi	sp,fp,-4
1800f6f4:	dfc00217 	ldw	ra,8(sp)
1800f6f8:	df000117 	ldw	fp,4(sp)
1800f6fc:	dc000017 	ldw	r16,0(sp)
1800f700:	dec00304 	addi	sp,sp,12
1800f704:	f800283a 	ret

1800f708 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1800f708:	defffe04 	addi	sp,sp,-8
1800f70c:	df000115 	stw	fp,4(sp)
1800f710:	df000104 	addi	fp,sp,4
1800f714:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1800f718:	e0bfff17 	ldw	r2,-4(fp)
1800f71c:	10bffe84 	addi	r2,r2,-6
1800f720:	10c00428 	cmpgeui	r3,r2,16
1800f724:	18001a1e 	bne	r3,zero,1800f790 <alt_exception_cause_generated_bad_addr+0x88>
1800f728:	100690ba 	slli	r3,r2,2
1800f72c:	00860074 	movhi	r2,6145
1800f730:	10bdd004 	addi	r2,r2,-2240
1800f734:	1885883a 	add	r2,r3,r2
1800f738:	10800017 	ldw	r2,0(r2)
1800f73c:	1000683a 	jmp	r2
1800f740:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
1800f744:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
1800f748:	1800f790 	cmplti	zero,r3,990
1800f74c:	1800f790 	cmplti	zero,r3,990
1800f750:	1800f790 	cmplti	zero,r3,990
1800f754:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
1800f758:	1800f788 	cmpgei	zero,r3,990
1800f75c:	1800f790 	cmplti	zero,r3,990
1800f760:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
1800f764:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
1800f768:	1800f790 	cmplti	zero,r3,990
1800f76c:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
1800f770:	1800f788 	cmpgei	zero,r3,990
1800f774:	1800f790 	cmplti	zero,r3,990
1800f778:	1800f790 	cmplti	zero,r3,990
1800f77c:	1800f780 	call	11800f78 <__alt_mem_onchip_memory2_0+0x11800f78>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1800f780:	00800044 	movi	r2,1
1800f784:	00000306 	br	1800f794 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1800f788:	0005883a 	mov	r2,zero
1800f78c:	00000106 	br	1800f794 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1800f790:	0005883a 	mov	r2,zero
  }
}
1800f794:	e037883a 	mov	sp,fp
1800f798:	df000017 	ldw	fp,0(sp)
1800f79c:	dec00104 	addi	sp,sp,4
1800f7a0:	f800283a 	ret

1800f7a4 <atexit>:
1800f7a4:	200b883a 	mov	r5,r4
1800f7a8:	000f883a 	mov	r7,zero
1800f7ac:	000d883a 	mov	r6,zero
1800f7b0:	0009883a 	mov	r4,zero
1800f7b4:	800f86c1 	jmpi	1800f86c <__register_exitproc>

1800f7b8 <exit>:
1800f7b8:	defffe04 	addi	sp,sp,-8
1800f7bc:	000b883a 	mov	r5,zero
1800f7c0:	dc000015 	stw	r16,0(sp)
1800f7c4:	dfc00115 	stw	ra,4(sp)
1800f7c8:	2021883a 	mov	r16,r4
1800f7cc:	800f9840 	call	1800f984 <__call_exitprocs>
1800f7d0:	00860074 	movhi	r2,6145
1800f7d4:	10877904 	addi	r2,r2,7652
1800f7d8:	11000017 	ldw	r4,0(r2)
1800f7dc:	20800f17 	ldw	r2,60(r4)
1800f7e0:	10000126 	beq	r2,zero,1800f7e8 <exit+0x30>
1800f7e4:	103ee83a 	callr	r2
1800f7e8:	8009883a 	mov	r4,r16
1800f7ec:	800fb040 	call	1800fb04 <_exit>

1800f7f0 <memcmp>:
1800f7f0:	01c000c4 	movi	r7,3
1800f7f4:	3980192e 	bgeu	r7,r6,1800f85c <memcmp+0x6c>
1800f7f8:	2144b03a 	or	r2,r4,r5
1800f7fc:	11c4703a 	and	r2,r2,r7
1800f800:	10000f26 	beq	r2,zero,1800f840 <memcmp+0x50>
1800f804:	20800003 	ldbu	r2,0(r4)
1800f808:	28c00003 	ldbu	r3,0(r5)
1800f80c:	10c0151e 	bne	r2,r3,1800f864 <memcmp+0x74>
1800f810:	31bfff84 	addi	r6,r6,-2
1800f814:	01ffffc4 	movi	r7,-1
1800f818:	00000406 	br	1800f82c <memcmp+0x3c>
1800f81c:	20800003 	ldbu	r2,0(r4)
1800f820:	28c00003 	ldbu	r3,0(r5)
1800f824:	31bfffc4 	addi	r6,r6,-1
1800f828:	10c00e1e 	bne	r2,r3,1800f864 <memcmp+0x74>
1800f82c:	21000044 	addi	r4,r4,1
1800f830:	29400044 	addi	r5,r5,1
1800f834:	31fff91e 	bne	r6,r7,1800f81c <__alt_data_end+0xf800f81c>
1800f838:	0005883a 	mov	r2,zero
1800f83c:	f800283a 	ret
1800f840:	20c00017 	ldw	r3,0(r4)
1800f844:	28800017 	ldw	r2,0(r5)
1800f848:	18bfee1e 	bne	r3,r2,1800f804 <__alt_data_end+0xf800f804>
1800f84c:	31bfff04 	addi	r6,r6,-4
1800f850:	21000104 	addi	r4,r4,4
1800f854:	29400104 	addi	r5,r5,4
1800f858:	39bff936 	bltu	r7,r6,1800f840 <__alt_data_end+0xf800f840>
1800f85c:	303fe91e 	bne	r6,zero,1800f804 <__alt_data_end+0xf800f804>
1800f860:	003ff506 	br	1800f838 <__alt_data_end+0xf800f838>
1800f864:	10c5c83a 	sub	r2,r2,r3
1800f868:	f800283a 	ret

1800f86c <__register_exitproc>:
1800f86c:	defffa04 	addi	sp,sp,-24
1800f870:	dc000315 	stw	r16,12(sp)
1800f874:	04060074 	movhi	r16,6145
1800f878:	84077904 	addi	r16,r16,7652
1800f87c:	80c00017 	ldw	r3,0(r16)
1800f880:	dc400415 	stw	r17,16(sp)
1800f884:	dfc00515 	stw	ra,20(sp)
1800f888:	18805217 	ldw	r2,328(r3)
1800f88c:	2023883a 	mov	r17,r4
1800f890:	10003726 	beq	r2,zero,1800f970 <__register_exitproc+0x104>
1800f894:	10c00117 	ldw	r3,4(r2)
1800f898:	010007c4 	movi	r4,31
1800f89c:	20c00e16 	blt	r4,r3,1800f8d8 <__register_exitproc+0x6c>
1800f8a0:	1a000044 	addi	r8,r3,1
1800f8a4:	8800221e 	bne	r17,zero,1800f930 <__register_exitproc+0xc4>
1800f8a8:	18c00084 	addi	r3,r3,2
1800f8ac:	18c7883a 	add	r3,r3,r3
1800f8b0:	18c7883a 	add	r3,r3,r3
1800f8b4:	12000115 	stw	r8,4(r2)
1800f8b8:	10c7883a 	add	r3,r2,r3
1800f8bc:	19400015 	stw	r5,0(r3)
1800f8c0:	0005883a 	mov	r2,zero
1800f8c4:	dfc00517 	ldw	ra,20(sp)
1800f8c8:	dc400417 	ldw	r17,16(sp)
1800f8cc:	dc000317 	ldw	r16,12(sp)
1800f8d0:	dec00604 	addi	sp,sp,24
1800f8d4:	f800283a 	ret
1800f8d8:	00800034 	movhi	r2,0
1800f8dc:	10800004 	addi	r2,r2,0
1800f8e0:	10002626 	beq	r2,zero,1800f97c <__register_exitproc+0x110>
1800f8e4:	01006404 	movi	r4,400
1800f8e8:	d9400015 	stw	r5,0(sp)
1800f8ec:	d9800115 	stw	r6,4(sp)
1800f8f0:	d9c00215 	stw	r7,8(sp)
1800f8f4:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0+0x10000000>
1800f8f8:	d9400017 	ldw	r5,0(sp)
1800f8fc:	d9800117 	ldw	r6,4(sp)
1800f900:	d9c00217 	ldw	r7,8(sp)
1800f904:	10001d26 	beq	r2,zero,1800f97c <__register_exitproc+0x110>
1800f908:	81000017 	ldw	r4,0(r16)
1800f90c:	10000115 	stw	zero,4(r2)
1800f910:	02000044 	movi	r8,1
1800f914:	22405217 	ldw	r9,328(r4)
1800f918:	0007883a 	mov	r3,zero
1800f91c:	12400015 	stw	r9,0(r2)
1800f920:	20805215 	stw	r2,328(r4)
1800f924:	10006215 	stw	zero,392(r2)
1800f928:	10006315 	stw	zero,396(r2)
1800f92c:	883fde26 	beq	r17,zero,1800f8a8 <__alt_data_end+0xf800f8a8>
1800f930:	18c9883a 	add	r4,r3,r3
1800f934:	2109883a 	add	r4,r4,r4
1800f938:	1109883a 	add	r4,r2,r4
1800f93c:	21802215 	stw	r6,136(r4)
1800f940:	01800044 	movi	r6,1
1800f944:	12406217 	ldw	r9,392(r2)
1800f948:	30cc983a 	sll	r6,r6,r3
1800f94c:	4992b03a 	or	r9,r9,r6
1800f950:	12406215 	stw	r9,392(r2)
1800f954:	21c04215 	stw	r7,264(r4)
1800f958:	01000084 	movi	r4,2
1800f95c:	893fd21e 	bne	r17,r4,1800f8a8 <__alt_data_end+0xf800f8a8>
1800f960:	11006317 	ldw	r4,396(r2)
1800f964:	218cb03a 	or	r6,r4,r6
1800f968:	11806315 	stw	r6,396(r2)
1800f96c:	003fce06 	br	1800f8a8 <__alt_data_end+0xf800f8a8>
1800f970:	18805304 	addi	r2,r3,332
1800f974:	18805215 	stw	r2,328(r3)
1800f978:	003fc606 	br	1800f894 <__alt_data_end+0xf800f894>
1800f97c:	00bfffc4 	movi	r2,-1
1800f980:	003fd006 	br	1800f8c4 <__alt_data_end+0xf800f8c4>

1800f984 <__call_exitprocs>:
1800f984:	defff504 	addi	sp,sp,-44
1800f988:	df000915 	stw	fp,36(sp)
1800f98c:	dd400615 	stw	r21,24(sp)
1800f990:	dc800315 	stw	r18,12(sp)
1800f994:	dfc00a15 	stw	ra,40(sp)
1800f998:	ddc00815 	stw	r23,32(sp)
1800f99c:	dd800715 	stw	r22,28(sp)
1800f9a0:	dd000515 	stw	r20,20(sp)
1800f9a4:	dcc00415 	stw	r19,16(sp)
1800f9a8:	dc400215 	stw	r17,8(sp)
1800f9ac:	dc000115 	stw	r16,4(sp)
1800f9b0:	d9000015 	stw	r4,0(sp)
1800f9b4:	2839883a 	mov	fp,r5
1800f9b8:	04800044 	movi	r18,1
1800f9bc:	057fffc4 	movi	r21,-1
1800f9c0:	00860074 	movhi	r2,6145
1800f9c4:	10877904 	addi	r2,r2,7652
1800f9c8:	12000017 	ldw	r8,0(r2)
1800f9cc:	45005217 	ldw	r20,328(r8)
1800f9d0:	44c05204 	addi	r19,r8,328
1800f9d4:	a0001c26 	beq	r20,zero,1800fa48 <__call_exitprocs+0xc4>
1800f9d8:	a0800117 	ldw	r2,4(r20)
1800f9dc:	15ffffc4 	addi	r23,r2,-1
1800f9e0:	b8000d16 	blt	r23,zero,1800fa18 <__call_exitprocs+0x94>
1800f9e4:	14000044 	addi	r16,r2,1
1800f9e8:	8421883a 	add	r16,r16,r16
1800f9ec:	8421883a 	add	r16,r16,r16
1800f9f0:	84402004 	addi	r17,r16,128
1800f9f4:	a463883a 	add	r17,r20,r17
1800f9f8:	a421883a 	add	r16,r20,r16
1800f9fc:	e0001e26 	beq	fp,zero,1800fa78 <__call_exitprocs+0xf4>
1800fa00:	80804017 	ldw	r2,256(r16)
1800fa04:	e0801c26 	beq	fp,r2,1800fa78 <__call_exitprocs+0xf4>
1800fa08:	bdffffc4 	addi	r23,r23,-1
1800fa0c:	843fff04 	addi	r16,r16,-4
1800fa10:	8c7fff04 	addi	r17,r17,-4
1800fa14:	bd7ff91e 	bne	r23,r21,1800f9fc <__alt_data_end+0xf800f9fc>
1800fa18:	00800034 	movhi	r2,0
1800fa1c:	10800004 	addi	r2,r2,0
1800fa20:	10000926 	beq	r2,zero,1800fa48 <__call_exitprocs+0xc4>
1800fa24:	a0800117 	ldw	r2,4(r20)
1800fa28:	1000301e 	bne	r2,zero,1800faec <__call_exitprocs+0x168>
1800fa2c:	a0800017 	ldw	r2,0(r20)
1800fa30:	10003226 	beq	r2,zero,1800fafc <__call_exitprocs+0x178>
1800fa34:	a009883a 	mov	r4,r20
1800fa38:	98800015 	stw	r2,0(r19)
1800fa3c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0+0x10000000>
1800fa40:	9d000017 	ldw	r20,0(r19)
1800fa44:	a03fe41e 	bne	r20,zero,1800f9d8 <__alt_data_end+0xf800f9d8>
1800fa48:	dfc00a17 	ldw	ra,40(sp)
1800fa4c:	df000917 	ldw	fp,36(sp)
1800fa50:	ddc00817 	ldw	r23,32(sp)
1800fa54:	dd800717 	ldw	r22,28(sp)
1800fa58:	dd400617 	ldw	r21,24(sp)
1800fa5c:	dd000517 	ldw	r20,20(sp)
1800fa60:	dcc00417 	ldw	r19,16(sp)
1800fa64:	dc800317 	ldw	r18,12(sp)
1800fa68:	dc400217 	ldw	r17,8(sp)
1800fa6c:	dc000117 	ldw	r16,4(sp)
1800fa70:	dec00b04 	addi	sp,sp,44
1800fa74:	f800283a 	ret
1800fa78:	a0800117 	ldw	r2,4(r20)
1800fa7c:	80c00017 	ldw	r3,0(r16)
1800fa80:	10bfffc4 	addi	r2,r2,-1
1800fa84:	15c01426 	beq	r2,r23,1800fad8 <__call_exitprocs+0x154>
1800fa88:	80000015 	stw	zero,0(r16)
1800fa8c:	183fde26 	beq	r3,zero,1800fa08 <__alt_data_end+0xf800fa08>
1800fa90:	95c8983a 	sll	r4,r18,r23
1800fa94:	a0806217 	ldw	r2,392(r20)
1800fa98:	a5800117 	ldw	r22,4(r20)
1800fa9c:	2084703a 	and	r2,r4,r2
1800faa0:	10000b26 	beq	r2,zero,1800fad0 <__call_exitprocs+0x14c>
1800faa4:	a0806317 	ldw	r2,396(r20)
1800faa8:	2088703a 	and	r4,r4,r2
1800faac:	20000c1e 	bne	r4,zero,1800fae0 <__call_exitprocs+0x15c>
1800fab0:	89400017 	ldw	r5,0(r17)
1800fab4:	d9000017 	ldw	r4,0(sp)
1800fab8:	183ee83a 	callr	r3
1800fabc:	a0800117 	ldw	r2,4(r20)
1800fac0:	15bfbf1e 	bne	r2,r22,1800f9c0 <__alt_data_end+0xf800f9c0>
1800fac4:	98800017 	ldw	r2,0(r19)
1800fac8:	153fcf26 	beq	r2,r20,1800fa08 <__alt_data_end+0xf800fa08>
1800facc:	003fbc06 	br	1800f9c0 <__alt_data_end+0xf800f9c0>
1800fad0:	183ee83a 	callr	r3
1800fad4:	003ff906 	br	1800fabc <__alt_data_end+0xf800fabc>
1800fad8:	a5c00115 	stw	r23,4(r20)
1800fadc:	003feb06 	br	1800fa8c <__alt_data_end+0xf800fa8c>
1800fae0:	89000017 	ldw	r4,0(r17)
1800fae4:	183ee83a 	callr	r3
1800fae8:	003ff406 	br	1800fabc <__alt_data_end+0xf800fabc>
1800faec:	a0800017 	ldw	r2,0(r20)
1800faf0:	a027883a 	mov	r19,r20
1800faf4:	1029883a 	mov	r20,r2
1800faf8:	003fb606 	br	1800f9d4 <__alt_data_end+0xf800f9d4>
1800fafc:	0005883a 	mov	r2,zero
1800fb00:	003ffb06 	br	1800faf0 <__alt_data_end+0xf800faf0>

1800fb04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1800fb04:	defffd04 	addi	sp,sp,-12
1800fb08:	df000215 	stw	fp,8(sp)
1800fb0c:	df000204 	addi	fp,sp,8
1800fb10:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1800fb14:	0001883a 	nop
1800fb18:	e0bfff17 	ldw	r2,-4(fp)
1800fb1c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1800fb20:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1800fb24:	10000226 	beq	r2,zero,1800fb30 <_exit+0x2c>
    ALT_SIM_FAIL();
1800fb28:	002af070 	cmpltui	zero,zero,43969
1800fb2c:	00000106 	br	1800fb34 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1800fb30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1800fb34:	003fff06 	br	1800fb34 <__alt_data_end+0xf800fb34>

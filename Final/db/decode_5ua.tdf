--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_5ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode398w[1..0]	: WIRE;
	w_anode407w[3..0]	: WIRE;
	w_anode424w[3..0]	: WIRE;
	w_anode434w[3..0]	: WIRE;
	w_anode444w[3..0]	: WIRE;
	w_anode454w[3..0]	: WIRE;
	w_anode464w[3..0]	: WIRE;
	w_anode474w[3..0]	: WIRE;
	w_anode484w[3..0]	: WIRE;
	w_anode496w[1..0]	: WIRE;
	w_anode503w[3..0]	: WIRE;
	w_anode514w[3..0]	: WIRE;
	w_anode524w[3..0]	: WIRE;
	w_anode534w[3..0]	: WIRE;
	w_anode544w[3..0]	: WIRE;
	w_anode554w[3..0]	: WIRE;
	w_anode564w[3..0]	: WIRE;
	w_anode574w[3..0]	: WIRE;
	w_data396w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode574w[3..3], w_anode564w[3..3], w_anode554w[3..3], w_anode544w[3..3], w_anode534w[3..3], w_anode524w[3..3], w_anode514w[3..3], w_anode503w[3..3]), ( w_anode484w[3..3], w_anode474w[3..3], w_anode464w[3..3], w_anode454w[3..3], w_anode444w[3..3], w_anode434w[3..3], w_anode424w[3..3], w_anode407w[3..3]));
	w_anode398w[] = ( (w_anode398w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode407w[] = ( (w_anode407w[2..2] & (! w_data396w[2..2])), (w_anode407w[1..1] & (! w_data396w[1..1])), (w_anode407w[0..0] & (! w_data396w[0..0])), w_anode398w[1..1]);
	w_anode424w[] = ( (w_anode424w[2..2] & (! w_data396w[2..2])), (w_anode424w[1..1] & (! w_data396w[1..1])), (w_anode424w[0..0] & w_data396w[0..0]), w_anode398w[1..1]);
	w_anode434w[] = ( (w_anode434w[2..2] & (! w_data396w[2..2])), (w_anode434w[1..1] & w_data396w[1..1]), (w_anode434w[0..0] & (! w_data396w[0..0])), w_anode398w[1..1]);
	w_anode444w[] = ( (w_anode444w[2..2] & (! w_data396w[2..2])), (w_anode444w[1..1] & w_data396w[1..1]), (w_anode444w[0..0] & w_data396w[0..0]), w_anode398w[1..1]);
	w_anode454w[] = ( (w_anode454w[2..2] & w_data396w[2..2]), (w_anode454w[1..1] & (! w_data396w[1..1])), (w_anode454w[0..0] & (! w_data396w[0..0])), w_anode398w[1..1]);
	w_anode464w[] = ( (w_anode464w[2..2] & w_data396w[2..2]), (w_anode464w[1..1] & (! w_data396w[1..1])), (w_anode464w[0..0] & w_data396w[0..0]), w_anode398w[1..1]);
	w_anode474w[] = ( (w_anode474w[2..2] & w_data396w[2..2]), (w_anode474w[1..1] & w_data396w[1..1]), (w_anode474w[0..0] & (! w_data396w[0..0])), w_anode398w[1..1]);
	w_anode484w[] = ( (w_anode484w[2..2] & w_data396w[2..2]), (w_anode484w[1..1] & w_data396w[1..1]), (w_anode484w[0..0] & w_data396w[0..0]), w_anode398w[1..1]);
	w_anode496w[] = ( (w_anode496w[0..0] & data_wire[3..3]), enable_wire);
	w_anode503w[] = ( (w_anode503w[2..2] & (! w_data396w[2..2])), (w_anode503w[1..1] & (! w_data396w[1..1])), (w_anode503w[0..0] & (! w_data396w[0..0])), w_anode496w[1..1]);
	w_anode514w[] = ( (w_anode514w[2..2] & (! w_data396w[2..2])), (w_anode514w[1..1] & (! w_data396w[1..1])), (w_anode514w[0..0] & w_data396w[0..0]), w_anode496w[1..1]);
	w_anode524w[] = ( (w_anode524w[2..2] & (! w_data396w[2..2])), (w_anode524w[1..1] & w_data396w[1..1]), (w_anode524w[0..0] & (! w_data396w[0..0])), w_anode496w[1..1]);
	w_anode534w[] = ( (w_anode534w[2..2] & (! w_data396w[2..2])), (w_anode534w[1..1] & w_data396w[1..1]), (w_anode534w[0..0] & w_data396w[0..0]), w_anode496w[1..1]);
	w_anode544w[] = ( (w_anode544w[2..2] & w_data396w[2..2]), (w_anode544w[1..1] & (! w_data396w[1..1])), (w_anode544w[0..0] & (! w_data396w[0..0])), w_anode496w[1..1]);
	w_anode554w[] = ( (w_anode554w[2..2] & w_data396w[2..2]), (w_anode554w[1..1] & (! w_data396w[1..1])), (w_anode554w[0..0] & w_data396w[0..0]), w_anode496w[1..1]);
	w_anode564w[] = ( (w_anode564w[2..2] & w_data396w[2..2]), (w_anode564w[1..1] & w_data396w[1..1]), (w_anode564w[0..0] & (! w_data396w[0..0])), w_anode496w[1..1]);
	w_anode574w[] = ( (w_anode574w[2..2] & w_data396w[2..2]), (w_anode574w[1..1] & w_data396w[1..1]), (w_anode574w[0..0] & w_data396w[0..0]), w_anode496w[1..1]);
	w_data396w[2..0] = data_wire[2..0];
END;
--VALID FILE
